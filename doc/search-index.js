var searchIndex = JSON.parse('{\
"arrayvec":{"doc":"<strong>arrayvec</strong> provides the types <code>ArrayVec</code> and <code>ArrayString</code>:  …","t":[8,3,3,3,3,3,16,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Array","ArrayString","ArrayVec","CapacityError","Drain","IntoIter","Item","RangeArgument","as_mut","as_mut_slice","as_ref","as_ref","as_slice","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","clear","clear","clone","clone","clone","clone","clone_from","clone_from","cmp","cmp","cmp","default","default","deref","deref","deref_mut","deref_mut","dispose","drain","drop","drop","drop","element","end","end","eq","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_byte_string","from_iter","ge","ge","ge","gt","gt","gt","hash","hash","insert","into","into","into","into","into","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","is_full","is_full","le","le","le","len","lt","lt","lt","ne","new","new","new","next","next","next_back","next_back","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pop","pop","pop_at","push","push","push_str","push_unchecked","remove","remove","retain","set_len","set_len","simplify","size_hint","size_hint","start","start","swap_pop","swap_remove","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_insert","try_into","try_into","try_into","try_into","try_into","try_push","try_push","try_push_str","type_id","type_id","type_id","type_id","type_id","write_char","write_str"],"q":["arrayvec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Trait for fixed size arrays.","A string with a fixed capacity.","A vector with a fixed capacity.","Error value indicating insufficient capacity","A draining iterator for <code>ArrayVec</code>.","By-value iterator for <code>ArrayVec</code>.","The array’s element type","<code>RangeArgument</code> is implemented by Rust’s built-in range …","","Return a mutable slice containing all elements of the …","","","Return a slice containing all elements of the vector.","Return a string slice of the whole <code>ArrayString</code>.","","","","","","","","","","","","","","Return the capacity of the <code>ArrayVec</code>.","Return the capacity of the <code>ArrayString</code>.","Remove all elements in the vector.","Make the string empty.","","","","","","","","","","Return an empty array","Return an empty <code>ArrayString</code>","","","","","Dispose of <code>self</code> without the overwriting that is needed in …","Create a draining iterator that removes the specified …","","","","Extract the overflowing element","End index (exclusive)","End index (exclusive)","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>ArrayString</code> from a <code>str</code>.","Returns the argument unchanged.","Create a new <code>ArrayString</code> from a byte string literal.","","","","","","","","","","Insert <code>element</code> at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the inner fixed size array, if it is full to its …","","","","","","Return if the <code>ArrayVec</code> is completely filled.","Return if the <code>ArrayString</code> is completely filled.","","","","Return the number of elements in the <code>ArrayVec</code>.","","","","","Create a new empty <code>ArrayVec</code>.","Create a new empty <code>ArrayString</code>.","Create a new <code>CapacityError</code> from <code>element</code>.","","","","","","","","","Remove the last element in the vector and return it.","Removes the last character from the string and returns it.","Remove the element at <code>index</code> and shift down the following …","Push <code>element</code> to the end of the vector.","Adds the given char to the end of the string.","Adds the given string slice to the end of the string.","Push <code>element</code> to the end of the vector without checking the …","Remove the element at <code>index</code> and shift down the following …","Removes a <code>char</code> from this <code>ArrayString</code> at a byte position …","Retains only the elements specified by the predicate.","Set the vector’s length without dropping or moving out …","Set the strings’s length.","Convert into a <code>CapacityError</code> that does not carry an …","","","Start index (inclusive)","Start index (inclusive)","Remove the element at <code>index</code> and swap the last element into …","Remove the element at <code>index</code> and swap the last element into …","Shortens the vector, keeping the first <code>len</code> elements and …","Shortens this <code>ArrayString</code> to the specified length.","","","","","","Insert <code>element</code> at position <code>index</code>.","","","","","","Push <code>element</code> to the end of the vector.","Adds the given char to the end of the string.","Adds the given string slice to the end of the string.","","","","","","",""],"i":[0,0,0,0,0,0,1,0,2,2,2,3,2,3,2,2,4,5,3,3,6,2,2,4,5,3,6,2,3,2,3,2,4,3,6,2,3,2,3,6,2,3,2,3,2,3,2,2,2,4,5,6,7,7,2,2,3,3,6,2,2,4,3,3,6,6,2,2,2,4,5,3,3,6,3,2,2,3,3,2,3,3,2,3,2,2,4,5,3,6,2,2,2,2,4,5,2,3,2,3,3,2,2,3,3,6,2,3,6,4,5,4,5,2,3,3,6,2,3,2,2,3,3,2,2,3,2,2,3,6,4,5,7,7,2,2,2,3,2,4,5,3,6,2,2,4,5,3,6,2,3,3,2,4,5,3,6,3,3],"f":[null,null,null,null,null,null,null,null,[[["arrayvec",3,[["array",8]]]]],[[["arrayvec",3,[["array",8]]]]],[[["arrayvec",3,[["array",8]]]]],[[["arraystring",3,[["array",8]]]],["str",0]],[[["arrayvec",3,[["array",8]]]]],[[["arraystring",3,[["array",8]]]],["str",0]],[[["",0]],["",0]],[[["arrayvec",3,[["array",8]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["arraystring",3,[["array",8]]]],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["arrayvec",3,[["array",8]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["arrayvec",3,[["array",8]]]],["usize",0]],[[["arraystring",3,[["array",8]]]],["usize",0]],[[["arrayvec",3,[["array",8]]]]],[[["arraystring",3,[["array",8]]]]],[[["arrayvec",3,[["array",8]]]],["arrayvec",3,[["array",8]]]],[[["intoiter",3,[["array",8]]]],["intoiter",3,[["array",8]]]],[[["arraystring",3,[["",26,[["array",8],["copy",8]]]]]],["arraystring",3,[["",26,[["array",8],["copy",8]]]]]],[[["capacityerror",3,[["clone",8]]]],["capacityerror",3,[["clone",8]]]],[[["arrayvec",3,[["array",8]]],["arrayvec",3,[["array",8]]]]],[[["arraystring",3,[["",26,[["array",8],["copy",8]]]]],["arraystring",3,[["",26,[["array",8],["copy",8]]]]]]],[[["arrayvec",3,[["array",8]]],["arrayvec",3]],["ordering",4]],[[["arraystring",3,[["array",8]]],["arraystring",3,[["array",8]]]],["ordering",4]],[[["capacityerror",3,[["ord",8]]],["capacityerror",3]],["ordering",4]],[[],["arrayvec",3,[["array",8]]]],[[],["arraystring",3,[["array",8]]]],[[["arrayvec",3,[["array",8]]]]],[[["arraystring",3,[["array",8]]]],["str",0]],[[["arrayvec",3,[["array",8]]]]],[[["arraystring",3,[["array",8]]]],["str",0]],[[["arrayvec",3,[["array",8]]]]],[[["arrayvec",3,[["array",8]]],["rangeargument",8]],["drain",3,[["array",8]]]],[[["arrayvec",3,[["array",8]]]]],[[["intoiter",3,[["array",8]]]]],[[["drain",3,[["array",8]]]]],[[["capacityerror",3]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["arrayvec",3,[["array",8]]],["arrayvec",3,[["array",8]]]],["bool",0]],[[["arrayvec",3,[["array",8]]]],["bool",0]],[[["arraystring",3,[["array",8]]],["arraystring",3,[["array",8]]]],["bool",0]],[[["arraystring",3,[["array",8]]],["str",0]],["bool",0]],[[["capacityerror",3,[["partialeq",8]]],["capacityerror",3]],["bool",0]],[[["arrayvec",3,[["array",8]]],["intoiterator",8]]],[[["arrayvec",3,[["array",8]]],["formatter",3]],["result",6]],[[["intoiter",3,[["array",8]]],["formatter",3]],["result",6]],[[["arraystring",3,[["array",8]]],["formatter",3]],["result",6]],[[["arraystring",3,[["array",8]]],["formatter",3]],["result",6]],[[["capacityerror",3],["formatter",3]],["result",6]],[[["capacityerror",3],["formatter",3]],["result",6]],[[["array",8]],["arrayvec",3,[["array",8]]]],[[["never",0]]],[[]],[[]],[[]],[[]],[[["str",0]],["result",4,[["arraystring",3,[["array",8]]],["capacityerror",3,[["str",0]]]]]],[[]],[[["",0]],["result",4,[["arraystring",3,[["array",8]]],["utf8error",3]]]],[[["intoiterator",8]],["arrayvec",3,[["array",8]]]],[[["arrayvec",3,[["array",8]]],["arrayvec",3,[["array",8]]]],["bool",0]],[[["arraystring",3,[["array",8]]],["arraystring",3,[["array",8]]]],["bool",0]],[[["arraystring",3,[["array",8]]],["str",0]],["bool",0]],[[["arrayvec",3,[["array",8]]],["arrayvec",3,[["array",8]]]],["bool",0]],[[["arraystring",3,[["array",8]]],["arraystring",3,[["array",8]]]],["bool",0]],[[["arraystring",3,[["array",8]]],["str",0]],["bool",0]],[[["arrayvec",3,[["array",8]]],["",0]]],[[["arraystring",3,[["array",8]]],["",0]]],[[["arrayvec",3,[["array",8]]],["usize",0]]],[[]],[[]],[[]],[[]],[[]],[[["arrayvec",3,[["array",8]]]],["result",4,[["array",8],["arrayvec",3,[["array",8]]]]]],[[["arrayvec",3,[["array",8]]]],["intoiter",3,[["array",8]]]],[[["arrayvec",3]]],[[["arrayvec",3]]],[[]],[[]],[[["arrayvec",3,[["array",8]]]],["bool",0]],[[["arraystring",3,[["array",8]]]],["bool",0]],[[["arrayvec",3,[["array",8]]],["arrayvec",3,[["array",8]]]],["bool",0]],[[["arraystring",3,[["array",8]]],["arraystring",3,[["array",8]]]],["bool",0]],[[["arraystring",3,[["array",8]]],["str",0]],["bool",0]],[[["arrayvec",3,[["array",8]]]],["usize",0]],[[["arrayvec",3,[["array",8]]],["arrayvec",3,[["array",8]]]],["bool",0]],[[["arraystring",3,[["array",8]]],["str",0]],["bool",0]],[[["arraystring",3,[["array",8]]],["arraystring",3,[["array",8]]]],["bool",0]],[[["capacityerror",3,[["partialeq",8]]],["capacityerror",3]],["bool",0]],[[],["arrayvec",3,[["array",8]]]],[[],["arraystring",3,[["array",8]]]],[[],["capacityerror",3]],[[["intoiter",3,[["array",8]]]],["option",4]],[[["drain",3,[["array",8]]]],["option",4]],[[["intoiter",3,[["array",8]]]],["option",4]],[[["drain",3,[["array",8]]]],["option",4]],[[["arrayvec",3,[["array",8]]],["arrayvec",3]],["option",4,[["ordering",4]]]],[[["arraystring",3,[["array",8]]],["arraystring",3,[["array",8]]]],["option",4,[["ordering",4]]]],[[["arraystring",3,[["array",8]]],["str",0]],["option",4,[["ordering",4]]]],[[["capacityerror",3,[["partialord",8]]],["capacityerror",3]],["option",4,[["ordering",4]]]],[[["arrayvec",3,[["array",8]]]],["option",4]],[[["arraystring",3,[["array",8]]]],["option",4,[["char",0]]]],[[["arrayvec",3,[["array",8]]],["usize",0]],["option",4]],[[["arrayvec",3,[["array",8]]]]],[[["arraystring",3,[["array",8]]],["char",0]]],[[["arraystring",3,[["array",8]]],["str",0]]],[[["arrayvec",3,[["array",8]]]]],[[["arrayvec",3,[["array",8]]],["usize",0]]],[[["arraystring",3,[["array",8]]],["usize",0]],["char",0]],[[["arrayvec",3,[["array",8]]]]],[[["arrayvec",3,[["array",8]]],["usize",0]]],[[["arraystring",3,[["array",8]]],["usize",0]]],[[["capacityerror",3]],["capacityerror",3]],[[["intoiter",3,[["array",8]]]]],[[["drain",3,[["array",8]]]]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[["arrayvec",3,[["array",8]]],["usize",0]],["option",4]],[[["arrayvec",3,[["array",8]]],["usize",0]]],[[["arrayvec",3,[["array",8]]],["usize",0]]],[[["arraystring",3,[["array",8]]],["usize",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["arrayvec",3,[["array",8]]],["usize",0]],["result",4,[["capacityerror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["arrayvec",3,[["array",8]]]],["result",4,[["capacityerror",3]]]],[[["arraystring",3,[["array",8]]],["char",0]],["result",4,[["capacityerror",3,[["char",0]]]]]],[[["arraystring",3,[["array",8]]],["str",0]],["result",4,[["capacityerror",3,[["str",0]]]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["arraystring",3,[["array",8]]],["char",0]],["result",6]],[[["arraystring",3,[["array",8]]],["str",0]],["result",6]]],"p":[[8,"Array"],[3,"ArrayVec"],[3,"ArrayString"],[3,"IntoIter"],[3,"Drain"],[3,"CapacityError"],[8,"RangeArgument"]]},\
"backtrace":{"doc":"A library for acquiring a backtrace at runtime","t":[3,3,3,13,4,3,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["Backtrace","BacktraceFrame","BacktraceSymbol","Bytes","BytesOrWideString","Frame","Symbol","SymbolName","Wide","addr","addr","as_bytes","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","filename","filename","filename_raw","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frames","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into_path_buf","ip","ip","lineno","lineno","name","name","new","new","new_unresolved","resolve","resolve","resolve_unsynchronized","symbol_address","symbol_address","symbols","to_owned","to_owned","to_owned","to_str_lossy","to_string","to_string","trace","trace_unsynchronized","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0"],"q":["backtrace","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","backtrace::BytesOrWideString",""],"d":["Representation of an owned and self-contained backtrace.","Captured version of a frame in a backtrace.","Captured version of a symbol in a backtrace.","A slice, typically provided on Unix platforms.","A platform independent representation of a string. When …","A trait representing one frame of a backtrace, yielded to …","A trait representing the resolution of a symbol in a file.","A wrapper around a symbol name to provide ergonomic …","Wide strings typically from Windows.","Returns the starting address of this function.","Same as <code>Symbol::addr</code>","Returns the raw symbol name as a list of bytes","Returns the raw symbol name as a <code>str</code> if the symbols is …","","","","","","","","","","","","","","","","","","","","","","Returns the file name where this function was defined.","Same as <code>Symbol::filename</code>","Returns the raw filename as a slice. This is mainly useful …","","","","","","","","Returns the frames from when this backtrace was captured.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Provides a <code>Path</code> representation of <code>BytesOrWideString</code>.","Returns the current instruction pointer of this frame.","Same as <code>Frame::ip</code>","Returns the line number for where this symbol is currently …","Same as <code>Symbol::lineno</code>","Returns the name of this function.","Same as <code>Symbol::name</code>","Creates a new symbol name from the raw underlying bytes.","Captures a backtrace at the callsite of this function, …","Similar to <code>new</code> except that this does not resolve any …","Resolve an address to a symbol, passing the symbol to the …","If this backtrace was created from <code>new_unresolved</code> then …","Same as <code>resolve</code>, only unsafe as it’s unsynchronized.","Returns the starting symbol address of the frame of this …","Same as <code>Frame::symbol_address</code>","Returns the list of symbols that this frame corresponds to.","","","","Lossy converts to a <code>Cow&lt;str&gt;</code>, will allocate if <code>Bytes</code> is …","","","Inspects the current call-stack, passing all active frames …","Same as <code>trace</code>, only unsafe as it’s unsynchronized.","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,0,0,0,0,1,2,3,4,4,5,2,4,1,6,7,3,5,2,4,1,6,7,3,6,7,3,6,7,3,6,2,3,2,5,2,4,4,1,1,6,6,5,2,4,1,6,6,7,3,5,2,4,1,6,6,7,3,1,5,7,2,3,2,3,4,6,6,0,6,0,5,7,7,6,7,3,1,4,1,0,0,5,2,4,1,6,7,3,5,2,4,1,6,7,3,5,2,4,1,6,7,3,8,9],"f":[null,null,null,null,null,null,null,null,null,[[["symbol",3]],["option",4,[["c_void",0]]]],[[["backtracesymbol",3]],["option",4,[["c_void",0]]]],[[["symbolname",3]]],[[["symbolname",3]],["option",4,[["str",0]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["backtrace",3]],["backtrace",3]],[[["backtraceframe",3]],["backtraceframe",3]],[[["backtracesymbol",3]],["backtracesymbol",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["backtrace",3]],[[["symbol",3]],["option",4,[["path",3]]]],[[["backtracesymbol",3]],["option",4,[["path",3]]]],[[["symbol",3]],["option",4,[["bytesorwidestring",4]]]],[[["frame",3],["formatter",3]],["result",6]],[[["symbol",3],["formatter",3]],["result",6]],[[["symbolname",3],["formatter",3]],["result",6]],[[["symbolname",3],["formatter",3]],["result",6]],[[["bytesorwidestring",4],["formatter",3]],["result",6]],[[["bytesorwidestring",4],["formatter",3]],["result",6]],[[["backtrace",3],["formatter",3]],["result",6]],[[["backtrace",3]]],[[]],[[]],[[]],[[]],[[["vec",3,[["backtraceframe",3]]]],["backtrace",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["backtrace",3]],["vec",3,[["backtraceframe",3]]]],[[]],[[]],[[["bytesorwidestring",4]],["pathbuf",3]],[[["frame",3]],["c_void",0]],[[["backtraceframe",3]],["c_void",0]],[[["symbol",3]],["option",4,[["u32",0]]]],[[["backtracesymbol",3]],["option",4,[["u32",0]]]],[[["symbol",3]],["option",4,[["symbolname",3]]]],[[["backtracesymbol",3]],["option",4,[["symbolname",3]]]],[[],["symbolname",3]],[[],["backtrace",3]],[[],["backtrace",3]],[[["c_void",0],["fnmut",8]]],[[["backtrace",3]]],[[["c_void",0]]],[[["frame",3]],["c_void",0]],[[["backtraceframe",3]],["c_void",0]],[[["backtraceframe",3]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["bytesorwidestring",4]],["cow",4,[["str",0]]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["fnmut",8]]],[[["fnmut",8]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null],"p":[[4,"BytesOrWideString"],[3,"Symbol"],[3,"BacktraceSymbol"],[3,"SymbolName"],[3,"Frame"],[3,"Backtrace"],[3,"BacktraceFrame"],[13,"Bytes"],[13,"Wide"]]},\
"base64":{"doc":"Configs","t":[17,4,3,13,4,13,13,13,17,17,13,17,17,13,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,5,11,0,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CRYPT","CharacterSet","Config","Crypt","DecodeError","InvalidByte","InvalidLastSymbol","InvalidLength","STANDARD","STANDARD_NO_PAD","Standard","URL_SAFE","URL_SAFE_NO_PAD","UrlSafe","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone_into","clone_into","clone_into","decode","decode_allow_trailing_bits","decode_config","decode_config_buf","decode_config_slice","description","display","encode","encode_config","encode_config_buf","encode_config_slice","eq","fmt","fmt","fmt","fmt","from","from","from","into","into","into","ne","new","pad","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","0","0","1","1","Base64Display","borrow","borrow_mut","fmt","from","into","to_string","try_from","try_into","type_id","with_config","EncoderWriter","borrow","borrow_mut","drop","finish","flush","fmt","from","into","new","try_from","try_into","type_id","write"],"q":["base64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","base64::DecodeError","","","","base64::display","","","","","","","","","","","base64::write","","","","","","","","","","","","",""],"d":["As per <code>crypt(3)</code> requirements","Available encoding character sets","Contains configuration parameters for base64 encoding","The <code>crypt(3)</code> character set (uses …","Errors that can occur while decoding.","An invalid byte was found in the input. The offset and …","The last non-padding input symbol’s encoded 6 bits have …","The length of the input is invalid.","Standard character set with padding.","Standard character set without padding.","The standard character set (uses <code>+</code> and <code>/</code>).","URL-safe character set with padding","URL-safe character set without padding","The URL safe character set (uses <code>-</code> and <code>_</code>).","","","","","","","","","","","","","","Decode from string reference as octets. Returns a Result …","Sets whether to emit errors for nonzero trailing bits.","Decode from string reference as octets. Returns a Result …","Decode from string reference as octets. Writes into the …","Decode the input into the provided output slice.","","Enables base64’d output anywhere you might use a <code>Display</code> …","Encode arbitrary octets as base64. Returns a String. …","Encode arbitrary octets as base64. Returns a String.","Encode arbitrary octets as base64. Writes into the …","Encode arbitrary octets as base64. Writes into the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new <code>Config</code>.","Sets whether to pad output with <code>=</code> characters.","","","","","","","","","","","","","","Implementations of <code>io::Write</code> to transparently handle …","","","","","A convenience wrapper for base64’ing bytes into a format …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Create a <code>Base64Display</code> with the provided config.","A <code>Write</code> implementation that base64 encodes data before …","","","","Encode all remaining buffered data and write it, including …","Because this is usually treated as OK to call multiple …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new encoder that will write to the provided …","","","","Encode input and then write to the delegate writer."],"i":[0,0,0,1,0,2,2,2,0,0,1,0,0,1,2,1,3,2,1,3,2,2,1,3,2,1,3,0,3,0,0,0,2,0,0,0,0,0,2,2,2,1,3,2,1,3,2,1,3,2,3,3,2,1,3,2,2,1,3,2,1,3,2,1,3,0,4,5,4,5,0,6,6,6,6,6,6,6,6,6,6,0,7,7,7,7,7,7,7,7,7,7,7,7,7],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["decodeerror",4]],["option",4,[["error",8]]]],[[["decodeerror",4]],["decodeerror",4]],[[["characterset",4]],["characterset",4]],[[["config",3]],["config",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["result",4,[["vec",3,[["u8",0]]],["decodeerror",4]]]],[[["config",3],["bool",0]],["config",3]],[[["",0],["config",3]],["result",4,[["vec",3,[["u8",0]]],["decodeerror",4]]]],[[["",0],["config",3],["vec",3]],["result",4,[["decodeerror",4]]]],[[["",0],["config",3]],["result",4,[["usize",0],["decodeerror",4]]]],[[["decodeerror",4]],["str",0]],null,[[["",0]],["string",3]],[[["",0],["config",3]],["string",3]],[[["",0],["config",3],["string",3]]],[[["",0],["config",3]],["usize",0]],[[["decodeerror",4],["decodeerror",4]],["bool",0]],[[["decodeerror",4],["formatter",3]],["result",6]],[[["decodeerror",4],["formatter",3]],["result",6]],[[["characterset",4],["formatter",3]],["result",6]],[[["config",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["decodeerror",4],["decodeerror",4]],["bool",0]],[[["characterset",4],["bool",0]],["config",3]],[[["config",3],["bool",0]],["config",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["base64display",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["config",3]],["base64display",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["encoderwriter",3,[["write",8]]]]],[[["encoderwriter",3,[["write",8]]]],["result",6]],[[["encoderwriter",3,[["write",8]]]],["result",6]],[[["encoderwriter",3,[["write",8]]],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["config",3]],["encoderwriter",3,[["write",8]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["encoderwriter",3,[["write",8]]]],["result",6,[["usize",0]]]]],"p":[[4,"CharacterSet"],[4,"DecodeError"],[3,"Config"],[13,"InvalidByte"],[13,"InvalidLastSymbol"],[3,"Base64Display"],[3,"EncoderWriter"]]},\
"bootstrap":{"doc":"","t":[5,5],"n":["hello","main"],"q":["bootstrap",""],"d":["",""],"i":[0,0],"f":[[[["request",6],["context",3]],["result",4,[["intoresponse",8],["handlererror",3]]]],[[]]],"p":[]},\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":[6,4,8,6,4,6,6,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,11,11],"n":["BE","BigEndian","ByteOrder","LE","LittleEndian","NativeEndian","NetworkEndian","ReadBytesExt","WriteBytesExt","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","hash","hash","into","into","partial_cmp","partial_cmp","read_f32","read_f32","read_f32","read_f32_into","read_f32_into","read_f32_into","read_f32_into_unchecked","read_f32_into_unchecked","read_f32_into_unchecked","read_f64","read_f64","read_f64","read_f64_into","read_f64_into","read_f64_into","read_f64_into_unchecked","read_f64_into_unchecked","read_f64_into_unchecked","read_i128","read_i128","read_i128","read_i128_into","read_i128_into","read_i128_into","read_i16","read_i16","read_i16","read_i16_into","read_i16_into","read_i16_into","read_i24","read_i24","read_i24","read_i32","read_i32","read_i32","read_i32_into","read_i32_into","read_i32_into","read_i48","read_i48","read_i48","read_i64","read_i64","read_i64","read_i64_into","read_i64_into","read_i64_into","read_i8","read_i8","read_int","read_int","read_int","read_int128","read_int128","read_int128","read_u128","read_u128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u24","read_u24","read_u32","read_u32","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u48","read_u48","read_u64","read_u64","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_u64_into","read_u64_into","read_u8","read_u8","read_uint","read_uint","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","read_uint128","read_uint128","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write_f32","write_f32","write_f32","write_f32_into","write_f64","write_f64","write_f64","write_f64_into","write_i128","write_i128","write_i128","write_i128_into","write_i16","write_i16","write_i16","write_i16_into","write_i24","write_i24","write_i24","write_i32","write_i32","write_i32","write_i32_into","write_i48","write_i48","write_i48","write_i64","write_i64","write_i64","write_i64_into","write_i8","write_i8","write_int","write_int","write_int","write_int128","write_int128","write_int128","write_u128","write_u128","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u24","write_u24","write_u32","write_u32","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u48","write_u48","write_u64","write_u64","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_u8","write_u8","write_uint","write_uint","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128","write_uint128","write_uint128"],"q":["byteorderd":["A type alias for <code>BigEndian</code>.","Defines big-endian serialization.","<code>ByteOrder</code> describes types that can serialize integers as …","A type alias for <code>LittleEndian</code>.","Defines little-endian serialization.","Defines system native-endian serialization.","Defines network byte order serialization.","Extends <code>Read</code> with methods for reading numbers. (For <code>std::io</code>…","Extends <code>Write</code> with methods for writing numbers. (For …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a sequence of IEEE754 single-precision (4 bytes) …","Reads a sequence of IEEE754 single-precision (4 bytes) …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads a sequence of IEEE754 double-precision (8 bytes) …","Reads a sequence of IEEE754 double-precision (8 bytes) …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from the underlying reader.","Reads a signed 128 bit integer from the underlying reader.","Reads a signed 128 bit integer from <code>buf</code>.","Reads a sequence of signed 128 bit integers from the …","Reads a sequence of signed 128 bit integers from the …","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from the underlying reader.","Reads a signed 16 bit integer from <code>buf</code>.","Reads a sequence of signed 16 bit integers from the …","Reads a sequence of signed 16 bit integers from the …","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from the underlying reader.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from the underlying reader.","Reads a signed 32 bit integer from <code>buf</code>.","Reads a sequence of signed 32 bit integers from the …","Reads a sequence of signed 32 bit integers from the …","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from the underlying reader.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from the underlying reader.","Reads a signed 64 bit integer from <code>buf</code>.","Reads a sequence of signed 64 bit integers from the …","Reads a sequence of signed 64 bit integers from the …","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 8 bit integer from the underlying reader.","Reads a signed 8 bit integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from the underlying reader.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","Reads an unsigned 128 bit integer from the underlying …","Reads an unsigned 128 bit integer from the underlying …","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 128 bit integers from the …","Reads a sequence of unsigned 128 bit integers from the …","","","Reads an unsigned 16 bit integer from <code>buf</code>.","Reads an unsigned 16 bit integer from the underlying …","Reads an unsigned 16 bit integer from the underlying …","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 16 bit integers from the …","Reads a sequence of unsigned 16 bit integers from the …","","","Reads an unsigned 24 bit integer from the underlying …","Reads an unsigned 24 bit integer from the underlying …","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","Reads an unsigned 32 bit integer from the underlying …","Reads an unsigned 32 bit integer from the underlying …","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 32 bit integers from the …","Reads a sequence of unsigned 32 bit integers from the …","","","Reads an unsigned 48 bit integer from the underlying …","Reads an unsigned 48 bit integer from the underlying …","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","Reads an unsigned 64 bit integer from the underlying …","Reads an unsigned 64 bit integer from the underlying …","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a sequence of unsigned 64 bit integers from the …","Reads a sequence of unsigned 64 bit integers from the …","","","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned 8 bit integer from the underlying reader.","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from the underlying …","Reads an unsigned n-bytes integer from the underlying …","","","","","","","","","","","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Writes a signed 128 bit integer to the underlying writer.","Writes a signed 128 bit integer to the underlying writer.","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer to the underlying writer.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer to the underlying writer.","Writes a signed 24 bit integer to the underlying writer.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer to the underlying writer.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer to the underlying writer.","Writes a signed 48 bit integer to the underlying writer.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer to the underlying writer.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 8 bit integer to the underlying writer.","Writes a signed 8 bit integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed n-bytes integer to the underlying writer.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 128 bit integer to the underlying …","Writes an unsigned 128 bit integer to the underlying …","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 16 bit integer to the underlying writer.","Writes an unsigned 16 bit integer to the underlying writer.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer to the underlying writer.","Writes an unsigned 24 bit integer to the underlying writer.","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 32 bit integer to the underlying writer.","Writes an unsigned 32 bit integer to the underlying writer.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer to the underlying writer.","Writes an unsigned 48 bit integer to the underlying writer.","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 64 bit integer to the underlying writer.","Writes an unsigned 64 bit integer to the underlying writer.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned 8 bit integer to the underlying writer.","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned n-bytes integer to the underlying …","Writes an unsigned n-bytes integer to the underlying …","",""],"i":[0,0,0,0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,1,2,3,1,2,3,3,3,3,3,1,2,3,1,2,3,1,2,3,1,2,1,2,1,2,1,2,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,3,4,4,4,4,3,4,4,3,3,4,4,1,2,3,4,4,1,2,3,4,4,1,2,3,4,4,1,2,4,4,3,3,4,4,1,2,3,4,4,1,2,4,4,3,3,4,4,1,2,3,4,4,1,2,4,4,3,4,4,1,2,3,4,4,1,2,1,2,1,2,1,2,1,2,5,5,3,3,5,5,3,3,5,5,3,3,5,5,3,3,5,5,3,5,5,3,3,5,5,3,5,5,3,3,5,5,5,5,3,5,5,3,3,5,5,1,2,3,1,2,3,5,5,1,2,3,1,2,5,5,3,3,5,5,1,2,3,1,2,5,5,3,3,5,5,1,2,3,1,2,5,5,3,5,5,1,2,3,5,5,1,2],"f":[null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["bigendian",4]],["bigendian",4]],[[["littleendian",4]],["littleendian",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["bigendian",4],["bigendian",4]],["ordering",4]],[[["littleendian",4],["littleendian",4]],["ordering",4]],[[],["bigendian",4]],[[],["littleendian",4]],[[["bigendian",4],["bigendian",4]],["bool",0]],[[["littleendian",4],["littleendian",4]],["bool",0]],[[["bigendian",4],["formatter",3]],["result",6]],[[["littleendian",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bigendian",4],["",0]]],[[["littleendian",4],["",0]]],[[]],[[]],[[["bigendian",4],["bigendian",4]],["option",4,[["ordering",4]]]],[[["littleendian",4],["littleendian",4]],["option",4,[["ordering",4]]]],[[["",0]],["result",6,[["f32",0]]]],[[["",0]],["result",6,[["f32",0]]]],[[],["f32",0]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[]],[[["",0]],["result",6,[["f64",0]]]],[[["",0]],["result",6,[["f64",0]]]],[[],["f64",0]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[]],[[["",0]],["result",6,[["i128",0]]]],[[["",0]],["result",6,[["i128",0]]]],[[],["i128",0]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[]],[[["",0]],["result",6,[["i16",0]]]],[[["",0]],["result",6,[["i16",0]]]],[[],["i16",0]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[]],[[["",0]],["result",6,[["i32",0]]]],[[["",0]],["result",6,[["i32",0]]]],[[],["i32",0]],[[["",0]],["result",6,[["i32",0]]]],[[["",0]],["result",6,[["i32",0]]]],[[],["i32",0]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[]],[[["",0]],["result",6,[["i64",0]]]],[[["",0]],["result",6,[["i64",0]]]],[[],["i64",0]],[[["",0]],["result",6,[["i64",0]]]],[[["",0]],["result",6,[["i64",0]]]],[[],["i64",0]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[]],[[["",0]],["result",6,[["i8",0]]]],[[["",0]],["result",6,[["i8",0]]]],[[["",0],["usize",0]],["result",6,[["i64",0]]]],[[["",0],["usize",0]],["result",6,[["i64",0]]]],[[["usize",0]],["i64",0]],[[["",0],["usize",0]],["result",6,[["i128",0]]]],[[["",0],["usize",0]],["result",6,[["i128",0]]]],[[["usize",0]],["i128",0]],[[],["u128",0]],[[["",0]],["result",6,[["u128",0]]]],[[["",0]],["result",6,[["u128",0]]]],[[],["u128",0]],[[],["u128",0]],[[]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[]],[[]],[[],["u16",0]],[[["",0]],["result",6,[["u16",0]]]],[[["",0]],["result",6,[["u16",0]]]],[[],["u16",0]],[[],["u16",0]],[[]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[]],[[]],[[["",0]],["result",6,[["u32",0]]]],[[["",0]],["result",6,[["u32",0]]]],[[],["u32",0]],[[],["u32",0]],[[["",0]],["result",6,[["u32",0]]]],[[["",0]],["result",6,[["u32",0]]]],[[],["u32",0]],[[],["u32",0]],[[]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[]],[[]],[[["",0]],["result",6,[["u64",0]]]],[[["",0]],["result",6,[["u64",0]]]],[[],["u64",0]],[[],["u64",0]],[[["",0]],["result",6,[["u64",0]]]],[[["",0]],["result",6,[["u64",0]]]],[[],["u64",0]],[[],["u64",0]],[[]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[]],[[]],[[["",0]],["result",6,[["u8",0]]]],[[["",0]],["result",6,[["u8",0]]]],[[["usize",0]],["u64",0]],[[["",0],["usize",0]],["result",6,[["u64",0]]]],[[["",0],["usize",0]],["result",6,[["u64",0]]]],[[["usize",0]],["u64",0]],[[["usize",0]],["u64",0]],[[["usize",0]],["u128",0]],[[["",0],["usize",0]],["result",6,[["u128",0]]]],[[["",0],["usize",0]],["result",6,[["u128",0]]]],[[["usize",0]],["u128",0]],[[["usize",0]],["u128",0]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["f32",0]],["result",6]],[[["",0],["f32",0]],["result",6]],[[["f32",0]]],[[]],[[["",0],["f64",0]],["result",6]],[[["",0],["f64",0]],["result",6]],[[["f64",0]]],[[]],[[["",0],["i128",0]],["result",6]],[[["",0],["i128",0]],["result",6]],[[["i128",0]]],[[]],[[["",0],["i16",0]],["result",6]],[[["",0],["i16",0]],["result",6]],[[["i16",0]]],[[]],[[["",0],["i32",0]],["result",6]],[[["",0],["i32",0]],["result",6]],[[["i32",0]]],[[["",0],["i32",0]],["result",6]],[[["",0],["i32",0]],["result",6]],[[["i32",0]]],[[]],[[["",0],["i64",0]],["result",6]],[[["",0],["i64",0]],["result",6]],[[["i64",0]]],[[["",0],["i64",0]],["result",6]],[[["",0],["i64",0]],["result",6]],[[["i64",0]]],[[]],[[["",0],["i8",0]],["result",6]],[[["",0],["i8",0]],["result",6]],[[["",0],["i64",0],["usize",0]],["result",6]],[[["",0],["i64",0],["usize",0]],["result",6]],[[["i64",0],["usize",0]]],[[["",0],["i128",0],["usize",0]],["result",6]],[[["",0],["i128",0],["usize",0]],["result",6]],[[["i128",0],["usize",0]]],[[["u128",0]]],[[["",0],["u128",0]],["result",6]],[[["",0],["u128",0]],["result",6]],[[["u128",0]]],[[["u128",0]]],[[]],[[]],[[]],[[["u16",0]]],[[["",0],["u16",0]],["result",6]],[[["",0],["u16",0]],["result",6]],[[["u16",0]]],[[["u16",0]]],[[]],[[]],[[]],[[["",0],["u32",0]],["result",6]],[[["",0],["u32",0]],["result",6]],[[["u32",0]]],[[["u32",0]]],[[["",0],["u32",0]],["result",6]],[[["",0],["u32",0]],["result",6]],[[["u32",0]]],[[["u32",0]]],[[]],[[]],[[]],[[["",0],["u64",0]],["result",6]],[[["",0],["u64",0]],["result",6]],[[["u64",0]]],[[["u64",0]]],[[["",0],["u64",0]],["result",6]],[[["",0],["u64",0]],["result",6]],[[["u64",0]]],[[["u64",0]]],[[]],[[]],[[]],[[["",0],["u8",0]],["result",6]],[[["",0],["u8",0]],["result",6]],[[["u64",0],["usize",0]]],[[["",0],["u64",0],["usize",0]],["result",6]],[[["",0],["u64",0],["usize",0]],["result",6]],[[["u64",0],["usize",0]]],[[["u64",0],["usize",0]]],[[["u128",0],["usize",0]]],[[["",0],["u128",0],["usize",0]],["result",6]],[[["",0],["u128",0],["usize",0]],["result",6]],[[["u128",0],["usize",0]]],[[["u128",0],["usize",0]]]],"p":[[4,"BigEndian"],[4,"LittleEndian"],[8,"ByteOrder"],[8,"ReadBytesExt"],[8,"WriteBytesExt"]]},\
"bytes":{"doc":"Provides abstractions for working with bytes.","t":[4,8,16,8,8,3,3,8,4,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,10,11,11,10,11,11,8,16,8,3,8,8,3,3,3,3,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BigEndian","Buf","Buf","BufMut","ByteOrder","Bytes","BytesMut","IntoBuf","LittleEndian","advance","advance","advance","advance_mut","advance_mut","as_mut","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf","bytes","bytes_mut","bytes_mut","capacity","clear","clear","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","default","deref","deref","deref_mut","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend_from_slice","extend_from_slice","fmt","fmt","fmt","fmt","freeze","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_buf","from_buf","from_iter","from_iter","from_iter","from_iter","from_slice_f32","from_slice_f32","from_slice_f32","from_slice_f64","from_slice_f64","from_slice_f64","from_slice_i128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_u128","from_slice_u128","from_slice_u128","from_slice_u16","from_slice_u16","from_slice_u16","from_slice_u32","from_slice_u32","from_slice_u32","from_slice_u64","from_slice_u64","from_slice_u64","from_static","hash","hash","hash","hash","into","into","into","into","into_buf","into_buf","into_buf","into_buf","into_buf","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","len","len","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","put_i8","put_slice","put_u8","read_f32","read_f32_into","read_f32_into_unchecked","read_f64","read_f64_into","read_f64_into_unchecked","read_i128","read_i128_into","read_i16","read_i16_into","read_i24","read_i32","read_i32_into","read_i48","read_i64","read_i64_into","read_int","read_int128","read_u128","read_u128","read_u128","read_u128_into","read_u128_into","read_u128_into","read_u16","read_u16","read_u16","read_u16_into","read_u16_into","read_u16_into","read_u24","read_u32","read_u32","read_u32","read_u32_into","read_u32_into","read_u32_into","read_u48","read_u64","read_u64","read_u64","read_u64_into","read_u64_into","read_u64_into","read_uint","read_uint","read_uint","read_uint128","read_uint128","read_uint128","remaining","remaining_mut","remaining_mut","reserve","resize","set_len","slice","slice_from","slice_ref","slice_to","split_off","split_off","split_to","split_to","take","to_owned","to_owned","to_owned","to_owned","truncate","truncate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_mut","type_id","type_id","type_id","type_id","unsplit","with_capacity","with_capacity","write_f32","write_f32_into","write_f64","write_f64_into","write_fmt","write_i128","write_i128_into","write_i16","write_i16_into","write_i24","write_i32","write_i32_into","write_i48","write_i64","write_i64_into","write_int","write_int128","write_str","write_u128","write_u128","write_u128","write_u128_into","write_u128_into","write_u128_into","write_u16","write_u16","write_u16","write_u16_into","write_u16_into","write_u16_into","write_u24","write_u32","write_u32","write_u32","write_u32_into","write_u32_into","write_u32_into","write_u48","write_u64","write_u64","write_u64","write_u64_into","write_u64_into","write_u64_into","write_uint","write_uint","write_uint","write_uint128","write_uint128","write_uint128","Buf","Buf","BufMut","Chain","FromBuf","IntoBuf","Iter","Reader","Take","Writer","advance","advance","advance","advance_mut","advance_mut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_ref","by_ref","by_ref","by_ref","by_ref","by_ref","bytes","bytes","bytes","bytes_mut","bytes_mut","bytes_vec","bytes_vec","bytes_vec","bytes_vec","bytes_vec_mut","bytes_vec_mut","bytes_vec_mut","bytes_vec_mut","chain","chain","chain","collect","collect","collect","consume","copy_to_slice","copy_to_slice","copy_to_slice","fill_buf","first_mut","first_ref","flush","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_buf","get_f32_be","get_f32_be","get_f32_be","get_f32_le","get_f32_le","get_f32_le","get_f64_be","get_f64_be","get_f64_be","get_f64_le","get_f64_le","get_f64_le","get_i16_be","get_i16_be","get_i16_be","get_i16_le","get_i16_le","get_i16_le","get_i32_be","get_i32_be","get_i32_be","get_i32_le","get_i32_le","get_i32_le","get_i64_be","get_i64_be","get_i64_be","get_i64_le","get_i64_le","get_i64_le","get_i8","get_i8","get_i8","get_int_be","get_int_be","get_int_be","get_int_le","get_int_le","get_int_le","get_mut","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","get_ref","get_u16_be","get_u16_be","get_u16_be","get_u16_le","get_u16_le","get_u16_le","get_u32_be","get_u32_be","get_u32_be","get_u32_le","get_u32_le","get_u32_le","get_u64_be","get_u64_be","get_u64_be","get_u64_le","get_u64_le","get_u64_le","get_u8","get_u8","get_u8","get_uint_be","get_uint_be","get_uint_be","get_uint_le","get_uint_le","get_uint_le","has_remaining","has_remaining","has_remaining","has_remaining_mut","has_remaining_mut","has_remaining_mut","into","into","into","into","into","into_buf","into_inner","into_inner","into_inner","into_inner","into_inner","into_iter","iter","iter","iter","last_mut","last_ref","limit","new","next","put","put","put","put_f32_be","put_f32_be","put_f32_be","put_f32_le","put_f32_le","put_f32_le","put_f64_be","put_f64_be","put_f64_be","put_f64_le","put_f64_le","put_f64_le","put_i16_be","put_i16_be","put_i16_be","put_i16_le","put_i16_le","put_i16_le","put_i32_be","put_i32_be","put_i32_be","put_i32_le","put_i32_le","put_i32_le","put_i64_be","put_i64_be","put_i64_be","put_i64_le","put_i64_le","put_i64_le","put_i8","put_i8","put_i8","put_int_be","put_int_be","put_int_be","put_int_le","put_int_le","put_int_le","put_slice","put_slice","put_slice","put_u16_be","put_u16_be","put_u16_be","put_u16_le","put_u16_le","put_u16_le","put_u32_be","put_u32_be","put_u32_be","put_u32_le","put_u32_le","put_u32_le","put_u64_be","put_u64_be","put_u64_be","put_u64_le","put_u64_le","put_u64_le","put_u8","put_u8","put_u8","put_uint_be","put_uint_be","put_uint_be","put_uint_le","put_uint_le","put_uint_le","read","reader","reader","reader","remaining","remaining","remaining","remaining_mut","remaining_mut","set_limit","size_hint","take","take","take","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","write","writer","writer","writer"],"q":["bytes","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bytes::bufd":["Defines big-endian serialization.","Read bytes from a buffer.","The <code>Buf</code> type that <code>self</code> is being converted into","A trait for values that provide sequential write access to …","<code>ByteOrder</code> describes types that can serialize integers as …","A reference counted contiguous slice of memory.","A unique reference to a contiguous slice of memory.","Conversion into a <code>Buf</code>","Defines little-endian serialization.","Advance the internal cursor of the Buf","Shortens the buffer, dropping the first <code>cnt</code> bytes and …","Shortens the buffer, dropping the first <code>cnt</code> bytes and …","Advance the internal cursor of the BufMut","","","","","","","","","","","","","","","","Utilities for working with buffers.","Returns a slice starting at the current position and of …","Returns a mutable slice starting at the current BufMut …","","Returns the number of bytes the <code>BytesMut</code> can hold without …","Clears the buffer, removing all data.","Clears the buffer, removing all data.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Appends given bytes to this object.","Appends given bytes to this object.","","","","","Converts <code>self</code> into an immutable <code>Bytes</code>.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Converts the given slice of IEEE754 single-precision (4 …","","","Converts the given slice of IEEE754 double-precision (8 …","","","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to a …","","","Converts the given slice of unsigned 16 bit integers to a …","","","Converts the given slice of unsigned 32 bit integers to a …","","","Converts the given slice of unsigned 64 bit integers to a …","","","Creates a new <code>Bytes</code> from a static slice.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a <code>Buf</code> from a value.","","","","","","","","","Returns true if the <code>Bytes</code> has a length of 0.","Returns true if the <code>BytesMut</code> has a length of 0.","Returns the number of bytes contained in this <code>Bytes</code>.","Returns the number of bytes contained in this <code>BytesMut</code>.","Creates a new empty <code>Bytes</code>.","Creates a new <code>BytesMut</code> with default capacity.","","","","","","","","","","","","","","","","","","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a IEEE754 double-precision (8 bytes) floating point …","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads a signed 128 bit integer from <code>buf</code>.","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 16 bit integer from <code>buf</code>.","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from <code>buf</code>.","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from <code>buf</code>.","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","","","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 16 bit integer from <code>buf</code>.","","","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","","","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","","","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","Reads an unsigned n-bytes integer from <code>buf</code>.","","","Returns the number of bytes between the current position …","Returns the number of bytes that can be written from the …","","Reserves capacity for at least <code>additional</code> more bytes to be …","Resizes the buffer so that <code>len</code> is equal to <code>new_len</code>.","Sets the length of the buffer.","Returns a slice of self for the index range <code>[begin..end)</code>.","Returns a slice of self for the index range …","Returns a slice of self that is equivalent to the given …","Returns a slice of self for the index range <code>[0..end)</code>.","Splits the bytes into two at the given index.","Splits the bytes into two at the given index.","Splits the bytes into two at the given index.","Splits the buffer into two at the given index.","Removes the bytes from the current view, returning them in …","","","","","Shortens the buffer, keeping the first <code>len</code> bytes and …","Shortens the buffer, keeping the first <code>len</code> bytes and …","","","","","","","","","Attempts to convert into a <code>BytesMut</code> handle.","","","","","Combine splitted BytesMut objects back as contiguous.","Creates a new <code>Bytes</code> with the specified capacity.","Creates a new <code>BytesMut</code> with the specified capacity.","Writes a IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 single-precision (4 bytes) floating point …","Writes a IEEE754 double-precision (8 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","","","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","","","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","","","Read bytes from a buffer.","The <code>Buf</code> type that <code>self</code> is being converted into","A trait for values that provide sequential write access to …","A <code>Chain</code> sequences two buffers.","Conversion from a <code>Buf</code>","Conversion into a <code>Buf</code>","Iterator over the bytes contained by the buffer.","A <code>Buf</code> adapter which implements <code>io::Read</code> for the inner …","A <code>Buf</code> adapter which limits the bytes read from an …","A <code>BufMut</code> adapter which implements <code>io::Write</code> for the inner …","Advance the internal cursor of the Buf","","","Advance the internal cursor of the BufMut","","","","","","","","","","","","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adaptor for this instance of …","Returns a slice starting at the current position and of …","","","Returns a mutable slice starting at the current BufMut …","","Fills <code>dst</code> with potentially multiple slices starting at <code>self</code>…","Fills <code>dst</code> with potentially multiple slices starting at <code>self</code>…","Fills <code>dst</code> with potentially multiple slices starting at <code>self</code>…","","Fills <code>dst</code> with potentially multiple mutable slices …","Fills <code>dst</code> with potentially multiple mutable slices …","Fills <code>dst</code> with potentially multiple mutable slices …","","Creates an adaptor which will chain this buffer with …","Creates an adaptor which will chain this buffer with …","Creates an adaptor which will chain this buffer with …","Transforms a <code>Buf</code> into a concrete buffer.","Transforms a <code>Buf</code> into a concrete buffer.","Transforms a <code>Buf</code> into a concrete buffer.","","Copies bytes from <code>self</code> into <code>dst</code>.","Copies bytes from <code>self</code> into <code>dst</code>.","Copies bytes from <code>self</code> into <code>dst</code>.","","Gets a mutable reference to the first underlying <code>Buf</code>.","Gets a reference to the first underlying <code>Buf</code>.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a value from a buffer.","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 single-precision (4 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets an IEEE754 double-precision (8 bytes) floating point …","Gets a signed 16 bit integer from <code>self</code> in big-endian byte …","Gets a signed 16 bit integer from <code>self</code> in big-endian byte …","Gets a signed 16 bit integer from <code>self</code> in big-endian byte …","Gets a signed 16 bit integer from <code>self</code> in little-endian …","Gets a signed 16 bit integer from <code>self</code> in little-endian …","Gets a signed 16 bit integer from <code>self</code> in little-endian …","Gets a signed 32 bit integer from <code>self</code> in big-endian byte …","Gets a signed 32 bit integer from <code>self</code> in big-endian byte …","Gets a signed 32 bit integer from <code>self</code> in big-endian byte …","Gets a signed 32 bit integer from <code>self</code> in little-endian …","Gets a signed 32 bit integer from <code>self</code> in little-endian …","Gets a signed 32 bit integer from <code>self</code> in little-endian …","Gets a signed 64 bit integer from <code>self</code> in big-endian byte …","Gets a signed 64 bit integer from <code>self</code> in big-endian byte …","Gets a signed 64 bit integer from <code>self</code> in big-endian byte …","Gets a signed 64 bit integer from <code>self</code> in little-endian …","Gets a signed 64 bit integer from <code>self</code> in little-endian …","Gets a signed 64 bit integer from <code>self</code> in little-endian …","Gets a signed 8 bit integer from <code>self</code>.","Gets a signed 8 bit integer from <code>self</code>.","Gets a signed 8 bit integer from <code>self</code>.","Gets a signed n-byte integer from <code>self</code> in big-endian byte …","Gets a signed n-byte integer from <code>self</code> in big-endian byte …","Gets a signed n-byte integer from <code>self</code> in big-endian byte …","Gets a signed n-byte integer from <code>self</code> in little-endian …","Gets a signed n-byte integer from <code>self</code> in little-endian …","Gets a signed n-byte integer from <code>self</code> in little-endian …","Gets a mutable reference to the underlying <code>Buf</code>.","Gets a mutable reference to the underlying <code>Buf</code>.","Gets a mutable reference to the underlying <code>Buf</code>.","Gets a mutable reference to the underlying <code>BufMut</code>.","Gets a reference to the underlying <code>Buf</code>.","Gets a reference to the underlying <code>Buf</code>.","Gets a reference to the underlying <code>Buf</code>.","Gets a reference to the underlying <code>BufMut</code>.","Gets an unsigned 16 bit integer from <code>self</code> in big-endian …","Gets an unsigned 16 bit integer from <code>self</code> in big-endian …","Gets an unsigned 16 bit integer from <code>self</code> in big-endian …","Gets an unsigned 16 bit integer from <code>self</code> in little-endian …","Gets an unsigned 16 bit integer from <code>self</code> in little-endian …","Gets an unsigned 16 bit integer from <code>self</code> in little-endian …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 32 bit integer from <code>self</code> in the …","Gets an unsigned 64 bit integer from <code>self</code> in big-endian …","Gets an unsigned 64 bit integer from <code>self</code> in big-endian …","Gets an unsigned 64 bit integer from <code>self</code> in big-endian …","Gets an unsigned 64 bit integer from <code>self</code> in little-endian …","Gets an unsigned 64 bit integer from <code>self</code> in little-endian …","Gets an unsigned 64 bit integer from <code>self</code> in little-endian …","Gets an unsigned 8 bit integer from <code>self</code>.","Gets an unsigned 8 bit integer from <code>self</code>.","Gets an unsigned 8 bit integer from <code>self</code>.","Gets an unsigned n-byte integer from <code>self</code> in big-endian …","Gets an unsigned n-byte integer from <code>self</code> in big-endian …","Gets an unsigned n-byte integer from <code>self</code> in big-endian …","Gets an unsigned n-byte integer from <code>self</code> in little-endian …","Gets an unsigned n-byte integer from <code>self</code> in little-endian …","Gets an unsigned n-byte integer from <code>self</code> in little-endian …","Returns true if there are any more bytes to consume","Returns true if there are any more bytes to consume","Returns true if there are any more bytes to consume","Returns true if there is space in <code>self</code> for more bytes.","Returns true if there is space in <code>self</code> for more bytes.","Returns true if there is space in <code>self</code> for more bytes.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a <code>Buf</code> from a value.","Consumes this <code>Chain</code>, returning the underlying values.","Consumes this <code>Iter</code>, returning the underlying value.","Consumes this <code>Reader</code>, returning the underlying value.","Consumes this <code>Take</code>, returning the underlying value.","Consumes this <code>Writer</code>, returning the underlying value.","","Returns an iterator over the bytes contained by the buffer.","Returns an iterator over the bytes contained by the buffer.","Returns an iterator over the bytes contained by the buffer.","Gets a mutable reference to the last underlying <code>Buf</code>.","Gets a reference to the last underlying <code>Buf</code>.","Returns the maximum number of bytes that can be read.","Creates a new <code>Chain</code> sequencing the provided values.","","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 single-precision (4 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes  an IEEE754 double-precision (8 bytes) floating …","Writes a signed 16 bit integer to <code>self</code> in big-endian byte …","Writes a signed 16 bit integer to <code>self</code> in big-endian byte …","Writes a signed 16 bit integer to <code>self</code> in big-endian byte …","Writes a signed 16 bit integer to <code>self</code> in little-endian …","Writes a signed 16 bit integer to <code>self</code> in little-endian …","Writes a signed 16 bit integer to <code>self</code> in little-endian …","Writes a signed 32 bit integer to <code>self</code> in big-endian byte …","Writes a signed 32 bit integer to <code>self</code> in big-endian byte …","Writes a signed 32 bit integer to <code>self</code> in big-endian byte …","Writes a signed 32 bit integer to <code>self</code> in little-endian …","Writes a signed 32 bit integer to <code>self</code> in little-endian …","Writes a signed 32 bit integer to <code>self</code> in little-endian …","Writes a signed 64 bit integer to <code>self</code> in the big-endian …","Writes a signed 64 bit integer to <code>self</code> in the big-endian …","Writes a signed 64 bit integer to <code>self</code> in the big-endian …","Writes a signed 64 bit integer to <code>self</code> in little-endian …","Writes a signed 64 bit integer to <code>self</code> in little-endian …","Writes a signed 64 bit integer to <code>self</code> in little-endian …","Writes a signed 8 bit integer to <code>self</code>.","Writes a signed 8 bit integer to <code>self</code>.","Writes a signed 8 bit integer to <code>self</code>.","Writes a signed n-byte integer to <code>self</code> in big-endian byte …","Writes a signed n-byte integer to <code>self</code> in big-endian byte …","Writes a signed n-byte integer to <code>self</code> in big-endian byte …","Writes a signed n-byte integer to <code>self</code> in little-endian …","Writes a signed n-byte integer to <code>self</code> in little-endian …","Writes a signed n-byte integer to <code>self</code> in little-endian …","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Transfer bytes into <code>self</code> from <code>src</code> and advance the cursor …","Writes an unsigned 16 bit integer to <code>self</code> in big-endian …","Writes an unsigned 16 bit integer to <code>self</code> in big-endian …","Writes an unsigned 16 bit integer to <code>self</code> in big-endian …","Writes an unsigned 16 bit integer to <code>self</code> in little-endian …","Writes an unsigned 16 bit integer to <code>self</code> in little-endian …","Writes an unsigned 16 bit integer to <code>self</code> in little-endian …","Writes an unsigned 32 bit integer to <code>self</code> in big-endian …","Writes an unsigned 32 bit integer to <code>self</code> in big-endian …","Writes an unsigned 32 bit integer to <code>self</code> in big-endian …","Writes an unsigned 32 bit integer to <code>self</code> in little-endian …","Writes an unsigned 32 bit integer to <code>self</code> in little-endian …","Writes an unsigned 32 bit integer to <code>self</code> in little-endian …","Writes an unsigned 64 bit integer to <code>self</code> in the …","Writes an unsigned 64 bit integer to <code>self</code> in the …","Writes an unsigned 64 bit integer to <code>self</code> in the …","Writes an unsigned 64 bit integer to <code>self</code> in little-endian …","Writes an unsigned 64 bit integer to <code>self</code> in little-endian …","Writes an unsigned 64 bit integer to <code>self</code> in little-endian …","Writes an unsigned 8 bit integer to <code>self</code>.","Writes an unsigned 8 bit integer to <code>self</code>.","Writes an unsigned 8 bit integer to <code>self</code>.","Writes an unsigned n-byte integer to <code>self</code> in big-endian …","Writes an unsigned n-byte integer to <code>self</code> in big-endian …","Writes an unsigned n-byte integer to <code>self</code> in big-endian …","Writes an unsigned n-byte integer to <code>self</code> in the …","Writes an unsigned n-byte integer to <code>self</code> in the …","Writes an unsigned n-byte integer to <code>self</code> in the …","","Creates an adaptor which implements the <code>Read</code> trait for <code>self</code>…","Creates an adaptor which implements the <code>Read</code> trait for <code>self</code>…","Creates an adaptor which implements the <code>Read</code> trait for <code>self</code>…","Returns the number of bytes between the current position …","","","Returns the number of bytes that can be written from the …","","Sets the maximum number of bytes that can be read.","","Creates an adaptor which will read at most <code>limit</code> bytes …","Creates an adaptor which will read at most <code>limit</code> bytes …","Creates an adaptor which will read at most <code>limit</code> bytes …","","","","","","","","","","","","","","","","","Creates an adaptor which implements the <code>Write</code> trait for …","Creates an adaptor which implements the <code>Write</code> trait for …","Creates an adaptor which implements the <code>Write</code> trait for …"],"i":[0,0,1,0,0,0,0,0,0,2,3,4,5,4,4,3,4,6,7,3,3,4,4,6,7,3,4,4,0,2,5,4,4,3,4,6,7,3,4,6,7,3,4,6,7,3,4,6,7,3,4,3,4,4,6,7,3,3,3,3,3,3,3,4,4,4,4,4,4,4,3,3,4,4,3,4,6,7,3,4,4,6,7,3,3,3,3,3,3,4,4,4,4,4,4,3,4,3,3,4,4,8,6,7,8,6,7,8,8,8,8,8,6,7,8,6,7,8,6,7,8,6,7,3,6,7,3,4,6,7,3,4,1,3,3,4,4,3,3,4,4,3,4,3,4,3,4,6,7,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,6,7,8,6,7,8,6,7,8,6,7,8,8,6,7,8,6,7,8,8,6,7,8,6,7,8,6,7,8,6,7,2,5,4,4,4,4,3,3,3,3,3,4,3,4,4,6,7,3,4,3,4,6,7,3,4,6,7,3,4,3,6,7,3,4,4,3,4,8,8,8,8,4,8,8,8,8,8,8,8,8,8,8,8,8,4,8,6,7,8,6,7,8,6,7,8,6,7,8,8,6,7,8,6,7,8,8,6,7,8,6,7,8,6,7,8,6,7,0,1,0,0,0,0,0,0,0,0,2,9,10,5,9,9,11,12,10,13,9,11,12,10,13,2,2,2,5,5,5,2,9,10,5,9,2,2,2,9,5,5,5,9,2,2,2,2,2,2,12,2,2,2,12,9,9,13,9,11,12,10,13,9,11,12,10,13,14,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,12,10,13,11,12,10,13,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,5,5,9,11,12,10,13,1,9,11,12,10,13,11,2,2,2,9,9,10,9,11,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,12,2,2,2,2,9,10,5,9,10,11,2,2,2,9,11,12,10,13,9,11,12,10,13,9,11,12,10,13,13,5,5,5],"f":[null,null,null,null,null,null,null,null,null,[[["",0],["usize",0]]],[[["bytes",3],["usize",0]]],[[["bytesmut",3],["usize",0]]],[[["",0],["usize",0]]],[[["bytesmut",3],["usize",0]]],[[["bytesmut",3]]],[[["bytes",3]]],[[["bytesmut",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["bytes",3]]],[[["bytesmut",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["bytesmut",3]]],[[["",0]],["",0]],null,[[["",0]]],[[["",0]]],[[["bytesmut",3]]],[[["bytesmut",3]],["usize",0]],[[["bytes",3]]],[[["bytesmut",3]]],[[["bigendian",4]],["bigendian",4]],[[["littleendian",4]],["littleendian",4]],[[["bytes",3]],["bytes",3]],[[["bytesmut",3]],["bytesmut",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["bigendian",4],["bigendian",4]],["ordering",4]],[[["littleendian",4],["littleendian",4]],["ordering",4]],[[["bytes",3],["bytes",3]],["ordering",4]],[[["bytesmut",3],["bytesmut",3]],["ordering",4]],[[],["bigendian",4]],[[],["littleendian",4]],[[],["bytes",3]],[[],["bytesmut",3]],[[["bytes",3]]],[[["bytesmut",3]]],[[["bytesmut",3]]],[[["bigendian",4],["bigendian",4]],["bool",0]],[[["littleendian",4],["littleendian",4]],["bool",0]],[[["bytes",3]],["bool",0]],[[["bytes",3],["bytes",3]],["bool",0]],[[["bytes",3],["bytesmut",3]],["bool",0]],[[["bytes",3],["",0]],["bool",0]],[[["bytes",3],["string",3]],["bool",0]],[[["bytes",3],["vec",3]],["bool",0]],[[["bytes",3],["str",0]],["bool",0]],[[["bytesmut",3],["vec",3]],["bool",0]],[[["bytesmut",3],["bytesmut",3]],["bool",0]],[[["bytesmut",3],["str",0]],["bool",0]],[[["bytesmut",3],["string",3]],["bool",0]],[[["bytesmut",3],["",0]],["bool",0]],[[["bytesmut",3],["bytes",3]],["bool",0]],[[["bytesmut",3]],["bool",0]],[[["bytes",3]]],[[["bytes",3]]],[[["bytesmut",3]]],[[["bytesmut",3]]],[[["bytes",3]]],[[["bytesmut",3]]],[[["bigendian",4],["formatter",3]],["result",4,[["error",3]]]],[[["littleendian",4],["formatter",3]],["result",4,[["error",3]]]],[[["bytes",3],["formatter",3]],["result",6]],[[["bytesmut",3],["formatter",3]],["result",6]],[[["bytesmut",3]],["bytes",3]],[[]],[[]],[[["str",0]],["bytes",3]],[[],["bytes",3]],[[["string",3]],["bytes",3]],[[["vec",3,[["u8",0]]]],["bytes",3]],[[["bytesmut",3]],["bytes",3]],[[]],[[]],[[["string",3]],["bytesmut",3]],[[["vec",3,[["u8",0]]]],["bytesmut",3]],[[],["bytesmut",3]],[[["str",0]],["bytesmut",3]],[[["bytes",3]],["bytesmut",3]],[[],["bytes",3]],[[],["bytesmut",3]],[[["intoiterator",8]],["bytes",3]],[[["intoiterator",8]],["bytes",3]],[[["intoiterator",8]],["bytesmut",3]],[[["intoiterator",8]],["bytesmut",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bytes",3]],[[["bigendian",4],["",0]]],[[["littleendian",4],["",0]]],[[["bytes",3],["",0]]],[[["bytesmut",3],["",0]]],[[]],[[]],[[]],[[]],[[]],[[["bytes",3]]],[[["bytes",3]]],[[["bytesmut",3]]],[[["bytesmut",3]]],[[["bytes",3]]],[[["bytes",3]]],[[["bytesmut",3]]],[[["bytesmut",3]]],[[["bytes",3]],["bool",0]],[[["bytesmut",3]],["bool",0]],[[["bytes",3]],["usize",0]],[[["bytesmut",3]],["usize",0]],[[],["bytes",3]],[[],["bytesmut",3]],[[["bigendian",4],["bigendian",4]],["option",4,[["ordering",4]]]],[[["littleendian",4],["littleendian",4]],["option",4,[["ordering",4]]]],[[["bytes",3],["vec",3]],["option",4,[["ordering",4]]]],[[["bytes",3]],["option",4,[["ordering",4]]]],[[["bytes",3],["str",0]],["option",4,[["ordering",4]]]],[[["bytes",3],["string",3]],["option",4,[["ordering",4]]]],[[["bytes",3],["bytes",3]],["option",4,[["ordering",4]]]],[[["bytes",3],["",0]],["option",4,[["ordering",4]]]],[[["bytesmut",3],["",0]],["option",4,[["ordering",4]]]],[[["bytesmut",3],["str",0]],["option",4,[["ordering",4]]]],[[["bytesmut",3],["vec",3]],["option",4,[["ordering",4]]]],[[["bytesmut",3],["string",3]],["option",4,[["ordering",4]]]],[[["bytesmut",3],["bytesmut",3]],["option",4,[["ordering",4]]]],[[["bytesmut",3]],["option",4,[["ordering",4]]]],[[["bytesmut",3],["i8",0]]],[[["bytesmut",3]]],[[["bytesmut",3],["u8",0]]],[[],["f32",0]],[[]],[[]],[[],["f64",0]],[[]],[[]],[[],["i128",0]],[[]],[[],["i16",0]],[[]],[[],["i32",0]],[[],["i32",0]],[[]],[[],["i64",0]],[[],["i64",0]],[[]],[[["usize",0]],["i64",0]],[[["usize",0]],["i128",0]],[[],["u128",0]],[[],["u128",0]],[[],["u128",0]],[[]],[[]],[[]],[[],["u16",0]],[[],["u16",0]],[[],["u16",0]],[[]],[[]],[[]],[[],["u32",0]],[[],["u32",0]],[[],["u32",0]],[[],["u32",0]],[[]],[[]],[[]],[[],["u64",0]],[[],["u64",0]],[[],["u64",0]],[[],["u64",0]],[[]],[[]],[[]],[[["usize",0]],["u64",0]],[[["usize",0]],["u64",0]],[[["usize",0]],["u64",0]],[[["usize",0]],["u128",0]],[[["usize",0]],["u128",0]],[[["usize",0]],["u128",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["bytesmut",3]],["usize",0]],[[["bytesmut",3],["usize",0]]],[[["bytesmut",3],["usize",0],["u8",0]]],[[["bytesmut",3],["usize",0]]],[[["bytes",3],["usize",0],["usize",0]],["bytes",3]],[[["bytes",3],["usize",0]],["bytes",3]],[[["bytes",3]],["bytes",3]],[[["bytes",3],["usize",0]],["bytes",3]],[[["bytes",3],["usize",0]],["bytes",3]],[[["bytesmut",3],["usize",0]],["bytesmut",3]],[[["bytes",3],["usize",0]],["bytes",3]],[[["bytesmut",3],["usize",0]],["bytesmut",3]],[[["bytesmut",3]],["bytesmut",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["bytes",3],["usize",0]]],[[["bytesmut",3],["usize",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["bytes",3]],["result",4,[["bytesmut",3],["bytes",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["bytesmut",3],["bytesmut",3]]],[[["usize",0]],["bytes",3]],[[["usize",0]],["bytesmut",3]],[[["f32",0]]],[[]],[[["f64",0]]],[[]],[[["bytesmut",3],["arguments",3]],["result",6]],[[["i128",0]]],[[]],[[["i16",0]]],[[]],[[["i32",0]]],[[["i32",0]]],[[]],[[["i64",0]]],[[["i64",0]]],[[]],[[["i64",0],["usize",0]]],[[["i128",0],["usize",0]]],[[["bytesmut",3],["str",0]],["result",6]],[[["u128",0]]],[[["u128",0]]],[[["u128",0]]],[[]],[[]],[[]],[[["u16",0]]],[[["u16",0]]],[[["u16",0]]],[[]],[[]],[[]],[[["u32",0]]],[[["u32",0]]],[[["u32",0]]],[[["u32",0]]],[[]],[[]],[[]],[[["u64",0]]],[[["u64",0]]],[[["u64",0]]],[[["u64",0]]],[[]],[[]],[[]],[[["u64",0],["usize",0]]],[[["u64",0],["usize",0]]],[[["u64",0],["usize",0]]],[[["u128",0],["usize",0]]],[[["u128",0],["usize",0]]],[[["u128",0],["usize",0]]],null,null,null,null,null,null,null,null,null,null,[[["",0],["usize",0]]],[[["chain",3],["usize",0]]],[[["take",3,[["buf",8]]],["usize",0]]],[[["",0],["usize",0]]],[[["chain",3],["usize",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["chain",3]]],[[["take",3,[["buf",8]]]]],[[["",0]]],[[["chain",3]]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["chain",3]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["chain",3]],["usize",0]],[[],["chain",3]],[[],["chain",3]],[[],["chain",3]],[[]],[[]],[[]],[[["reader",3,[["",26,[["buf",8],["sized",8]]]]],["usize",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["reader",3,[["",26,[["buf",8],["sized",8]]]]]],["result",6]],[[["chain",3]],["",0]],[[["chain",3]],["",0]],[[["writer",3,[["",26,[["bufmut",8],["sized",8]]]]]],["result",6]],[[["chain",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["iter",3,[["debug",8]]],["formatter",3]],["result",6]],[[["reader",3,[["debug",8]]],["formatter",3]],["result",6]],[[["take",3,[["debug",8]]],["formatter",3]],["result",6]],[[["writer",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["f32",0]],[[["",0]],["f32",0]],[[["",0]],["f32",0]],[[["",0]],["f32",0]],[[["",0]],["f32",0]],[[["",0]],["f32",0]],[[["",0]],["f64",0]],[[["",0]],["f64",0]],[[["",0]],["f64",0]],[[["",0]],["f64",0]],[[["",0]],["f64",0]],[[["",0]],["f64",0]],[[["",0]],["i16",0]],[[["",0]],["i16",0]],[[["",0]],["i16",0]],[[["",0]],["i16",0]],[[["",0]],["i16",0]],[[["",0]],["i16",0]],[[["",0]],["i32",0]],[[["",0]],["i32",0]],[[["",0]],["i32",0]],[[["",0]],["i32",0]],[[["",0]],["i32",0]],[[["",0]],["i32",0]],[[["",0]],["i64",0]],[[["",0]],["i64",0]],[[["",0]],["i64",0]],[[["",0]],["i64",0]],[[["",0]],["i64",0]],[[["",0]],["i64",0]],[[["",0]],["i8",0]],[[["",0]],["i8",0]],[[["",0]],["i8",0]],[[["",0],["usize",0]],["i64",0]],[[["",0],["usize",0]],["i64",0]],[[["",0],["usize",0]],["i64",0]],[[["",0],["usize",0]],["i64",0]],[[["",0],["usize",0]],["i64",0]],[[["",0],["usize",0]],["i64",0]],[[["iter",3]],["",0]],[[["reader",3,[["buf",8]]]],["",0]],[[["take",3]],["",0]],[[["writer",3,[["bufmut",8]]]],["",0]],[[["iter",3]],["",0]],[[["reader",3,[["buf",8]]]],["",0]],[[["take",3]],["",0]],[[["writer",3,[["bufmut",8]]]],["",0]],[[["",0]],["u16",0]],[[["",0]],["u16",0]],[[["",0]],["u16",0]],[[["",0]],["u16",0]],[[["",0]],["u16",0]],[[["",0]],["u16",0]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["u32",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0]],["u8",0]],[[["",0],["usize",0]],["u64",0]],[[["",0],["usize",0]],["u64",0]],[[["",0],["usize",0]],["u64",0]],[[["",0],["usize",0]],["u64",0]],[[["",0],["usize",0]],["u64",0]],[[["",0],["usize",0]],["u64",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[["chain",3]]],[[["iter",3]]],[[["reader",3,[["buf",8]]]],["buf",8]],[[["take",3]]],[[["writer",3,[["bufmut",8]]]],["bufmut",8]],[[]],[[],["iter",3]],[[],["iter",3]],[[],["iter",3]],[[["chain",3]],["",0]],[[["chain",3]],["",0]],[[["take",3]],["usize",0]],[[],["chain",3]],[[["iter",3,[["buf",8]]]],["option",4,[["u8",0]]]],[[["",0],["intobuf",8]]],[[["",0],["intobuf",8]]],[[["",0],["intobuf",8]]],[[["",0],["f32",0]]],[[["",0],["f32",0]]],[[["",0],["f32",0]]],[[["",0],["f32",0]]],[[["",0],["f32",0]]],[[["",0],["f32",0]]],[[["",0],["f64",0]]],[[["",0],["f64",0]]],[[["",0],["f64",0]]],[[["",0],["f64",0]]],[[["",0],["f64",0]]],[[["",0],["f64",0]]],[[["",0],["i16",0]]],[[["",0],["i16",0]]],[[["",0],["i16",0]]],[[["",0],["i16",0]]],[[["",0],["i16",0]]],[[["",0],["i16",0]]],[[["",0],["i32",0]]],[[["",0],["i32",0]]],[[["",0],["i32",0]]],[[["",0],["i32",0]]],[[["",0],["i32",0]]],[[["",0],["i32",0]]],[[["",0],["i64",0]]],[[["",0],["i64",0]]],[[["",0],["i64",0]]],[[["",0],["i64",0]]],[[["",0],["i64",0]]],[[["",0],["i64",0]]],[[["",0],["i8",0]]],[[["",0],["i8",0]]],[[["",0],["i8",0]]],[[["",0],["i64",0],["usize",0]]],[[["",0],["i64",0],["usize",0]]],[[["",0],["i64",0],["usize",0]]],[[["",0],["i64",0],["usize",0]]],[[["",0],["i64",0],["usize",0]]],[[["",0],["i64",0],["usize",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0],["u16",0]]],[[["",0],["u16",0]]],[[["",0],["u16",0]]],[[["",0],["u16",0]]],[[["",0],["u16",0]]],[[["",0],["u16",0]]],[[["",0],["u32",0]]],[[["",0],["u32",0]]],[[["",0],["u32",0]]],[[["",0],["u32",0]]],[[["",0],["u32",0]]],[[["",0],["u32",0]]],[[["",0],["u64",0]]],[[["",0],["u64",0]]],[[["",0],["u64",0]]],[[["",0],["u64",0]]],[[["",0],["u64",0]]],[[["",0],["u64",0]]],[[["",0],["u8",0]]],[[["",0],["u8",0]]],[[["",0],["u8",0]]],[[["",0],["u64",0],["usize",0]]],[[["",0],["u64",0],["usize",0]]],[[["",0],["u64",0],["usize",0]]],[[["",0],["u64",0],["usize",0]]],[[["",0],["u64",0],["usize",0]]],[[["",0],["u64",0],["usize",0]]],[[["reader",3,[["",26,[["buf",8],["sized",8]]]]]],["result",6,[["usize",0]]]],[[],["reader",3]],[[],["reader",3]],[[],["reader",3]],[[["",0]],["usize",0]],[[["chain",3]],["usize",0]],[[["take",3,[["buf",8]]]],["usize",0]],[[["",0]],["usize",0]],[[["chain",3]],["usize",0]],[[["take",3],["usize",0]]],[[["iter",3,[["buf",8]]]]],[[["usize",0]],["take",3]],[[["usize",0]],["take",3]],[[["usize",0]],["take",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["writer",3,[["",26,[["bufmut",8],["sized",8]]]]]],["result",6,[["usize",0]]]],[[],["writer",3]],[[],["writer",3]],[[],["writer",3]]],"p":[[8,"IntoBuf"],[8,"Buf"],[3,"Bytes"],[3,"BytesMut"],[8,"BufMut"],[4,"BigEndian"],[4,"LittleEndian"],[8,"ByteOrder"],[3,"Chain"],[3,"Take"],[3,"Iter"],[3,"Reader"],[3,"Writer"],[8,"FromBuf"]]},\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":[14],"n":["cfg_if"],"q":["cfg_if"],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[null],"p":[]},\
"chrono":{"doc":"Chrono: Date and Time for Rust","t":[13,3,3,8,3,2,13,2,2,2,17,17,13,13,13,2,2,2,13,2,2,2,3,13,4,13,8,13,13,2,8,13,2,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,10,11,11,10,11,11,11,0,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,0,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,10,11,11,10,11,10,11,10,11,11,10,11,11,10,11,10,11,11,10,11,11,10,11,11,11,10,11,11,10,11,11,11,11,13,3,13,4,13,13,13,13,13,3,3,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,4,3,6,3,13,13,13,13,13,13,13,2,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,12,12,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,17,17,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,3,3,4,13,8,16,13,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],"n":["AutoSi","Date","DateTime","Datelike","Duration","FixedOffset","Fri","IsoWeek","Local","LocalResult","MAX_DATE","MIN_DATE","Micros","Millis","Mon","NaiveDate","NaiveDateTime","NaiveTime","Nanos","Offset","ParseError","ParseResult","ParseWeekdayError","Sat","SecondsFormat","Secs","SubsecRound","Sun","Thu","TimeZone","Timelike","Tue","Utc","Wed","Weekday","add","add","add","add","and_hms","and_hms_micro","and_hms_micro_opt","and_hms_milli","and_hms_milli_opt","and_hms_nano","and_hms_nano_opt","and_hms_opt","and_time","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_add_signed","checked_add_signed","checked_sub","checked_sub_signed","checked_sub_signed","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","date","day","day","day","day0","day0","day0","days","div","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format","format","format_with_items","format_with_items","from","from","from","from","from","from","from","from","from_i64","from_std","from_str","from_str","from_str","from_str","from_u64","from_utc","from_utc","hash","hash","hash","hash","hour","hour","hour12","hours","into","into","into","into","into","into","is_zero","iso_week","iso_week","iso_week","max_value","microseconds","milliseconds","min_value","minute","minute","minutes","month","month","month","month0","month0","month0","mul","naive","naive_local","naive_local","naive_utc","naive_utc","nanosecond","nanosecond","nanoseconds","ne","ne","neg","num_days","num_days_from_ce","num_days_from_monday","num_days_from_sunday","num_hours","num_microseconds","num_milliseconds","num_minutes","num_nanoseconds","num_seconds","num_seconds_from_midnight","num_weeks","number_from_monday","number_from_sunday","offset","offset","offset","ordinal","ordinal","ordinal","ordinal0","ordinal0","ordinal0","parse_from_rfc2822","parse_from_rfc3339","parse_from_str","partial_cmp","partial_cmp","partial_cmp","pred","pred","pred_opt","prelude","round_subsecs","second","second","seconds","signed_duration_since","signed_duration_since","span","sub","sub","sub","sub","sub","sub","succ","succ","succ_opt","time","timestamp","timestamp_millis","timestamp_nanos","timestamp_subsec_micros","timestamp_subsec_millis","timestamp_subsec_nanos","timezone","timezone","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_rfc2822","to_rfc3339","to_rfc3339_opts","to_std","to_string","to_string","to_string","trunc_subsecs","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","weekday","weekday","weekday","weeks","with_day","with_day","with_day","with_day0","with_day0","with_day0","with_hour","with_hour","with_minute","with_minute","with_month","with_month","with_month","with_month0","with_month0","with_month0","with_nanosecond","with_nanosecond","with_ordinal","with_ordinal","with_ordinal","with_ordinal0","with_ordinal0","with_ordinal0","with_second","with_second","with_timezone","with_timezone","with_year","with_year","with_year","year","year","year","year_ce","zero","Day","DelayedFormat","Error","Fixed","Fixed","Hour","Hour12","Internal","Internal","InternalFixed","InternalNumeric","IsoWeek","IsoYear","IsoYearDiv100","IsoYearMod100","Item","Literal","LongMonthName","LongWeekdayName","LowerAmPm","Minute","Month","Nanosecond","Nanosecond","Nanosecond3","Nanosecond6","Nanosecond9","None","NumDaysFromSun","Numeric","Numeric","Ordinal","OwnedLiteral","OwnedSpace","Pad","ParseError","ParseResult","Parsed","RFC2822","RFC3339","Second","ShortMonthName","ShortWeekdayName","Space","Space","StrftimeItems","Timestamp","TimezoneName","TimezoneOffset","TimezoneOffsetColon","TimezoneOffsetColonZ","TimezoneOffsetZ","UpperAmPm","WeekFromMon","WeekFromSun","WeekdayFromMon","Year","YearDiv100","YearMod100","Zero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","day","default","description","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","hour_div_12","hour_mod_12","into","into","into","into","into","into","into","into","into","isoweek","isoyear","isoyear_div_100","isoyear_mod_100","minute","month","nanosecond","ne","ne","ne","ne","ne","ne","new","new","new_with_offset","offset","ordinal","parse","second","set_ampm","set_day","set_hour","set_hour12","set_isoweek","set_isoyear","set_isoyear_div_100","set_isoyear_mod_100","set_minute","set_month","set_nanosecond","set_offset","set_ordinal","set_second","set_timestamp","set_week_from_mon","set_week_from_sun","set_weekday","set_year","set_year_div_100","set_year_mod_100","strftime","timestamp","to_datetime","to_datetime_with_timezone","to_fixed_offset","to_naive_date","to_naive_datetime_with_offset","to_naive_time","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","week_from_mon","week_from_sun","weekday","year","year_div_100","year_mod_100","0","0","0","0","0","0","0","1","0","StrftimeItems","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_iter","new","next","to_owned","try_from","try_into","type_id","IsoWeek","MAX_DATE","MIN_DATE","NaiveDate","NaiveDateTime","NaiveTime","add","add","add","add","add","add_assign","add_assign","add_assign","and_hms","and_hms_micro","and_hms_micro_opt","and_hms_milli","and_hms_milli_opt","and_hms_nano","and_hms_nano_opt","and_hms_opt","and_time","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add_signed","checked_add_signed","checked_sub_signed","checked_sub_signed","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","date","day","day","day0","day0","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","format","format","format_with_items","format_with_items","format_with_items","from","from","from","from","from_hms","from_hms_micro","from_hms_micro_opt","from_hms_milli","from_hms_milli_opt","from_hms_nano","from_hms_nano_opt","from_hms_opt","from_isoywd","from_isoywd_opt","from_num_days_from_ce","from_num_days_from_ce_opt","from_num_seconds_from_midnight","from_num_seconds_from_midnight_opt","from_str","from_str","from_str","from_timestamp","from_timestamp_opt","from_ymd","from_ymd_opt","from_yo","from_yo_opt","hash","hash","hash","hour","hour","into","into","into","into","iso_week","iso_week","minute","minute","month","month","month0","month0","nanosecond","nanosecond","ne","ne","ne","ne","new","num_seconds_from_midnight","ordinal","ordinal","ordinal0","ordinal0","overflowing_add_signed","overflowing_sub_signed","parse_from_str","parse_from_str","parse_from_str","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pred","pred_opt","second","second","signed_duration_since","signed_duration_since","signed_duration_since","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","succ","succ_opt","time","timestamp","timestamp_millis","timestamp_nanos","timestamp_subsec_micros","timestamp_subsec_millis","timestamp_subsec_nanos","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","week","week0","weekday","weekday","with_day","with_day","with_day0","with_day0","with_hour","with_hour","with_minute","with_minute","with_month","with_month","with_month0","with_month0","with_nanosecond","with_nanosecond","with_ordinal","with_ordinal","with_ordinal0","with_ordinal0","with_second","with_second","with_year","with_year","year","year","year","Ambiguous","FixedOffset","Local","LocalResult","None","Offset","Offset","Single","TimeZone","Utc","and_hms_micro_opt","and_hms_milli_opt","and_hms_nano_opt","and_hms_opt","and_time","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","datetime_from_str","earliest","east","east_opt","eq","eq","eq","fix","fix","fix","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_local_date","from_local_date","from_local_datetime","from_local_datetime","from_offset","from_offset","from_offset","from_offset","from_utc_date","from_utc_date","from_utc_datetime","from_utc_datetime","hash","into","into","into","into","isoywd","isoywd_opt","latest","local_minus_utc","map","ne","ne","now","now","offset_from_local_date","offset_from_local_date","offset_from_local_date","offset_from_local_date","offset_from_local_datetime","offset_from_local_datetime","offset_from_local_datetime","offset_from_local_datetime","offset_from_utc_date","offset_from_utc_date","offset_from_utc_date","offset_from_utc_date","offset_from_utc_datetime","offset_from_utc_datetime","offset_from_utc_datetime","offset_from_utc_datetime","single","timestamp","timestamp_millis","timestamp_millis_opt","timestamp_opt","to_owned","to_owned","to_owned","to_owned","to_string","to_string","today","today","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap","utc_minus_local","west","west_opt","ymd","ymd_opt","yo","yo_opt","0","0","1","Date","DateTime","Datelike","FixedOffset","Local","NaiveDate","NaiveDateTime","NaiveTime","Offset","SecondsFormat","SubsecRound","TimeZone","Timelike","Utc","Weekday"],"q":["chronochrono::format","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","chrono::format::Fixed","chrono::format::Item","","","","","","","chrono::format::Numeric","chrono::format::strftime","","","","","","","","","","","","","","","chrono::naivechrono::offset","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","chrono::offset::LocalResult","","","chrono::prelude","","","","","","","","","","","","","",""],"d":["Automatically select one of <code>Secs</code>, <code>Millis</code>, <code>Micros</code>, or <code>Nanos</code> …","ISO 8601 calendar date with time zone.","ISO 8601 combined date and time with time zone.","The common set of methods for date component.","ISO 8601 time duration with nanosecond precision. This …","","Friday.","","","","The maximum possible <code>Date</code>.","The minimum possible <code>Date</code>.","Use fixed 6 subsecond digits. This corresponds to …","Use fixed 3 subsecond digits. This corresponds to …","Monday.","","","","Use fixed 9 subsecond digits. This corresponds to …","","","","An error resulting from reading <code>Weekday</code> value with <code>FromStr</code>.","Saturday.","Specific formatting options for seconds. This may be …","Format whole seconds only, with no decimal point nor …","Extension trait for subsecond rounding or truncation to a …","Sunday.","Thursday.","","The common set of methods for time component.","Tuesday.","","Wednesday.","The day of week.","","","","","Makes a new <code>DateTime</code> from the current date, hour, minute …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute …","Makes a new <code>DateTime</code> from the current date and given …","","","","","","","","","","","","","Add two durations, returning <code>None</code> if overflow occurred.","Adds given <code>Duration</code> to the current date.","Adds given <code>Duration</code> to the current date and time.","Subtract two durations, returning <code>None</code> if overflow …","Subtracts given <code>Duration</code> from the current date.","Subtracts given <code>Duration</code> from the current date and time.","","","","","","","","","","","","","","","","Retrieves a date component.","Returns the day of month starting from 1.","","","Returns the day of month starting from 0.","","","Makes a new <code>Duration</code> with given number of days. Equivalent …","","","","","","","","","","","","","","","","","Formatting (and parsing) utilities for date and time.","Formats the date with the specified format string. See the …","Formats the combined date and time with the specified …","Formats the date with the specified formatting items.","Formats the combined date and time with the specified …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Creates a <code>time::Duration</code> object from <code>std::time::Duration</code>","","","","","","Makes a new <code>Date</code> with given <em>UTC</em> date and offset. The local …","Makes a new <code>DateTime</code> with given <em>UTC</em> datetime and offset. …","","","","","Returns the hour number from 0 to 23.","","Returns the hour number from 1 to 12 with a boolean flag, …","Makes a new <code>Duration</code> with given number of hours. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the duration equals <code>Duration::zero()</code>.","Returns the ISO week.","","","The maximum possible <code>Duration</code>: <code>i64::MAX</code> milliseconds.","Makes a new <code>Duration</code> with given number of microseconds.","Makes a new <code>Duration</code> with given number of milliseconds.","The minimum possible <code>Duration</code>: <code>i64::MIN</code> milliseconds.","Returns the minute number from 0 to 59.","","Makes a new <code>Duration</code> with given number of minutes. …","Returns the month number starting from 1.","","","Returns the month number starting from 0.","","","","Date and time types which do not concern about the …","Returns a view to the naive local date.","Returns a view to the naive local datetime.","Returns a view to the naive UTC date.","Returns a view to the naive UTC datetime.","Returns the number of nanoseconds since the whole non-leap …","","Makes a new <code>Duration</code> with given number of nanoseconds.","","","","Returns the total number of whole days in the duration.","Returns the number of days since January 1, Year 1 (aka …","Returns a day-of-week number starting from Monday = 0.","Returns a day-of-week number starting from Sunday = 0.","Returns the total number of whole hours in the duration.","Returns the total number of whole microseconds in the …","Returns the total number of whole milliseconds in the …","Returns the total number of whole minutes in the duration.","Returns the total number of whole nanoseconds in the …","Returns the total number of whole seconds in the duration.","Returns the number of non-leap seconds past the last …","Returns the total number of whole weeks in the duration.","Returns a day-of-week number starting from Monday = 1. …","Returns a day-of-week number starting from Sunday = 1.","The time zone, which calculates offsets from the local …","Retrieves an associated offset from UTC.","Retrieves an associated offset from UTC.","Returns the day of year starting from 1.","","","Returns the day of year starting from 0.","","","Parses an RFC 2822 date and time string such as …","Parses an RFC 3339 and ISO 8601 date and time string such …","Parses a string with the specified format string and …","","","","Makes a new <code>Date</code> for the prior date.","The previous day in the week.","Makes a new <code>Date</code> for the prior date.","A convenience module appropriate for glob imports (…","Return a copy rounded to the specified number of subsecond …","Returns the second number from 0 to 59.","","Makes a new <code>Duration</code> with given number of seconds. Panics …","Subtracts another <code>Date</code> from the current date. Returns a …","Subtracts another <code>DateTime</code> from the current date and time. …","Runs a closure, returning the duration of time it took to …","","","","","","","Makes a new <code>Date</code> for the next date.","The next day in the week.","Makes a new <code>Date</code> for the next date.","Retrieves a time component. Unlike <code>date</code>, this is not …","Returns the number of non-leap seconds since January 1, …","Returns the number of non-leap-milliseconds since January …","Returns the number of non-leap-nanoseconds since January …","Returns the number of microseconds since the last second …","Returns the number of milliseconds since the last second …","Returns the number of nanoseconds since the last second …","Retrieves an associated time zone.","Retrieves an associated time zone.","","","","","","","Returns an RFC 2822 date and time string such as …","Returns an RFC 3339 and ISO 8601 date and time string such …","Return an RFC 3339 and ISO 8601 date and time string with …","Creates a <code>std::time::Duration</code> object from <code>time::Duration</code>","","","","Return a copy truncated to the specified number of …","","","","","","","","","","","","","","","","","","","Returns the day of week.","","","Makes a new <code>Duration</code> with given number of weeks. …","Makes a new value with the day of month (starting from 1) …","","","Makes a new value with the day of month (starting from 0) …","","","Makes a new value with the hour number changed.","","Makes a new value with the minute number changed.","","Makes a new value with the month number (starting from 1) …","","","Makes a new value with the month number (starting from 0) …","","","Makes a new value with nanoseconds since the whole …","","Makes a new value with the day of year (starting from 1) …","","","Makes a new value with the day of year (starting from 0) …","","","Makes a new value with the second number changed.","","Changes the associated time zone. This does not change the …","Changes the associated time zone. This does not change the …","Makes a new value with the year number changed.","","","Returns the year number in the calendar date.","","","Returns the absolute year number starting from 1 with a …","A duration where the stored seconds and nanoseconds are …","Day of the month (FW=PW=2).","A <em>temporary</em> object which can be used as an argument to …","Issues a formatting error. Used to signal an invalid …","Fixed-format item types.","Fixed-format item.","Hour number in the 24-hour clocks (FW=PW=2).","Hour number in the 12-hour clocks (FW=PW=2).","Internal uses only.","Internal uses only.","An opaque type representing fixed-format item types for …","An opaque type representing numeric item types for …","Week number in the ISO week date (FW=PW=2).","Year in the ISO week date (FW=4, PW=∞). May accept years …","Year in the ISO week date, divided by 100 (FW=PW=2). …","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be …","A single formatting item. This is used for both formatting …","A literally printed and parsed text.","Full month names.","Full day of the week names.","AM/PM.","The number of minutes since the last whole hour (FW=PW=2).","Month (FW=PW=2).","The number of nanoseconds since the last whole second …","An optional dot plus one or more digits for left-aligned …","Same to <code>Nanosecond</code> but the accuracy is fixed to 3.","Same to <code>Nanosecond</code> but the accuracy is fixed to 6.","Same to <code>Nanosecond</code> but the accuracy is fixed to 9.","No padding.","Day of the week, where Sunday = 0 and Saturday = 6 …","Numeric item types. They have associated formatting width …","Numeric item. Can be optionally padded to the maximal …","Day of the year (FW=PW=3).","Same to <code>Literal</code> but with the string owned by the item.","Same to <code>Space</code> but with the string owned by the item.","Padding characters for numeric items.","An error from the <code>parse</code> function.","Same to <code>Result&lt;T, ParseError&gt;</code>.","Parsed parts of date and time. There are two classes of …","RFC 2822 date and time syntax. Commonly used for email and …","RFC 3339 &amp; ISO 8601 date and time syntax.","The number of seconds since the last whole minute …","Abbreviated month names.","Abbreviated day of the week names.","Space padding.","Whitespace. Prints literally but reads zero or more …","","The number of non-leap seconds since the midnight UTC on …","Timezone name.","Same to <code>TimezoneOffsetColon</code> but prints no colon. Parsing …","Offset from the local time to UTC (<code>+09:00</code> or <code>-04:00</code> or …","Offset from the local time to UTC (<code>+09:00</code> or <code>-04:00</code> or <code>Z</code>).","Same to <code>TimezoneOffsetColonZ</code> but prints no colon. Parsing …","AM/PM.","Week number, where the week 1 starts at the first Monday …","Week number, where the week 1 starts at the first Sunday …","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).","Full Gregorian year (FW=4, PW=∞). May accept years …","Gregorian year divided by 100 (century number; FW=PW=2). …","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.","Zero (<code>0</code>) padding.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Day of the month (1–28, 1–29, 1–30 or 1–31 …","","","","","","","","","","","","","","","","","","","","","","Tries to format given arguments with given formatting …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Hour number divided by 12 (0–1). 0 indicates AM and 1 …","Hour number modulo 12 (0–11).","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","ISO week number (1–52 or 1–53 depending on the year).","Year in the ISO week date.","Year in the ISO week date, divided by 100. Implies that …","Year in the ISO week date, modulo 100. Implies that the …","Minute number (0–59).","Month (1–12).","The number of nanoseconds since the whole second (0–…","","","","","","","Returns the initial value of parsed parts.","Makes a new <code>DelayedFormat</code> value out of local date and time.","Makes a new <code>DelayedFormat</code> value out of local date and time …","Offset from the local time to UTC, in seconds.","Day of the year (1–365 or 1–366 depending on the year).","Tries to parse given string into <code>parsed</code> with given …","Second number (0–60, accounting for leap seconds).","Tries to set the <code>hour_div_12</code> field from given value. (<code>false</code>…","Tries to set the <code>day</code> field from given value.","Tries to set both <code>hour_div_12</code> and <code>hour_mod_12</code> fields from …","Tries to set the <code>hour_mod_12</code> field from given hour number …","Tries to set the <code>isoweek</code> field from given value.","Tries to set the <code>isoyear</code> field from given value.","Tries to set the <code>isoyear_div_100</code> field from given value.","Tries to set the <code>isoyear_mod_100</code> field from given value.","Tries to set the <code>minute</code> field from given value.","Tries to set the <code>month</code> field from given value.","Tries to set the <code>nanosecond</code> field from given value.","Tries to set the <code>offset</code> field from given value.","Tries to set the <code>ordinal</code> field from given value.","Tries to set the <code>second</code> field from given value.","Tries to set the <code>timestamp</code> field from given value.","Tries to set the <code>week_from_mon</code> field from given value.","Tries to set the <code>week_from_sun</code> field from given value.","Tries to set the <code>weekday</code> field from given value.","Tries to set the <code>year</code> field from given value.","Tries to set the <code>year_div_100</code> field from given value.","Tries to set the <code>year_mod_100</code> field from given value.","<code>strftime</code>/<code>strptime</code>-inspired date and time formatting syntax.","The number of non-leap seconds since the midnight UTC on …","Returns a parsed timezone-aware date and time out of given …","Returns a parsed timezone-aware date and time out of given …","Returns a parsed fixed time zone offset out of given …","Returns a parsed naive date out of given fields.","Returns a parsed naive date and time out of given fields, …","Returns a parsed naive time out of given fields.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Week number, where the week 1 starts at the first Monday …","Week number, where the week 1 starts at the first Sunday …","Day of the week.","Year.","Year divided by 100. Implies that the year is &gt;= 1 BCE …","Year modulo 100. Implies that the year is &gt;= 1 BCE when …","","","","","","","","","","Parsing iterator for <code>strftime</code>-like format strings.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Creates a new parsing iterator from the <code>strftime</code>-like …","","","","","","ISO 8601 week.","The maximum possible <code>NaiveDate</code> (December 31, 262143 CE).","The minimum possible <code>NaiveDate</code> (January 1, 262145 BCE).","ISO 8601 calendar date without timezone. Allows for every …","ISO 8601 combined date and time without timezone.","ISO 8601 time without timezone. Allows for the nanosecond …","","","","","","","","","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date, hour, …","Makes a new <code>NaiveDateTime</code> from the current date and given …","","","","","","","","","Adds the <code>days</code> part of given <code>Duration</code> to the current date.","Adds given <code>Duration</code> to the current date and time.","Subtracts the <code>days</code> part of given <code>Duration</code> from the current …","Subtracts given <code>Duration</code> from the current date and time.","","","","","","","","","","","","","Retrieves a date component.","Returns the day of month starting from 1.","Returns the day of month starting from 1.","Returns the day of month starting from 0.","Returns the day of month starting from 0.","","","","","","","","","","","","Formats the date with the specified format string. See the …","Formats the time with the specified format string. See the …","Formats the combined date and time with the specified …","Formats the date with the specified formatting items. …","Formats the time with the specified formatting items. …","Formats the combined date and time with the specified …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Makes a new <code>NaiveTime</code> from hour, minute and second.","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute, second and …","Makes a new <code>NaiveTime</code> from hour, minute and second.","Makes a new <code>NaiveDate</code> from the ISO week date (year, week …","Makes a new <code>NaiveDate</code> from the ISO week date (year, week …","Makes a new <code>NaiveDate</code> from the number of days since …","Makes a new <code>NaiveDate</code> from the number of days since …","Makes a new <code>NaiveTime</code> from the number of seconds since …","Makes a new <code>NaiveTime</code> from the number of seconds since …","","","","Makes a new <code>NaiveDateTime</code> corresponding to a UTC date and …","Makes a new <code>NaiveDateTime</code> corresponding to a UTC date and …","Makes a new <code>NaiveDate</code> from the calendar date (year, month …","Makes a new <code>NaiveDate</code> from the calendar date (year, month …","Makes a new <code>NaiveDate</code> from the ordinal date (year and day …","Makes a new <code>NaiveDate</code> from the ordinal date (year and day …","","","","Returns the hour number from 0 to 23.","Returns the hour number from 0 to 23.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the minute number from 0 to 59.","Returns the minute number from 0 to 59.","Returns the month number starting from 1.","Returns the month number starting from 1.","Returns the month number starting from 0.","Returns the month number starting from 0.","Returns the number of nanoseconds since the whole non-leap …","Returns the number of nanoseconds since the whole non-leap …","","","","","Makes a new <code>NaiveDateTime</code> from date and time components. …","Returns the number of non-leap seconds past the last …","Returns the day of year starting from 1.","Returns the day of year starting from 1.","Returns the day of year starting from 0.","Returns the day of year starting from 0.","Adds given <code>Duration</code> to the current time, and also returns …","Subtracts given <code>Duration</code> from the current time, and also …","Parses a string with the specified format string and …","Parses a string with the specified format string and …","Parses a string with the specified format string and …","","","","","Makes a new <code>NaiveDate</code> for the previous calendar date.","Makes a new <code>NaiveDate</code> for the previous calendar date.","Returns the second number from 0 to 59.","Returns the second number from 0 to 59.","Subtracts another <code>NaiveDate</code> from the current date. Returns …","Subtracts another <code>NaiveTime</code> from the current time. Returns …","Subtracts another <code>NaiveDateTime</code> from the current date and …","","","","","","","","","","","","Makes a new <code>NaiveDate</code> for the next calendar date.","Makes a new <code>NaiveDate</code> for the next calendar date.","Retrieves a time component.","Returns the number of non-leap seconds since the midnight …","Returns the number of non-leap <em>milliseconds</em> since midnight …","Returns the number of non-leap <em>nanoseconds</em> since midnight …","Returns the number of microseconds since the last whole …","Returns the number of milliseconds since the last whole …","Returns the number of nanoseconds since the last whole …","","","","","","","","","","","","","","","","","","","","Returns the ISO week number starting from 1.","Returns the ISO week number starting from 0.","Returns the day of week.","Returns the day of week.","Makes a new <code>NaiveDate</code> with the day of month (starting from …","Makes a new <code>NaiveDateTime</code> with the day of month (starting …","Makes a new <code>NaiveDate</code> with the day of month (starting from …","Makes a new <code>NaiveDateTime</code> with the day of month (starting …","Makes a new <code>NaiveTime</code> with the hour number changed.","Makes a new <code>NaiveDateTime</code> with the hour number changed.","Makes a new <code>NaiveTime</code> with the minute number changed.","Makes a new <code>NaiveDateTime</code> with the minute number changed.","Makes a new <code>NaiveDate</code> with the month number (starting from …","Makes a new <code>NaiveDateTime</code> with the month number (starting …","Makes a new <code>NaiveDate</code> with the month number (starting from …","Makes a new <code>NaiveDateTime</code> with the month number (starting …","Makes a new <code>NaiveTime</code> with nanoseconds since the whole …","Makes a new <code>NaiveDateTime</code> with nanoseconds since the whole …","Makes a new <code>NaiveDate</code> with the day of year (starting from …","Makes a new <code>NaiveDateTime</code> with the day of year (starting …","Makes a new <code>NaiveDate</code> with the day of year (starting from …","Makes a new <code>NaiveDateTime</code> with the day of year (starting …","Makes a new <code>NaiveTime</code> with the second number changed.","Makes a new <code>NaiveDateTime</code> with the second number changed.","Makes a new <code>NaiveDate</code> with the year number changed.","Makes a new <code>NaiveDateTime</code> with the year number changed.","Returns the year number in the calendar date.","Returns the year number for this ISO week.","Returns the year number in the calendar date.","Given local time representation has multiple results and …","The time zone with fixed offset, from UTC-23:59:59 to …","The local timescale. This is implemented via the standard …","The conversion result from the local time to the …","Given local time representation is invalid. This can occur …","The offset from the local time to UTC.","An associated offset type. This type is used to store the …","Given local time representation has a single unique result.","The time zone.","The UTC time zone. This is the most efficient time zone …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute, …","Makes a new <code>DateTime</code> from the current date, hour, minute …","Makes a new <code>DateTime</code> from the current date and given …","","","","","","","","","","","","","","","","","Parses a string with the specified format string and …","Returns <code>Some</code> for the earliest possible conversion result, …","Makes a new <code>FixedOffset</code> for the Eastern Hemisphere with …","Makes a new <code>FixedOffset</code> for the Eastern Hemisphere with …","","","","Returns the fixed offset from UTC to the local time stored.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts the local <code>NaiveDate</code> to the timezone-aware <code>Date</code> if …","","Converts the local <code>NaiveDateTime</code> to the timezone-aware …","","Reconstructs the time zone from the offset.","","","","Converts the UTC <code>NaiveDate</code> to the local time. The UTC is …","","Converts the UTC <code>NaiveDateTime</code> to the local time. The UTC …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Makes a new <code>Date</code> from ISO week date (year and week …","Makes a new <code>Date</code> from ISO week date (year and week …","Returns <code>Some</code> for the latest possible conversion result, or …","Returns the number of seconds to add to convert from UTC …","Maps a <code>LocalResult&lt;T&gt;</code> into <code>LocalResult&lt;U&gt;</code> with given …","","","Returns a <code>DateTime</code> which corresponds to the current date.","Returns a <code>DateTime</code> which corresponds to the current date.","Creates the offset(s) for given local <code>NaiveDate</code> if …","","","","Creates the offset(s) for given local <code>NaiveDateTime</code> if …","","","","Creates the offset for given UTC <code>NaiveDate</code>. This cannot …","","","","Creates the offset for given UTC <code>NaiveDateTime</code>. This …","","","","Returns <code>Some</code> only when the conversion result is unique, or …","Makes a new <code>DateTime</code> from the number of non-leap seconds …","Makes a new <code>DateTime</code> from the number of non-leap …","Makes a new <code>DateTime</code> from the number of non-leap …","Makes a new <code>DateTime</code> from the number of non-leap seconds …","","","","","","","Returns a <code>Date</code> which corresponds to the current date.","Returns a <code>Date</code> which corresponds to the current date.","","","","","","","","","","","","","Returns the single unique conversion result, or panics …","Returns the number of seconds to add to convert from the …","Makes a new <code>FixedOffset</code> for the Western Hemisphere with …","Makes a new <code>FixedOffset</code> for the Western Hemisphere with …","Makes a new <code>Date</code> from year, month, day and the current …","Makes a new <code>Date</code> from year, month, day and the current …","Makes a new <code>Date</code> from year, day of year (DOY or “ordinal…","Makes a new <code>Date</code> from year, day of year (DOY or “ordinal…","","","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,0,0,2,0,0,0,0,0,1,1,2,0,0,0,1,0,0,0,0,2,0,1,0,2,2,0,0,2,0,2,0,3,4,5,5,4,4,4,4,4,4,4,4,4,3,4,1,5,2,6,3,4,1,5,2,6,3,4,5,3,4,5,3,4,1,5,2,6,3,4,1,5,2,6,3,4,5,5,7,4,5,7,4,5,3,3,3,4,1,5,2,6,3,3,4,4,1,5,5,2,6,0,4,5,4,5,3,4,1,5,5,5,2,6,2,3,5,5,5,2,2,4,5,3,4,5,2,8,5,8,3,3,4,1,5,2,6,3,7,4,5,3,3,3,3,8,5,3,7,4,5,7,4,5,3,0,4,5,4,5,8,5,3,3,6,3,3,7,2,2,3,3,3,3,3,3,8,3,2,2,0,4,5,7,4,5,7,4,5,5,5,5,3,4,5,4,2,4,0,9,8,5,3,4,5,3,3,4,4,5,5,5,4,2,4,5,5,5,5,5,5,5,4,5,3,4,1,5,2,6,5,5,5,3,3,4,5,9,3,4,1,5,2,6,3,4,1,5,2,6,3,4,1,5,2,6,7,4,5,3,7,4,5,7,4,5,8,5,8,5,7,4,5,7,4,5,8,5,7,4,5,7,4,5,8,5,4,5,7,4,5,7,4,5,7,3,10,0,11,0,11,10,10,10,12,0,0,10,10,10,10,0,11,12,12,12,10,10,10,12,12,12,12,13,10,0,11,10,11,11,0,0,0,0,12,12,10,12,12,13,11,0,10,12,12,12,12,12,12,10,10,10,10,10,10,13,14,13,10,12,15,11,16,17,18,14,13,10,12,15,11,16,17,18,14,13,10,12,15,11,16,17,14,13,10,12,15,11,16,17,17,17,16,14,13,10,12,15,11,16,17,14,13,10,12,15,11,16,16,17,18,18,0,14,13,10,12,15,11,16,17,18,17,17,14,13,10,12,15,11,16,17,18,17,17,17,17,17,17,17,10,12,15,11,16,17,17,18,18,17,17,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,17,17,17,17,17,17,17,14,13,10,12,15,11,16,17,16,18,14,13,10,12,15,11,16,17,18,14,13,10,12,15,11,16,17,18,14,13,10,12,15,11,16,17,18,17,17,17,17,17,17,19,20,21,22,23,24,25,24,26,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,0,0,0,0,0,0,28,29,29,30,30,28,29,30,28,28,28,28,28,28,28,28,28,28,31,29,30,28,31,29,30,28,30,28,30,28,31,29,30,28,31,29,30,28,31,29,30,30,28,30,28,30,28,31,29,30,28,28,31,29,29,30,30,28,29,30,28,29,30,28,31,29,30,29,29,29,29,29,29,29,29,28,28,28,28,29,29,28,29,30,30,30,28,28,28,28,28,29,30,29,30,28,31,29,30,28,30,29,30,28,30,28,30,29,30,28,31,29,30,30,29,28,30,28,30,29,29,28,29,30,28,31,29,30,28,28,29,30,28,29,30,28,28,29,29,29,30,30,30,28,29,30,28,28,30,30,30,30,30,30,30,28,31,29,30,28,29,30,28,31,29,30,28,31,29,30,28,31,29,30,31,31,28,30,28,30,28,30,29,30,29,30,28,30,28,30,29,30,28,30,28,30,29,30,28,30,28,31,30,32,0,0,0,32,0,33,32,0,0,32,32,32,32,32,32,34,35,36,32,34,35,36,32,34,35,36,32,34,35,36,33,32,35,35,32,34,35,37,34,35,32,34,34,35,35,36,32,34,35,36,33,36,33,36,33,34,35,36,33,36,33,36,35,32,34,35,36,33,33,32,35,32,32,35,34,36,33,34,35,36,33,34,35,36,33,34,35,36,33,34,35,36,32,33,33,33,33,32,34,35,36,34,35,34,36,32,34,35,36,32,34,35,36,32,34,35,36,32,35,35,35,33,33,33,33,38,39,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["duration",3],["duration",3]],["duration",3]],[[["date",3,[["timezone",8]]],["oldduration",3]],["date",3,[["timezone",8]]]],[[["datetime",3,[["timezone",8]]],["oldduration",3]],["datetime",3,[["timezone",8]]]],[[["datetime",3,[["timezone",8]]],["fixedoffset",3]],["datetime",3,[["timezone",8]]]],[[["date",3,[["timezone",8]]],["u32",0],["u32",0],["u32",0]],["datetime",3,[["timezone",8]]]],[[["date",3,[["timezone",8]]],["u32",0],["u32",0],["u32",0],["u32",0]],["datetime",3,[["timezone",8]]]],[[["date",3,[["timezone",8]]],["u32",0],["u32",0],["u32",0],["u32",0]],["option",4,[["datetime",3,[["timezone",8]]]]]],[[["date",3,[["timezone",8]]],["u32",0],["u32",0],["u32",0],["u32",0]],["datetime",3,[["timezone",8]]]],[[["date",3,[["timezone",8]]],["u32",0],["u32",0],["u32",0],["u32",0]],["option",4,[["datetime",3,[["timezone",8]]]]]],[[["date",3,[["timezone",8]]],["u32",0],["u32",0],["u32",0],["u32",0]],["datetime",3,[["timezone",8]]]],[[["date",3,[["timezone",8]]],["u32",0],["u32",0],["u32",0],["u32",0]],["option",4,[["datetime",3,[["timezone",8]]]]]],[[["date",3,[["timezone",8]]],["u32",0],["u32",0],["u32",0]],["option",4,[["datetime",3,[["timezone",8]]]]]],[[["date",3,[["timezone",8]]],["naivetime",3]],["option",4,[["datetime",3,[["timezone",8]]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["duration",3],["duration",3]],["option",4,[["duration",3]]]],[[["date",3,[["timezone",8]]],["oldduration",3]],["option",4,[["date",3,[["timezone",8]]]]]],[[["datetime",3,[["timezone",8]]],["oldduration",3]],["option",4,[["datetime",3,[["timezone",8]]]]]],[[["duration",3],["duration",3]],["option",4,[["duration",3]]]],[[["date",3,[["timezone",8]]],["oldduration",3]],["option",4,[["date",3,[["timezone",8]]]]]],[[["datetime",3,[["timezone",8]]],["oldduration",3]],["option",4,[["datetime",3,[["timezone",8]]]]]],[[["duration",3]],["duration",3]],[[["date",3,[["",26,[["clone",8],["timezone",8]]]]]],["date",3,[["",26,[["clone",8],["timezone",8]]]]]],[[["secondsformat",4]],["secondsformat",4]],[[["datetime",3,[["",26,[["clone",8],["timezone",8]]]]]],["datetime",3,[["",26,[["clone",8],["timezone",8]]]]]],[[["weekday",4]],["weekday",4]],[[["parseweekdayerror",3]],["parseweekdayerror",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["duration",3],["duration",3]],["ordering",4]],[[["date",3,[["timezone",8]]],["date",3]],["ordering",4]],[[["datetime",3,[["timezone",8]]],["datetime",3]],["ordering",4]],[[["datetime",3,[["timezone",8]]]],["date",3,[["timezone",8]]]],[[["",0]],["u32",0]],[[["date",3,[["timezone",8]]]],["u32",0]],[[["datetime",3,[["timezone",8]]]],["u32",0]],[[["",0]],["u32",0]],[[["date",3,[["timezone",8]]]],["u32",0]],[[["datetime",3,[["timezone",8]]]],["u32",0]],[[["i64",0]],["duration",3]],[[["duration",3],["i32",0]],["duration",3]],[[["duration",3],["duration",3]],["bool",0]],[[["date",3,[["timezone",8]]],["date",3]],["bool",0]],[[["secondsformat",4],["secondsformat",4]],["bool",0]],[[["datetime",3,[["timezone",8]]],["datetime",3]],["bool",0]],[[["weekday",4],["weekday",4]],["bool",0]],[[["parseweekdayerror",3],["parseweekdayerror",3]],["bool",0]],[[["duration",3],["formatter",3]],["result",4,[["error",3]]]],[[["duration",3],["formatter",3]],["result",4,[["error",3]]]],[[["date",3,[["timezone",8]]],["formatter",3]],["result",6]],[[["date",3,[["timezone",8]]],["formatter",3]],["result",6]],[[["secondsformat",4],["formatter",3]],["result",6]],[[["datetime",3,[["timezone",8]]],["formatter",3]],["result",6]],[[["datetime",3,[["timezone",8]]],["formatter",3]],["result",6]],[[["weekday",4],["formatter",3]],["result",6]],[[["parseweekdayerror",3],["formatter",3]],["result",6]],null,[[["date",3,[["timezone",8]]],["str",0]],["delayedformat",3,[["strftimeitems",3]]]],[[["datetime",3,[["timezone",8]]],["str",0]],["delayedformat",3,[["strftimeitems",3]]]],[[["date",3,[["timezone",8]]]],["delayedformat",3]],[[["datetime",3,[["timezone",8]]]],["delayedformat",3]],[[]],[[]],[[]],[[["systemtime",3]],["datetime",3,[["local",3]]]],[[["systemtime",3]],["datetime",3,[["utc",3]]]],[[]],[[]],[[]],[[["i64",0]],["option",4,[["weekday",4]]]],[[["duration",3]],["result",4,[["duration",3],["outofrangeerror",3]]]],[[["str",0]],["parseresult",6,[["datetime",3,[["utc",3]]]]]],[[["str",0]],["parseresult",6,[["datetime",3,[["local",3]]]]]],[[["str",0]],["parseresult",6,[["datetime",3,[["fixedoffset",3]]]]]],[[["str",0]],["result",4,[["weekday",4]]]],[[["u64",0]],["option",4,[["weekday",4]]]],[[["naivedate",3]],["date",3,[["timezone",8]]]],[[["naivedatetime",3]],["datetime",3,[["timezone",8]]]],[[["duration",3],["",0]]],[[["date",3,[["timezone",8]]],["",0]]],[[["datetime",3,[["timezone",8]]],["",0]]],[[["weekday",4],["",0]]],[[["",0]],["u32",0]],[[["datetime",3,[["timezone",8]]]],["u32",0]],[[["",0]]],[[["i64",0]],["duration",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["duration",3]],["bool",0]],[[["",0]],["isoweek",3]],[[["date",3,[["timezone",8]]]],["isoweek",3]],[[["datetime",3,[["timezone",8]]]],["isoweek",3]],[[],["duration",3]],[[["i64",0]],["duration",3]],[[["i64",0]],["duration",3]],[[],["duration",3]],[[["",0]],["u32",0]],[[["datetime",3,[["timezone",8]]]],["u32",0]],[[["i64",0]],["duration",3]],[[["",0]],["u32",0]],[[["date",3,[["timezone",8]]]],["u32",0]],[[["datetime",3,[["timezone",8]]]],["u32",0]],[[["",0]],["u32",0]],[[["date",3,[["timezone",8]]]],["u32",0]],[[["datetime",3,[["timezone",8]]]],["u32",0]],[[["duration",3],["i32",0]],["duration",3]],null,[[["date",3,[["timezone",8]]]],["naivedate",3]],[[["datetime",3,[["timezone",8]]]],["naivedatetime",3]],[[["date",3,[["timezone",8]]]],["naivedate",3]],[[["datetime",3,[["timezone",8]]]],["naivedatetime",3]],[[["",0]],["u32",0]],[[["datetime",3,[["timezone",8]]]],["u32",0]],[[["i64",0]],["duration",3]],[[["duration",3],["duration",3]],["bool",0]],[[["parseweekdayerror",3],["parseweekdayerror",3]],["bool",0]],[[["duration",3]],["duration",3]],[[["duration",3]],["i64",0]],[[["",0]],["i32",0]],[[["weekday",4]],["u32",0]],[[["weekday",4]],["u32",0]],[[["duration",3]],["i64",0]],[[["duration",3]],["option",4,[["i64",0]]]],[[["duration",3]],["i64",0]],[[["duration",3]],["i64",0]],[[["duration",3]],["option",4,[["i64",0]]]],[[["duration",3]],["i64",0]],[[["",0]],["u32",0]],[[["duration",3]],["i64",0]],[[["weekday",4]],["u32",0]],[[["weekday",4]],["u32",0]],null,[[["date",3,[["timezone",8]]]]],[[["datetime",3,[["timezone",8]]]]],[[["",0]],["u32",0]],[[["date",3,[["timezone",8]]]],["u32",0]],[[["datetime",3,[["timezone",8]]]],["u32",0]],[[["",0]],["u32",0]],[[["date",3,[["timezone",8]]]],["u32",0]],[[["datetime",3,[["timezone",8]]]],["u32",0]],[[["str",0]],["parseresult",6,[["datetime",3,[["fixedoffset",3]]]]]],[[["str",0]],["parseresult",6,[["datetime",3,[["fixedoffset",3]]]]]],[[["str",0],["str",0]],["parseresult",6,[["datetime",3,[["fixedoffset",3]]]]]],[[["duration",3],["duration",3]],["option",4,[["ordering",4]]]],[[["date",3,[["timezone",8]]],["date",3]],["option",4,[["ordering",4]]]],[[["datetime",3,[["timezone",8]]],["datetime",3]],["option",4,[["ordering",4]]]],[[["date",3,[["timezone",8]]]],["date",3,[["timezone",8]]]],[[["weekday",4]],["weekday",4]],[[["date",3,[["timezone",8]]]],["option",4,[["date",3,[["timezone",8]]]]]],null,[[["u16",0]]],[[["",0]],["u32",0]],[[["datetime",3,[["timezone",8]]]],["u32",0]],[[["i64",0]],["duration",3]],[[["date",3,[["timezone",8]]],["date",3,[["timezone",8]]]],["oldduration",3]],[[["datetime",3,[["timezone",8]]],["datetime",3,[["timezone",8]]]],["oldduration",3]],[[],["duration",3]],[[["duration",3],["duration",3]],["duration",3]],[[["date",3,[["timezone",8]]],["date",3,[["timezone",8]]]],["oldduration",3]],[[["date",3,[["timezone",8]]],["oldduration",3]],["date",3,[["timezone",8]]]],[[["datetime",3,[["timezone",8]]],["fixedoffset",3]],["datetime",3,[["timezone",8]]]],[[["datetime",3,[["timezone",8]]],["datetime",3,[["timezone",8]]]],["oldduration",3]],[[["datetime",3,[["timezone",8]]],["oldduration",3]],["datetime",3,[["timezone",8]]]],[[["date",3,[["timezone",8]]]],["date",3,[["timezone",8]]]],[[["weekday",4]],["weekday",4]],[[["date",3,[["timezone",8]]]],["option",4,[["date",3,[["timezone",8]]]]]],[[["datetime",3,[["timezone",8]]]],["naivetime",3]],[[["datetime",3,[["timezone",8]]]],["i64",0]],[[["datetime",3,[["timezone",8]]]],["i64",0]],[[["datetime",3,[["timezone",8]]]],["i64",0]],[[["datetime",3,[["timezone",8]]]],["u32",0]],[[["datetime",3,[["timezone",8]]]],["u32",0]],[[["datetime",3,[["timezone",8]]]],["u32",0]],[[["date",3,[["timezone",8]]]],["timezone",8]],[[["datetime",3,[["timezone",8]]]],["timezone",8]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["datetime",3,[["timezone",8]]]],["string",3]],[[["datetime",3,[["timezone",8]]]],["string",3]],[[["datetime",3,[["timezone",8]]],["secondsformat",4],["bool",0]],["string",3]],[[["duration",3]],["result",4,[["duration",3],["outofrangeerror",3]]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["u16",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["weekday",4]],[[["date",3,[["timezone",8]]]],["weekday",4]],[[["datetime",3,[["timezone",8]]]],["weekday",4]],[[["i64",0]],["duration",3]],[[["",0],["u32",0]],["option",4]],[[["date",3,[["timezone",8]]],["u32",0]],["option",4,[["date",3,[["timezone",8]]]]]],[[["datetime",3,[["timezone",8]]],["u32",0]],["option",4,[["datetime",3,[["timezone",8]]]]]],[[["",0],["u32",0]],["option",4]],[[["date",3,[["timezone",8]]],["u32",0]],["option",4,[["date",3,[["timezone",8]]]]]],[[["datetime",3,[["timezone",8]]],["u32",0]],["option",4,[["datetime",3,[["timezone",8]]]]]],[[["",0],["u32",0]],["option",4]],[[["datetime",3,[["timezone",8]]],["u32",0]],["option",4,[["datetime",3,[["timezone",8]]]]]],[[["",0],["u32",0]],["option",4]],[[["datetime",3,[["timezone",8]]],["u32",0]],["option",4,[["datetime",3,[["timezone",8]]]]]],[[["",0],["u32",0]],["option",4]],[[["date",3,[["timezone",8]]],["u32",0]],["option",4,[["date",3,[["timezone",8]]]]]],[[["datetime",3,[["timezone",8]]],["u32",0]],["option",4,[["datetime",3,[["timezone",8]]]]]],[[["",0],["u32",0]],["option",4]],[[["date",3,[["timezone",8]]],["u32",0]],["option",4,[["date",3,[["timezone",8]]]]]],[[["datetime",3,[["timezone",8]]],["u32",0]],["option",4,[["datetime",3,[["timezone",8]]]]]],[[["",0],["u32",0]],["option",4]],[[["datetime",3,[["timezone",8]]],["u32",0]],["option",4,[["datetime",3,[["timezone",8]]]]]],[[["",0],["u32",0]],["option",4]],[[["date",3,[["timezone",8]]],["u32",0]],["option",4,[["date",3,[["timezone",8]]]]]],[[["datetime",3,[["timezone",8]]],["u32",0]],["option",4,[["datetime",3,[["timezone",8]]]]]],[[["",0],["u32",0]],["option",4]],[[["date",3,[["timezone",8]]],["u32",0]],["option",4,[["date",3,[["timezone",8]]]]]],[[["datetime",3,[["timezone",8]]],["u32",0]],["option",4,[["datetime",3,[["timezone",8]]]]]],[[["",0],["u32",0]],["option",4]],[[["datetime",3,[["timezone",8]]],["u32",0]],["option",4,[["datetime",3,[["timezone",8]]]]]],[[["date",3,[["timezone",8]]],["",0]],["date",3,[["timezone",8]]]],[[["datetime",3,[["timezone",8]]],["",0]],["datetime",3,[["timezone",8]]]],[[["",0],["i32",0]],["option",4]],[[["date",3,[["timezone",8]]],["i32",0]],["option",4,[["date",3,[["timezone",8]]]]]],[[["datetime",3,[["timezone",8]]],["i32",0]],["option",4,[["datetime",3,[["timezone",8]]]]]],[[["",0]],["i32",0]],[[["date",3,[["timezone",8]]]],["i32",0]],[[["datetime",3,[["timezone",8]]]],["i32",0]],[[["",0]]],[[],["duration",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["internalnumeric",3]],["internalnumeric",3]],[[["pad",4]],["pad",4]],[[["numeric",4]],["numeric",4]],[[["fixed",4]],["fixed",4]],[[["internalfixed",3]],["internalfixed",3]],[[["item",4]],["item",4]],[[["parseerror",3]],["parseerror",3]],[[["parsed",3]],["parsed",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[],["parsed",3]],[[["parseerror",3]],["str",0]],[[["internalnumeric",3],["internalnumeric",3]],["bool",0]],[[["pad",4],["pad",4]],["bool",0]],[[["numeric",4],["numeric",4]],["bool",0]],[[["fixed",4],["fixed",4]],["bool",0]],[[["internalfixed",3],["internalfixed",3]],["bool",0]],[[["item",4],["item",4]],["bool",0]],[[["parseerror",3],["parseerror",3]],["bool",0]],[[["parsed",3],["parsed",3]],["bool",0]],[[["internalnumeric",3],["formatter",3]],["result",6]],[[["pad",4],["formatter",3]],["result",6]],[[["numeric",4],["formatter",3]],["result",6]],[[["fixed",4],["formatter",3]],["result",6]],[[["internalfixed",3],["formatter",3]],["result",6]],[[["item",4],["formatter",3]],["result",6]],[[["parseerror",3],["formatter",3]],["result",6]],[[["parseerror",3],["formatter",3]],["result",6]],[[["parsed",3],["formatter",3]],["result",6]],[[["delayedformat",3,[["",26,[["iterator",8],["clone",8]]]]],["formatter",3]],["result",6]],[[["delayedformat",3,[["debug",8]]],["formatter",3]],["result",6]],[[["formatter",3],["option",4,[["naivedate",3]]],["option",4,[["naivetime",3]]],["option",4]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[["numeric",4],["numeric",4]],["bool",0]],[[["fixed",4],["fixed",4]],["bool",0]],[[["internalfixed",3],["internalfixed",3]],["bool",0]],[[["item",4],["item",4]],["bool",0]],[[["parseerror",3],["parseerror",3]],["bool",0]],[[["parsed",3],["parsed",3]],["bool",0]],[[],["parsed",3]],[[["option",4,[["naivedate",3]]],["option",4,[["naivetime",3]]],["",26,[["iterator",8],["clone",8]]]],["delayedformat",3,[["",26,[["iterator",8],["clone",8]]]]]],[[["option",4,[["naivedate",3]]],["option",4,[["naivetime",3]]],["",0],["",26,[["iterator",8],["clone",8]]]],["delayedformat",3,[["",26,[["iterator",8],["clone",8]]]]]],null,null,[[["parsed",3],["str",0]],["parseresult",6]],null,[[["parsed",3],["bool",0]],["parseresult",6]],[[["parsed",3],["i64",0]],["parseresult",6]],[[["parsed",3],["i64",0]],["parseresult",6]],[[["parsed",3],["i64",0]],["parseresult",6]],[[["parsed",3],["i64",0]],["parseresult",6]],[[["parsed",3],["i64",0]],["parseresult",6]],[[["parsed",3],["i64",0]],["parseresult",6]],[[["parsed",3],["i64",0]],["parseresult",6]],[[["parsed",3],["i64",0]],["parseresult",6]],[[["parsed",3],["i64",0]],["parseresult",6]],[[["parsed",3],["i64",0]],["parseresult",6]],[[["parsed",3],["i64",0]],["parseresult",6]],[[["parsed",3],["i64",0]],["parseresult",6]],[[["parsed",3],["i64",0]],["parseresult",6]],[[["parsed",3],["i64",0]],["parseresult",6]],[[["parsed",3],["i64",0]],["parseresult",6]],[[["parsed",3],["i64",0]],["parseresult",6]],[[["parsed",3],["weekday",4]],["parseresult",6]],[[["parsed",3],["i64",0]],["parseresult",6]],[[["parsed",3],["i64",0]],["parseresult",6]],[[["parsed",3],["i64",0]],["parseresult",6]],null,null,[[["parsed",3]],["parseresult",6,[["datetime",3,[["fixedoffset",3]]]]]],[[["parsed",3],["",0]],["parseresult",6,[["datetime",3,[["timezone",8]]]]]],[[["parsed",3]],["parseresult",6,[["fixedoffset",3]]]],[[["parsed",3]],["parseresult",6,[["naivedate",3]]]],[[["parsed",3],["i32",0]],["parseresult",6,[["naivedatetime",3]]]],[[["parsed",3]],["parseresult",6,[["naivetime",3]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["strftimeitems",3]],["strftimeitems",3]],[[["",0],["",0]]],[[["strftimeitems",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["str",0]],["strftimeitems",3]],[[["strftimeitems",3]],["option",4,[["item",4]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["naivedate",3],["oldduration",3]],["naivedate",3]],[[["naivetime",3],["oldduration",3]],["naivetime",3]],[[["naivetime",3],["fixedoffset",3]],["naivetime",3]],[[["naivedatetime",3],["oldduration",3]],["naivedatetime",3]],[[["naivedatetime",3],["fixedoffset",3]],["naivedatetime",3]],[[["naivedate",3],["oldduration",3]]],[[["naivetime",3],["oldduration",3]]],[[["naivedatetime",3],["oldduration",3]]],[[["naivedate",3],["u32",0],["u32",0],["u32",0]],["naivedatetime",3]],[[["naivedate",3],["u32",0],["u32",0],["u32",0],["u32",0]],["naivedatetime",3]],[[["naivedate",3],["u32",0],["u32",0],["u32",0],["u32",0]],["option",4,[["naivedatetime",3]]]],[[["naivedate",3],["u32",0],["u32",0],["u32",0],["u32",0]],["naivedatetime",3]],[[["naivedate",3],["u32",0],["u32",0],["u32",0],["u32",0]],["option",4,[["naivedatetime",3]]]],[[["naivedate",3],["u32",0],["u32",0],["u32",0],["u32",0]],["naivedatetime",3]],[[["naivedate",3],["u32",0],["u32",0],["u32",0],["u32",0]],["option",4,[["naivedatetime",3]]]],[[["naivedate",3],["u32",0],["u32",0],["u32",0]],["option",4,[["naivedatetime",3]]]],[[["naivedate",3],["naivetime",3]],["naivedatetime",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["naivedate",3],["oldduration",3]],["option",4,[["naivedate",3]]]],[[["naivedatetime",3],["oldduration",3]],["option",4,[["naivedatetime",3]]]],[[["naivedate",3],["oldduration",3]],["option",4,[["naivedate",3]]]],[[["naivedatetime",3],["oldduration",3]],["option",4,[["naivedatetime",3]]]],[[["naivedate",3]],["naivedate",3]],[[["isoweek",3]],["isoweek",3]],[[["naivetime",3]],["naivetime",3]],[[["naivedatetime",3]],["naivedatetime",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["naivedate",3],["naivedate",3]],["ordering",4]],[[["isoweek",3],["isoweek",3]],["ordering",4]],[[["naivetime",3],["naivetime",3]],["ordering",4]],[[["naivedatetime",3],["naivedatetime",3]],["ordering",4]],[[["naivedatetime",3]],["naivedate",3]],[[["naivedate",3]],["u32",0]],[[["naivedatetime",3]],["u32",0]],[[["naivedate",3]],["u32",0]],[[["naivedatetime",3]],["u32",0]],[[["naivedate",3],["naivedate",3]],["bool",0]],[[["isoweek",3],["isoweek",3]],["bool",0]],[[["naivetime",3],["naivetime",3]],["bool",0]],[[["naivedatetime",3],["naivedatetime",3]],["bool",0]],[[["naivedate",3],["formatter",3]],["result",6]],[[["naivedate",3],["formatter",3]],["result",6]],[[["isoweek",3],["formatter",3]],["result",6]],[[["naivetime",3],["formatter",3]],["result",6]],[[["naivetime",3],["formatter",3]],["result",6]],[[["naivedatetime",3],["formatter",3]],["result",6]],[[["naivedatetime",3],["formatter",3]],["result",6]],[[["naivedate",3],["str",0]],["delayedformat",3,[["strftimeitems",3]]]],[[["naivetime",3],["str",0]],["delayedformat",3,[["strftimeitems",3]]]],[[["naivedatetime",3],["str",0]],["delayedformat",3,[["strftimeitems",3]]]],[[["naivedate",3]],["delayedformat",3]],[[["naivetime",3]],["delayedformat",3]],[[["naivedatetime",3]],["delayedformat",3]],[[]],[[]],[[]],[[]],[[["u32",0],["u32",0],["u32",0]],["naivetime",3]],[[["u32",0],["u32",0],["u32",0],["u32",0]],["naivetime",3]],[[["u32",0],["u32",0],["u32",0],["u32",0]],["option",4,[["naivetime",3]]]],[[["u32",0],["u32",0],["u32",0],["u32",0]],["naivetime",3]],[[["u32",0],["u32",0],["u32",0],["u32",0]],["option",4,[["naivetime",3]]]],[[["u32",0],["u32",0],["u32",0],["u32",0]],["naivetime",3]],[[["u32",0],["u32",0],["u32",0],["u32",0]],["option",4,[["naivetime",3]]]],[[["u32",0],["u32",0],["u32",0]],["option",4,[["naivetime",3]]]],[[["i32",0],["u32",0],["weekday",4]],["naivedate",3]],[[["i32",0],["u32",0],["weekday",4]],["option",4,[["naivedate",3]]]],[[["i32",0]],["naivedate",3]],[[["i32",0]],["option",4,[["naivedate",3]]]],[[["u32",0],["u32",0]],["naivetime",3]],[[["u32",0],["u32",0]],["option",4,[["naivetime",3]]]],[[["str",0]],["parseresult",6,[["naivedate",3]]]],[[["str",0]],["parseresult",6,[["naivetime",3]]]],[[["str",0]],["parseresult",6,[["naivedatetime",3]]]],[[["i64",0],["u32",0]],["naivedatetime",3]],[[["i64",0],["u32",0]],["option",4,[["naivedatetime",3]]]],[[["i32",0],["u32",0],["u32",0]],["naivedate",3]],[[["i32",0],["u32",0],["u32",0]],["option",4,[["naivedate",3]]]],[[["i32",0],["u32",0]],["naivedate",3]],[[["i32",0],["u32",0]],["option",4,[["naivedate",3]]]],[[["naivedate",3],["",0]]],[[["naivetime",3],["",0]]],[[["naivedatetime",3],["",0]]],[[["naivetime",3]],["u32",0]],[[["naivedatetime",3]],["u32",0]],[[]],[[]],[[]],[[]],[[["naivedate",3]],["isoweek",3]],[[["naivedatetime",3]],["isoweek",3]],[[["naivetime",3]],["u32",0]],[[["naivedatetime",3]],["u32",0]],[[["naivedate",3]],["u32",0]],[[["naivedatetime",3]],["u32",0]],[[["naivedate",3]],["u32",0]],[[["naivedatetime",3]],["u32",0]],[[["naivetime",3]],["u32",0]],[[["naivedatetime",3]],["u32",0]],[[["naivedate",3],["naivedate",3]],["bool",0]],[[["isoweek",3],["isoweek",3]],["bool",0]],[[["naivetime",3],["naivetime",3]],["bool",0]],[[["naivedatetime",3],["naivedatetime",3]],["bool",0]],[[["naivedate",3],["naivetime",3]],["naivedatetime",3]],[[["naivetime",3]],["u32",0]],[[["naivedate",3]],["u32",0]],[[["naivedatetime",3]],["u32",0]],[[["naivedate",3]],["u32",0]],[[["naivedatetime",3]],["u32",0]],[[["naivetime",3],["oldduration",3]]],[[["naivetime",3],["oldduration",3]]],[[["str",0],["str",0]],["parseresult",6,[["naivedate",3]]]],[[["str",0],["str",0]],["parseresult",6,[["naivetime",3]]]],[[["str",0],["str",0]],["parseresult",6,[["naivedatetime",3]]]],[[["naivedate",3],["naivedate",3]],["option",4,[["ordering",4]]]],[[["isoweek",3],["isoweek",3]],["option",4,[["ordering",4]]]],[[["naivetime",3],["naivetime",3]],["option",4,[["ordering",4]]]],[[["naivedatetime",3],["naivedatetime",3]],["option",4,[["ordering",4]]]],[[["naivedate",3]],["naivedate",3]],[[["naivedate",3]],["option",4,[["naivedate",3]]]],[[["naivetime",3]],["u32",0]],[[["naivedatetime",3]],["u32",0]],[[["naivedate",3],["naivedate",3]],["oldduration",3]],[[["naivetime",3],["naivetime",3]],["oldduration",3]],[[["naivedatetime",3],["naivedatetime",3]],["oldduration",3]],[[["naivedate",3],["oldduration",3]],["naivedate",3]],[[["naivedate",3],["naivedate",3]],["oldduration",3]],[[["naivetime",3],["fixedoffset",3]],["naivetime",3]],[[["naivetime",3],["naivetime",3]],["oldduration",3]],[[["naivetime",3],["oldduration",3]],["naivetime",3]],[[["naivedatetime",3],["fixedoffset",3]],["naivedatetime",3]],[[["naivedatetime",3],["oldduration",3]],["naivedatetime",3]],[[["naivedatetime",3],["naivedatetime",3]],["oldduration",3]],[[["naivedate",3],["oldduration",3]]],[[["naivetime",3],["oldduration",3]]],[[["naivedatetime",3],["oldduration",3]]],[[["naivedate",3]],["naivedate",3]],[[["naivedate",3]],["option",4,[["naivedate",3]]]],[[["naivedatetime",3]],["naivetime",3]],[[["naivedatetime",3]],["i64",0]],[[["naivedatetime",3]],["i64",0]],[[["naivedatetime",3]],["i64",0]],[[["naivedatetime",3]],["u32",0]],[[["naivedatetime",3]],["u32",0]],[[["naivedatetime",3]],["u32",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["isoweek",3]],["u32",0]],[[["isoweek",3]],["u32",0]],[[["naivedate",3]],["weekday",4]],[[["naivedatetime",3]],["weekday",4]],[[["naivedate",3],["u32",0]],["option",4,[["naivedate",3]]]],[[["naivedatetime",3],["u32",0]],["option",4,[["naivedatetime",3]]]],[[["naivedate",3],["u32",0]],["option",4,[["naivedate",3]]]],[[["naivedatetime",3],["u32",0]],["option",4,[["naivedatetime",3]]]],[[["naivetime",3],["u32",0]],["option",4,[["naivetime",3]]]],[[["naivedatetime",3],["u32",0]],["option",4,[["naivedatetime",3]]]],[[["naivetime",3],["u32",0]],["option",4,[["naivetime",3]]]],[[["naivedatetime",3],["u32",0]],["option",4,[["naivedatetime",3]]]],[[["naivedate",3],["u32",0]],["option",4,[["naivedate",3]]]],[[["naivedatetime",3],["u32",0]],["option",4,[["naivedatetime",3]]]],[[["naivedate",3],["u32",0]],["option",4,[["naivedate",3]]]],[[["naivedatetime",3],["u32",0]],["option",4,[["naivedatetime",3]]]],[[["naivetime",3],["u32",0]],["option",4,[["naivetime",3]]]],[[["naivedatetime",3],["u32",0]],["option",4,[["naivedatetime",3]]]],[[["naivedate",3],["u32",0]],["option",4,[["naivedate",3]]]],[[["naivedatetime",3],["u32",0]],["option",4,[["naivedatetime",3]]]],[[["naivedate",3],["u32",0]],["option",4,[["naivedate",3]]]],[[["naivedatetime",3],["u32",0]],["option",4,[["naivedatetime",3]]]],[[["naivetime",3],["u32",0]],["option",4,[["naivetime",3]]]],[[["naivedatetime",3],["u32",0]],["option",4,[["naivedatetime",3]]]],[[["naivedate",3],["i32",0]],["option",4,[["naivedate",3]]]],[[["naivedatetime",3],["i32",0]],["option",4,[["naivedatetime",3]]]],[[["naivedate",3]],["i32",0]],[[["isoweek",3]],["i32",0]],[[["naivedatetime",3]],["i32",0]],null,null,null,null,null,null,null,null,null,null,[[["localresult",4,[["date",3,[["timezone",8]]]]],["u32",0],["u32",0],["u32",0],["u32",0]],["localresult",4,[["datetime",3,[["timezone",8]]]]]],[[["localresult",4,[["date",3,[["timezone",8]]]]],["u32",0],["u32",0],["u32",0],["u32",0]],["localresult",4,[["datetime",3,[["timezone",8]]]]]],[[["localresult",4,[["date",3,[["timezone",8]]]]],["u32",0],["u32",0],["u32",0],["u32",0]],["localresult",4,[["datetime",3,[["timezone",8]]]]]],[[["localresult",4,[["date",3,[["timezone",8]]]]],["u32",0],["u32",0],["u32",0]],["localresult",4,[["datetime",3,[["timezone",8]]]]]],[[["localresult",4,[["date",3,[["timezone",8]]]]],["naivetime",3]],["localresult",4,[["datetime",3,[["timezone",8]]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["localresult",4,[["clone",8]]]],["localresult",4,[["clone",8]]]],[[["utc",3]],["utc",3]],[[["fixedoffset",3]],["fixedoffset",3]],[[["local",3]],["local",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["str",0],["str",0]],["parseresult",6,[["datetime",3]]]],[[["localresult",4]],["option",4]],[[["i32",0]],["fixedoffset",3]],[[["i32",0]],["option",4,[["fixedoffset",3]]]],[[["localresult",4,[["partialeq",8]]],["localresult",4]],["bool",0]],[[["utc",3],["utc",3]],["bool",0]],[[["fixedoffset",3],["fixedoffset",3]],["bool",0]],[[["",0]],["fixedoffset",3]],[[["utc",3]],["fixedoffset",3]],[[["fixedoffset",3]],["fixedoffset",3]],[[["localresult",4,[["debug",8]]],["formatter",3]],["result",6]],[[["utc",3],["formatter",3]],["result",6]],[[["utc",3],["formatter",3]],["result",6]],[[["fixedoffset",3],["formatter",3]],["result",6]],[[["fixedoffset",3],["formatter",3]],["result",6]],[[["local",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["",0],["naivedate",3]],["localresult",4,[["date",3]]]],[[["local",3],["naivedate",3]],["localresult",4,[["date",3,[["local",3]]]]]],[[["",0],["naivedatetime",3]],["localresult",4,[["datetime",3]]]],[[["local",3],["naivedatetime",3]],["localresult",4,[["datetime",3,[["local",3]]]]]],[[]],[[["utc",3]],["utc",3]],[[["fixedoffset",3]],["fixedoffset",3]],[[["fixedoffset",3]],["local",3]],[[["",0],["naivedate",3]],["date",3]],[[["local",3],["naivedate",3]],["date",3,[["local",3]]]],[[["",0],["naivedatetime",3]],["datetime",3]],[[["local",3],["naivedatetime",3]],["datetime",3,[["local",3]]]],[[["fixedoffset",3],["",0]]],[[]],[[]],[[]],[[]],[[["",0],["i32",0],["u32",0],["weekday",4]],["date",3]],[[["",0],["i32",0],["u32",0],["weekday",4]],["localresult",4,[["date",3]]]],[[["localresult",4]],["option",4]],[[["fixedoffset",3]],["i32",0]],[[["localresult",4],["fnmut",8]],["localresult",4]],[[["localresult",4,[["partialeq",8]]],["localresult",4]],["bool",0]],[[["fixedoffset",3],["fixedoffset",3]],["bool",0]],[[],["datetime",3,[["utc",3]]]],[[],["datetime",3,[["local",3]]]],[[["",0],["naivedate",3]],["localresult",4]],[[["utc",3],["naivedate",3]],["localresult",4,[["utc",3]]]],[[["fixedoffset",3],["naivedate",3]],["localresult",4,[["fixedoffset",3]]]],[[["local",3],["naivedate",3]],["localresult",4,[["fixedoffset",3]]]],[[["",0],["naivedatetime",3]],["localresult",4]],[[["utc",3],["naivedatetime",3]],["localresult",4,[["utc",3]]]],[[["fixedoffset",3],["naivedatetime",3]],["localresult",4,[["fixedoffset",3]]]],[[["local",3],["naivedatetime",3]],["localresult",4,[["fixedoffset",3]]]],[[["",0],["naivedate",3]]],[[["utc",3],["naivedate",3]],["utc",3]],[[["fixedoffset",3],["naivedate",3]],["fixedoffset",3]],[[["local",3],["naivedate",3]],["fixedoffset",3]],[[["",0],["naivedatetime",3]]],[[["utc",3],["naivedatetime",3]],["utc",3]],[[["fixedoffset",3],["naivedatetime",3]],["fixedoffset",3]],[[["local",3],["naivedatetime",3]],["fixedoffset",3]],[[["localresult",4]],["option",4]],[[["",0],["i64",0],["u32",0]],["datetime",3]],[[["",0],["i64",0]],["datetime",3]],[[["",0],["i64",0]],["localresult",4,[["datetime",3]]]],[[["",0],["i64",0],["u32",0]],["localresult",4,[["datetime",3]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["date",3,[["utc",3]]]],[[],["date",3,[["local",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["localresult",4,[["debug",8]]]],["debug",8]],[[["fixedoffset",3]],["i32",0]],[[["i32",0]],["fixedoffset",3]],[[["i32",0]],["option",4,[["fixedoffset",3]]]],[[["",0],["i32",0],["u32",0],["u32",0]],["date",3]],[[["",0],["i32",0],["u32",0],["u32",0]],["localresult",4,[["date",3]]]],[[["",0],["i32",0],["u32",0]],["date",3]],[[["",0],["i32",0],["u32",0]],["localresult",4,[["date",3]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[4,"SecondsFormat"],[4,"Weekday"],[3,"Duration"],[3,"Date"],[3,"DateTime"],[3,"ParseWeekdayError"],[8,"Datelike"],[8,"Timelike"],[8,"SubsecRound"],[4,"Numeric"],[4,"Item"],[4,"Fixed"],[4,"Pad"],[3,"InternalNumeric"],[3,"InternalFixed"],[3,"ParseError"],[3,"Parsed"],[3,"DelayedFormat"],[13,"Internal"],[13,"Literal"],[13,"OwnedLiteral"],[13,"Space"],[13,"OwnedSpace"],[13,"Numeric"],[13,"Fixed"],[13,"Internal"],[3,"StrftimeItems"],[3,"NaiveDate"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"IsoWeek"],[4,"LocalResult"],[8,"TimeZone"],[3,"Utc"],[3,"FixedOffset"],[3,"Local"],[8,"Offset"],[13,"Single"],[13,"Ambiguous"]]},\
"crossbeam_deque":{"doc":"Concurrent work-stealing deques.","t":[13,3,13,4,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["Empty","Injector","Retry","Steal","Stealer","Success","Worker","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","drop","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_iter","into","into","into","into","is_empty","is_empty","is_empty","is_empty","is_retry","is_success","ne","new","new_fifo","new_lifo","or_else","pop","push","push","steal","steal","steal_batch","steal_batch","steal_batch_and_pop","steal_batch_and_pop","stealer","success","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0"],"q":["crossbeam_deque","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam_deque::Steal"],"d":["The queue was empty at the time of stealing.","An injector queue.","The steal operation needs to be retried.","Possible outcomes of a steal operation.","A stealer handle of a worker queue.","At least one task was successfully stolen.","A worker queue.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Consumes items until a <code>Success</code> is found and returns it.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue was empty at the time of …","Returns <code>true</code> if the steal operation needs to be retried.","Returns <code>true</code> if at least one task was stolen.","","Creates a new injector queue.","Creates a FIFO worker queue.","Creates a LIFO worker queue.","If no task was stolen, attempts another steal operation.","Pops a task from the queue.","Pushes a task into the queue.","Pushes a task into the queue.","Steals a task from the queue.","Steals a task from the queue.","Steals a batch of tasks and pushes them into another …","Steals a batch of tasks and pushes them into a worker.","Steals a batch of tasks, pushes them into another worker, …","Steals a batch of tasks, pushes them into a worker, and …","Creates a stealer for this queue.","Returns the result of the operation, if successful.","","","","","","","","","","","","","","",""],"i":[1,0,1,0,0,1,0,2,3,4,1,2,3,4,1,3,1,3,1,4,1,2,3,4,1,2,3,4,1,1,2,3,4,1,2,3,4,1,1,1,1,4,2,2,1,2,2,4,3,4,3,4,3,4,2,1,3,1,2,3,4,1,2,3,4,1,2,3,4,1,5],"f":[null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["stealer",3]],["stealer",3]],[[["steal",4,[["clone",8]]]],["steal",4,[["clone",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["injector",3]]],[[["steal",4,[["partialeq",8]]],["steal",4]],["bool",0]],[[["worker",3],["formatter",3]],["result",6]],[[["stealer",3],["formatter",3]],["result",6]],[[["injector",3],["formatter",3]],["result",6]],[[["steal",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["steal",4]],[[]],[[]],[[]],[[]],[[["worker",3]],["bool",0]],[[["stealer",3]],["bool",0]],[[["injector",3]],["bool",0]],[[["steal",4]],["bool",0]],[[["steal",4]],["bool",0]],[[["steal",4]],["bool",0]],[[["steal",4,[["partialeq",8]]],["steal",4]],["bool",0]],[[],["injector",3]],[[],["worker",3]],[[],["worker",3]],[[["steal",4]],["steal",4]],[[["worker",3]],["option",4]],[[["worker",3]]],[[["injector",3]]],[[["stealer",3]],["steal",4]],[[["injector",3]],["steal",4]],[[["stealer",3],["worker",3]],["steal",4]],[[["injector",3],["worker",3]],["steal",4]],[[["stealer",3],["worker",3]],["steal",4]],[[["injector",3],["worker",3]],["steal",4]],[[["worker",3]],["stealer",3]],[[["steal",4]],["option",4]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null],"p":[[4,"Steal"],[3,"Worker"],[3,"Stealer"],[3,"Injector"],[13,"Success"]]},\
"crossbeam_epoch":{"doc":"Epoch-based memory reclamation.","t":[3,3,3,8,3,3,3,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,5,11,11,11,11,11,11,12,11,11,11,5,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11],"n":["Atomic","Collector","CompareAndSetError","CompareAndSetOrdering","Guard","LocalHandle","Owned","Pointer","Shared","as_mut","as_raw","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","collector","collector","compare_and_set","compare_and_set_weak","current","default","default","default_collector","defer","defer_destroy","defer_unchecked","deref","deref","deref_mut","deref_mut","drop","drop","drop","eq","eq","failure","fetch_and","fetch_or","fetch_xor","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw","from_usize","from_usize","from_usize","into","into","into","into","into","into","into","into_box","into_owned","into_shared","into_usize","into_usize","into_usize","is_null","is_pinned","is_pinned","load","load_consume","new","new","new","new","null","null","partial_cmp","pin","pin","register","repin","repin_after","store","success","swap","tag","tag","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unprotected","with_tag","with_tag"],"q":["crossbeam_epoch","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An atomic pointer that can be safely shared between …","An epoch-based garbage collector.","The error returned on failed compare-and-set operation.","Memory orderings for compare-and-set operations.","A guard that keeps the current thread pinned.","A handle to a garbage collector.","An owned heap-allocated object.","A trait for either <code>Owned</code> or <code>Shared</code> pointers.","A pointer to an object protected by the epoch GC.","","Converts the pointer to a raw pointer (without the tag).","","Converts the pointer to a reference.","","","","","","","","","","","","","","","","","Returns a copy of the atomic value.","","","Creates another reference to the same garbage collector.","","","","","","Returns the <code>Collector</code> associated with this handle.","Returns the <code>Collector</code> associated with this guard.","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","Stores the pointer <code>new</code> (either <code>Shared</code> or <code>Owned</code>) into the …","The value in the atomic pointer at the time of the failed …","","","Returns the default global collector.","Stores a function so that it can be executed at some point …","Stores a destructor for an object so that it can be …","Stores a function so that it can be executed at some point …","","Dereferences the pointer.","","Dereferences the pointer.","","","","","Checks if both handles point to the same collector.","The ordering of the operation when it fails.","Bitwise “and” with the current tag.","Bitwise “or” with the current tag.","Bitwise “xor” with the current tag.","Clears up the thread-local cache of deferred functions by …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a new atomic pointer pointing to <code>owned</code>.","","","Returns a new atomic pointer pointing to <code>ptr</code>.","Returns a new atomic pointer pointing to <code>raw</code>.","","Returns the argument unchanged.","","Returns a new owned pointer pointing to <code>b</code>.","Returns a new pointer pointing to <code>raw</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a new owned pointer pointing to <code>raw</code>.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","Returns a new pointer pointing to the tagged pointer <code>data</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the owned pointer into a <code>Box</code>.","Takes ownership of the pointee.","Converts the owned pointer into a <code>Shared</code>.","Returns the machine representation of the pointer.","","","Returns <code>true</code> if the pointer is null.","Returns <code>true</code> if the current thread is pinned.","Returns <code>true</code> if the handle is pinned.","Loads a <code>Shared</code> from the atomic pointer.","Loads a <code>Shared</code> from the atomic pointer using a “consume…","Allocates <code>value</code> on the heap and returns a new atomic …","Allocates <code>value</code> on the heap and returns a new owned …","Creates a new collector.","The new value, which the operation failed to store.","Returns a new null atomic pointer.","Returns a new null pointer.","","Pins the current thread.","Pins the handle.","Registers a new handle for the collector.","Unpins and then immediately re-pins the thread.","Temporarily unpins the thread, executes the given function …","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer.","The ordering of the operation when it succeeds.","Stores a <code>Shared</code> or <code>Owned</code> pointer into the atomic pointer, …","Returns the tag stored within the pointer.","Returns the tag stored within the pointer.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a reference to a dummy guard that allows …","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …","Returns the same pointer, but tagged with <code>tag</code>. <code>tag</code> is …"],"i":[0,0,0,0,0,0,0,0,0,1,2,1,2,3,4,1,1,2,5,6,7,3,4,1,1,2,5,6,7,4,1,2,5,4,1,2,5,2,6,7,4,4,3,4,2,0,7,7,7,1,2,1,2,1,6,7,2,5,8,4,4,4,7,3,4,4,1,2,2,5,6,7,3,4,4,4,4,4,4,4,1,1,1,1,2,2,5,6,7,1,9,1,2,3,4,1,2,5,6,7,1,2,1,9,1,2,2,0,6,4,4,4,1,5,3,4,2,2,0,6,5,7,7,4,8,4,1,2,4,1,2,5,3,4,1,2,5,6,7,3,4,1,2,5,6,7,3,4,1,2,5,6,7,0,1,2],"f":[null,null,null,null,null,null,null,null,null,[[["owned",3]],["",0]],[[["shared",3]],["",0]],[[["owned",3]],["",0]],[[["shared",3]],["option",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["owned",3]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["owned",3]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["atomic",3]],["atomic",3]],[[["owned",3,[["clone",8]]]],["owned",3,[["clone",8]]]],[[["shared",3]],["shared",3]],[[["collector",3]],["collector",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["shared",3],["shared",3]],["ordering",4]],[[["localhandle",3]],["collector",3]],[[["guard",3]],["option",4,[["collector",3]]]],[[["atomic",3],["shared",3],["guard",3]],["result",4,[["shared",3],["compareandseterror",3]]]],[[["atomic",3],["shared",3],["guard",3]],["result",4,[["shared",3],["compareandseterror",3]]]],null,[[],["atomic",3]],[[],["shared",3]],[[],["collector",3]],[[["guard",3]]],[[["guard",3],["shared",3]]],[[["guard",3]]],[[["owned",3]],["",0]],[[["shared",3]],["",0]],[[["owned",3]],["",0]],[[["shared",3]],["",0]],[[["owned",3]]],[[["localhandle",3]]],[[["guard",3]]],[[["shared",3],["shared",3]],["bool",0]],[[["collector",3],["collector",3]],["bool",0]],[[["",0]],["ordering",4]],[[["atomic",3],["usize",0],["ordering",4],["guard",3]],["shared",3]],[[["atomic",3],["usize",0],["ordering",4],["guard",3]],["shared",3]],[[["atomic",3],["usize",0],["ordering",4],["guard",3]],["shared",3]],[[["guard",3]]],[[["compareandseterror",3,[["",26,[["pointer",8],["debug",8]]]]],["formatter",3]],["result",6]],[[["atomic",3],["formatter",3]],["result",6]],[[["atomic",3],["formatter",3]],["result",6]],[[["owned",3],["formatter",3]],["result",6]],[[["shared",3],["formatter",3]],["result",6]],[[["shared",3],["formatter",3]],["result",6]],[[["collector",3],["formatter",3]],["result",6]],[[["localhandle",3],["formatter",3]],["result",6]],[[["guard",3],["formatter",3]],["result",6]],[[]],[[]],[[["never",0]]],[[["owned",3]],["atomic",3]],[[["box",3]],["atomic",3]],[[],["atomic",3]],[[["shared",3]],["atomic",3]],[[["",0]],["atomic",3]],[[],["owned",3]],[[]],[[["never",0]]],[[["box",3]],["owned",3]],[[["",0]],["shared",3]],[[]],[[]],[[]],[[]],[[["",0]],["owned",3]],[[["usize",0]]],[[["usize",0]],["owned",3]],[[["usize",0]],["shared",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["owned",3]],["box",3]],[[["shared",3]],["owned",3]],[[["owned",3],["guard",3]],["shared",3]],[[],["usize",0]],[[["owned",3]],["usize",0]],[[["shared",3]],["usize",0]],[[["shared",3]],["bool",0]],[[],["bool",0]],[[["localhandle",3]],["bool",0]],[[["atomic",3],["ordering",4],["guard",3]],["shared",3]],[[["atomic",3],["guard",3]],["shared",3]],[[],["atomic",3]],[[],["owned",3]],[[],["collector",3]],null,[[],["atomic",3]],[[],["shared",3]],[[["shared",3],["shared",3]],["option",4,[["ordering",4]]]],[[],["guard",3]],[[["localhandle",3]],["guard",3]],[[["collector",3]],["localhandle",3]],[[["guard",3]]],[[["guard",3]]],[[["atomic",3],["pointer",8],["ordering",4]]],[[["",0]],["ordering",4]],[[["atomic",3],["pointer",8],["ordering",4],["guard",3]],["shared",3]],[[["owned",3]],["usize",0]],[[["shared",3]],["usize",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["guard",3]],[[["owned",3],["usize",0]],["owned",3]],[[["shared",3],["usize",0]],["shared",3]]],"p":[[3,"Owned"],[3,"Shared"],[3,"CompareAndSetError"],[3,"Atomic"],[3,"Collector"],[3,"LocalHandle"],[3,"Guard"],[8,"CompareAndSetOrdering"],[8,"Pointer"]]},\
"crossbeam_queue":{"doc":"Concurrent queues.","t":[12,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","ArrayQueue","PopError","PushError","SegQueue","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clone","clone","clone_into","clone_into","default","description","description","drop","drop","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","is_empty","is_empty","is_full","len","len","ne","new","new","pop","pop","push","push","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["crossbeam_queue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A bounded multi-producer multi-consumer queue.","Error which occurs when popping from an empty queue.","Error which occurs when pushing into a full queue.","An unbounded multi-producer multi-consumer queue.","","","","","","","","","Returns the capacity of the queue.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is empty.","Returns <code>true</code> if the queue is full.","Returns the number of elements in the queue.","Returns the number of elements in the queue.","","Creates a new bounded queue with the given capacity.","Creates a new unbounded queue.","Attempts to pop an element from the queue.","Pops an element from the queue.","Attempts to push an element into the queue.","Pushes an element into the queue.","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,0,2,3,4,1,2,3,4,1,2,4,1,4,1,3,4,1,2,3,4,1,2,3,4,4,1,1,2,3,4,1,2,3,4,1,2,3,2,2,3,1,2,3,2,3,2,3,4,1,4,1,2,3,4,1,2,3,4,1,2,3,4,1],"f":[null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["arrayqueue",3]],["usize",0]],[[["poperror",3]],["poperror",3]],[[["pusherror",3,[["clone",8]]]],["pusherror",3,[["clone",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["segqueue",3]],[[["poperror",3]],["str",0]],[[["pusherror",3,[["send",8]]]],["str",0]],[[["arrayqueue",3]]],[[["segqueue",3]]],[[["poperror",3],["poperror",3]],["bool",0]],[[["pusherror",3,[["partialeq",8]]],["pusherror",3]],["bool",0]],[[["arrayqueue",3],["formatter",3]],["result",6]],[[["segqueue",3],["formatter",3]],["result",6]],[[["poperror",3],["formatter",3]],["result",6]],[[["poperror",3],["formatter",3]],["result",6]],[[["pusherror",3],["formatter",3]],["result",6]],[[["pusherror",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["arrayqueue",3]],["bool",0]],[[["segqueue",3]],["bool",0]],[[["arrayqueue",3]],["bool",0]],[[["arrayqueue",3]],["usize",0]],[[["segqueue",3]],["usize",0]],[[["pusherror",3,[["partialeq",8]]],["pusherror",3]],["bool",0]],[[["usize",0]],["arrayqueue",3]],[[],["segqueue",3]],[[["arrayqueue",3]],["result",4,[["poperror",3]]]],[[["segqueue",3]],["result",4,[["poperror",3]]]],[[["arrayqueue",3]],["result",4,[["pusherror",3]]]],[[["segqueue",3]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"PushError"],[3,"ArrayQueue"],[3,"SegQueue"],[3,"PopError"]]},\
"crossbeam_utils":{"doc":"Miscellaneous tools for concurrent programming.","t":[3,3,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,3,8,16,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Backoff","CachePadded","atomic","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","default","deref","deref_mut","eq","fmt","fmt","from","from","from","from","hash","into","into","into_inner","is_completed","ne","new","new","reset","snooze","spin","sync","thread","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","AtomicCell","AtomicConsume","Val","borrow","borrow_mut","compare_and_swap","compare_exchange","default","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_add","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_and","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_or","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_sub","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fetch_xor","fmt","from","get_mut","into","into_inner","is_lock_free","load","load_consume","new","store","swap","try_from","try_into","type_id","Parker","ShardedLock","ShardedLockReadGuard","ShardedLockWriteGuard","Unparker","WaitGroup","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","deref","deref_mut","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_mut","into","into","into","into","into","into","into_inner","is_poisoned","new","new","new","park","park_timeout","read","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_read","try_write","type_id","type_id","type_id","type_id","type_id","type_id","unpark","unparker","wait","write","Scope","ScopedJoinHandle","ScopedThreadBuilder","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","fmt","fmt","fmt","from","from","from","into","into","into","join","name","scope","spawn","spawn","stack_size","thread","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["crossbeam_utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam_utils::atomic","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam_utils::sync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","crossbeam_utils::thread","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Performs exponential backoff in spin loops.","Pads and aligns a value to the length of a cache line.","Atomic types.","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the value value.","Returns <code>true</code> if exponential backoff has completed and …","","Creates a new <code>Backoff</code>.","Pads and aligns a value to the length of a cache line.","Resets the <code>Backoff</code>.","Backs off in a blocking loop.","Backs off in a lock-free loop.","Thread synchronization primitives.","Threads that can borrow variables from the stack.","","","","","","","","A thread-safe mutable memory location.","Trait which allows reading from primitive atomic types …","Type returned by <code>load_consume</code>.","","","If the current value equals <code>current</code>, stores <code>new</code> into the …","If the current value equals <code>current</code>, stores <code>new</code> into the …","","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Increments the current value by <code>val</code> and returns the …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies logical “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “and” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies bitwise “or” to the current value and returns …","Applies logical “or” to the current value and returns …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Decrements the current value by <code>val</code> and returns the …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies logical “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","Applies bitwise “xor” to the current value and returns …","","Returns the argument unchanged.","Returns a mutable reference to the inner value.","Calls <code>U::from(self)</code>.","Unwraps the atomic cell and returns its inner value.","Returns <code>true</code> if operations on values of this type are …","Loads a value.","Loads a value from the atomic using a “consume” memory …","Creates a new atomic cell initialized with <code>val</code>.","Stores <code>val</code> into the atomic cell.","Stores <code>val</code> into the atomic cell and returns the previous …","","","","A thread parking primitive.","A sharded reader-writer lock.","A guard used to release the shared read access of a …","A guard used to release the exclusive write access of a …","Unparks a thread parked by the associated <code>Parker</code>.","Enables threads to synchronize the beginning or end of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this lock, returning the underlying data.","Returns <code>true</code> if the lock is poisoned.","Creates a new <code>Parker</code>.","Creates a new sharded reader-writer lock.","Creates a new wait group and returns the single reference …","Blocks the current thread until the token is made …","Blocks the current thread until the token is made …","Locks with shared read access, blocking the current thread …","","","","","","","","","","","","","","","","","Attempts to acquire this lock with shared read access.","Attempts to acquire this lock with exclusive write access.","","","","","","","Atomically makes the token available if it is not already.","Returns a reference to an associated <code>Unparker</code>.","Drops this reference and waits until all other references …","Locks with exclusive write access, blocking the current …","A scope for spawning threads.","A handle that can be used to join its scoped thread.","Configures the properties of a new thread.","","","","","","","Creates a builder that can configure a thread before …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Waits for the thread to finish and returns its result.","Sets the name for the new thread.","Creates a new scope for spawning threads.","Spawns a scoped thread.","Spawns a scoped thread with this configuration.","Sets the size of the stack for the new thread.","Returns a handle to the underlying thread.","","","","","","","","",""],"i":[0,0,0,1,2,1,2,2,2,1,2,2,2,2,1,2,1,2,2,2,2,1,2,2,1,2,1,2,1,1,1,0,0,2,1,2,1,2,1,2,0,0,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,4,4,4,4,4,4,0,0,0,0,0,0,5,6,7,8,9,10,5,6,7,8,9,10,6,10,6,10,7,8,9,9,9,10,5,6,7,8,8,9,9,10,5,6,7,7,7,8,9,10,7,5,6,7,8,9,10,7,7,5,7,10,5,5,7,6,10,8,9,5,6,7,8,9,10,5,6,7,8,9,10,7,7,5,6,7,8,9,10,6,5,10,7,0,0,0,11,12,13,11,12,13,11,11,12,13,11,12,13,11,12,13,12,13,0,11,13,13,12,11,12,13,11,12,13,11,12,13],"f":[null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["cachepadded",3,[["clone",8]]]],["cachepadded",3,[["clone",8]]]],[[["",0],["",0]]],[[],["backoff",3]],[[],["cachepadded",3,[["default",8]]]],[[["cachepadded",3]],["",0]],[[["cachepadded",3]],["",0]],[[["cachepadded",3,[["partialeq",8]]],["cachepadded",3]],["bool",0]],[[["backoff",3],["formatter",3]],["result",6]],[[["cachepadded",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[],["cachepadded",3]],[[["never",0]]],[[]],[[["cachepadded",3,[["hash",8]]],["",0]]],[[]],[[]],[[["cachepadded",3]]],[[["backoff",3]],["bool",0]],[[["cachepadded",3,[["partialeq",8]]],["cachepadded",3]],["bool",0]],[[],["backoff",3]],[[],["cachepadded",3]],[[["backoff",3]]],[[["backoff",3]]],[[["backoff",3]]],null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["atomiccell",3,[["",26,[["copy",8],["eq",8]]]]],["",26,[["copy",8],["eq",8]]],["",26,[["copy",8],["eq",8]]]],["",26,[["copy",8],["eq",8]]]],[[["atomiccell",3,[["",26,[["copy",8],["eq",8]]]]],["",26,[["copy",8],["eq",8]]],["",26,[["copy",8],["eq",8]]]],["result",4,[["",26,[["copy",8],["eq",8]]],["",26,[["copy",8],["eq",8]]]]]],[[],["atomiccell",3,[["default",8]]]],[[["atomiccell",3,[["isize",0]]],["isize",0]],["isize",0]],[[["atomiccell",3,[["u8",0]]],["u8",0]],["u8",0]],[[["atomiccell",3,[["i8",0]]],["i8",0]],["i8",0]],[[["atomiccell",3,[["u16",0]]],["u16",0]],["u16",0]],[[["atomiccell",3,[["i16",0]]],["i16",0]],["i16",0]],[[["atomiccell",3,[["u32",0]]],["u32",0]],["u32",0]],[[["atomiccell",3,[["i32",0]]],["i32",0]],["i32",0]],[[["atomiccell",3,[["u64",0]]],["u64",0]],["u64",0]],[[["atomiccell",3,[["i64",0]]],["i64",0]],["i64",0]],[[["atomiccell",3,[["u128",0]]],["u128",0]],["u128",0]],[[["atomiccell",3,[["i128",0]]],["i128",0]],["i128",0]],[[["atomiccell",3,[["usize",0]]],["usize",0]],["usize",0]],[[["atomiccell",3,[["u32",0]]],["u32",0]],["u32",0]],[[["atomiccell",3,[["u128",0]]],["u128",0]],["u128",0]],[[["atomiccell",3,[["u8",0]]],["u8",0]],["u8",0]],[[["atomiccell",3,[["u64",0]]],["u64",0]],["u64",0]],[[["atomiccell",3,[["bool",0]]],["bool",0]],["bool",0]],[[["atomiccell",3,[["i64",0]]],["i64",0]],["i64",0]],[[["atomiccell",3,[["i32",0]]],["i32",0]],["i32",0]],[[["atomiccell",3,[["isize",0]]],["isize",0]],["isize",0]],[[["atomiccell",3,[["i8",0]]],["i8",0]],["i8",0]],[[["atomiccell",3,[["i16",0]]],["i16",0]],["i16",0]],[[["atomiccell",3,[["i128",0]]],["i128",0]],["i128",0]],[[["atomiccell",3,[["usize",0]]],["usize",0]],["usize",0]],[[["atomiccell",3,[["u16",0]]],["u16",0]],["u16",0]],[[["atomiccell",3,[["u16",0]]],["u16",0]],["u16",0]],[[["atomiccell",3,[["i128",0]]],["i128",0]],["i128",0]],[[["atomiccell",3,[["usize",0]]],["usize",0]],["usize",0]],[[["atomiccell",3,[["i8",0]]],["i8",0]],["i8",0]],[[["atomiccell",3,[["i16",0]]],["i16",0]],["i16",0]],[[["atomiccell",3,[["u128",0]]],["u128",0]],["u128",0]],[[["atomiccell",3,[["u64",0]]],["u64",0]],["u64",0]],[[["atomiccell",3,[["u32",0]]],["u32",0]],["u32",0]],[[["atomiccell",3,[["isize",0]]],["isize",0]],["isize",0]],[[["atomiccell",3,[["i64",0]]],["i64",0]],["i64",0]],[[["atomiccell",3,[["u8",0]]],["u8",0]],["u8",0]],[[["atomiccell",3,[["i32",0]]],["i32",0]],["i32",0]],[[["atomiccell",3,[["bool",0]]],["bool",0]],["bool",0]],[[["atomiccell",3,[["u64",0]]],["u64",0]],["u64",0]],[[["atomiccell",3,[["u16",0]]],["u16",0]],["u16",0]],[[["atomiccell",3,[["u8",0]]],["u8",0]],["u8",0]],[[["atomiccell",3,[["isize",0]]],["isize",0]],["isize",0]],[[["atomiccell",3,[["i8",0]]],["i8",0]],["i8",0]],[[["atomiccell",3,[["i64",0]]],["i64",0]],["i64",0]],[[["atomiccell",3,[["i32",0]]],["i32",0]],["i32",0]],[[["atomiccell",3,[["usize",0]]],["usize",0]],["usize",0]],[[["atomiccell",3,[["i128",0]]],["i128",0]],["i128",0]],[[["atomiccell",3,[["u32",0]]],["u32",0]],["u32",0]],[[["atomiccell",3,[["i16",0]]],["i16",0]],["i16",0]],[[["atomiccell",3,[["u128",0]]],["u128",0]],["u128",0]],[[["atomiccell",3,[["u8",0]]],["u8",0]],["u8",0]],[[["atomiccell",3,[["i16",0]]],["i16",0]],["i16",0]],[[["atomiccell",3,[["u16",0]]],["u16",0]],["u16",0]],[[["atomiccell",3,[["i64",0]]],["i64",0]],["i64",0]],[[["atomiccell",3,[["i128",0]]],["i128",0]],["i128",0]],[[["atomiccell",3,[["bool",0]]],["bool",0]],["bool",0]],[[["atomiccell",3,[["i8",0]]],["i8",0]],["i8",0]],[[["atomiccell",3,[["u32",0]]],["u32",0]],["u32",0]],[[["atomiccell",3,[["usize",0]]],["usize",0]],["usize",0]],[[["atomiccell",3,[["u64",0]]],["u64",0]],["u64",0]],[[["atomiccell",3,[["u128",0]]],["u128",0]],["u128",0]],[[["atomiccell",3,[["i32",0]]],["i32",0]],["i32",0]],[[["atomiccell",3,[["isize",0]]],["isize",0]],["isize",0]],[[["atomiccell",3,[["",26,[["copy",8],["debug",8]]]]],["formatter",3]],["result",6]],[[]],[[["atomiccell",3]],["",0]],[[]],[[["atomiccell",3]]],[[],["bool",0]],[[["atomiccell",3,[["copy",8]]]],["copy",8]],[[["",0]]],[[],["atomiccell",3]],[[["atomiccell",3]]],[[["atomiccell",3]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["unparker",3]],["unparker",3]],[[["waitgroup",3]],["waitgroup",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["shardedlock",3,[["default",8]]]],[[["shardedlockreadguard",3,[["sized",8]]]],["",0]],[[["shardedlockwriteguard",3,[["sized",8]]]],["",0]],[[["shardedlockwriteguard",3,[["sized",8]]]],["",0]],[[["shardedlockwriteguard",3,[["sized",8]]]]],[[["waitgroup",3]]],[[["parker",3],["formatter",3]],["result",6]],[[["unparker",3],["formatter",3]],["result",6]],[[["shardedlock",3,[["",26,[["sized",8],["debug",8]]]]],["formatter",3]],["result",6]],[[["shardedlockreadguard",3,[["",26,[["sized",8],["display",8]]]]],["formatter",3]],["result",6]],[[["shardedlockreadguard",3,[["debug",8]]],["formatter",3]],["result",6]],[[["shardedlockwriteguard",3,[["debug",8]]],["formatter",3]],["result",6]],[[["shardedlockwriteguard",3,[["",26,[["sized",8],["display",8]]]]],["formatter",3]],["result",6]],[[["waitgroup",3],["formatter",3]],["result",6]],[[]],[[]],[[],["shardedlock",3]],[[]],[[["never",0]]],[[]],[[]],[[]],[[["shardedlock",3,[["sized",8]]]],["lockresult",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["shardedlock",3]],["lockresult",6]],[[["shardedlock",3,[["sized",8]]]],["bool",0]],[[],["parker",3]],[[],["shardedlock",3]],[[],["waitgroup",3]],[[["parker",3]]],[[["parker",3],["duration",3]]],[[["shardedlock",3,[["sized",8]]]],["lockresult",6,[["shardedlockreadguard",3,[["sized",8]]]]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["shardedlock",3,[["sized",8]]]],["trylockresult",6,[["shardedlockreadguard",3,[["sized",8]]]]]],[[["shardedlock",3,[["sized",8]]]],["trylockresult",6,[["shardedlockwriteguard",3,[["sized",8]]]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["unparker",3]]],[[["parker",3]],["unparker",3]],[[["waitgroup",3]]],[[["shardedlock",3,[["sized",8]]]],["lockresult",6,[["shardedlockwriteguard",3,[["sized",8]]]]]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["scope",3]],["scopedthreadbuilder",3]],[[["scope",3],["formatter",3]],["result",6]],[[["scopedjoinhandle",3],["formatter",3]],["result",6]],[[["scopedthreadbuilder",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["scopedjoinhandle",3]],["result",6]],[[["scopedthreadbuilder",3],["string",3]],["scopedthreadbuilder",3]],[[],["result",6]],[[["scope",3]],["scopedjoinhandle",3]],[[["scopedthreadbuilder",3]],["result",6,[["scopedjoinhandle",3]]]],[[["scopedthreadbuilder",3],["usize",0]],["scopedthreadbuilder",3]],[[["scopedjoinhandle",3]],["thread",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"Backoff"],[3,"CachePadded"],[8,"AtomicConsume"],[3,"AtomicCell"],[3,"Parker"],[3,"Unparker"],[3,"ShardedLock"],[3,"ShardedLockReadGuard"],[3,"ShardedLockWriteGuard"],[3,"WaitGroup"],[3,"Scope"],[3,"ScopedJoinHandle"],[3,"ScopedThreadBuilder"]]},\
"dtoa":{"doc":"","t":[8,14,14,5,10],"n":["Floating","diyfp","dtoa","write","write"],"q":["dtoa","","","",""],"d":["","","","",""],"i":[0,0,0,0,1],"f":[null,null,null,[[["write",8],["floating",8]],["result",6,[["usize",0]]]],[[["write",8]],["result",6,[["usize",0]]]]],"p":[[8,"Floating"]]},\
"failure":{"doc":"An experimental new error-handling library. Guide-style …","t":[8,3,3,3,3,3,8,6,8,3,10,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,14,11,5,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10],"n":["AsFail","Backtrace","Causes","Compat","Context","Error","Fail","Fallible","ResultExt","SyncFailure","as_fail","as_fail","as_fail","as_fail","as_ref","backtrace","backtrace","backtrace","bail","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","cause","cause","causes","causes","clone","clone_into","compat","compat","compat","context","context","context","default","default","description","downcast","downcast_mut","downcast_mut","downcast_ref","downcast_ref","ensure","eq","err_msg","find_root_cause","find_root_cause","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format_err","from","from","from","from","from","from","from","from","from","from","from_boxed_compat","get_context","get_ref","hash","into","into","into","into","into","into","into_inner","into_iter","iter_causes","iter_causes","iter_chain","iter_chain","map","name","name","name","ne","new","new","new","next","root_cause","root_cause","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","with_context"],"q":["failure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The <code>AsFail</code> trait","A <code>Backtrace</code>.","A iterator over the causes of a <code>Fail</code>","A compatibility wrapper around an error type from this …","An error with context around it.","The <code>Error</code> type, which can contain any failure.","The <code>Fail</code> trait.","A common result with an <code>Error</code>.","Extension methods for <code>Result</code>.","Wrapper for <code>std</code> errors to make them <code>Sync</code>.","Converts a reference to <code>Self</code> into a dynamic trait object …","","Return a reference to the underlying failure that this …","","","Returns a reference to the <code>Backtrace</code> carried by this …","","Gets a reference to the <code>Backtrace</code> for this <code>Error</code>.","Exits a function early with an <code>Error</code>.","","","","","","","","","","","","","Returns a reference to the underlying cause of this …","","Returns a reference to the underlying cause of this <code>Error</code>. …","Deprecated alias to <code>iter_chain</code>.","Deprecated alias to <code>iter_causes</code>.","","","Wraps the error in <code>Compat</code> to make it compatible with older …","Wraps this failure in a compatibility wrapper that …","Wraps <code>Error</code> in a compatibility type.","Wraps the error type in a context type.","Provides context for this failure.","Provides context for this <code>Error</code>.","","","","Attempts to downcast this <code>Error</code> to a particular <code>Fail</code> type.","Attempts to downcast this failure to a concrete type by …","Attempts to downcast this <code>Error</code> to a particular <code>Fail</code> type …","Attempts to downcast this failure to a concrete type by …","Attempts to downcast this <code>Error</code> to a particular <code>Fail</code> type …","Exits a function early with an <code>Error</code> if the condition is …","","Constructs a <code>Fail</code> type from a string.","Returns the “root cause” of this <code>Fail</code> - the last value …","Returns the “root cause” of this error - the last …","","","","","","","","","","","Constructs an <code>Error</code> using the standard string …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Creates an <code>Error</code> from <code>Box&lt;std::error::Error&gt;</code>.","Returns a reference to the context provided with this …","Gets a reference to the inner error.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwraps this into the inner error.","","Returns a iterator over the causes of this <code>Fail</code> with the …","Returns a iterator over the causes of this error with the …","Returns a iterator over all fails up the chain from the …","Returns a iterator over all fails up the chain from the …","Maps <code>Context&lt;D&gt;</code> to <code>Context&lt;T&gt;</code> by applying a function to …","Returns the “name” of the error.","","Returns the name of the underlying fail.","","Constructs a new backtrace. This will only create a real …","Creates a new context without an underlying error message.","Wraps a non-<code>Sync</code> <code>Error</code> in order to make it implement <code>Fail</code>.","","Deprecated alias to <code>find_root_cause</code>.","Deprecated alias to <code>find_root_cause</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Wraps the error type in a context type generated by …"],"i":[0,0,0,0,0,0,0,0,0,0,1,2,3,3,3,2,4,3,0,5,6,7,4,8,3,5,6,7,4,8,3,2,4,3,2,3,7,7,9,2,3,9,2,3,6,7,7,3,2,3,2,3,0,7,0,2,3,6,6,7,7,4,4,8,8,3,3,0,5,6,7,4,4,4,8,3,3,3,3,4,7,7,5,6,7,4,8,3,7,5,2,3,2,3,4,2,4,3,7,6,4,8,5,2,3,7,6,7,4,8,3,5,6,7,4,8,3,5,6,7,4,8,3,5,6,7,4,8,3,9],"f":[null,null,null,null,null,null,null,null,null,null,[[["",0]],["fail",8]],[[["fail",8]],["fail",8]],[[["error",3]],["fail",8]],[[["error",3]],["fail",8]],[[["error",3]],["fail",8]],[[["",0]],["option",4,[["backtrace",3]]]],[[["context",3,[["",26,[["display",8],["send",8],["sync",8]]]]]],["option",4,[["backtrace",3]]]],[[["error",3]],["backtrace",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["option",4,[["fail",8]]]],[[["context",3,[["",26,[["display",8],["send",8],["sync",8]]]]]],["option",4,[["fail",8]]]],[[["error",3]],["fail",8]],[[["fail",8]],["causes",3]],[[["error",3]],["causes",3]],[[["compat",3,[["clone",8]]]],["compat",3,[["clone",8]]]],[[["",0],["",0]]],[[],["result",4,[["compat",3]]]],[[],["compat",3]],[[["error",3]],["compat",3,[["error",3]]]],[[],["result",4,[["context",3]]]],[[],["context",3]],[[["error",3],["",26,[["display",8],["send",8],["sync",8]]]],["context",3,[["",26,[["display",8],["send",8],["sync",8]]]]]],[[],["backtrace",3]],[[],["compat",3,[["default",8]]]],[[["compat",3,[["",26,[["display",8],["debug",8]]]]]],["str",0]],[[["error",3]],["result",4,[["fail",8],["error",3]]]],[[["fail",8]],["option",4]],[[["error",3]],["option",4]],[[["fail",8]],["option",4]],[[["error",3]],["option",4]],null,[[["compat",3,[["partialeq",8]]],["compat",3]],["bool",0]],[[["",26,[["display",8],["debug",8],["sync",8],["send",8]]]],["error",3]],[[["fail",8]],["fail",8]],[[["error",3]],["fail",8]],[[["backtrace",3],["formatter",3]],["result",6]],[[["backtrace",3],["formatter",3]],["result",6]],[[["compat",3,[["debug",8]]],["formatter",3]],["result",6]],[[["compat",3,[["display",8]]],["formatter",3]],["result",6]],[[["context",3,[["",26,[["display",8],["send",8],["sync",8]]]]],["formatter",3]],["result",6]],[[["context",3,[["",26,[["display",8],["send",8],["sync",8]]]]],["formatter",3]],["result",6]],[[["syncfailure",3],["formatter",3]],["result",6]],[[["syncfailure",3],["formatter",3]],["result",6]],[[["error",3],["formatter",3]],["result",6]],[[["error",3],["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[["never",0]]],[[]],[[],["context",3]],[[]],[[]],[[["never",0]]],[[["fail",8]],["error",3]],[[["box",3,[["stderror",8]]]],["error",3]],[[["context",3,[["",26,[["display",8],["send",8],["sync",8]]]]]],["",0]],[[["compat",3]],["",0]],[[["compat",3,[["hash",8]]],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["compat",3]]],[[]],[[["fail",8]],["causes",3]],[[["error",3]],["causes",3]],[[["fail",8]],["causes",3]],[[["error",3]],["causes",3]],[[["context",3,[["",26,[["display",8],["send",8],["sync",8]]]]]],["context",3]],[[["",0]],["option",4,[["str",0]]]],[[["context",3,[["",26,[["display",8],["send",8],["sync",8]]]]]],["option",4,[["str",0]]]],[[["error",3]],["option",4,[["str",0]]]],[[["compat",3,[["partialeq",8]]],["compat",3]],["bool",0]],[[],["backtrace",3]],[[["",26,[["display",8],["send",8],["sync",8]]]],["context",3,[["",26,[["display",8],["send",8],["sync",8]]]]]],[[["",26,[["error",8],["send",8]]]],["syncfailure",3,[["",26,[["error",8],["send",8]]]]]],[[["causes",3]],["option",4,[["fail",8]]]],[[["fail",8]],["fail",8]],[[["error",3]],["fail",8]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",4,[["context",3]]]]],"p":[[8,"AsFail"],[8,"Fail"],[3,"Error"],[3,"Context"],[3,"Causes"],[3,"Backtrace"],[3,"Compat"],[3,"SyncFailure"],[8,"ResultExt"]]},\
"failure_derive":{"doc":"","t":[24],"n":["Fail"],"q":["failure_derive"],"d":[""],"i":[0],"f":[null],"p":[]},\
"fnv":{"doc":"An implementation of the Fowler–Noll–Vo hash function.","t":[6,6,6,3,11,11,11,11,11,11,11,11,11,11,11],"n":["FnvBuildHasher","FnvHashMap","FnvHashSet","FnvHasher","borrow","borrow_mut","default","finish","from","into","try_from","try_into","type_id","with_key","write"],"q":["fnv","","","","","","","","","","","","","",""],"d":["A builder for default FNV hashers.","A <code>HashMap</code> using a default FNV hasher.","A <code>HashSet</code> using a default FNV hasher.","An implementation of the Fowler–Noll–Vo hash function.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Create an FNV hasher starting with a state corresponding …",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["fnvhasher",3]],[[["fnvhasher",3]],["u64",0]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["u64",0]],["fnvhasher",3]],[[["fnvhasher",3]]]],"p":[[3,"FnvHasher"]]},\
"futures":{"doc":"Zero-cost Futures in Rust","t":[4,4,2,2,13,13,6,13,13,2,6,2,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,14,11,11,11,11,11,11,14,11,11,0,12,12,8,3,3,8,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,5,13,3,13,13,3,13,4,3,16,16,16,3,4,8,3,3,3,3,8,16,16,8,3,3,8,3,16,16,3,3,3,3,3,3,4,3,3,3,13,3,3,3,3,3,3,3,3,3,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,11,11,11,5,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,2,2,2,2,2,2,2,2,6,3,3,3,3,3,8,16,3,16,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,13,3,3,3,3,3,3,3,3,3,16,3,3,13,3,3,3,3,3,3,3,2,3,3,16,3,3,3,3,3,3,3,4,3,3,3,3,3,3,13,3,3,3,3,3,8,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,5,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,0,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,2,3,3,3,3,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Async","AsyncSink","Future","IntoFuture","NotReady","NotReady","Poll","Ready","Ready","Sink","StartSend","Stream","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","executor","fmt","fmt","from","from","from","from","future","into","into","is_not_ready","is_not_ready","is_ready","is_ready","map","map","ne","ne","prelude","sink","stream","sync","task","task_local","to_owned","to_owned","try_from","try_from","try_into","try_into","try_ready","type_id","type_id","unsync","0","0","Notify","NotifyHandle","Spawn","UnsafeNotify","borrow","borrow","borrow_mut","borrow_mut","clone","clone_id","clone_id","clone_into","clone_raw","close_notify","drop","drop_id","drop_id","drop_raw","fmt","fmt","from","from","from","from","get_mut","get_ref","into","into","into_inner","new","notify","notify","poll_flush_notify","poll_fn_notify","poll_future_notify","poll_stream_notify","spawn","start_send_notify","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","wait_close","wait_flush","wait_future","wait_send","wait_stream","with_notify","A","AndThen","B","Break","CatchUnwind","Continue","Either","Empty","Error","Error","Error","ExecuteError","ExecuteErrorKind","Executor","Flatten","FlattenStream","FromErr","Fuse","Future","Future","Future","FutureFrom","FutureResult","Inspect","IntoFuture","IntoStream","Item","Item","Join","Join3","Join4","Join5","JoinAll","Lazy","Loop","LoopFn","Map","MapErr","NoCapacity","OrElse","PollFn","Select","Select2","SelectAll","SelectNext","SelectOk","Shared","SharedError","SharedItem","Shutdown","Then","and_then","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","catch_unwind","cause","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","description","drop","empty","eq","err","execute","flatten","flatten_stream","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_err","fuse","future_from","inspect","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_stream","is_done","join","join3","join4","join5","join_all","kind","lazy","loop_fn","map","map_err","new","ok","or_else","peek","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll_fn","result","select","select2","select_all","select_ok","shared","split","then","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","wait","0","0","0","0","Async","AsyncSink","Future","IntoFuture","Poll","Sink","StartSend","Stream","BoxSink","Buffer","Fanout","Flush","Send","SendAll","Sink","SinkError","SinkFromErr","SinkItem","SinkMapErr","Wait","With","WithFlatMap","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer","clone","clone","clone","clone_into","clone_into","clone_into","close","close","close","close","close","close","close","close","fanout","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","into","into","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","poll","poll","poll","poll","poll","poll","poll","poll","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","send","send","send_all","sink_from_err","sink_map_err","start_send","start_send","start_send","start_send","start_send","start_send","start_send","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","wait","with","with_flat_map","0","1","AndThen","Both","BufferUnordered","Buffered","CatchUnwind","Chain","Chunks","Collect","Concat","Concat2","Empty","Error","Filter","FilterMap","First","Flatten","Fold","ForEach","Forward","FromErr","Fuse","FuturesOrdered","FuturesUnordered","Inspect","InspectErr","Item","Iter","IterOk","IterResult","IterStream","Map","MapErr","Merge","MergedItem","Once","OrElse","Peekable","PollFn","Repeat","ReuniteError","Second","Select","Skip","SkipWhile","SplitSink","SplitStream","Stream","StreamFuture","Take","TakeWhile","Then","Unfold","Wait","Zip","and_then","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer_unordered","buffered","by_ref","catch_unwind","chain","chunks","close","close","close","close","close","close","close","close","close","close","close","close","close","close","close","close","close","close","close","close","close","collect","concat","concat2","default","description","empty","filter","filter_map","flatten","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","for_each","forward","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_err","from_iter","fuse","futures_ordered","futures_unordered","futures_unordered","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","inspect","inspect_err","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_iter","is_done","is_empty","iter","iter_ok","iter_result","len","map","map_err","merge","new","next","once","or_else","peek","peekable","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_fn","push","repeat","reunite","reunite","select","sink_mut","sink_ref","skip","skip_while","split","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","stream_mut","stream_ref","take","take_while","then","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unfold","wait","zip","0","0","0","1","FuturesUnordered","IterMut","borrow","borrow","borrow_mut","borrow_mut","default","drop","fmt","fmt","from","from","from_iter","into","into","into_iter","is_empty","iter_mut","len","new","next","poll","push","size_hint","try_from","try_from","try_into","try_into","type_id","type_id","BiLock","BiLockAcquire","BiLockAcquired","BiLockGuard","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","into_future","lock","mpsc","new","oneshot","poll","poll_lock","reunite","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unlock","Execute","Receiver","SendError","Sender","SpawnHandle","TrySendError","UnboundedReceiver","UnboundedSender","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","close","close","close","close","close","description","description","drop","drop","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into_future","into_inner","into_inner","is_closed","is_closed","is_disconnected","is_full","ne","ne","poll","poll","poll","poll","poll_complete","poll_complete","poll_complete","poll_ready","spawn","spawn_unbounded","start_send","start_send","start_send","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_send","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbounded","unbounded_send","Canceled","Execute","Receiver","Sender","SpawnHandle","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","clone","clone_into","close","description","drop","drop","drop","drop","eq","fmt","fmt","fmt","fmt","fmt","fmt","forget","from","from","from","from","from","into","into","into","into","into","into_future","into_future","into_future","is_canceled","poll","poll","poll","poll_cancel","send","spawn","spawn_fn","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_recv","type_id","type_id","type_id","type_id","type_id","AtomicTask","EventSet","LocalKey","Task","UnparkEvent","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","current","default","fmt","fmt","fmt","fmt","from","from","from","from","init","insert","into","into","into","into","is_current","new","new","notify","notify","register","register_task","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","will_notify_current","with","with_unpark_event","mpsc","oneshot","Execute","Receiver","SendError","Sender","SpawnHandle","UnboundedReceiver","UnboundedSender","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","clone","clone","clone_into","clone_into","close","close","close","close","close","description","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into_future","into_inner","poll","poll","poll","poll","poll_complete","poll_complete","poll_complete","spawn","spawn_unbounded","start_send","start_send","start_send","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbounded","unbounded_send","Canceled","Execute","Receiver","Sender","SpawnHandle","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","close","drop","drop","fmt","fmt","fmt","fmt","forget","from","from","from","from","into","into","into","into","into_future","into_future","into_future","is_canceled","poll","poll","poll","poll_cancel","send","spawn","spawn_fn","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["futures","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","futures::Async","futures::AsyncSink","futures::executor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","futures::futurefutures::future::Either","","futures::future::Loop","","futures::prelude","","","","","","","","futures::sink","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","futures::streamfutures::stream::MergedItem","","","","futures::stream::futures_unordered","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","futures::sync","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","futures::sync::mpsc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","futures::sync::oneshot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","futures::task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","futures::unsync","","futures::unsync::mpsc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","futures::unsync::oneshot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Return type of future, indicating whether a value is ready …","The result of an asynchronous attempt to send a value to a …","","","Represents that a value is not ready yet, but may be so …","The <code>start_send</code> attempt failed due to the sink being full. …","Return type of the <code>Future::poll</code> method, indicates whether …","Represents that a value is immediately ready.","The <code>start_send</code> attempt succeeded, so the sending process …","","Return type of the <code>Sink::start_send</code> method, indicating the …","","","","","","","","","","","","Executors","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Futures","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether this is <code>Async::NotReady</code>","Returns whether this is <code>AsyncSink::NotReady</code>","Returns whether this is <code>Async::Ready</code>","Returns whether this is <code>AsyncSink::Ready</code>","Change the success value of this <code>Async</code> with the closure …","Change the NotReady value of this <code>AsyncSink</code> with the …","","","A “prelude” for crates using the <code>futures</code> crate.","Asynchronous sinks","Asynchronous streams","Future-aware synchronization","Tasks used to drive a future computation","A macro to create a <code>static</code> of type <code>LocalKey</code>","","","","","","","A macro for extracting the successful type of a <code>Poll&lt;T, E&gt;</code>.","","","Future-aware single-threaded synchronization","","","A trait which represents a sink of notifications that a …","A <code>NotifyHandle</code> is the core value through which …","Representation of a spawned future/stream.","An unsafe trait for implementing custom forms of memory …","","","","","","This function is called whenever a new copy of <code>id</code> is …","This function is called whenever a new copy of <code>id</code> is …","","Creates a new <code>NotifyHandle</code> from this instance of …","Invokes the underlying <code>close</code> method with this task in …","","All instances of <code>Task</code> store an <code>id</code> that they’re going to …","All instances of <code>Task</code> store an <code>id</code> that they’re going to …","Drops this instance of <code>UnsafeNotify</code>, deallocating resources","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Get a mutable reference to the object the Spawn is …","Get a shared reference to the object the Spawn is wrapping.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume the Spawn, returning its inner object","Constructs a new <code>NotifyHandle</code> directly.","Indicates that an associated future and/or task are ready …","Invokes the underlying instance of <code>Notify</code> with the …","Invokes the underlying <code>poll_complete</code> method with this task …","Calls the provided closure, scheduling notifications to be …","Polls the internal future, scheduling notifications to be …","Like <code>poll_future_notify</code>, except polls the underlying …","Spawns a future or stream, returning it and the new task …","Invokes the underlying <code>start_send</code> method with this task in …","","","","","","","","Blocks the current thread until it’s able to close this …","Blocks the current thread until it’s able to flush this …","Waits for the internal future to complete, blocking this …","Blocks the current thread until it’s able to send <code>value</code> …","Like <code>wait_future</code>, except only waits for the next element …","Sets the <code>NotifyHandle</code> of the current task for the duration …","First branch of the type","Future for the <code>and_then</code> combinator, chaining a computation …","Second branch of the type","Indicates that the loop has completed with output <code>T</code>.","Future for the <code>catch_unwind</code> combinator.","Indicates that the loop function should be called again …","Combines two different futures yielding the same item and …","A future which is never resolved.","The type of error that this future will resolve with if it …","The error that the future may resolve with.","Possible errors during conversion.","Errors returned from the <code>Spawn::spawn</code> function.","Kinds of errors that can be returned from the …","A trait for types which can spawn fresh futures.","Future for the <code>flatten</code> combinator, flattening a …","Future for the <code>flatten_stream</code> combinator, flattening a …","Future for the <code>from_err</code> combinator, changing the error …","A future which “fuses” a future once it’s been …","Trait for types which are a placeholder of a value that …","The future that this type can be converted into.","The future for the conversion.","Asynchronous conversion from a type <code>T</code>.","A future representing a value that is immediately ready.","Do something with the item of a future, passing it on.","Class of types which can be converted into a future.","Future that forwards one element from the underlying future","The type of value that this future will resolved with if …","The item that the future may resolve with.","Future for the <code>join</code> combinator, waiting for two futures to …","Future for the <code>join3</code> combinator, waiting for three futures …","Future for the <code>join4</code> combinator, waiting for four futures …","Future for the <code>join5</code> combinator, waiting for five futures …","A future which takes a list of futures and resolves with a …","A future which defers creation of the actual future until …","The status of a <code>loop_fn</code> loop.","A future implementing a tail-recursive loop.","Future for the <code>map</code> combinator, changing the type of a …","Future for the <code>map_err</code> combinator, changing the error type …","This executor has no more capacity to run more futures. …","Future for the <code>or_else</code> combinator, chaining a computation …","A future which adapts a function returning <code>Poll</code>.","Future for the <code>select</code> combinator, waiting for one of two …","Future for the <code>select2</code> combinator, waiting for one of two …","Future for the <code>select_all</code> combinator, waiting for one of …","Future yielded as the second result in a <code>Select</code> future.","Future for the <code>select_ok</code> combinator, waiting for one of …","A future that is cloneable and can be polled in multiple …","A wrapped error of the original future that is cloneable …","A wrapped item of the original future that is cloneable …","This executor has shut down and will no longer accept new …","Future for the <code>then</code> combinator, chaining computations on …","Execute another future after this one has resolved …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Catches unwinding panics while polling the future.","","","","","","","","","","","","","","","","Creates a future which never resolves, representing a …","","Creates a “leaf future” from an immediate value of a …","Spawns a future to run on this <code>Executor</code>, typically in the …","Flatten the execution of this future when the successful …","Flatten the execution of this future when the successful …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Map this future’s error to any error implementing <code>From</code> …","Fuse a future such that <code>poll</code> will never again be called …","Consume the given value, beginning the conversion.","Do something with the item of a future, passing it on.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this object and produces a future.","","Consumes self and returns the original future that was …","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert this future into a single element stream.","Returns whether the underlying future has finished or not.","Joins the result of two futures, waiting for them both to …","Same as <code>join</code>, but with more futures.","Same as <code>join</code>, but with more futures.","Same as <code>join</code>, but with more futures.","Creates a future which represents a collection of the …","Returns the associated reason for the error","Creates a new future which will eventually be the same as …","Creates a new future implementing a tail-recursive loop.","Map this future’s result to a different type, returning …","Map this future’s error to a different error, returning …","Create a new <code>ExecuteError</code>","Creates a “leaf future” from an immediate value of a …","Execute another future if this one resolves with an error.","If any clone of this <code>Shared</code> has completed execution, …","Query this future to see if its value has become …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new future wrapping around a function returning …","Creates a new “leaf future” which will resolve with …","Waits for either one of two futures to complete.","Waits for either one of two differently-typed futures to …","Creates a new future which will select over a list of …","Creates a new future which will select the first …","Create a cloneable handle to this future where all handles …","Splits out the homogeneous type from an either of tuples.","Chain on a computation for when a future finished, passing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Block the current thread until this future is resolved.","","","","","","","","","","","","","A type alias for <code>Box&lt;Sink + Send&gt;</code>","Sink for the <code>Sink::buffer</code> combinator, which buffers up to …","Sink that clones incoming items and forwards them to two …","Future for the <code>Sink::flush</code> combinator, which polls the …","Future for the <code>Sink::send</code> combinator, which sends a value …","Future for the <code>Sink::send_all</code> combinator, which sends a …","A <code>Sink</code> is a value into which other values can be sent, …","The type of value produced by the sink when an error …","A sink combinator to change the error type of a sink.","The type of value that the sink accepts.","Sink for the <code>Sink::sink_map_err</code> combinator.","A sink combinator which converts an asynchronous sink to a …","Sink for the <code>Sink::with</code> combinator, chaining a computation …","Sink for the <code>Sink::with_flat_map</code> combinator, chaining a …","","","","","","","","","","","","","","","","","","","","","Adds a fixed-size buffer to the current sink.","","","","","","","","A method to indicate that no more values will ever be …","","","","","","Close this sink, blocking the current thread until it’s …","Fanout items to multiple sinks.","A future that completes when the sink has finished …","Flushes any buffered data in this sink, blocking the …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a mutable reference to the inner sink.","Get a mutable reference to the inner sink.","Get a mutable reference to the inner sink.","Get a mutable reference to the inner sink.","Get a mutable reference to the inner sink.","Get a mutable reference to the inner sink.","Get a mutable reference to the inner sink.","Get a shared reference to the inner sink.","Get a shared reference to the inner sink.","Get a shared reference to the inner sink.","Get a shared reference to the inner sink.","Get a shared reference to the inner sink.","Get a shared reference to the inner sink.","Get a shared reference to the inner sink.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Consumes this combinator, returning the underlying sinks.","Consumes this combinator, returning the underlying sink.","Consumes this combinator, returning the underlying sink.","Consume the <code>Flush</code> and return the inner sink.","Consumes this combinator, returning the underlying sink.","Consumes this combinator, returning the underlying sink.","Consumes this combinator, returning the underlying sink.","","","","","","","","","Flush all output from this sink, if necessary.","","","","","","","A future that completes after the given item has been …","Sends a value to this sink, blocking the current thread …","A future that completes after the given stream has been …","Map this sink’s error to any error implementing <code>From</code> for …","Transforms the error returned by the sink.","Begin the process of sending a value to the sink.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new object which will produce a synchronous sink.","Composes a function <em>in front of</em> the sink.","Composes a function <em>in front of</em> the sink.","","","A stream combinator which chains a computation onto values …","Items from both streams","An adaptor for a stream of futures to execute the futures …","An adaptor for a stream of futures to execute the futures …","Stream for the <code>catch_unwind</code> combinator.","An adapter for chaining the output of two streams.","An adaptor that chunks up elements in a vector.","A future which collects all of the values of a stream into …","A stream combinator to concatenate the results of a stream …","A stream combinator to concatenate the results of a stream …","A stream which contains no elements.","The type of error this stream may generate.","A stream combinator used to filter the results of a stream …","A combinator used to filter the results of a stream and …","An item from the first stream","A combinator used to flatten a stream-of-streams into one …","A future used to collect all the results of a stream into …","A stream combinator which executes a unit closure over …","Future for the <code>Stream::forward</code> combinator, which sends a …","A stream combinator to change the error type of a stream.","A stream which “fuse“s a stream once it’s terminated.","An unbounded queue of futures.","","Do something with the items of a stream, passing it on.","Do something with the error of a stream, passing it on.","The type of item this stream will yield on success.","A stream which is just a shim over an underlying instance …","A stream which is just a shim over an underlying instance …","A stream which is just a shim over an underlying instance …","A stream which is just a shim over an underlying instance …","A stream combinator which will change the type of a stream …","A stream combinator which will change the error type of a …","An adapter for merging the output of two streams.","An item returned from a merge stream, which represents an …","A stream which emits single element and then EOF.","A stream combinator which chains a computation onto errors …","A <code>Stream</code> that implements a <code>peek</code> method.","A stream which adapts a function returning <code>Poll</code>.","Stream that produces the same element repeatedly.","Error indicating a <code>SplitSink&lt;S&gt;</code> and <code>SplitStream&lt;S&gt;</code> were …","An item from the second stream","An adapter for merging the output of two streams.","A stream combinator which skips a number of elements …","A stream combinator which skips elements of a stream while …","A <code>Sink</code> part of the split pair","A <code>Stream</code> part of the split pair","A stream of values, not all of which may have been …","A combinator used to temporarily convert a stream into a …","A stream combinator which returns a maximum number of …","A stream combinator which takes elements from a stream …","A stream combinator which chains a computation onto each …","A stream which creates futures, polls them and return …","A stream combinator which converts an asynchronous stream …","An adapter for merging the output of two streams.","Chain on a computation for when a value is ready, passing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An adaptor for creating a buffered list of pending futures …","An adaptor for creating a buffered list of pending futures.","Borrows a stream, rather than consuming it.","Catches unwinding panics while polling the stream.","Adapter for chaining two stream.","An adaptor for chunking up items of the stream inside a …","","","","","","","","","","","","","","","","","","","","","","Collect all of the values of this stream into a vector, …","Concatenate all results of a stream into a single …","Concatenate all results of a stream into a single …","","","Creates a stream which contains no elements.","Filters the values produced by this stream according to …","Filters the values produced by this stream while …","Flattens a stream of streams into just one continuous …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Execute an accumulating computation over a stream, …","Runs this stream to completion, executing the provided …","A future that completes after the given stream has been …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Map this stream’s error to any error implementing <code>From</code> …","","Fuse a stream such that <code>poll</code> will never again be called …","Converts a list of futures into a <code>Stream</code> of results from …","An unbounded set of futures.","Converts a list of futures into a <code>Stream</code> of results from …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Do something with each item of this stream, afterwards …","Do something with the error of this stream, afterwards …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Converts this stream into a <code>Future</code>.","","","","","","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","","Returns whether the underlying stream has finished or not.","Returns <code>true</code> if the queue contains no futures","Converts an <code>Iterator</code> over <code>Result</code>s into a <code>Stream</code> which is …","Converts an <code>Iterator</code> into a <code>Stream</code> which is always ready …","Converts an <code>Iterator</code> over <code>Result</code>s into a <code>Stream</code> which is …","Returns the number of futures contained in the queue.","Converts a stream of type <code>T</code> to a stream of type <code>U</code>.","Converts a stream of error type <code>T</code> to a stream of error …","An adapter for merging the output of two streams.","Constructs a new, empty <code>FuturesOrdered</code>","","Creates a stream of single element","Chain on a computation for when an error happens, passing …","Peek retrieves a reference to the next item in the stream.","Creates a new stream which exposes a <code>peek</code> method.","Attempt to pull out the next value of this stream, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new stream wrapping around a function returning …","Push a future into the queue.","Create a stream which produces the same item repeatedly.","Attempts to put the two “halves” of a split …","Attempts to put the two “halves” of a split …","Creates a stream that selects the next element from either …","Get a mutable reference to the inner sink. If this …","Get a shared reference to the inner sink. If this …","Creates a new stream which skips <code>amt</code> items of the …","Skip elements on this stream while the predicate provided …","Splits this <code>Stream + Sink</code> object into separate <code>Stream</code> and …","","","","","","","","","","","","","","","","","","","","","","Get a mutable reference to the inner stream. If this …","Get a shared reference to the inner stream. If this …","Creates a new stream of at most <code>amt</code> items of the …","Take elements from this stream while the predicate …","Chain on a computation for when a value is ready, passing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Stream</code> from a seed and a closure returning a …","Creates an iterator which blocks the current thread until …","An adapter for zipping two streams together.","","","","","An unbounded set of futures.","Mutable iterator over all futures in the unordered set.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the set contains no futures","Returns an iterator that allows modifying each future in …","Returns the number of futures contained in the set.","Constructs a new, empty <code>FuturesUnordered</code>","","","Push a future into the set.","","","","","","","","A type of futures-powered synchronization primitive which …","Future returned by <code>BiLock::lock</code> which will resolve when …","Resolved value of the <code>BiLockAcquire&lt;T&gt;</code> future.","Returned RAII guard from the <code>poll_lock</code> method.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Perform a “blocking lock” of this lock, consuming this …","A multi-producer, single-consumer, futures-aware, FIFO …","Creates a new <code>BiLock</code> protecting the provided data.","A one-shot, futures-aware channel","","Attempt to acquire this lock, returning <code>NotReady</code> if it can…","Attempts to put the two “halves” of a <code>BiLock&lt;T&gt;</code> back …","","","","","","","","","","","","","Recovers the original <code>BiLock&lt;T&gt;</code>, unlocking this lock.","Type of future which <code>Executor</code> instances must be able to …","The receiving end of a channel which implements the <code>Stream</code> …","Error type for sending, used when the receiving end of a …","The transmission end of a channel which is used to send …","Handle returned from the <code>spawn</code> function.","Error type returned from <code>try_send</code>","The receiving end of a channel which implements the <code>Stream</code> …","The transmission end of a channel which is used to send …","","","","","","","","","","","","","","","","","Creates an in-memory channel implementation of the <code>Stream</code> …","","","","","","","","","","","","Closes the receiving half","Closes the receiving half","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the message that was attempted to be sent but …","Returns the message that was attempted to be sent but …","Returns whether this channel is closed without needing a …","Returns whether this channel is closed without needing a …","Returns true if this error is a result of the receiver …","Returns true if this error is a result of the channel …","","","","","","","","","","Polls the channel to determine if there is guaranteed to …","Spawns a <code>stream</code> onto the instance of <code>Executor</code> provided, …","Spawns a <code>stream</code> onto the instance of <code>Executor</code> provided, …","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to send a message on this <code>Sender&lt;T&gt;</code> without …","","","","","","","","","Creates an in-memory channel implementation of the <code>Stream</code> …","Sends the provided message along this channel.","Error returned from a <code>Receiver&lt;T&gt;</code> whenever the …","Type of future which <code>Execute</code> instances below must be able …","A future representing the completion of a computation …","Represents the completion half of a oneshot through which …","Handle returned from the <code>spawn</code> function.","","","","","","","","","","","Creates a new futures-aware, one-shot channel.","","","Gracefully close this receiver, preventing sending any …","","","","","","","","","","","","","Drop this future without canceling the underlying future.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Tests to see whether this <code>Sender</code>’s corresponding <code>Receiver</code>","","","","Polls this <code>Sender</code> half to detect whether the <code>Receiver</code> this …","Completes this oneshot with a successful result.","Spawns a <code>future</code> onto the instance of <code>Executor</code> provided, …","Spawns a function <code>f</code> onto the <code>Spawn</code> instance provided <code>s</code>.","","","","","","","","","","","","","Attempts to receive a message outside of the context of a …","","","","","","A synchronization primitive for task notification.","A concurrent set which allows for the insertion of <code>usize</code> …","A key for task-local data stored in a future’s task.","A handle to a “task”, which represents a single …","A set insertion to trigger upon <code>unpark</code>.","","","","","","","","","","","","","Returns a handle to the current task to call <code>notify</code> at a …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Initialize the <code>futures</code> task system.","Insert the given ID into the set","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> when called from within the context of the …","Create an <code>AtomicTask</code> initialized with the given <code>Task</code>","Construct an unpark event that will insert <code>id</code> into <code>set</code> when","Notifies the task that last called <code>register</code>.","Indicate that the task should attempt to poll its future …","Registers the current task to be notified on calls to …","Registers the provided task to be notified on calls to …","","","","","","","","","","","","","","","This function is intended as a performance optimization …","Access this task-local key, running the provided closure …","For the duration of the given callback, add an “unpark …","A multi-producer, single-consumer, futures-aware, FIFO …","A one-shot, futures-aware channel","Type of future which <code>Executor</code> instances must be able to …","The receiving end of a channel which implements the <code>Stream</code> …","Error type for sending, used when the receiving end of a …","The transmission end of a channel.","Handle returned from the <code>spawn</code> function.","The receiving end of an unbounded channel.","The transmission end of an unbounded channel.","","","","","","","","","","","","","","","Creates a bounded in-memory channel with buffered storage.","","","","","","Closes the receiving half","","","Closes the receiving half","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the message that was attempted to be sent but …","","","","","","","","Spawns a <code>stream</code> onto the instance of <code>Executor</code> provided, …","Spawns a <code>stream</code> onto the instance of <code>Executor</code> provided, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates an unbounded in-memory channel with buffered …","Sends the provided message along this channel.","","Type of future which <code>Spawn</code> instances below must be able to …","A future representing the completion of a computation …","Represents the completion half of a oneshot through which …","Handle returned from the <code>spawn</code> function.","","","","","","","","","Creates a new futures-aware, one-shot channel.","Gracefully close this receiver, preventing sending any …","","","","","","","Drop this future without canceling the underlying future.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Tests to see whether this <code>Sender</code>’s corresponding <code>Receiver</code>","","","","Polls this <code>Sender</code> half to detect whether the <code>Receiver</code> this …","Completes this oneshot with a successful result.","Spawns a <code>future</code> onto the instance of <code>Executor</code> provided, …","Spawns a function <code>f</code> onto the <code>Spawn</code> instance provided <code>s</code>.","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,0,1,2,0,0,0,1,2,1,2,1,2,1,2,1,2,0,1,2,1,1,1,2,0,1,2,1,2,1,2,1,2,1,2,0,0,0,0,0,0,1,2,1,2,1,2,0,1,2,0,3,4,0,0,0,0,5,6,5,6,6,7,7,6,8,5,6,7,7,8,5,6,5,6,6,6,5,5,5,6,5,6,7,6,5,5,5,5,0,5,6,5,6,5,6,5,6,5,5,5,5,5,0,9,0,9,10,0,10,0,0,11,12,13,0,0,0,0,0,0,0,0,12,13,0,0,0,0,0,11,12,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,14,0,11,15,16,17,18,19,20,21,10,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,9,38,39,40,41,42,43,44,45,14,15,16,17,18,19,20,21,10,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,9,38,39,40,41,42,43,44,45,14,11,45,21,40,44,45,14,21,40,44,45,14,44,45,45,40,0,14,0,46,11,11,15,16,17,18,19,20,21,10,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,9,38,39,40,41,42,43,44,45,45,14,15,16,17,18,19,20,21,21,10,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,9,38,39,40,41,42,43,44,45,14,11,11,13,11,15,16,17,18,19,20,21,10,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,9,38,39,40,41,42,43,44,45,14,12,15,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,9,38,39,40,41,42,43,11,24,11,11,11,11,0,17,0,0,11,11,17,0,11,40,11,15,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,9,38,39,40,41,42,43,0,0,11,11,0,0,11,9,11,21,40,44,45,14,45,15,16,17,18,19,20,21,10,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,9,38,39,40,41,42,43,44,45,14,15,16,17,18,19,20,21,10,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,9,38,39,40,41,42,43,44,45,14,15,16,17,18,19,20,21,10,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,9,38,39,40,41,42,43,44,45,14,11,47,48,49,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,51,0,0,0,0,52,53,54,55,56,57,58,59,60,61,52,53,54,55,56,57,58,59,60,61,51,53,56,59,53,56,59,52,51,53,54,56,59,60,61,51,51,61,52,53,54,55,56,57,58,59,60,61,52,53,54,55,56,57,58,59,60,61,53,54,55,56,57,59,60,53,54,55,56,57,59,60,52,53,54,55,56,57,58,59,60,61,55,57,58,52,53,54,55,56,59,60,53,54,55,56,57,58,59,60,51,52,53,54,56,59,60,51,61,51,51,51,51,52,53,54,56,59,60,53,56,59,52,53,54,55,56,57,58,59,60,61,52,53,54,55,56,57,58,59,60,61,52,53,54,55,56,57,58,59,60,61,51,51,51,62,62,0,63,0,0,0,0,0,0,0,0,0,64,0,0,63,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,63,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,62,102,103,104,105,106,107,108,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,63,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,62,102,103,104,105,106,107,108,64,64,64,64,64,64,71,74,75,76,79,80,82,83,84,85,88,89,92,93,94,95,96,100,101,104,108,64,64,64,102,62,0,64,64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,63,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,62,62,102,103,104,105,106,107,108,64,64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,63,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,62,102,103,104,105,106,107,108,64,102,64,0,0,0,71,74,75,76,79,80,81,82,83,84,85,92,93,94,95,100,101,104,106,71,74,75,76,79,80,81,82,83,84,85,92,93,94,95,100,101,104,106,64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,63,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,62,102,103,104,105,106,107,108,65,66,64,77,78,81,99,105,71,74,75,76,79,80,81,82,83,84,85,92,93,94,95,100,101,104,106,106,80,102,0,0,0,102,64,64,64,102,106,0,64,89,64,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,71,74,75,76,79,80,82,83,84,85,88,89,92,93,94,95,96,100,101,104,108,0,102,0,107,108,64,99,99,64,64,64,71,74,75,76,79,80,82,83,84,85,88,89,92,93,94,95,96,100,101,104,108,99,99,64,64,64,62,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,63,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,62,102,103,104,105,106,107,108,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,63,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,62,102,103,104,105,106,107,108,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,63,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,62,102,103,104,105,106,107,108,0,64,64,109,110,111,111,0,0,112,113,112,113,112,112,112,113,112,113,112,112,113,113,112,112,112,112,113,112,112,113,112,113,112,113,112,113,0,0,0,0,114,115,116,117,114,115,116,117,115,117,115,117,115,117,114,115,116,117,114,115,116,117,114,115,116,117,116,114,0,114,0,116,114,114,114,115,116,117,114,115,116,117,114,115,116,117,117,0,0,0,0,0,0,0,0,118,119,120,121,122,123,124,125,118,119,120,121,122,123,124,125,0,120,121,124,125,120,121,124,125,120,121,121,122,123,124,125,120,122,124,125,118,119,120,121,122,123,124,124,125,125,118,119,120,121,122,123,124,125,118,119,120,121,122,123,124,125,119,124,125,120,121,125,125,124,125,118,119,122,123,120,121,121,120,0,0,120,121,121,120,121,124,125,124,125,118,119,120,121,122,123,124,125,118,119,120,121,122,123,124,125,120,118,119,120,121,122,123,124,125,0,121,0,0,0,0,0,126,127,128,129,130,126,127,128,129,130,0,130,130,128,130,126,127,128,129,130,126,127,128,129,130,130,126,126,127,128,129,130,126,127,128,129,130,126,127,128,129,126,127,128,129,129,0,0,130,130,126,127,128,129,130,126,127,128,129,130,128,126,127,128,129,130,0,0,0,0,0,131,132,133,134,131,132,133,134,133,134,133,134,0,131,131,132,133,134,131,132,133,134,0,135,131,132,133,134,134,131,133,131,134,131,131,133,134,131,132,133,134,131,132,133,134,131,132,133,134,134,132,0,0,0,0,0,0,0,0,0,0,136,137,138,139,140,141,142,136,137,138,139,140,141,142,0,139,141,139,141,139,140,141,141,142,136,139,140,136,136,137,138,139,140,141,142,136,137,138,139,140,141,142,136,137,138,139,140,141,142,138,136,137,138,140,142,139,141,141,0,0,139,141,141,139,141,136,136,137,138,139,140,141,142,136,137,138,139,140,141,142,136,137,138,139,140,141,142,0,141,0,0,0,0,0,143,144,145,146,143,144,145,146,0,146,145,146,143,144,145,146,143,143,144,145,146,143,144,145,146,143,144,146,145,143,144,146,145,145,0,0,143,144,145,146,143,144,145,146,143,144,145,146],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["async",4,[["clone",8]]]],["async",4,[["clone",8]]]],[[["asyncsink",4,[["clone",8]]]],["asyncsink",4,[["clone",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["async",4,[["partialeq",8]]],["async",4]],["bool",0]],[[["asyncsink",4,[["partialeq",8]]],["asyncsink",4]],["bool",0]],null,[[["async",4,[["debug",8]]],["formatter",3]],["result",6]],[[["asyncsink",4,[["debug",8]]],["formatter",3]],["result",6]],[[],["async",4]],[[]],[[["never",0]]],[[]],null,[[]],[[]],[[["async",4]],["bool",0]],[[["asyncsink",4]],["bool",0]],[[["async",4]],["bool",0]],[[["asyncsink",4]],["bool",0]],[[["async",4]],["async",4]],[[["asyncsink",4]],["asyncsink",4]],[[["async",4,[["partialeq",8]]],["async",4]],["bool",0]],[[["asyncsink",4,[["partialeq",8]]],["asyncsink",4]],["bool",0]],null,null,null,null,null,null,[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["notifyhandle",3]],["notifyhandle",3]],[[["",0],["usize",0]],["usize",0]],[[["",0],["usize",0]],["usize",0]],[[["",0],["",0]]],[[["",0]],["notifyhandle",3]],[[["spawn",3,[["sized",8]]],["",0],["usize",0]],["poll",6]],[[["notifyhandle",3]]],[[["",0],["usize",0]]],[[["",0],["usize",0]]],[[["",0]]],[[["spawn",3,[["",26,[["debug",8],["sized",8]]]]],["formatter",3]],["result",6]],[[["notifyhandle",3],["formatter",3]],["result",6]],[[]],[[]],[[["",0]],["notifyhandle",3]],[[["arc",3]],["notifyhandle",3]],[[["spawn",3,[["sized",8]]]],["",0]],[[["spawn",3,[["sized",8]]]],["",0]],[[]],[[]],[[["spawn",3,[["sized",8]]]],["sized",8]],[[["unsafenotify",0]],["notifyhandle",3]],[[["",0],["usize",0]]],[[["notifyhandle",3],["usize",0]]],[[["spawn",3,[["sized",8]]],["",0],["usize",0]],["poll",6]],[[["spawn",3,[["sized",8]]],["",0],["usize",0]]],[[["spawn",3,[["sized",8]]],["",0],["usize",0]],["poll",6]],[[["spawn",3,[["sized",8]]],["",0],["usize",0]],["poll",6,[["option",4]]]],[[],["spawn",3]],[[["spawn",3,[["sized",8]]],["",0],["usize",0]],["startsend",6]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["spawn",3,[["sink",8]]]],["result",4]],[[["spawn",3,[["sink",8]]]],["result",4]],[[["spawn",3,[["future",8]]]],["result",4]],[[["spawn",3,[["sink",8]]]],["result",4]],[[["spawn",3,[["stream",8]]]],["option",4,[["result",4]]]],[[["",0],["usize",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["andthencatchunwind",3]],[[["sharederror",3]],["option",4,[["error",8]]]],[[["futureresult",3,[["clone",8],["clone",8]]]],["futureresult",3,[["clone",8],["clone",8]]]],[[["shared",3]],["shared",3]],[[["shareditem",3,[["clone",8]]]],["shareditem",3,[["clone",8]]]],[[["sharederror",3,[["clone",8]]]],["sharederror",3,[["clone",8]]]],[[["executeerrorkind",4]],["executeerrorkind",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["shareditem",3]],["",0]],[[["sharederror",3]],["",0]],[[["sharederror",3]],["str",0]],[[["shared",3]]],[[],["empty",3]],[[["executeerrorkind",4],["executeerrorkind",4]],["bool",0]],[[],["futureresult",3]],[[["",0]],["result",4,[["executeerror",3]]]],[[],["flatten",3]],[[],["flattenstream",3]],[[["flatten",3],["formatter",3]],["result",6]],[[["flattenstream",3],["formatter",3]],["result",6]],[[["executeerror",3],["formatter",3]],["result",6]],[[["empty",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["lazy",3,[["debug",8],["",26,[["debug",8],["intofuture",8]]]]],["formatter",3]],["result",6]],[[["pollfn",3,[["debug",8]]],["formatter",3]],["result",6]],[[["futureresult",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["loop",4,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["loopfn",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["andthen",3,[["debug",8],["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["fuse",3,[["",26,[["debug",8],["future",8]]]]],["formatter",3]],["result",6]],[[["intostream",3,[["",26,[["debug",8],["future",8]]]]],["formatter",3]],["result",6]],[[["join",3],["formatter",3]],["result",6]],[[["join3",3],["formatter",3]],["result",6]],[[["join4",3],["formatter",3]],["result",6]],[[["join5",3],["formatter",3]],["result",6]],[[["map",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["maperr",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["fromerr",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["orelse",3,[["debug",8],["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["select",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["selectnext",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["select2",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["then",3,[["debug",8],["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["either",4,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["inspect",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["joinall",3],["formatter",3]],["result",6]],[[["shared",3],["formatter",3]],["result",6]],[[["catchunwind",3,[["debug",8]]],["formatter",3]],["result",6]],[[["selectall",3,[["debug",8]]],["formatter",3]],["result",6]],[[["selectok",3,[["debug",8]]],["formatter",3]],["result",6]],[[["shareditem",3,[["debug",8]]],["formatter",3]],["result",6]],[[["sharederror",3],["formatter",3]],["result",6]],[[["sharederror",3,[["debug",8]]],["formatter",3]],["result",6]],[[["executeerrorkind",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["result",4]],["futureresult",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fromerr",3,[["from",8]]]],[[],["fuse",3]],[[]],[[],["inspect",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["executeerror",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intostream",3]],[[["fuse",3,[["future",8]]]],["bool",0]],[[],["join",3]],[[],["join3",3]],[[],["join4",3]],[[],["join5",3]],[[],["joinall",3]],[[["executeerror",3]],["executeerrorkind",4]],[[],["lazy",3]],[[],["loopfn",3]],[[],["map",3]],[[],["maperr",3]],[[["executeerrorkind",4]],["executeerror",3]],[[],["futureresult",3]],[[],["orelse",3]],[[["shared",3]],["option",4,[["result",4,[["shareditem",3],["sharederror",3]]]]]],[[["",0]],["poll",6]],[[["flatten",3]],["poll",6]],[[["flattenstream",3]],["poll",6,[["option",4]]]],[[["empty",3]],["poll",6]],[[["lazy",3]],["poll",6]],[[["pollfn",3]],["poll",6]],[[["futureresult",3]],["poll",6]],[[["loopfn",3]],["poll",6]],[[["andthen",3]],["poll",6]],[[["fuse",3,[["future",8]]]],["poll",6]],[[["intostream",3,[["future",8]]]],["poll",6,[["option",4]]]],[[["join",3]],["poll",6]],[[["join3",3]],["poll",6]],[[["join4",3]],["poll",6]],[[["join5",3]],["poll",6]],[[["map",3]],["poll",6]],[[["maperr",3]],["poll",6]],[[["fromerr",3,[["future",8],["from",8]]]],["poll",6,[["from",8]]]],[[["orelse",3]],["poll",6]],[[["select",3]],["poll",6]],[[["selectnext",3]],["poll",6]],[[["select2",3]],["poll",6]],[[["then",3]],["poll",6]],[[["either",4]],["poll",6]],[[["inspect",3]],["poll",6]],[[["joinall",3]],["poll",6]],[[["shared",3]],["poll",6]],[[["catchunwind",3]],["poll",6]],[[["selectall",3]],["poll",6]],[[["selectok",3]],["poll",6]],[[],["pollfn",3]],[[["result",4]],["futureresult",3]],[[],["select",3]],[[],["select2",3]],[[],["selectall",3]],[[],["selectok",3]],[[],["shared",3]],[[["either",4]]],[[],["then",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["buffer",3]],[[["with",3,[["clone",8],["clone",8],["clone",8],["clone",8]]]],["with",3,[["clone",8],["clone",8],["clone",8],["clone",8]]]],[[["sinkfromerr",3,[["clone",8],["clone",8]]]],["sinkfromerr",3,[["clone",8],["clone",8]]]],[[["sinkmaperr",3,[["clone",8],["clone",8]]]],["sinkmaperr",3,[["clone",8],["clone",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["fanout",3]],["poll",6]],[[["",0]],["poll",6]],[[["with",3]],["poll",6]],[[["withflatmap",3]],["poll",6]],[[["sinkfromerr",3]],["poll",6]],[[["sinkmaperr",3]],["poll",6]],[[["buffer",3,[["sink",8]]]],["poll",6]],[[["wait",3,[["sink",8]]]],["result",4]],[[],["fanout",3]],[[],["flush",3]],[[["wait",3,[["sink",8]]]],["result",4]],[[["fanout",3,[["",26,[["sink",8],["debug",8]]],["",26,[["sink",8],["debug",8]]]]],["formatter",3]],["fmtresult",6]],[[["with",3,[["debug",8],["debug",8],["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["withflatmap",3,[["debug",8],["debug",8],["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["flush",3,[["debug",8]]],["formatter",3]],["result",6]],[[["sinkfromerr",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["send",3,[["",26,[["debug",8],["sink",8]]]]],["formatter",3]],["result",6]],[[["sendall",3,[["debug",8],["",26,[["debug",8],["stream",8]]]]],["formatter",3]],["result",6]],[[["sinkmaperr",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["buffer",3,[["",26,[["debug",8],["sink",8]]]]],["formatter",3]],["result",6]],[[["wait",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["with",3]],["",0]],[[["withflatmap",3]],["",0]],[[["flush",3,[["sink",8]]]],["",0]],[[["sinkfromerr",3]],["",0]],[[["send",3,[["sink",8]]]],["",0]],[[["sinkmaperr",3]],["",0]],[[["buffer",3,[["sink",8]]]],["",0]],[[["with",3]],["",0]],[[["withflatmap",3]],["",0]],[[["flush",3,[["sink",8]]]],["",0]],[[["sinkfromerr",3]],["",0]],[[["send",3,[["sink",8]]]],["",0]],[[["sinkmaperr",3]],["",0]],[[["buffer",3,[["sink",8]]]],["",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fanout",3,[["sink",8],["sink",8]]]]],[[["with",3]]],[[["withflatmap",3]]],[[["flush",3,[["sink",8]]]],["sink",8]],[[["sinkfromerr",3]]],[[["sinkmaperr",3]]],[[["buffer",3,[["sink",8]]]],["sink",8]],[[["with",3]],["poll",6,[["option",4]]]],[[["withflatmap",3]],["poll",6,[["option",4]]]],[[["flush",3,[["sink",8]]]],["poll",6,[["sink",8]]]],[[["sinkfromerr",3,[["stream",8]]]],["poll",6,[["option",4]]]],[[["send",3,[["sink",8]]]],["poll",6,[["sink",8]]]],[[["sendall",3]],["poll",6]],[[["sinkmaperr",3,[["stream",8]]]],["poll",6,[["option",4]]]],[[["buffer",3]],["poll",6,[["option",4]]]],[[["",0]],["poll",6]],[[["fanout",3]],["poll",6]],[[["with",3]],["poll",6]],[[["withflatmap",3]],["poll",6]],[[["sinkfromerr",3]],["poll",6]],[[["sinkmaperr",3]],["poll",6]],[[["buffer",3,[["sink",8]]]],["poll",6]],[[],["send",3]],[[["wait",3,[["sink",8]]]],["result",4]],[[],["sendall",3]],[[],["sinkfromerr",3,[["from",8]]]],[[],["sinkmaperr",3]],[[["",0]],["startsend",6]],[[["fanout",3]],["startsend",6]],[[["with",3]],["startsend",6]],[[["withflatmap",3]],["startsend",6]],[[["sinkfromerr",3]],["startsend",6]],[[["sinkmaperr",3]],["startsend",6]],[[["buffer",3,[["sink",8]]]],["startsend",6]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["wait",3]],[[],["with",3]],[[],["withflatmap",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["andthenusize",0]],["bufferunordered",3]],[[["usize",0]],["buffered",3]],[[["",0]],["",0]],[[],["catchunwind",3]],[[],["chain",3]],[[["usize",0]],["chunks",3]],[[["andthen",3,[["intofuture",8]]]],["poll",6]],[[["filter",3]],["poll",6]],[[["filtermap",3]],["poll",6]],[[["flatten",3]],["poll",6]],[[["fromerr",3,[["",26,[["stream",8],["sink",8]]]]]],["poll",6]],[[["fuse",3]],["poll",6]],[[["inspect",3]],["poll",6]],[[["inspecterr",3]],["poll",6]],[[["map",3]],["poll",6]],[[["maperr",3]],["poll",6]],[[["orelse",3]],["poll",6]],[[["peekable",3]],["poll",6]],[[["skip",3]],["poll",6]],[[["skipwhile",3]],["poll",6]],[[["take",3]],["poll",6]],[[["takewhile",3]],["poll",6]],[[["then",3]],["poll",6]],[[["buffered",3]],["poll",6]],[[["bufferunordered",3]],["poll",6]],[[["chunks",3]],["poll",6]],[[["splitsink",3,[["sink",8]]]],["poll",6]],[[],["collect",3]],[[],["concat",3]],[[],["concat2",3]],[[],["futuresordered",3]],[[["reuniteerror",3,[["any",8]]]],["str",0]],[[],["empty",3]],[[],["filter",3]],[[],["filtermap",3]],[[],["flatten",3]],[[["concat2",3,[["debug",8]]],["formatter",3]],["fmtresult",6]],[[["concat",3,[["debug",8]]],["formatter",3]],["fmtresult",6]],[[["iter",3,[["debug",8]]],["formatter",3]],["result",6]],[[["iterok",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["iterresult",3,[["debug",8]]],["formatter",3]],["result",6]],[[["repeat",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["andthen",3,[["debug",8],["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["chain",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["empty",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["filter",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["filtermap",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["flatten",3,[["debug",8]]],["formatter",3]],["result",6]],[[["fold",3,[["debug",8],["debug",8],["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["foreach",3,[["debug",8],["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["fromerr",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["fuse",3,[["debug",8]]],["formatter",3]],["result",6]],[[["streamfuture",3,[["debug",8]]],["formatter",3]],["result",6]],[[["inspect",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["inspecterr",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["map",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["maperr",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["merge",3,[["debug",8],["",26,[["debug",8],["stream",8]]]]],["formatter",3]],["result",6]],[[["mergeditem",4,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["once",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["orelse",3,[["debug",8],["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["peekable",3,[["",26,[["debug",8],["stream",8]]]]],["formatter",3]],["result",6]],[[["pollfn",3,[["debug",8]]],["formatter",3]],["result",6]],[[["select",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["skip",3,[["debug",8]]],["formatter",3]],["result",6]],[[["skipwhile",3,[["debug",8],["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["take",3,[["debug",8]]],["formatter",3]],["result",6]],[[["takewhile",3,[["debug",8],["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["then",3,[["debug",8],["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["unfold",3,[["debug",8],["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["zip",3,[["",26,[["debug",8],["stream",8]]],["",26,[["debug",8],["stream",8]]]]],["formatter",3]],["result",6]],[[["forward",3,[["",26,[["debug",8],["stream",8]]],["debug",8]]],["formatter",3]],["result",6]],[[["buffered",3],["formatter",3]],["result",6]],[[["bufferunordered",3],["formatter",3]],["result",6]],[[["reuniteerror",3],["formatter",3]],["result",6]],[[["reuniteerror",3],["formatter",3]],["result",6]],[[["futuresordered",3,[["debug",8]]],["formatter",3]],["result",6]],[[["catchunwind",3,[["debug",8]]],["formatter",3]],["result",6]],[[["chunks",3,[["debug",8]]],["formatter",3]],["result",6]],[[["collect",3,[["debug",8]]],["formatter",3]],["result",6]],[[["wait",3,[["debug",8]]],["formatter",3]],["result",6]],[[["splitstream",3,[["debug",8]]],["formatter",3]],["result",6]],[[["splitsink",3,[["debug",8]]],["formatter",3]],["result",6]],[[],["fold",3]],[[],["foreach",3]],[[],["forward",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fromerr",3,[["from",8]]]],[[],["futuresordered",3,[["future",8]]]],[[],["fuse",3]],[[],["futuresordered",3]],null,[[],["futuresunordered",3]],[[["andthen",3]],["",0]],[[["filter",3]],["",0]],[[["filtermap",3]],["",0]],[[["flatten",3,[["stream",8]]]],["",0]],[[["fromerr",3]],["",0]],[[["fuse",3]],["",0]],[[["streamfuture",3]],["option",4]],[[["inspect",3,[["stream",8]]]],["",0]],[[["inspecterr",3,[["stream",8]]]],["",0]],[[["map",3]],["",0]],[[["maperr",3]],["",0]],[[["skip",3]],["",0]],[[["skipwhile",3]],["",0]],[[["take",3]],["",0]],[[["takewhile",3]],["",0]],[[["buffered",3]],["",0]],[[["bufferunordered",3]],["",0]],[[["chunks",3]],["",0]],[[["wait",3]],["",0]],[[["andthen",3]],["",0]],[[["filter",3]],["",0]],[[["filtermap",3]],["",0]],[[["flatten",3,[["stream",8]]]],["",0]],[[["fromerr",3]],["",0]],[[["fuse",3]],["",0]],[[["streamfuture",3]],["option",4]],[[["inspect",3,[["stream",8]]]],["",0]],[[["inspecterr",3,[["stream",8]]]],["",0]],[[["map",3]],["",0]],[[["maperr",3]],["",0]],[[["skip",3]],["",0]],[[["skipwhile",3]],["",0]],[[["take",3]],["",0]],[[["takewhile",3]],["",0]],[[["buffered",3]],["",0]],[[["bufferunordered",3]],["",0]],[[["chunks",3]],["",0]],[[["wait",3]],["",0]],[[],["inspect",3]],[[],["inspecterr",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["streamfuture",3]],[[]],[[]],[[]],[[]],[[]],[[["andthen",3]]],[[["filter",3]]],[[["filtermap",3]]],[[["flatten",3,[["stream",8]]]],["stream",8]],[[["fromerr",3]]],[[["fuse",3]]],[[["streamfuture",3]],["option",4]],[[["inspect",3,[["stream",8]]]],["stream",8]],[[["inspecterr",3,[["stream",8]]]],["stream",8]],[[["map",3]]],[[["maperr",3]]],[[["skip",3]]],[[["skipwhile",3]]],[[["take",3]]],[[["takewhile",3]]],[[["buffered",3]]],[[["bufferunordered",3]]],[[["chunks",3]]],[[["wait",3]]],[[]],[[["fuse",3]],["bool",0]],[[["futuresordered",3]],["bool",0]],[[],["iter",3]],[[],["iterok",3]],[[],["iterresult",3]],[[["futuresordered",3]],["usize",0]],[[],["map",3]],[[],["maperr",3]],[[],["merge",3]],[[],["futuresordered",3]],[[["wait",3,[["stream",8]]]],["option",4]],[[["result",4]],["once",3]],[[],["orelse",3]],[[["peekable",3,[["stream",8]]]],["poll",6,[["option",4]]]],[[],["peekable",3]],[[["",0]],["poll",6,[["option",4]]]],[[["concat2",3]],["poll",6]],[[["concat",3]],["poll",6]],[[["iter",3]],["poll",6,[["option",4]]]],[[["iterok",3]],["poll",6,[["option",4]]]],[[["iterresult",3]],["poll",6,[["option",4]]]],[[["repeat",3]],["poll",6,[["option",4]]]],[[["andthen",3]],["poll",6,[["option",4]]]],[[["chain",3]],["poll",6,[["option",4]]]],[[["empty",3]],["poll",6,[["option",4]]]],[[["filter",3]],["poll",6,[["option",4]]]],[[["filtermap",3]],["poll",6,[["option",4]]]],[[["flatten",3]],["poll",6,[["option",4]]]],[[["fold",3]],["poll",6]],[[["foreach",3]],["poll",6]],[[["fromerr",3,[["stream",8],["from",8]]]],["poll",6,[["option",4],["from",8]]]],[[["fuse",3,[["stream",8]]]],["poll",6,[["option",4]]]],[[["streamfuture",3,[["stream",8]]]],["poll",6]],[[["inspect",3]],["poll",6,[["option",4]]]],[[["inspecterr",3]],["poll",6,[["option",4]]]],[[["map",3]],["poll",6,[["option",4]]]],[[["maperr",3]],["poll",6,[["option",4]]]],[[["merge",3]],["poll",6,[["option",4]]]],[[["once",3]],["poll",6,[["option",4]]]],[[["orelse",3]],["poll",6,[["option",4]]]],[[["peekable",3,[["stream",8]]]],["poll",6,[["option",4]]]],[[["pollfn",3]],["poll",6,[["option",4]]]],[[["select",3]],["poll",6,[["option",4]]]],[[["skip",3]],["poll",6,[["option",4]]]],[[["skipwhile",3]],["poll",6,[["option",4]]]],[[["take",3]],["poll",6,[["option",4]]]],[[["takewhile",3]],["poll",6,[["option",4]]]],[[["then",3]],["poll",6,[["option",4]]]],[[["unfold",3]],["poll",6,[["option",4]]]],[[["zip",3]],["poll",6,[["option",4]]]],[[["forward",3]],["poll",6]],[[["buffered",3]],["poll",6,[["option",4]]]],[[["bufferunordered",3]],["poll",6,[["option",4]]]],[[["futuresordered",3]],["poll",6,[["option",4]]]],[[["catchunwind",3]],["poll",6,[["option",4]]]],[[["chunks",3]],["poll",6,[["option",4]]]],[[["collect",3]],["poll",6,[["vec",3]]]],[[["splitstream",3,[["stream",8]]]],["poll",6,[["option",4]]]],[[["andthen",3,[["intofuture",8]]]],["poll",6]],[[["filter",3]],["poll",6]],[[["filtermap",3]],["poll",6]],[[["flatten",3]],["poll",6]],[[["fromerr",3,[["",26,[["stream",8],["sink",8]]]]]],["poll",6]],[[["fuse",3]],["poll",6]],[[["inspect",3]],["poll",6]],[[["inspecterr",3]],["poll",6]],[[["map",3]],["poll",6]],[[["maperr",3]],["poll",6]],[[["orelse",3]],["poll",6]],[[["peekable",3]],["poll",6]],[[["skip",3]],["poll",6]],[[["skipwhile",3]],["poll",6]],[[["take",3]],["poll",6]],[[["takewhile",3]],["poll",6]],[[["then",3]],["poll",6]],[[["buffered",3]],["poll",6]],[[["bufferunordered",3]],["poll",6]],[[["chunks",3]],["poll",6]],[[["splitsink",3,[["sink",8]]]],["poll",6]],[[],["pollfn",3]],[[["futuresordered",3]]],[[],["repeat",3]],[[["splitstream",3],["splitsink",3]],["result",4,[["reuniteerror",3]]]],[[["splitsink",3],["splitstream",3]],["result",4,[["reuniteerror",3]]]],[[],["select",3]],[[["forward",3]],["option",4]],[[["forward",3]],["option",4]],[[["u64",0]],["skip",3]],[[],["skipwhile",3]],[[]],[[["andthen",3,[["intofuture",8]]]],["startsend",6]],[[["filter",3]],["startsend",6]],[[["filtermap",3]],["startsend",6]],[[["flatten",3]],["startsend",6]],[[["fromerr",3,[["",26,[["stream",8],["sink",8]]]]]],["startsend",6]],[[["fuse",3]],["startsend",6]],[[["inspect",3]],["startsend",6]],[[["inspecterr",3]],["startsend",6]],[[["map",3]],["startsend",6]],[[["maperr",3]],["startsend",6]],[[["orelse",3]],["startsend",6]],[[["peekable",3]],["startsend",6]],[[["skip",3]],["startsend",6]],[[["skipwhile",3]],["startsend",6]],[[["take",3]],["startsend",6]],[[["takewhile",3]],["startsend",6]],[[["then",3]],["startsend",6]],[[["buffered",3]],["startsend",6]],[[["bufferunordered",3]],["startsend",6]],[[["chunks",3]],["startsend",6]],[[["splitsink",3,[["sink",8]]]],["startsend",6]],[[["forward",3]],["option",4]],[[["forward",3]],["option",4]],[[["u64",0]],["take",3]],[[],["takewhile",3]],[[],["then",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["unfold",3]],[[],["wait",3]],[[],["zip",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["futuresunordered",3]],[[["futuresunordered",3]]],[[["futuresunordered",3,[["debug",8]]],["formatter",3]],["result",6]],[[["itermut",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[],["futuresunordered",3,[["future",8]]]],[[]],[[]],[[]],[[["futuresunordered",3]],["bool",0]],[[["futuresunordered",3]],["itermut",3]],[[["futuresunordered",3]],["usize",0]],[[],["futuresunordered",3]],[[["itermut",3]],["option",4]],[[["futuresunordered",3]],["poll",6,[["option",4]]]],[[["futuresunordered",3]]],[[["itermut",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["bilockguard",3]],["",0]],[[["bilockacquired",3]],["",0]],[[["bilockguard",3]],["",0]],[[["bilockacquired",3]],["",0]],[[["bilockguard",3]]],[[["bilockacquired",3]]],[[["bilock",3,[["debug",8]]],["formatter",3]],["result",6]],[[["bilockguard",3,[["debug",8]]],["formatter",3]],["result",6]],[[["bilockacquire",3,[["debug",8]]],["formatter",3]],["result",6]],[[["bilockacquired",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bilock",3]],["bilockacquire",3]],null,[[]],null,[[["bilockacquire",3]],["poll",6,[["bilockacquired",3]]]],[[["bilock",3]],["async",4,[["bilockguard",3]]]],[[["bilock",3],["bilock",3]],["result",4,[["reuniteerror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["bilockacquired",3]],["bilock",3]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]]],[[["sender",3]],["sender",3]],[[["unboundedsender",3]],["unboundedsender",3]],[[["senderror",3,[["clone",8]]]],["senderror",3,[["clone",8]]]],[[["trysenderror",3,[["clone",8]]]],["trysenderror",3,[["clone",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["sender",3]],["poll",6,[["senderror",3]]]],[[["unboundedsender",3]],["poll",6,[["senderror",3]]]],[[["unboundedsender",3]],["poll",6,[["senderror",3]]]],[[["receiver",3]]],[[["unboundedreceiver",3]]],[[["senderror",3,[["any",8]]]],["str",0]],[[["trysenderror",3,[["any",8]]]],["str",0]],[[["sender",3]]],[[["receiver",3]]],[[["senderror",3,[["partialeq",8]]],["senderror",3]],["bool",0]],[[["trysenderror",3,[["partialeq",8]]],["trysenderror",3]],["bool",0]],[[["spawnhandle",3],["formatter",3]],["result",6]],[[["execute",3,[["stream",8]]],["formatter",3]],["result",6]],[[["sender",3,[["debug",8]]],["formatter",3]],["result",6]],[[["unboundedsender",3,[["debug",8]]],["formatter",3]],["result",6]],[[["receiver",3,[["debug",8]]],["formatter",3]],["result",6]],[[["unboundedreceiver",3,[["debug",8]]],["formatter",3]],["result",6]],[[["senderror",3],["formatter",3]],["result",6]],[[["senderror",3],["formatter",3]],["result",6]],[[["trysenderror",3],["formatter",3]],["result",6]],[[["trysenderror",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["senderror",3]]],[[["trysenderror",3]]],[[["sender",3]],["bool",0]],[[["unboundedsender",3]],["bool",0]],[[["trysenderror",3]],["bool",0]],[[["trysenderror",3]],["bool",0]],[[["senderror",3,[["partialeq",8]]],["senderror",3]],["bool",0]],[[["trysenderror",3,[["partialeq",8]]],["trysenderror",3]],["bool",0]],[[["spawnhandle",3]],["poll",6,[["option",4]]]],[[["execute",3,[["stream",8]]]],["poll",6]],[[["receiver",3]],["poll",6,[["option",4]]]],[[["unboundedreceiver",3]],["poll",6,[["option",4]]]],[[["sender",3]],["poll",6,[["senderror",3]]]],[[["unboundedsender",3]],["poll",6,[["senderror",3]]]],[[["unboundedsender",3]],["poll",6,[["senderror",3]]]],[[["sender",3]],["poll",6,[["senderror",3]]]],[[["",0],["usize",0]],["spawnhandle",3]],[[["",0]],["spawnhandle",3]],[[["sender",3]],["startsend",6,[["senderror",3]]]],[[["unboundedsender",3]],["startsend",6,[["senderror",3]]]],[[["unboundedsender",3]],["startsend",6,[["senderror",3]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["sender",3]],["result",4,[["trysenderror",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[["unboundedsender",3]],["result",4,[["senderror",3]]]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["canceled",3]],["canceled",3]],[[["",0],["",0]]],[[["receiver",3]]],[[["canceled",3]],["str",0]],[[["spawnhandle",3]]],[[["execute",3,[["future",8]]]]],[[["receiver",3]]],[[["sender",3]]],[[["canceled",3],["canceled",3]],["bool",0]],[[["spawnhandle",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["execute",3,[["",26,[["future",8],["debug",8]]]]],["formatter",3]],["result",6]],[[["receiver",3,[["debug",8]]],["formatter",3]],["result",6]],[[["sender",3,[["debug",8]]],["formatter",3]],["result",6]],[[["canceled",3],["formatter",3]],["result",6]],[[["canceled",3],["formatter",3]],["result",6]],[[["spawnhandle",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["sender",3]],["bool",0]],[[["spawnhandle",3]],["poll",6]],[[["execute",3,[["future",8]]]],["poll",6]],[[["receiver",3]],["poll",6,[["canceled",3]]]],[[["sender",3]],["poll",6]],[[["sender",3]],["result",4]],[[["",0]],["spawnhandle",3]],[[["",0]],["spawnhandle",3]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["receiver",3]],["result",4,[["option",4],["canceled",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["unparkevent",3]],["unparkevent",3]],[[["task",3]],["task",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["task",3]],[[],["atomictask",3]],[[["atomictask",3],["formatter",3]],["result",6]],[[["localkey",3,[["debug",8]]],["formatter",3]],["result",6]],[[["unparkevent",3],["formatter",3]],["result",6]],[[["task",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["bool",0]],[[["",0],["usize",0]]],[[]],[[]],[[]],[[]],[[["task",3]],["bool",0]],[[],["atomictask",3]],[[["arc",3,[["eventset",8]]],["usize",0]],["unparkevent",3]],[[["atomictask",3]]],[[["task",3]]],[[["atomictask",3]]],[[["atomictask",3],["task",3]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["task",3]],["bool",0]],[[["localkey",3,[["send",8]]]]],[[["unparkevent",3]]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]]],[[["sender",3]],["sender",3]],[[["unboundedsender",3]],["unboundedsender",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["sender",3]],["poll",6,[["senderror",3]]]],[[["receiver",3]]],[[["unboundedsender",3]],["poll",6,[["senderror",3]]]],[[["unboundedsender",3]],["poll",6,[["senderror",3]]]],[[["unboundedreceiver",3]]],[[["senderror",3,[["any",8]]]],["str",0]],[[["sender",3]]],[[["receiver",3]]],[[["senderror",3],["formatter",3]],["result",6]],[[["senderror",3],["formatter",3]],["result",6]],[[["spawnhandle",3],["formatter",3]],["result",6]],[[["execute",3,[["stream",8]]],["formatter",3]],["result",6]],[[["sender",3,[["debug",8]]],["formatter",3]],["result",6]],[[["receiver",3,[["debug",8]]],["formatter",3]],["result",6]],[[["unboundedsender",3,[["debug",8]]],["formatter",3]],["result",6]],[[["unboundedreceiver",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["senderror",3]]],[[["spawnhandle",3]],["poll",6,[["option",4]]]],[[["execute",3,[["stream",8]]]],["poll",6]],[[["receiver",3]],["poll",6,[["option",4]]]],[[["unboundedreceiver",3]],["poll",6,[["option",4]]]],[[["sender",3]],["poll",6,[["senderror",3]]]],[[["unboundedsender",3]],["poll",6,[["senderror",3]]]],[[["unboundedsender",3]],["poll",6,[["senderror",3]]]],[[["",0],["usize",0]],["spawnhandle",3]],[[["",0]],["spawnhandle",3]],[[["sender",3]],["startsend",6,[["senderror",3]]]],[[["unboundedsender",3]],["startsend",6,[["senderror",3]]]],[[["unboundedsender",3]],["startsend",6,[["senderror",3]]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[["unboundedsender",3]],["result",4,[["senderror",3]]]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["receiver",3]]],[[["sender",3]]],[[["receiver",3]]],[[["spawnhandle",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["execute",3,[["",26,[["future",8],["debug",8]]]]],["formatter",3]],["result",6]],[[["sender",3,[["debug",8]]],["formatter",3]],["result",6]],[[["receiver",3,[["debug",8]]],["formatter",3]],["result",6]],[[["spawnhandle",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["sender",3]],["bool",0]],[[["spawnhandle",3]],["poll",6]],[[["execute",3,[["future",8]]]],["poll",6]],[[["receiver",3]],["poll",6]],[[["sender",3]],["poll",6]],[[["sender",3]],["result",4]],[[["",0]],["spawnhandle",3]],[[["",0]],["spawnhandle",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[4,"Async"],[4,"AsyncSink"],[13,"Ready"],[13,"NotReady"],[3,"Spawn"],[3,"NotifyHandle"],[8,"Notify"],[8,"UnsafeNotify"],[4,"Either"],[4,"Loop"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[4,"ExecuteErrorKind"],[3,"Flatten"],[3,"FlattenStream"],[3,"ExecuteError"],[3,"Empty"],[3,"Lazy"],[3,"PollFn"],[3,"FutureResult"],[3,"LoopFn"],[3,"AndThen"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"FromErr"],[3,"OrElse"],[3,"Select"],[3,"SelectNext"],[3,"Select2"],[3,"Then"],[3,"Inspect"],[3,"JoinAll"],[3,"Shared"],[3,"CatchUnwind"],[3,"SelectAll"],[3,"SelectOk"],[3,"SharedItem"],[3,"SharedError"],[8,"Executor"],[13,"A"],[13,"B"],[13,"Break"],[13,"Continue"],[8,"Sink"],[3,"Fanout"],[3,"With"],[3,"WithFlatMap"],[3,"Flush"],[3,"SinkFromErr"],[3,"Send"],[3,"SendAll"],[3,"SinkMapErr"],[3,"Buffer"],[3,"Wait"],[3,"ReuniteError"],[4,"MergedItem"],[8,"Stream"],[3,"Concat2"],[3,"Concat"],[3,"Iter"],[3,"IterOk"],[3,"IterResult"],[3,"Repeat"],[3,"AndThen"],[3,"Chain"],[3,"Empty"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"ForEach"],[3,"FromErr"],[3,"Fuse"],[3,"StreamFuture"],[3,"Inspect"],[3,"InspectErr"],[3,"Map"],[3,"MapErr"],[3,"Merge"],[3,"Once"],[3,"OrElse"],[3,"Peekable"],[3,"PollFn"],[3,"Select"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"Forward"],[3,"Buffered"],[3,"BufferUnordered"],[3,"FuturesOrdered"],[3,"CatchUnwind"],[3,"Chunks"],[3,"Collect"],[3,"Wait"],[3,"SplitStream"],[3,"SplitSink"],[13,"First"],[13,"Second"],[13,"Both"],[3,"FuturesUnordered"],[3,"IterMut"],[3,"BiLock"],[3,"BiLockGuard"],[3,"BiLockAcquire"],[3,"BiLockAcquired"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"UnboundedSender"],[3,"Receiver"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"TrySendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"Receiver"],[3,"Sender"],[3,"Canceled"],[3,"AtomicTask"],[3,"LocalKey"],[3,"UnparkEvent"],[3,"Task"],[8,"EventSet"],[3,"SendError"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"Receiver"],[3,"UnboundedSender"],[3,"UnboundedReceiver"],[3,"SpawnHandle"],[3,"Execute"],[3,"Sender"],[3,"Receiver"]]},\
"futures_cpupool":{"doc":"A simple crate for executing work on a thread pool, and …","t":[3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Builder","CpuFuture","CpuPool","after_start","before_stop","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create","drop","execute","fmt","fmt","fmt","forget","from","from","from","into","into","into","into_future","name_prefix","new","new","new_num_cpus","poll","pool_size","spawn","spawn_fn","stack_size","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["futures_cpupool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Thread pool configuration object","The type of future returned from the <code>CpuPool::spawn</code> …","A thread pool intended to run CPU intensive work.","Execute function <code>f</code> right after each thread is started but …","Execute function <code>f</code> before each worker thread stops.","","","","","","","","","Create CpuPool with configured parameters","","","","","","Drop this future without canceling the underlying future.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Set thread name prefix of a future CpuPool","Creates a new thread pool with <code>size</code> worker threads …","Create a builder a number of workers equal to the number …","Creates a new thread pool with a number of workers equal …","","Set size of a future CpuPool","Spawns a future to run on this thread pool, returning a …","Spawns a closure on this thread pool.","Set stack size of threads in the pool.","","","","","","","","","",""],"i":[0,0,0,1,1,2,1,3,2,1,3,2,2,1,2,2,2,1,3,3,2,1,3,2,1,3,3,1,2,1,2,3,1,2,2,1,2,2,1,3,2,1,3,2,1,3],"f":[null,null,null,[[["builder",3]],["builder",3]],[[["builder",3]],["builder",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["cpupool",3]],["cpupool",3]],[[["",0],["",0]]],[[["builder",3]],["cpupool",3]],[[["cpupool",3]]],[[["cpupool",3]],["result",4,[["executeerror",3]]]],[[["cpupool",3],["formatter",3]],["result",6]],[[["builder",3],["formatter",3]],["result",6]],[[["cpufuture",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["cpufuture",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["builder",3],["into",8,[["string",3]]]],["builder",3]],[[["usize",0]],["cpupool",3]],[[],["builder",3]],[[],["cpupool",3]],[[["cpufuture",3,[["send",8],["send",8]]]],["poll",6,[["send",8],["send",8]]]],[[["builder",3],["usize",0]],["builder",3]],[[["cpupool",3]],["cpufuture",3]],[[["cpupool",3]],["cpufuture",3]],[[["builder",3],["usize",0]],["builder",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"Builder"],[3,"CpuPool"],[3,"CpuFuture"]]},\
"h2":{"doc":"An asynchronous, HTTP/2.0 server and client implementation.","t":[18,18,18,18,3,18,18,18,18,18,18,18,3,3,3,18,3,3,3,18,18,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CANCEL","COMPRESSION_ERROR","CONNECT_ERROR","ENHANCE_YOUR_CALM","Error","FLOW_CONTROL_ERROR","FRAME_SIZE_ERROR","HTTP_1_1_REQUIRED","INADEQUATE_SECURITY","INTERNAL_ERROR","NO_ERROR","PROTOCOL_ERROR","Ping","PingPong","Pong","REFUSED_STREAM","Reason","RecvStream","ReleaseCapacity","SETTINGS_TIMEOUT","STREAM_CLOSED","SendStream","StreamId","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","client","clone","clone","clone","clone_into","clone_into","clone_into","description","description","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","get_io","hash","into","into","into","into","into","into","into","into","into","into_io","is_end_stream","is_io","ne","ne","opaque","poll","poll_capacity","poll_pong","poll_reset","poll_trailers","reason","release_capacity","release_capacity","reserve_capacity","send_data","send_ping","send_reset","send_trailers","server","stream_id","stream_id","stream_id","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Builder","Connection","Handshake","PushPromise","PushPromises","PushedResponseFuture","ReadySendRequest","ResponseFuture","SendRequest","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","enable_push","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","handshake","handshake","initial_connection_window_size","initial_max_send_streams","initial_window_size","into","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_future","into_future","into_parts","max_concurrent_reset_streams","max_concurrent_streams","max_frame_size","max_header_list_size","new","ping_pong","poll","poll","poll","poll","poll","poll","poll_ready","push_promises","ready","request","request_mut","reset_stream_duration","send_request","set_target_window_size","stream_id","stream_id","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Builder","Connection","Handshake","SendResponse","abrupt_shutdown","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","fmt","fmt","fmt","fmt","from","from","from","from","graceful_shutdown","handshake","handshake","initial_connection_window_size","initial_window_size","into","into","into","into","into_future","max_concurrent_reset_streams","max_concurrent_streams","max_frame_size","max_header_list_size","new","ping_pong","poll","poll","poll_close","poll_reset","reset_stream_duration","send_reset","send_response","set_target_window_size","stream_id","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["h2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","h2::client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","h2::server","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Used by the endpoint to indicate that the stream is no …","The endpoint is unable to maintain the header compression …","The connection established in response to a CONNECT …","The endpoint detected that its peer is exhibiting a …","Represents HTTP/2.0 operation errors.","The endpoint detected that its peer violated the …","The endpoint received a frame with an invalid size.","The endpoint requires that HTTP/1.1 be used instead of …","The underlying transport has properties that do not meet …","The endpoint encountered an unexpected internal error.","The associated condition is not a result of an error.","The endpoint detected an unspecific protocol error.","Sent via <code>PingPong</code> to send a PING frame to a peer.","A handle to send and receive PING frames with the peer.","Received via <code>PingPong</code> when a peer acknowledges a <code>Ping</code>.","The endpoint refused the stream prior to performing any …","HTTP/2.0 error codes.","Receives the body stream and trailers from the remote peer.","A handle to release window capacity to a remote stream.","The endpoint sent a SETTINGS frame but did not receive a …","The endpoint received a frame after a stream was …","Sends the body stream and trailers to the remote peer.","A stream identifier, as described in Section 5.1.1 of RFC …","","","","","","","","","","","","","","","","","","","Returns the stream’s current send capacity.","Client implementation of the HTTP/2.0 protocol.","","","","","","","","Get a string description of the error code.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the error if the error is an io::Error","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the error if the error is an io::Error","Returns true if the receive half has reached the end of …","Returns the true if the error is an io::Error","","","Creates a new opaque <code>Ping</code> to be sent via a <code>PingPong</code>.","","Requests to be notified when the stream’s capacity …","Polls for the acknowledgement of a previously sent <code>PING</code> …","Polls to be notified when the client resets this stream.","Returns received trailers.","If the error was caused by the remote peer, the error …","Get a mutable reference to this streams <code>ReleaseCapacity</code>.","Release window capacity back to remote stream.","Requests capacity to send data.","Sends a single data frame to the remote peer.","Send a <code>PING</code> frame to the peer.","Resets the stream.","Sends trailers to the remote peer.","Server implementation of the HTTP/2.0 protocol.","Returns the stream ID of this stream.","Returns the stream ID of this <code>SendStream</code>.","Returns the stream ID of the stream whose capacity will be …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds client connections with custom configuration values.","Manages all state associated with an HTTP/2.0 client …","Performs the HTTP/2.0 connection handshake.","A pushed response and corresponding request headers","A stream of pushed responses and corresponding promised …","A future of a pushed HTTP response.","Returns a <code>SendRequest</code> instance once it is ready to send at …","A future of an HTTP response.","Initializes new HTTP/2.0 streams on a connection by …","","","","","","","","","","","","","","","","","","","","","","","","Enables or disables server push promises.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new configured HTTP/2.0 client with default …","Creates a new configured HTTP/2.0 client backed by <code>io</code>.","Indicates the initial window size (in octets) for …","Sets the initial maximum of locally initiated (send) …","Indicates the initial window size (in octets) for …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Consumes <code>self</code>, returning the push promise’s request …","Sets the maximum number of concurrent locally reset …","Sets the maximum number of concurrent streams.","Indicates the size (in octets) of the largest HTTP/2.0 …","Sets the max size of received header frames.","Returns a new client builder instance initialized with …","Takes a <code>PingPong</code> instance from the connection.","","","","","","","Returns <code>Ready</code> when the connection can initialize a new …","Returns a stream of PushPromises","Consumes <code>self</code>, returning a future that returns <code>self</code> back …","Returns a reference to the push promise’s request …","Returns a mutable reference to the push promise’s …","Sets the duration to remember locally reset streams.","Sends a HTTP/2.0 request to the server.","Sets the target window size for the whole connection.","Returns the stream ID of the response stream.","Returns the stream ID of the response stream.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Builds server connections with custom configuration values.","Accepts inbound HTTP/2.0 streams on a connection.","In progress HTTP/2.0 connection handshake future.","Send a response back to the client","Sets the connection to a GOAWAY state.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Starts a graceful shutdown process.","Creates a new configured HTTP/2.0 server with default …","Creates a new configured HTTP/2.0 server backed by <code>io</code>.","Indicates the initial window size (in octets) for …","Indicates the initial window size (in octets) for …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Sets the maximum number of concurrent locally reset …","Sets the maximum number of concurrent streams.","Indicates the size (in octets) of the largest HTTP/2.0 …","Sets the max size of received header frames.","Returns a new server builder instance initialized with …","Takes a <code>PingPong</code> instance from the connection.","","","Returns <code>Ready</code> when the underlying connection has closed.","Polls to be notified when the client resets this stream.","Sets the maximum number of concurrent locally reset …","Send a stream reset to the peer.","Send a response to a client request.","Sets the target window size for the whole connection.","Returns the stream ID of the response stream.","","","","","","","","","","","","",""],"i":[1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,0,0,0,1,1,0,0,2,3,4,5,6,1,7,8,9,2,3,4,5,6,1,7,8,9,7,0,1,8,9,1,8,9,6,1,1,8,1,8,2,3,4,5,6,6,1,1,7,8,9,2,3,4,5,6,6,6,1,1,7,8,9,6,8,2,3,4,5,6,1,7,8,9,6,2,6,1,8,4,2,7,3,7,2,6,2,9,7,7,3,7,7,0,2,7,9,1,8,9,6,1,2,3,4,5,6,1,7,8,9,2,3,4,5,6,1,7,8,9,2,3,4,5,6,1,7,8,9,0,0,0,0,0,0,0,0,0,10,11,12,13,14,15,16,17,18,10,11,12,13,14,15,16,17,18,11,18,11,18,18,18,10,11,12,13,14,15,16,17,18,10,11,12,13,14,15,16,17,18,0,18,18,18,18,10,11,12,13,14,15,16,17,18,10,12,13,14,15,16,18,18,18,18,18,12,10,12,13,14,15,17,11,14,11,16,16,18,11,12,14,15,11,18,10,11,12,13,14,15,16,17,18,10,11,12,13,14,15,16,17,18,10,11,12,13,14,15,16,17,18,0,0,0,0,19,20,19,21,22,20,19,21,22,21,21,21,20,19,21,22,20,19,21,22,19,0,21,21,21,20,19,21,22,20,21,21,21,21,21,19,20,19,19,22,21,22,22,19,22,21,20,19,21,22,20,19,21,22,20,19,21,22],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["sendstream",3,[["intobuf",8]]]],["usize",0]],null,[[["reason",3]],["reason",3]],[[["streamid",3]],["streamid",3]],[[["releasecapacity",3]],["releasecapacity",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["error",3]],["str",0]],[[["reason",3]],["str",0]],[[["reason",3],["reason",3]],["bool",0]],[[["streamid",3],["streamid",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["recvstream",3],["formatter",3]],["result",6]],[[["pingpong",3],["formatter",3]],["result",6]],[[["ping",3],["formatter",3]],["result",6]],[[["pong",3],["formatter",3]],["result",6]],[[["error",3],["formatter",3]],["result",6]],[[["error",3],["formatter",3]],["result",6]],[[["reason",3],["formatter",3]],["result",6]],[[["reason",3],["formatter",3]],["result",6]],[[["sendstream",3,[["",26,[["debug",8],["intobuf",8]]]]],["formatter",3]],["result",6]],[[["streamid",3],["formatter",3]],["result",6]],[[["releasecapacity",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["reason",3]],["error",3]],[[["error",3]],["error",3]],[[["u32",0]],["reason",3]],[[]],[[]],[[]],[[]],[[["error",3]],["option",4,[["error",3]]]],[[["streamid",3],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",3]],["option",4,[["error",3]]]],[[["recvstream",3]],["bool",0]],[[["error",3]],["bool",0]],[[["reason",3],["reason",3]],["bool",0]],[[["streamid",3],["streamid",3]],["bool",0]],[[],["ping",3]],[[["recvstream",3]],["poll",6,[["option",4]]]],[[["sendstream",3,[["intobuf",8]]]],["poll",6,[["option",4,[["usize",0]]],["error",3]]]],[[["pingpong",3]],["poll",6,[["pong",3],["error",3]]]],[[["sendstream",3,[["intobuf",8]]]],["poll",6,[["reason",3],["error",3]]]],[[["recvstream",3]],["poll",6,[["option",4,[["headermap",3]]],["error",3]]]],[[["error",3]],["option",4,[["reason",3]]]],[[["recvstream",3]],["releasecapacity",3]],[[["releasecapacity",3],["usize",0]],["result",4,[["error",3]]]],[[["sendstream",3,[["intobuf",8]]],["usize",0]]],[[["sendstream",3,[["intobuf",8]]],["intobuf",8],["bool",0]],["result",4,[["error",3]]]],[[["pingpong",3],["ping",3]],["result",4,[["error",3]]]],[[["sendstream",3,[["intobuf",8]]],["reason",3]]],[[["sendstream",3,[["intobuf",8]]],["headermap",3]],["result",4,[["error",3]]]],null,[[["recvstream",3]],["streamid",3]],[[["sendstream",3,[["intobuf",8]]]],["streamid",3]],[[["releasecapacity",3]],["streamid",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["sendrequest",3]],["sendrequest",3]],[[["builder",3]],["builder",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["builder",3]],[[["builder",3],["bool",0]],["builder",3]],[[["handshake",3],["formatter",3]],["result",6]],[[["sendrequest",3],["formatter",3]],["result",6]],[[["connection",3],["formatter",3]],["result",6]],[[["readysendrequest",3,[["",26,[["debug",8],["intobuf",8]]]]],["formatter",3]],["result",6]],[[["responsefuture",3],["formatter",3]],["result",6]],[[["pushedresponsefuture",3],["formatter",3]],["result",6]],[[["pushpromise",3],["formatter",3]],["result",6]],[[["pushpromises",3],["formatter",3]],["result",6]],[[["builder",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["handshake",3,[["bytes",3]]]],[[["builder",3]],["handshake",3]],[[["builder",3],["u32",0]],["builder",3]],[[["builder",3],["usize",0]],["builder",3]],[[["builder",3],["u32",0]],["builder",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pushpromise",3]]],[[["builder",3],["usize",0]],["builder",3]],[[["builder",3],["u32",0]],["builder",3]],[[["builder",3],["u32",0]],["builder",3]],[[["builder",3],["u32",0]],["builder",3]],[[],["builder",3]],[[["connection",3]],["option",4,[["pingpong",3]]]],[[["handshake",3]],["poll",6]],[[["connection",3]],["poll",6,[["error",3]]]],[[["readysendrequest",3]],["poll",6]],[[["responsefuture",3]],["poll",6]],[[["pushedresponsefuture",3]],["poll",6]],[[["pushpromises",3]],["poll",6,[["option",4]]]],[[["sendrequest",3]],["poll",6,[["error",3]]]],[[["responsefuture",3]],["pushpromises",3]],[[["sendrequest",3]],["readysendrequest",3]],[[["pushpromise",3]],["request",3]],[[["pushpromise",3]],["request",3]],[[["builder",3],["duration",3]],["builder",3]],[[["sendrequest",3],["request",3],["bool",0]],["result",4,[["error",3]]]],[[["connection",3],["u32",0]]],[[["responsefuture",3]],["streamid",3]],[[["pushedresponsefuture",3]],["streamid",3]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["connection",3],["reason",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["builder",3]],["builder",3]],[[["",0],["",0]]],[[],["builder",3]],[[["handshake",3],["formatter",3]],["result",6]],[[["connection",3],["formatter",3]],["result",6]],[[["builder",3],["formatter",3]],["result",6]],[[["sendresponse",3,[["",26,[["debug",8],["intobuf",8]]]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["connection",3]]],[[],["handshake",3,[["bytes",3]]]],[[["builder",3]],["handshake",3]],[[["builder",3],["u32",0]],["builder",3]],[[["builder",3],["u32",0]],["builder",3]],[[]],[[]],[[]],[[]],[[]],[[["builder",3],["usize",0]],["builder",3]],[[["builder",3],["u32",0]],["builder",3]],[[["builder",3],["u32",0]],["builder",3]],[[["builder",3],["u32",0]],["builder",3]],[[],["builder",3]],[[["connection",3]],["option",4,[["pingpong",3]]]],[[["handshake",3,[["intobuf",8]]]],["poll",6]],[[["connection",3]],["poll",6,[["option",4],["error",3]]]],[[["connection",3]],["poll",6,[["error",3]]]],[[["sendresponse",3,[["intobuf",8]]]],["poll",6,[["reason",3],["error",3]]]],[[["builder",3],["duration",3]],["builder",3]],[[["sendresponse",3,[["intobuf",8]]],["reason",3]]],[[["sendresponse",3,[["intobuf",8]]],["response",3],["bool",0]],["result",4,[["sendstream",3,[["intobuf",8]]],["error",3]]]],[[["connection",3],["u32",0]]],[[["sendresponse",3,[["intobuf",8]]]],["streamid",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"Reason"],[3,"RecvStream"],[3,"PingPong"],[3,"Ping"],[3,"Pong"],[3,"Error"],[3,"SendStream"],[3,"StreamId"],[3,"ReleaseCapacity"],[3,"Handshake"],[3,"SendRequest"],[3,"Connection"],[3,"ReadySendRequest"],[3,"ResponseFuture"],[3,"PushedResponseFuture"],[3,"PushPromise"],[3,"PushPromises"],[3,"Builder"],[3,"Connection"],[3,"Handshake"],[3,"Builder"],[3,"SendResponse"]]},\
"http":{"doc":"A general purpose library of common HTTP types","t":[3,16,3,2,8,2,2,2,6,2,2,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,0,11,11,0,0,0,11,11,11,11,11,11,11,0,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,8,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,17,17,17,4,17,17,3,17,3,3,3,17,17,17,17,17,8,3,3,3,3,3,3,3,3,17,17,17,17,17,13,3,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,17,17,17,17,17,13,3,3,3,3,3,3,17,17,17,17,17,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,18,18,18,18,3,3,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,12,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,3,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,3,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,18,18,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,18,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Error","Error","Extensions","HeaderMap","HttpTryFrom","Method","Request","Response","Result","StatusCode","Uri","Version","borrow","borrow","borrow_mut","borrow_mut","cause","clear","default","description","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","get","get_mut","get_ref","header","insert","into","into","is","method","new","remove","request","response","status","to_string","try_from","try_from","try_into","try_into","type_id","type_id","uri","version","ACCEPT","ACCEPT_CHARSET","ACCEPT_ENCODING","ACCEPT_LANGUAGE","ACCEPT_RANGES","ACCESS_CONTROL_ALLOW_CREDENTIALS","ACCESS_CONTROL_ALLOW_HEADERS","ACCESS_CONTROL_ALLOW_METHODS","ACCESS_CONTROL_ALLOW_ORIGIN","ACCESS_CONTROL_EXPOSE_HEADERS","ACCESS_CONTROL_MAX_AGE","ACCESS_CONTROL_REQUEST_HEADERS","ACCESS_CONTROL_REQUEST_METHOD","AGE","ALLOW","ALT_SVC","AUTHORIZATION","AsHeaderName","CACHE_CONTROL","CONNECTION","CONTENT_DISPOSITION","CONTENT_ENCODING","CONTENT_LANGUAGE","CONTENT_LENGTH","CONTENT_LOCATION","CONTENT_RANGE","CONTENT_SECURITY_POLICY","CONTENT_SECURITY_POLICY_REPORT_ONLY","CONTENT_TYPE","COOKIE","DATE","DNT","Drain","ETAG","EXPECT","EXPIRES","Entry","FORWARDED","FROM","GetAll","HOST","HeaderMap","HeaderName","HeaderValue","IF_MATCH","IF_MODIFIED_SINCE","IF_NONE_MATCH","IF_RANGE","IF_UNMODIFIED_SINCE","IntoHeaderName","IntoIter","InvalidHeaderName","InvalidHeaderNameBytes","InvalidHeaderValue","InvalidHeaderValueBytes","Iter","IterMut","Keys","LAST_MODIFIED","LINK","LOCATION","MAX_FORWARDS","ORIGIN","Occupied","OccupiedEntry","PRAGMA","PROXY_AUTHENTICATE","PROXY_AUTHORIZATION","PUBLIC_KEY_PINS","PUBLIC_KEY_PINS_REPORT_ONLY","RANGE","REFERER","REFERRER_POLICY","REFRESH","RETRY_AFTER","SEC_WEBSOCKET_ACCEPT","SEC_WEBSOCKET_EXTENSIONS","SEC_WEBSOCKET_KEY","SEC_WEBSOCKET_PROTOCOL","SEC_WEBSOCKET_VERSION","SERVER","SET_COOKIE","STRICT_TRANSPORT_SECURITY","TE","TRAILER","TRANSFER_ENCODING","ToStrError","UPGRADE","UPGRADE_INSECURE_REQUESTS","USER_AGENT","VARY","VIA","Vacant","VacantEntry","ValueDrain","ValueIter","ValueIterMut","Values","ValuesMut","WARNING","WWW_AUTHENTICATE","X_CONTENT_TYPE_OPTIONS","X_DNS_PREFETCH_CONTROL","X_FRAME_OPTIONS","X_XSS_PROTECTION","append","append","as_bytes","as_ref","as_ref","as_ref","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone","clone_into","clone_into","clone_into","cmp","contains_key","default","description","description","description","description","description","drain","drop","drop","drop","entry","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_iter","from_lowercase","from_name","from_shared","from_shared_unchecked","from_static","from_static","from_str","from_str","from_str","get","get","get_all","get_mut","get_mut","hash","hash","index","insert","insert","insert","insert_entry","insert_mult","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_mut","is_empty","is_empty","is_sensitive","iter","iter","iter","iter_mut","iter_mut","key","key","key","keys","keys_len","len","len","ne","new","next","next","next","next","next","next","next","next","next","next","next_back","next_back","or_insert","or_insert_with","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","remove","remove","remove_entry","remove_entry_mult","reserve","set_sensitive","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_str","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","0","0","CONNECT","DELETE","GET","HEAD","InvalidMethod","Method","OPTIONS","PATCH","POST","PUT","TRACE","as_ref","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","description","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from_bytes","from_str","hash","into","into","is_idempotent","is_safe","ne","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Builder","Parts","Request","body","body","body_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","connect","default","default","delete","extension","extensions","extensions","extensions_mut","fmt","fmt","fmt","from","from","from","from_parts","get","head","header","headers","headers","headers_mut","headers_mut","headers_ref","into","into","into","into_body","into_parts","map","method","method","method","method_mut","method_ref","new","new","options","patch","post","put","trace","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uri","uri","uri","uri_mut","uri_ref","version","version","version","version_mut","Builder","Parts","Response","body","body","body_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","default","default","extension","extensions","extensions","extensions_mut","fmt","fmt","fmt","from","from","from","from_parts","header","headers","headers","headers_mut","headers_mut","headers_ref","into","into","into","into_body","into_parts","map","new","new","status","status","status","status_mut","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","version","version","version_mut","ACCEPTED","ALREADY_REPORTED","BAD_GATEWAY","BAD_REQUEST","CONFLICT","CONTINUE","CREATED","EXPECTATION_FAILED","FAILED_DEPENDENCY","FORBIDDEN","FOUND","GATEWAY_TIMEOUT","GONE","HTTP_VERSION_NOT_SUPPORTED","IM_A_TEAPOT","IM_USED","INSUFFICIENT_STORAGE","INTERNAL_SERVER_ERROR","InvalidStatusCode","LENGTH_REQUIRED","LOCKED","LOOP_DETECTED","METHOD_NOT_ALLOWED","MISDIRECTED_REQUEST","MOVED_PERMANENTLY","MULTIPLE_CHOICES","MULTI_STATUS","NETWORK_AUTHENTICATION_REQUIRED","NON_AUTHORITATIVE_INFORMATION","NOT_ACCEPTABLE","NOT_EXTENDED","NOT_FOUND","NOT_IMPLEMENTED","NOT_MODIFIED","NO_CONTENT","OK","PARTIAL_CONTENT","PAYLOAD_TOO_LARGE","PAYMENT_REQUIRED","PERMANENT_REDIRECT","PRECONDITION_FAILED","PRECONDITION_REQUIRED","PROCESSING","PROXY_AUTHENTICATION_REQUIRED","RANGE_NOT_SATISFIABLE","REQUEST_HEADER_FIELDS_TOO_LARGE","REQUEST_TIMEOUT","RESET_CONTENT","SEE_OTHER","SERVICE_UNAVAILABLE","SWITCHING_PROTOCOLS","StatusCode","TEMPORARY_REDIRECT","TOO_MANY_REQUESTS","UNAUTHORIZED","UNAVAILABLE_FOR_LEGAL_REASONS","UNPROCESSABLE_ENTITY","UNSUPPORTED_MEDIA_TYPE","UPGRADE_REQUIRED","URI_TOO_LONG","USE_PROXY","VARIANT_ALSO_NEGOTIATES","as_str","as_u16","borrow","borrow","borrow_mut","borrow_mut","canonical_reason","clone","clone_into","cmp","default","description","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from_bytes","from_str","from_u16","hash","into","into","is_client_error","is_informational","is_redirection","is_server_error","is_success","ne","partial_cmp","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Authority","Builder","HTTP","HTTPS","InvalidUri","InvalidUriBytes","InvalidUriParts","Parts","PathAndQuery","Port","Scheme","Uri","as_ref","as_ref","as_ref","as_str","as_str","as_str","as_str","as_u16","authority","authority","authority_part","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","description","description","description","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_parts","from_shared","from_shared","from_shared","from_shared","from_static","from_static","from_static","from_str","from_str","from_str","from_str","hash","hash","hash","host","host","into","into","into","into","into","into","into","into","into","into","into_bytes","into_bytes","into_bytes","into_parts","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path","path","path_and_query","path_and_query","path_and_query","port_part","port_part","port_u16","port_u16","query","query","scheme","scheme","scheme_part","scheme_str","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","HTTP_09","HTTP_10","HTTP_11","HTTP_2","Version","borrow","borrow_mut","clone","clone_into","cmp","default","eq","fmt","from","hash","into","ne","partial_cmp","to_owned","try_from","try_into","type_id"],"q":["http","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","http::headerhttp::header::Entry","","http::method","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","http::request","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","http::response","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","http::status","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","http::urihttp::version","","","","","","","","","","","","","","","","","","","","",""],"d":["A generic “error” for HTTP connections","Associated error with the conversion this implementation …","A type map of protocol extensions.","","Private trait for the <code>http</code> crate to have generic methods …","","","","A <code>Result</code> typedef to use with the <code>http::Error</code> type","","","","","","","","","Clear the <code>Extensions</code> of all inserted extensions.","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Get a reference to a type previously inserted on this …","Get a mutable reference to a type previously inserted on …","Return a reference to the lower level, inner error.","HTTP header types","Insert a type into this <code>Extensions</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return true if the underlying error has the same type as T.","The HTTP request method","Create an empty <code>Extensions</code>.","Remove a type from this <code>Extensions</code>.","HTTP request types.","HTTP response types.","HTTP status codes","","","","","","","","URI component of request and response lines","HTTP version","Advertises which content types the client is able to …","Advertises which character set the client is able to …","Advertises which content encoding the client is able to …","Advertises which languages the client is able to …","Marker used by the server to advertise partial request …","Preflight response indicating if the response to the …","Preflight response indicating permitted HTTP headers.","Preflight header response indicating permitted access …","Indicates whether the response can be shared with …","Indicates which headers can be exposed as part of the …","Indicates how long the results of a preflight request can …","Informs the server which HTTP headers will be used when an …","Informs the server know which HTTP method will be used …","Indicates the time in seconds the object has been in a …","Lists the set of methods support by a resource.","Advertises the availability of alternate services to …","Contains the credentials to authenticate a user agent with …","A marker trait used to identify values that can be used as …","Specifies directives for caching mechanisms in both …","Controls whether or not the network connection stays open …","Indicates if the content is expected to be displayed …","Used to compress the media-type.","Used to describe the languages intended for the audience.","Indicates the size fo the entity-body.","Indicates an alternate location for the returned data.","Indicates where in a full body message a partial message …","Allows controlling resources the user agent is allowed to …","Allows experimenting with policies by monitoring their …","Used to indicate the media type of the resource.","Contains stored HTTP cookies previously sent by the server …","Contains the date and time at which the message was …","Indicates the client’s tracking preference.","A drain iterator for <code>HeaderMap</code>.","Identifier for a specific version of a resource.","Indicates expectations that need to be fulfilled by the …","Contains the date/time after which the response is …","A view into a single location in a <code>HeaderMap</code>, which may be …","Contains information from the client-facing side of proxy …","Contains an Internet email address for a human user who …","A view to all values stored in a single entry.","Specifies the domain name of the server and (optionally) …","A set of HTTP headers","Represents an HTTP header field name","Represents an HTTP header field value.","Makes a request conditional based on the E-Tag.","Makes a request conditional based on the modification date.","Makes a request conditional based on the E-Tag.","Makes a request conditional based on range.","Makes the request conditional based on the last …","A marker trait used to identify values that can be used as …","An owning iterator over the entries of a <code>HeaderMap</code>.","A possible error when converting a <code>HeaderName</code> from another …","A possible error when converting a <code>HeaderName</code> from another …","A possible error when converting a <code>HeaderValue</code> from a …","A possible error when converting a <code>HeaderValue</code> from a …","<code>HeaderMap</code> entry iterator.","<code>HeaderMap</code> mutable entry iterator","An iterator over <code>HeaderMap</code> keys.","Content-Types that are acceptable for the response.","Allows the server to point an interested client to another …","Indicates the URL to redirect a page to.","Indicates the max number of intermediaries the request …","Indicates where a fetch originates from.","An occupied entry","A view into a single occupied location in a <code>HeaderMap</code>.","HTTP/1.0 header usually used for backwards compatibility.","Defines the authentication method that should be used to …","Contains the credentials to authenticate a user agent to a …","Associates a specific cryptographic public key with a …","Sends reports of pinning violation to the report-uri …","Indicates the part of a document that the server should …","Contains the address of the previous web page from which a …","Governs which referrer information should be included with …","Informs the web browser that the current page or frame …","The Retry-After response HTTP header indicates how long …","The |Sec-WebSocket-Accept| header field is used in the …","The |Sec-WebSocket-Extensions| header field is used in the …","The |Sec-WebSocket-Key| header field is used in the …","The |Sec-WebSocket-Protocol| header field is used in the …","The |Sec-WebSocket-Version| header field is used in the …","Contains information about the software used by the origin …","Used to send cookies from the server to the user agent.","Tells the client to communicate with HTTPS instead of …","Informs the server of transfer encodings willing to be …","Allows the sender to include additional fields at the end …","Specifies the form of encoding used to safely transfer the …","A possible error when converting a <code>HeaderValue</code> to a string …","Used as part of the exchange to upgrade the protocol.","Sends a signal to the server expressing the client’s …","Contains a string that allows identifying the requesting …","Determines how to match future requests with cached …","Added by proxies to track routing.","A vacant entry","A view into a single empty location in a <code>HeaderMap</code>.","An drain iterator of all values associated with a single …","An iterator of all values associated with a single header …","A mutable iterator of all values associated with a single …","<code>HeaderMap</code> value iterator.","<code>HeaderMap</code> mutable value iterator","General HTTP header contains information about possible …","Defines the authentication method that should be used to …","Marker used by the server to indicate that the MIME types …","Controls DNS prefetching.","Indicates whether or not a browser should be allowed to …","Stop pages from loading when an XSS attack is detected.","Inserts a key-value pair into the map.","Insert the value into the entry.","Converts a <code>HeaderValue</code> to a byte slice.","","","","Returns a <code>str</code> representation of the header.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of headers the map can hold without …","Clears the map, removing all key-value pairs. Keeps the …","","","","","","","","Returns true if the map contains a value for the specified …","","","","","","","Clears the map, returning all entries as an iterator.","","","","Gets the given key’s corresponding entry in the map for …","","","","","Performs a case-insensitive comparison of the string …","Performs a case-insensitive comparison of the string …","","","","","","","","","Extend a <code>HeaderMap</code> with the contents of another <code>HeaderMap</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a slice of bytes to an HTTP header name.","Attempt to convert a byte slice to a <code>HeaderValue</code>.","","Converts a slice of bytes to an HTTP header name.","Converts a HeaderName into a HeaderValue","Attempt to convert a <code>Bytes</code> buffer to a <code>HeaderValue</code>.","Convert a <code>Bytes</code> directly into a <code>HeaderValue</code> without …","Converts a static string to a HTTP header name.","Convert a static string to a <code>HeaderValue</code>.","","","Attempt to convert a string to a <code>HeaderValue</code>.","Returns a reference to the value associated with the key.","Get a reference to the first value in the entry.","Returns a view of all values associated with a key.","Returns a mutable reference to the value associated with …","Get a mutable reference to the first value in the entry.","","","Panics","Inserts a key-value pair into the map.","Insert the value into the entry.","Sets the value of the entry.","Insert the value into the entry.","Sets the value of the entry.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a consuming iterator, that is, one that moves keys …","","","","","","","","","","","","","","","","Take ownership of the key","Converts the <code>OccupiedEntry</code> into a mutable reference to the …","Returns true if the map contains no elements.","Returns true if the <code>HeaderValue</code> has a length of zero bytes.","Returns <code>true</code> if the value represents sensitive data.","An iterator visiting all key-value pairs.","Returns an iterator visiting all values associated with …","Returns an iterator visiting all values associated with …","An iterator visiting all key-value pairs, with mutable …","Returns an iterator mutably visiting all values associated …","Returns a reference to the entry’s key","Returns a reference to the entry’s key","Returns a reference to the entry’s key.","An iterator visiting all keys.","Returns the number of keys stored in the map.","Returns the number of headers stored in the map.","Returns the length of <code>self</code>.","","Create an empty <code>HeaderMap</code>.","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","","","","","","","Removes a key from the map, returning the value associated …","Remove the entry from the map.","Remove the entry from the map.","Remove the entry from the map.","Reserves capacity for at least <code>additional</code> more headers to …","Mark that the header value represents sensitive …","","","","","","","","","","","","","Yields a <code>&amp;str</code> slice if the <code>HeaderValue</code> only contains …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An iterator visiting all values.","An iterator visiting all values mutably.","Create an empty <code>HeaderMap</code> with the specified capacity.","","","CONNECT","DELETE","GET","HEAD","A possible error value when converting <code>Method</code> from bytes.","The Request Method (VERB)","OPTIONS","PATCH","POST","PUT","TRACE","","Return a &amp;str representation of the HTTP method","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Converts a slice of bytes to an HTTP method.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether a method is considered “idempotent”, meaning …","Whether a method is considered “safe”, meaning the …","","","","","","","","","","","An HTTP request builder","Component parts of an HTTP <code>Request</code>","Represents an HTTP request.","Returns a reference to the associated HTTP body.","“Consumes” this builder, using the provided <code>body</code> to …","Returns a mutable reference to the associated HTTP body.","","","","","","","Creates a new builder-style object to manufacture a <code>Request</code>","Creates a new <code>Builder</code> initialized with a CONNECT method …","","","Creates a new <code>Builder</code> initialized with a DELETE method and …","Adds an extension to this builder","Returns a reference to the associated extensions.","The request’s extensions","Returns a mutable reference to the associated extensions.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>Request</code> with the given components parts and …","Creates a new <code>Builder</code> initialized with a GET method and …","Creates a new <code>Builder</code> initialized with a HEAD method and …","Appends a header to this request builder.","Returns a reference to the associated header field map.","The request’s headers","Returns a mutable reference to the associated header field …","Get header on this request builder. when builder has error …","Get header on this request builder. when builder has error …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the request, returning just the body.","Consumes the request returning the head and body parts.","Consumes the request returning a new request with body …","Returns a reference to the associated HTTP method.","Set the HTTP method for this request.","The request’s method","Returns a mutable reference to the associated HTTP method.","Get the HTTP Method for this request.","Creates a new blank <code>Request</code> with the body","Creates a new default instance of <code>Builder</code> to construct a …","Creates a new <code>Builder</code> initialized with an OPTIONS method …","Creates a new <code>Builder</code> initialized with a PATCH method and …","Creates a new <code>Builder</code> initialized with a POST method and …","Creates a new <code>Builder</code> initialized with a PUT method and …","Creates a new <code>Builder</code> initialized with a TRACE method and …","","","","","","","","","","Returns a reference to the associated URI.","Set the URI for this request.","The request’s URI","Returns a mutable reference to the associated URI.","Get the URI for this request","Returns the associated version.","Set the HTTP version for this request.","The request’s version","Returns a mutable reference to the associated version.","An HTTP response builder","Component parts of an HTTP <code>Response</code>","Represents an HTTP response","Returns a reference to the associated HTTP body.","“Consumes” this builder, using the provided <code>body</code> to …","Returns a mutable reference to the associated HTTP body.","","","","","","","Creates a new builder-style object to manufacture a …","","","Adds an extension to this builder","Returns a reference to the associated extensions.","The response’s extensions","Returns a mutable reference to the associated extensions.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>Response</code> with the given head and body","Appends a header to this response builder.","Returns a reference to the associated header field map.","The response’s headers","Returns a mutable reference to the associated header field …","Get header on this response builder. when builder has …","Get header on this response builder. when builder has …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the response, returning just the body.","Consumes the response returning the head and body parts.","Consumes the response returning a new response with body …","Creates a new blank <code>Response</code> with the body","Creates a new default instance of <code>Builder</code> to construct …","Returns the <code>StatusCode</code>.","Set the HTTP status for this response.","The response’s status","Returns a mutable reference to the associated <code>StatusCode</code>.","","","","","","","","","","Returns a reference to the associated version.","Set the HTTP version for this response.","The response’s version","Returns a mutable reference to the associated version.","202 Accepted [RFC7231, Section 6.3.3]","208 Already Reported [RFC5842]","502 Bad Gateway [RFC7231, Section 6.6.3]","400 Bad Request [RFC7231, Section 6.5.1]","409 Conflict [RFC7231, Section 6.5.8]","100 Continue [RFC7231, Section 6.2.1]","201 Created [RFC7231, Section 6.3.2]","417 Expectation Failed [RFC7231, Section 6.5.14]","424 Failed Dependency [RFC4918]","403 Forbidden [RFC7231, Section 6.5.3]","302 Found [RFC7231, Section 6.4.3]","504 Gateway Timeout [RFC7231, Section 6.6.5]","410 Gone [RFC7231, Section 6.5.9]","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]","418 I’m a teapot [curiously not registered by IANA but …","226 IM Used [RFC3229]","507 Insufficient Storage [RFC4918]","500 Internal Server Error [RFC7231, Section 6.6.1]","A possible error value when converting a <code>StatusCode</code> from a …","411 Length Required [RFC7231, Section 6.5.10]","423 Locked [RFC4918]","508 Loop Detected [RFC5842]","405 Method Not Allowed [RFC7231, Section 6.5.5]","421 Misdirected Request RFC7540, Section 9.1.2","301 Moved Permanently [RFC7231, Section 6.4.2]","300 Multiple Choices [RFC7231, Section 6.4.1]","207 Multi-Status [RFC4918]","511 Network Authentication Required [RFC6585]","203 Non-Authoritative Information [RFC7231, Section 6.3.4]","406 Not Acceptable [RFC7231, Section 6.5.6]","510 Not Extended [RFC2774]","404 Not Found [RFC7231, Section 6.5.4]","501 Not Implemented [RFC7231, Section 6.6.2]","304 Not Modified [RFC7232, Section 4.1]","204 No Content [RFC7231, Section 6.3.5]","200 OK [RFC7231, Section 6.3.1]","206 Partial Content [RFC7233, Section 4.1]","413 Payload Too Large [RFC7231, Section 6.5.11]","402 Payment Required [RFC7231, Section 6.5.2]","308 Permanent Redirect [RFC7238]","412 Precondition Failed [RFC7232, Section 4.2]","428 Precondition Required [RFC6585]","102 Processing [RFC2518]","407 Proxy Authentication Required [RFC7235, Section 3.2]","416 Range Not Satisfiable [RFC7233, Section 4.4]","431 Request Header Fields Too Large [RFC6585]","408 Request Timeout [RFC7231, Section 6.5.7]","205 Reset Content [RFC7231, Section 6.3.6]","303 See Other [RFC7231, Section 6.4.4]","503 Service Unavailable [RFC7231, Section 6.6.4]","101 Switching Protocols [RFC7231, Section 6.2.2]","An HTTP status code (<code>status-code</code> in RFC 7230 et al.).","307 Temporary Redirect [RFC7231, Section 6.4.7]","429 Too Many Requests [RFC6585]","401 Unauthorized [RFC7235, Section 3.1]","451 Unavailable For Legal Reasons [RFC7725]","422 Unprocessable Entity [RFC4918]","415 Unsupported Media Type [RFC7231, Section 6.5.13]","426 Upgrade Required [RFC7231, Section 6.5.15]","414 URI Too Long [RFC7231, Section 6.5.12]","305 Use Proxy [RFC7231, Section 6.4.5]","506 Variant Also Negotiates [RFC2295]","Returns a &amp;str representation of the <code>StatusCode</code>","Returns the <code>u16</code> corresponding to this <code>StatusCode</code>.","","","","","Get the standardised <code>reason-phrase</code> for this status code.","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Converts a &amp;u8 to a status code","","Converts a u16 to a status code.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if status is within 400-499.","Check if status is within 100-199.","Check if status is within 300-399.","Check if status is within 500-599.","Check if status is within 200-299.","","","","","","","","","","","","Represents the authority component of a URI.","A builder for <code>Uri</code>s.","HTTP protocol scheme","HTTP protocol over TLS.","An error resulting from a failed attempt to construct a …","An error resulting from a failed attempt to construct a …","An error resulting from a failed attempt to construct a …","The various parts of a URI.","Represents the path component of a URI","The port component of a URI.","Represents the scheme component of a URI","The URI component of a request.","","","","Returns the port number as a <code>str</code>.","Return a str representation of the authority","Returns the path and query as a string component.","Return a str representation of the scheme","Returns the port number as a <code>u16</code>.","Set the <code>Authority</code> for this URI.","The authority component of a URI","Get the authority of this <code>Uri</code>.","","","","","","","","","","","","","","","","","","","","","Consumes this builder, and tries to construct a valid <code>Uri</code> …","Creates a new builder-style object to manufacture a <code>Uri</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Attempt to convert a <code>Uri</code> from <code>Parts</code>","Attempt to convert an <code>Authority</code> from <code>Bytes</code>.","Attempt to convert a <code>PathAndQuery</code> from <code>Bytes</code>.","Attempt to convert a <code>Scheme</code> from <code>Bytes</code>","Attempt to convert a <code>Uri</code> from <code>Bytes</code>","Attempt to convert an <code>Authority</code> from a static string.","Convert a <code>PathAndQuery</code> from a static string.","Convert a <code>Uri</code> from a static string.","","","","","","","","Get the host of this <code>Authority</code>.","Get the host of this <code>Uri</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts this <code>Authority</code> back to a sequence of bytes","Converts this <code>PathAndQuery</code> back to a sequence of bytes","Converts this <code>Scheme</code> back to a sequence of bytes","Convert a <code>Uri</code> into <code>Parts</code>.","Creates a new default instance of <code>Builder</code> to construct a …","","","","","","","","","Returns the path component","Get the path of this <code>Uri</code>.","Set the <code>PathAndQuery</code> for this URI.","Returns the path &amp; query components of the Uri","The origin-form component of a URI","Get the port part of this <code>Authority</code>.","Get the port part of this <code>Uri</code>.","Get the port of this <code>Authority</code> as a <code>u16</code>.","Get the port of this <code>Uri</code> as a <code>u16</code>.","Returns the query string component","Get the query string of this <code>Uri</code>, starting after the <code>?</code>.","Set the <code>Scheme</code> for this URI.","The scheme component of a URI","Get the scheme of this <code>Uri</code>.","Get the scheme of this <code>Uri</code> as a <code>&amp;str</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>HTTP/0.9</code>","<code>HTTP/1.0</code>","<code>HTTP/1.1</code>","<code>HTTP/2.0</code>","Represents a version of the HTTP spec.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,1,0,0,0,0,0,0,0,0,0,0,2,3,2,3,2,3,3,2,2,2,3,2,2,2,2,2,2,2,2,2,2,3,3,3,2,0,3,2,3,2,0,3,3,0,0,0,2,2,3,2,3,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,5,6,7,8,8,7,8,5,9,10,11,12,13,14,15,16,4,17,6,18,19,20,8,8,21,22,7,23,24,25,5,9,10,11,12,13,14,15,16,4,17,6,18,19,20,8,21,22,7,23,24,25,5,5,5,8,7,5,8,7,7,5,5,21,22,23,24,25,5,11,15,20,5,5,16,8,8,8,8,8,7,7,7,7,7,7,5,5,5,9,10,11,12,13,14,15,16,4,17,6,18,19,20,8,8,21,21,22,22,7,23,23,24,24,25,25,5,9,10,11,12,13,14,15,16,4,17,6,18,19,20,8,8,21,22,7,7,7,7,7,7,7,7,7,7,7,23,24,25,8,7,5,8,7,7,7,8,7,8,7,7,5,6,5,5,6,8,7,5,5,17,6,17,6,5,9,10,11,12,13,14,15,16,4,17,6,18,19,20,8,21,22,7,23,24,25,5,5,5,9,10,11,12,13,14,15,16,16,6,6,6,18,19,20,17,6,5,7,7,5,16,6,5,6,4,17,6,5,5,5,7,8,5,9,10,11,12,13,14,15,18,19,20,18,19,4,4,7,7,7,7,7,7,5,6,6,6,5,7,9,10,11,12,13,14,15,18,20,5,8,7,7,8,21,22,23,24,25,5,9,10,11,12,13,14,15,16,4,17,6,18,19,20,8,21,22,7,23,24,25,5,9,10,11,12,13,14,15,16,4,17,6,18,19,20,8,21,22,7,23,24,25,5,9,10,11,12,13,14,15,16,4,17,6,18,19,20,8,21,22,7,23,24,25,5,5,5,26,27,28,28,28,28,0,0,28,28,28,28,28,28,28,28,29,28,29,28,28,28,29,28,28,28,28,28,28,28,29,29,28,28,29,28,28,28,28,29,28,28,28,28,28,29,28,29,28,29,28,29,0,0,0,30,31,30,30,32,31,30,32,31,30,30,30,31,30,31,30,32,30,30,32,31,30,32,31,30,30,30,31,30,32,30,31,31,30,32,31,30,30,30,30,31,32,30,31,30,31,30,30,30,30,30,30,32,31,30,32,31,30,32,31,30,31,32,30,31,30,31,32,30,0,0,0,33,34,33,33,35,34,33,35,34,33,33,34,34,33,35,33,33,35,34,33,35,34,33,34,33,35,33,34,34,33,35,34,33,33,33,33,34,33,34,35,33,33,35,34,33,35,34,33,35,34,33,34,35,33,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,36,36,36,36,36,36,36,36,36,36,36,36,36,37,36,37,36,36,36,36,36,37,36,36,36,36,37,37,36,36,37,36,36,36,36,36,37,36,36,36,36,36,36,36,36,36,37,36,37,36,37,36,37,0,0,38,38,0,0,0,0,0,0,0,0,39,40,38,39,40,41,38,39,42,43,44,39,40,42,41,38,44,43,45,46,47,39,40,42,41,38,44,43,45,46,47,42,44,40,41,38,44,40,41,38,44,42,44,43,45,46,47,39,39,40,40,40,40,41,41,41,41,38,38,44,44,44,39,39,40,40,42,41,41,38,38,44,44,43,45,45,46,46,47,47,39,40,42,41,38,44,43,43,45,46,47,44,40,41,38,44,40,41,44,40,41,38,44,40,38,44,40,44,39,40,42,41,38,44,43,45,46,47,40,41,38,44,42,40,40,40,40,41,41,41,41,41,44,42,44,43,40,44,40,44,41,44,42,43,44,44,40,41,38,44,39,40,41,38,44,45,46,47,39,40,42,41,38,44,43,45,46,47,39,40,42,41,38,44,43,45,46,47,39,40,42,41,38,44,43,45,46,47,48,48,48,48,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["error",3]],["option",4,[["error",8]]]],[[["extensions",3]]],[[],["extensions",3]],[[["error",3]],["str",0]],[[["error",3],["formatter",3]],["result",6]],[[["error",3],["formatter",3]],["result",6]],[[["extensions",3],["formatter",3]],["result",6]],[[["invalidmethod",3]],["error",3]],[[["invalidstatuscode",3]],["error",3]],[[["invalidheadername",3]],["error",3]],[[["invaliduri",3]],["error",3]],[[]],[[["invalidheadervaluebytes",3]],["error",3]],[[["invaliduriparts",3]],["error",3]],[[["invaliduribytes",3]],["error",3]],[[["invalidheadervalue",3]],["error",3]],[[["invalidheadernamebytes",3]],["error",3]],[[]],[[["extensions",3]],["option",4]],[[["extensions",3]],["option",4]],[[["error",3]],["error",8]],null,[[["extensions",3],["",26,[["send",8],["sync",8]]]],["option",4,[["",26,[["send",8],["sync",8]]]]]],[[]],[[]],[[["error",3]],["bool",0]],null,[[],["extensions",3]],[[["extensions",3]],["option",4,[["",26,[["send",8],["sync",8]]]]]],null,null,null,[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["headermap",3]],["bool",0]],[[["occupiedentry",3]]],[[["headervalue",3]]],[[["headername",3]],["str",0]],[[["headername",3]]],[[["headervalue",3]]],[[["headername",3]],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["headername",3]],["strheadermap",3]],["usize",0]],[[["headermap",3]]],[[["headermap",3,[["clone",8]]]],["headermap",3,[["clone",8]]]],[[["headername",3]],["headername",3]],[[["headervalue",3]],["headervalue",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["headervalue",3],["headervalue",3]],["ordering",4]],[[["headermap",3]],["bool",0]],[[],["headermap",3]],[[["invalidheadername",3]],["str",0]],[[["invalidheadernamebytes",3]],["str",0]],[[["invalidheadervalue",3]],["str",0]],[[["invalidheadervaluebytes",3]],["str",0]],[[["tostrerror",3]],["str",0]],[[["headermap",3]],["drain",3]],[[["intoiter",3]]],[[["drain",3]]],[[["valuedrain",3]]],[[["headermap",3]],["result",4,[["entry",4],["invalidheadername",3]]]],[[["headermap",3,[["partialeq",8]]],["headermap",3]],["bool",0]],[[["getall",3,[["partialeq",8]]],["getall",3,[["partialeq",8]]]],["bool",0]],[[["headername",3],["headername",3]],["bool",0]],[[["headername",3],["headername",3]],["bool",0]],[[["headername",3],["str",0]],["bool",0]],[[["headername",3],["str",0]],["bool",0]],[[["headername",3],["headername",3]],["bool",0]],[[["headervalue",3],["headervalue",3]],["bool",0]],[[["headervalue",3],["str",0]],["bool",0]],[[["headervalue",3]],["bool",0]],[[["headervalue",3],["string",3]],["bool",0]],[[["headervalue",3],["headervalue",3]],["bool",0]],[[["headervalue",3],["",0]],["bool",0]],[[["headermap",3],["intoiterator",8]]],[[["headermap",3],["intoiterator",8]]],[[["headermap",3,[["debug",8]]],["formatter",3]],["result",6]],[[["iter",3,[["debug",8]]],["formatter",3]],["result",6]],[[["itermut",3,[["debug",8]]],["formatter",3]],["result",6]],[[["intoiter",3,[["debug",8]]],["formatter",3]],["result",6]],[[["keys",3,[["debug",8]]],["formatter",3]],["result",6]],[[["values",3,[["debug",8]]],["formatter",3]],["result",6]],[[["valuesmut",3,[["debug",8]]],["formatter",3]],["result",6]],[[["drain",3,[["debug",8]]],["formatter",3]],["result",6]],[[["getall",3,[["debug",8]]],["formatter",3]],["result",6]],[[["entry",4,[["debug",8]]],["formatter",3]],["result",6]],[[["vacantentry",3,[["debug",8]]],["formatter",3]],["result",6]],[[["occupiedentry",3,[["debug",8]]],["formatter",3]],["result",6]],[[["valueiter",3,[["debug",8]]],["formatter",3]],["result",6]],[[["valueitermut",3,[["debug",8]]],["formatter",3]],["result",6]],[[["valuedrain",3,[["debug",8]]],["formatter",3]],["result",6]],[[["headername",3],["formatter",3]],["result",6]],[[["headername",3],["formatter",3]],["result",6]],[[["invalidheadername",3],["formatter",3]],["result",6]],[[["invalidheadername",3],["formatter",3]],["result",6]],[[["invalidheadernamebytes",3],["formatter",3]],["result",6]],[[["invalidheadernamebytes",3],["formatter",3]],["result",6]],[[["headervalue",3],["formatter",3]],["result",6]],[[["invalidheadervalue",3],["formatter",3]],["result",6]],[[["invalidheadervalue",3],["formatter",3]],["result",6]],[[["invalidheadervaluebytes",3],["formatter",3]],["result",6]],[[["invalidheadervaluebytes",3],["formatter",3]],["result",6]],[[["tostrerror",3],["formatter",3]],["result",6]],[[["tostrerror",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["headername",3]],["headername",3]],[[]],[[]],[[["u16",0]],["headervalue",3]],[[["headername",3]],["headervalue",3]],[[["i16",0]],["headervalue",3]],[[]],[[["u32",0]],["headervalue",3]],[[["headervalue",3]],["headervalue",3]],[[["i32",0]],["headervalue",3]],[[["u64",0]],["headervalue",3]],[[["i64",0]],["headervalue",3]],[[["isize",0]],["headervalue",3]],[[["usize",0]],["headervalue",3]],[[]],[[]],[[]],[[],["result",4,[["headername",3],["invalidheadername",3]]]],[[],["result",4,[["headervalue",3],["invalidheadervalue",3]]]],[[],["headermap",3]],[[],["result",4,[["headername",3],["invalidheadername",3]]]],[[["headername",3]],["headervalue",3]],[[["bytes",3]],["result",4,[["headervalue",3],["invalidheadervaluebytes",3]]]],[[["bytes",3]],["headervalue",3]],[[["str",0]],["headername",3]],[[["str",0]],["headervalue",3]],[[["str",0]],["result",4,[["headername",3],["invalidheadername",3]]]],[[["str",0]],["result",4,[["headervalue",3]]]],[[["str",0]],["result",4,[["headervalue",3],["invalidheadervalue",3]]]],[[["headermap",3]],["option",4]],[[["occupiedentry",3]],["",0]],[[["headermap",3]],["getall",3]],[[["headermap",3]],["option",4]],[[["occupiedentry",3]],["",0]],[[["headername",3],["",0]]],[[["headervalue",3],["",0]]],[[["headermap",3]],["",0]],[[["headermap",3]],["option",4]],[[["vacantentry",3]],["",0]],[[["occupiedentry",3]]],[[["vacantentry",3]],["occupiedentry",3]],[[["occupiedentry",3]],["valuedrain",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["headermap",3]],["iter",3]],[[["headermap",3]],["itermut",3]],[[["headermap",3]],["intoiter",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["getall",3]],["valueiter",3]],[[["getall",3]],["valueiter",3]],[[["occupiedentry",3]],["valueitermut",3]],[[["occupiedentry",3]],["valueiter",3]],[[["occupiedentry",3]],["valueitermut",3]],[[]],[[]],[[]],[[["vacantentry",3]],["headername",3]],[[["occupiedentry",3]],["",0]],[[["headermap",3]],["bool",0]],[[["headervalue",3]],["bool",0]],[[["headervalue",3]],["bool",0]],[[["headermap",3]],["iter",3]],[[["getall",3]],["valueiter",3]],[[["occupiedentry",3]],["valueiter",3]],[[["headermap",3]],["itermut",3]],[[["occupiedentry",3]],["valueitermut",3]],[[["entry",4]],["headername",3]],[[["vacantentry",3]],["headername",3]],[[["occupiedentry",3]],["headername",3]],[[["headermap",3]],["keys",3]],[[["headermap",3]],["usize",0]],[[["headermap",3]],["usize",0]],[[["headervalue",3]],["usize",0]],[[["headername",3],["headername",3]],["bool",0]],[[],["headermap",3]],[[["iter",3]],["option",4]],[[["itermut",3]],["option",4]],[[["intoiter",3]],["option",4]],[[["keys",3]],["option",4]],[[["values",3]],["option",4]],[[["valuesmut",3]],["option",4]],[[["drain",3]],["option",4]],[[["valueiter",3]],["option",4]],[[["valueitermut",3]],["option",4]],[[["valuedrain",3]],["option",4]],[[["valueiter",3]],["option",4]],[[["valueitermut",3]],["option",4]],[[["entry",4]],["",0]],[[["entry",4],["fnonce",8]],["",0]],[[["headervalue",3],["str",0]],["option",4,[["ordering",4]]]],[[["headervalue",3],["headervalue",3]],["option",4,[["ordering",4]]]],[[["headervalue",3],["",0]],["option",4,[["ordering",4]]]],[[["headervalue",3],["headervalue",3]],["option",4,[["ordering",4]]]],[[["headervalue",3]],["option",4,[["ordering",4]]]],[[["headervalue",3],["string",3]],["option",4,[["ordering",4]]]],[[["headermap",3]],["option",4]],[[["occupiedentry",3]]],[[["occupiedentry",3]]],[[["occupiedentry",3]]],[[["headermap",3],["usize",0]]],[[["headervalue",3],["bool",0]]],[[["iter",3]]],[[["itermut",3]]],[[["intoiter",3]]],[[["keys",3]]],[[["values",3]]],[[["valuesmut",3]]],[[["drain",3]]],[[["valueiter",3]]],[[["valuedrain",3]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["headervalue",3]],["result",4,[["str",0],["tostrerror",3]]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["headermap",3]],["values",3]],[[["headermap",3]],["valuesmut",3]],[[["usize",0]],["headermap",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["method",3]],["str",0]],[[["method",3]],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["method",3]],["method",3]],[[["",0],["",0]]],[[],["method",3]],[[["invalidmethod",3]],["str",0]],[[["method",3],["method",3]],["bool",0]],[[["method",3],["method",3]],["bool",0]],[[["method",3],["method",3]],["bool",0]],[[["method",3],["str",0]],["bool",0]],[[["method",3],["str",0]],["bool",0]],[[["method",3],["formatter",3]],["result",6]],[[["method",3],["formatter",3]],["result",6]],[[["invalidmethod",3],["formatter",3]],["result",6]],[[["invalidmethod",3],["formatter",3]],["result",6]],[[["method",3]],["method",3]],[[]],[[]],[[],["result",4,[["method",3],["invalidmethod",3]]]],[[["str",0]],["result",4,[["method",3]]]],[[["method",3],["",0]]],[[]],[[]],[[["method",3]],["bool",0]],[[["method",3]],["bool",0]],[[["method",3],["method",3]],["bool",0]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["request",3]],["",0]],[[["builder",3]],["result",6,[["request",3]]]],[[["request",3]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["builder",3]],[[],["builder",3]],[[],["request",3,[["default",8]]]],[[],["builder",3]],[[],["builder",3]],[[["builder",3]],["builder",3]],[[["request",3]],["extensions",3]],null,[[["request",3]],["extensions",3]],[[["request",3,[["debug",8]]],["formatter",3]],["result",6]],[[["parts",3],["formatter",3]],["result",6]],[[["builder",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["parts",3]],["request",3]],[[],["builder",3]],[[],["builder",3]],[[["builder",3]],["builder",3]],[[["request",3]],["headermap",3]],null,[[["request",3]],["headermap",3]],[[["builder",3]],["option",4,[["headermap",3]]]],[[["builder",3]],["option",4,[["headermap",3]]]],[[]],[[]],[[]],[[["request",3]]],[[["request",3]]],[[["request",3]],["request",3]],[[["request",3]],["method",3]],[[["builder",3]],["builder",3]],null,[[["request",3]],["method",3]],[[["builder",3]],["option",4,[["method",3]]]],[[],["request",3]],[[],["builder",3]],[[],["builder",3]],[[],["builder",3]],[[],["builder",3]],[[],["builder",3]],[[],["builder",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["request",3]],["uri",3]],[[["builder",3]],["builder",3]],null,[[["request",3]],["uri",3]],[[["builder",3]],["option",4,[["uri",3]]]],[[["request",3]],["version",3]],[[["builder",3],["version",3]],["builder",3]],null,[[["request",3]],["version",3]],null,null,null,[[["response",3]],["",0]],[[["builder",3]],["result",6,[["response",3]]]],[[["response",3]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["builder",3]],[[],["response",3,[["default",8]]]],[[],["builder",3]],[[["builder",3]],["builder",3]],[[["response",3]],["extensions",3]],null,[[["response",3]],["extensions",3]],[[["response",3,[["debug",8]]],["formatter",3]],["result",6]],[[["parts",3],["formatter",3]],["result",6]],[[["builder",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["parts",3]],["response",3]],[[["builder",3]],["builder",3]],[[["response",3]],["headermap",3]],null,[[["response",3]],["headermap",3]],[[["builder",3]],["option",4,[["headermap",3]]]],[[["builder",3]],["option",4,[["headermap",3]]]],[[]],[[]],[[]],[[["response",3]]],[[["response",3]]],[[["response",3]],["response",3]],[[],["response",3]],[[],["builder",3]],[[["response",3]],["statuscode",3]],[[["builder",3]],["builder",3]],null,[[["response",3]],["statuscode",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["response",3]],["version",3]],[[["builder",3],["version",3]],["builder",3]],null,[[["response",3]],["version",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["statuscode",3]],["str",0]],[[["statuscode",3]],["u16",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["statuscode",3]],["option",4,[["str",0]]]],[[["statuscode",3]],["statuscode",3]],[[["",0],["",0]]],[[["statuscode",3],["statuscode",3]],["ordering",4]],[[],["statuscode",3]],[[["invalidstatuscode",3]],["str",0]],[[["statuscode",3],["statuscode",3]],["bool",0]],[[["statuscode",3],["u16",0]],["bool",0]],[[["statuscode",3],["formatter",3]],["result",6]],[[["statuscode",3],["formatter",3]],["result",6]],[[["invalidstatuscode",3],["formatter",3]],["result",6]],[[["invalidstatuscode",3],["formatter",3]],["result",6]],[[]],[[["statuscode",3]],["statuscode",3]],[[]],[[],["result",4,[["statuscode",3],["invalidstatuscode",3]]]],[[["str",0]],["result",4,[["statuscode",3],["invalidstatuscode",3]]]],[[["u16",0]],["result",4,[["statuscode",3],["invalidstatuscode",3]]]],[[["statuscode",3],["",0]]],[[]],[[]],[[["statuscode",3]],["bool",0]],[[["statuscode",3]],["bool",0]],[[["statuscode",3]],["bool",0]],[[["statuscode",3]],["bool",0]],[[["statuscode",3]],["bool",0]],[[["statuscode",3],["statuscode",3]],["bool",0]],[[["statuscode",3],["statuscode",3]],["option",4,[["ordering",4]]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["port",3]],["str",0]],[[["authority",3]],["str",0]],[[["scheme",3]],["str",0]],[[["port",3]],["str",0]],[[["authority",3]],["str",0]],[[["pathandquery",3]],["str",0]],[[["scheme",3]],["str",0]],[[["port",3]],["u16",0]],[[["builder",3]],["builder",3]],null,[[["uri",3]],["option",4,[["authority",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["builder",3]],["result",6,[["uri",3]]]],[[],["builder",3]],[[["authority",3]],["authority",3]],[[["pathandquery",3]],["pathandquery",3]],[[["scheme",3]],["scheme",3]],[[["uri",3]],["uri",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["builder",3]],[[],["uri",3]],[[],["parts",3]],[[["invaliduri",3]],["str",0]],[[["invaliduribytes",3]],["str",0]],[[["invaliduriparts",3]],["str",0]],[[["port",3],["port",3]],["bool",0]],[[["port",3],["u16",0]],["bool",0]],[[["authority",3],["string",3]],["bool",0]],[[["authority",3],["authority",3]],["bool",0]],[[["authority",3],["str",0]],["bool",0]],[[["authority",3],["str",0]],["bool",0]],[[["pathandquery",3],["str",0]],["bool",0]],[[["pathandquery",3],["string",3]],["bool",0]],[[["pathandquery",3],["str",0]],["bool",0]],[[["pathandquery",3],["pathandquery",3]],["bool",0]],[[["scheme",3],["scheme",3]],["bool",0]],[[["scheme",3],["str",0]],["bool",0]],[[["uri",3],["uri",3]],["bool",0]],[[["uri",3],["str",0]],["bool",0]],[[["uri",3],["str",0]],["bool",0]],[[["port",3],["formatter",3]],["result",6]],[[["port",3],["formatter",3]],["result",6]],[[["authority",3],["formatter",3]],["result",6]],[[["authority",3],["formatter",3]],["result",6]],[[["builder",3],["formatter",3]],["result",6]],[[["pathandquery",3],["formatter",3]],["result",6]],[[["pathandquery",3],["formatter",3]],["result",6]],[[["scheme",3],["formatter",3]],["result",6]],[[["scheme",3],["formatter",3]],["result",6]],[[["uri",3],["formatter",3]],["result",6]],[[["uri",3],["formatter",3]],["result",6]],[[["parts",3],["formatter",3]],["result",6]],[[["invaliduri",3],["formatter",3]],["result",6]],[[["invaliduri",3],["formatter",3]],["result",6]],[[["invaliduribytes",3],["formatter",3]],["result",6]],[[["invaliduribytes",3],["formatter",3]],["result",6]],[[["invaliduriparts",3],["formatter",3]],["result",6]],[[["invaliduriparts",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["uri",3]],["parts",3]],[[]],[[]],[[]],[[]],[[["parts",3]],["result",4,[["uri",3],["invaliduriparts",3]]]],[[["bytes",3]],["result",4,[["authority",3],["invaliduribytes",3]]]],[[["bytes",3]],["result",4,[["pathandquery",3],["invaliduribytes",3]]]],[[["bytes",3]],["result",4,[["scheme",3],["invaliduribytes",3]]]],[[["bytes",3]],["result",4,[["uri",3],["invaliduribytes",3]]]],[[["str",0]],["authority",3]],[[["str",0]],["pathandquery",3]],[[["str",0]],["uri",3]],[[["str",0]],["result",4,[["authority",3],["invaliduri",3]]]],[[["str",0]],["result",4,[["pathandquery",3],["invaliduri",3]]]],[[["str",0]],["result",4,[["scheme",3]]]],[[["str",0]],["result",4,[["uri",3],["invaliduri",3]]]],[[["authority",3],["",0]]],[[["scheme",3],["",0]]],[[["uri",3],["",0]]],[[["authority",3]],["str",0]],[[["uri",3]],["option",4,[["str",0]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["authority",3]],["bytes",3]],[[["pathandquery",3]],["bytes",3]],[[["scheme",3]],["bytes",3]],[[["uri",3]],["parts",3]],[[],["builder",3]],[[["authority",3],["string",3]],["option",4,[["ordering",4]]]],[[["authority",3],["str",0]],["option",4,[["ordering",4]]]],[[["authority",3],["str",0]],["option",4,[["ordering",4]]]],[[["authority",3],["authority",3]],["option",4,[["ordering",4]]]],[[["pathandquery",3],["str",0]],["option",4,[["ordering",4]]]],[[["pathandquery",3],["str",0]],["option",4,[["ordering",4]]]],[[["pathandquery",3],["string",3]],["option",4,[["ordering",4]]]],[[["pathandquery",3],["pathandquery",3]],["option",4,[["ordering",4]]]],[[["pathandquery",3]],["str",0]],[[["uri",3]],["str",0]],[[["builder",3]],["builder",3]],[[["uri",3]],["option",4,[["pathandquery",3]]]],null,[[["authority",3]],["option",4,[["port",3,[["str",0]]]]]],[[["uri",3]],["option",4,[["port",3,[["str",0]]]]]],[[["authority",3]],["option",4,[["u16",0]]]],[[["uri",3]],["option",4,[["u16",0]]]],[[["pathandquery",3]],["option",4,[["str",0]]]],[[["uri",3]],["option",4,[["str",0]]]],[[["builder",3]],["builder",3]],null,[[["uri",3]],["option",4,[["scheme",3]]]],[[["uri",3]],["option",4,[["str",0]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["version",3]],["version",3]],[[["",0],["",0]]],[[["version",3],["version",3]],["ordering",4]],[[],["version",3]],[[["version",3],["version",3]],["bool",0]],[[["version",3],["formatter",3]],["result",6]],[[]],[[["version",3],["",0]]],[[]],[[["version",3],["version",3]],["bool",0]],[[["version",3],["version",3]],["option",4,[["ordering",4]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[8,"HttpTryFrom"],[3,"Error"],[3,"Extensions"],[4,"Entry"],[3,"HeaderMap"],[3,"OccupiedEntry"],[3,"HeaderValue"],[3,"HeaderName"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Drain"],[3,"GetAll"],[3,"VacantEntry"],[3,"ValueIter"],[3,"ValueIterMut"],[3,"ValueDrain"],[3,"InvalidHeaderName"],[3,"InvalidHeaderNameBytes"],[3,"InvalidHeaderValue"],[3,"InvalidHeaderValueBytes"],[3,"ToStrError"],[13,"Occupied"],[13,"Vacant"],[3,"Method"],[3,"InvalidMethod"],[3,"Request"],[3,"Builder"],[3,"Parts"],[3,"Response"],[3,"Builder"],[3,"Parts"],[3,"StatusCode"],[3,"InvalidStatusCode"],[3,"Scheme"],[3,"Port"],[3,"Authority"],[3,"PathAndQuery"],[3,"Builder"],[3,"Parts"],[3,"Uri"],[3,"InvalidUri"],[3,"InvalidUriBytes"],[3,"InvalidUriParts"],[3,"Version"]]},\
"httparse":{"doc":"httparse","t":[13,17,4,3,13,13,3,13,13,3,3,6,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,5,5,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["Complete","EMPTY_HEADER","Error","Header","HeaderName","HeaderValue","InvalidChunkSize","NewLine","Partial","Request","Response","Result","Status","Status","Token","TooManyHeaders","Version","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","code","description","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","headers","headers","into","into","into","into","into","into","is_complete","is_partial","method","name","ne","ne","ne","ne","new","new","parse","parse","parse_chunk_size","parse_headers","path","reason","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unwrap","value","version","version","0"],"q":["httparse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","httparse::Status"],"d":["The completed result.","An empty header, useful for constructing a <code>Header</code> array to …","An error in parsing.","Represents a parsed header.","Invalid byte in header name.","Invalid byte in header value.","An error in parsing a chunk size.","Invalid byte in new line.","A partial result.","A parsed Request.","A parsed Response.","A Result of any parsing action.","The result of a successful parse pass.","Invalid byte in Response status.","Invalid byte where token is required.","Parsed more headers than provided buffer can contain.","Invalid byte in HTTP version.","","","","","","","","","","","","","","","","","","","The response code, such as <code>200</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The request headers.","The response headers.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convenience method to check if status is complete.","Convenience method to check if status is partial.","The request method, such as <code>GET</code>.","The name portion of a header.","","","","","Creates a new Request, using a slice of headers you …","Creates a new <code>Response</code> using a slice of <code>Header</code>s you have …","Try to parse a buffer of bytes into the Request.","Try to parse a buffer of bytes into this <code>Response</code>.","Parse a buffer of bytes as a chunk size.","Parse a buffer of bytes as headers.","The request path, such as <code>/about-us</code>.","The response reason-phrase, such as <code>OK</code>.","","","","","","","","","","","","","","","","","","","","","","","","Convenience method to unwrap a Complete value. Panics if …","The value portion of a header.","The request version, such as <code>HTTP/1.1</code>.","The response version, such as <code>HTTP/1.1</code>.",""],"i":[1,0,0,0,2,2,0,2,1,0,0,0,0,2,2,2,2,2,3,1,4,5,6,2,3,1,4,5,6,2,1,6,2,1,6,5,2,2,3,1,4,5,6,2,2,3,3,1,4,5,6,2,3,1,4,5,6,4,5,2,3,1,4,5,6,1,1,4,6,1,4,5,6,4,5,4,5,0,0,4,5,2,1,6,2,3,2,3,1,4,5,6,2,3,1,4,5,6,2,3,1,4,5,6,1,6,4,5,7],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["error",4]],["error",4]],[[["status",4,[["clone",8]]]],["status",4,[["clone",8]]]],[[["header",3]],["header",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["error",4]],["str",0]],[[["error",4],["error",4]],["bool",0]],[[["invalidchunksize",3],["invalidchunksize",3]],["bool",0]],[[["status",4,[["partialeq",8]]],["status",4]],["bool",0]],[[["request",3],["request",3]],["bool",0]],[[["response",3],["response",3]],["bool",0]],[[["header",3],["header",3]],["bool",0]],[[["error",4],["formatter",3]],["result",6]],[[["error",4],["formatter",3]],["result",6]],[[["invalidchunksize",3],["formatter",3]],["result",6]],[[["invalidchunksize",3],["formatter",3]],["result",6]],[[["status",4,[["debug",8]]],["formatter",3]],["result",6]],[[["request",3],["formatter",3]],["result",6]],[[["response",3],["formatter",3]],["result",6]],[[["header",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["status",4]],["bool",0]],[[["status",4]],["bool",0]],null,null,[[["status",4,[["partialeq",8]]],["status",4]],["bool",0]],[[["request",3],["request",3]],["bool",0]],[[["response",3],["response",3]],["bool",0]],[[["header",3],["header",3]],["bool",0]],[[],["request",3]],[[],["response",3]],[[["request",3]],["result",6,[["usize",0]]]],[[["response",3]],["result",6,[["usize",0]]]],[[],["result",4,[["status",4],["invalidchunksize",3]]]],[[],["result",6]],null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["status",4]]],null,null,null,null],"p":[[4,"Status"],[4,"Error"],[3,"InvalidChunkSize"],[3,"Request"],[3,"Response"],[3,"Header"],[13,"Complete"]]},\
"hyper":{"doc":"hyper","tn":["ACCEPTED","ALREADY_REPORTED","BAD_GATEWAY","BAD_REQUEST","Body","CONFLICT","CONNECT","CONTINUE","CREATED","Chunk","Client","DELETE","EXPECTATION_FAILED","Error","FAILED_DEPENDENCY","FORBIDDEN","FOUND","GATEWAY_TIMEOUT","GET","GONE","HEAD","HTTP_09","HTTP_10","HTTP_11","HTTP_2","HTTP_VERSION_NOT_SUPPORTED","HeaderMap","IM_A_TEAPOT","IM_USED","INSUFFICIENT_STORAGE","INTERNAL_SERVER_ERROR","LENGTH_REQUIRED","LOCKED","LOOP_DETECTED","METHOD_NOT_ALLOWED","MISDIRECTED_REQUEST","MOVED_PERMANENTLY","MULTIPLE_CHOICES","MULTI_STATUS","Method","NETWORK_AUTHENTICATION_REQUIRED","NON_AUTHORITATIVE_INFORMATION","NOT_ACCEPTABLE","NOT_EXTENDED","NOT_FOUND","NOT_IMPLEMENTED","NOT_MODIFIED","NO_CONTENT","OK","OPTIONS","PARTIAL_CONTENT","PATCH","PAYLOAD_TOO_LARGE","PAYMENT_REQUIRED","PERMANENT_REDIRECT","POST","PRECONDITION_FAILED","PRECONDITION_REQUIRED","PROCESSING","PROXY_AUTHENTICATION_REQUIRED","PUT","RANGE_NOT_SATISFIABLE","REQUEST_HEADER_FIELDS_TOO_LARGE","REQUEST_TIMEOUT","RESET_CONTENT","Request","Response","Result","SEE_OTHER","SERVICE_UNAVAILABLE","SWITCHING_PROTOCOLS","Server","StatusCode","TEMPORARY_REDIRECT","TOO_MANY_REQUESTS","TRACE","UNAUTHORIZED","UNAVAILABLE_FOR_LEGAL_REASONS","UNPROCESSABLE_ENTITY","UNSUPPORTED_MEDIA_TYPE","UPGRADE_REQUIRED","URI_TOO_LONG","USE_PROXY","Uri","VARIANT_ALSO_NEGOTIATES","Version","append","as_ref","as_str","as_str","as_u16","authority_part","body","body","body","body_mut","body_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","builder","builder","canonical_reason","capacity","clear","client","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","connect","contains_key","default","default","default","default","default","default","default","delete","drain","entry","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","error","extend","extend","extensions","extensions","extensions_mut","extensions_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_iter","from_parts","from_parts","from_parts","from_shared","from_static","from_str","from_str","from_str","from_u16","get","get","get_all","get_mut","hash","hash","hash","hash","head","header","headers","headers","headers_mut","headers_mut","host","index","insert","into","into","into","into","into","into","into","into_body","into_body","into_iter","into_iter","into_iter","into_parts","into_parts","into_parts","is_client_error","is_empty","is_idempotent","is_informational","is_redirection","is_safe","is_server_error","is_success","iter","iter_mut","keys","keys_len","len","map","map","method","method_mut","ne","ne","ne","new","new","new","options","partial_cmp","partial_cmp","patch","path","path_and_query","port_part","port_u16","post","put","query","remove","reserve","rt","scheme_part","scheme_str","server","service","status","status_mut","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upgrade","uri","uri_mut","values","values_mut","version","version","version_mut","version_mut","with_capacity","Body","Chunk","Data","Error","Payload","Sender","abort","advance","as_ref","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bytes","channel","content_length","content_length","content_length","default","default","deref","empty","extend","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into_buf","into_bytes","into_iter","is_end_stream","is_end_stream","is_end_stream","on_upgrade","poll","poll_complete","poll_data","poll_data","poll_ready","poll_trailers","poll_trailers","poll_trailers","remaining","send_data","start_send","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","wrap_stream","Builder","Client","HttpConnector","ResponseFuture","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","build_http","builder","clone","clone","clone_into","clone_into","conn","connect","default","default","executor","fmt","fmt","fmt","from","from","from","get","http1_max_buf_size","http1_read_buf_exact_size","http1_title_case_headers","http1_writev","http2_initial_connection_window_size","http2_initial_stream_window_size","http2_only","into","into","into","into_future","keep_alive","keep_alive_timeout","max_idle_per_host","new","poll","request","retry_canceled_requests","set_host","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Builder","Connection","Handshake","Parts","ResponseFuture","SendRequest","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","executor","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","handshake","handshake","http2_initial_connection_window_size","http2_initial_stream_window_size","http2_only","into","into","into","into","into","into","into_future","into_future","into_future","into_parts","io","new","poll","poll","poll","poll_ready","poll_without_shutdown","read_buf","send_request","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","without_shutdown","Connect","Connected","Destination","Error","Future","HttpConnector","HttpInfo","Transport","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","connect","connect","dns","enforce_http","extra","fmt","fmt","fmt","fmt","from","from","from","from","host","into","into","into","into","negotiated_h2","new","new","new_with_executor","new_with_resolver","new_with_tokio_threadpool_resolver","port","proxy","remote_addr","scheme","set_happy_eyeballs_timeout","set_host","set_keepalive","set_local_address","set_nodelay","set_port","set_reactor","set_reuse_address","set_scheme","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from_uri","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Addrs","Future","GaiAddrs","GaiFuture","GaiResolver","InvalidNameError","Name","Resolve","TokioThreadpoolGaiFuture","TokioThreadpoolGaiResolver","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","description","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_str","hash","into","into","into","into","into","into","into","into_future","into_future","into_iter","ne","new","new","new_with_executor","next","poll","poll","resolve","resolve","resolve","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Error","Result","borrow","borrow_mut","cause","description","fmt","fmt","from","into","into_cause","is_canceled","is_closed","is_connect","is_incomplete_message","is_parse","is_user","to_string","try_from","try_into","type_id","ACCEPT","ACCEPT_CHARSET","ACCEPT_ENCODING","ACCEPT_LANGUAGE","ACCEPT_RANGES","ACCESS_CONTROL_ALLOW_CREDENTIALS","ACCESS_CONTROL_ALLOW_HEADERS","ACCESS_CONTROL_ALLOW_METHODS","ACCESS_CONTROL_ALLOW_ORIGIN","ACCESS_CONTROL_EXPOSE_HEADERS","ACCESS_CONTROL_MAX_AGE","ACCESS_CONTROL_REQUEST_HEADERS","ACCESS_CONTROL_REQUEST_METHOD","AGE","ALLOW","ALT_SVC","AUTHORIZATION","AsHeaderName","CACHE_CONTROL","CONNECTION","CONTENT_DISPOSITION","CONTENT_ENCODING","CONTENT_LANGUAGE","CONTENT_LENGTH","CONTENT_LOCATION","CONTENT_RANGE","CONTENT_SECURITY_POLICY","CONTENT_SECURITY_POLICY_REPORT_ONLY","CONTENT_TYPE","COOKIE","DATE","DNT","Drain","ETAG","EXPECT","EXPIRES","Entry","FORWARDED","FROM","GetAll","HOST","HeaderMap","HeaderName","HeaderValue","IF_MATCH","IF_MODIFIED_SINCE","IF_NONE_MATCH","IF_RANGE","IF_UNMODIFIED_SINCE","IntoHeaderName","IntoIter","InvalidHeaderName","InvalidHeaderNameBytes","InvalidHeaderValue","InvalidHeaderValueBytes","Iter","IterMut","Keys","LAST_MODIFIED","LINK","LOCATION","MAX_FORWARDS","ORIGIN","Occupied","OccupiedEntry","PRAGMA","PROXY_AUTHENTICATE","PROXY_AUTHORIZATION","PUBLIC_KEY_PINS","PUBLIC_KEY_PINS_REPORT_ONLY","RANGE","REFERER","REFERRER_POLICY","REFRESH","RETRY_AFTER","SEC_WEBSOCKET_ACCEPT","SEC_WEBSOCKET_EXTENSIONS","SEC_WEBSOCKET_KEY","SEC_WEBSOCKET_PROTOCOL","SEC_WEBSOCKET_VERSION","SERVER","SET_COOKIE","STRICT_TRANSPORT_SECURITY","TE","TRAILER","TRANSFER_ENCODING","ToStrError","UPGRADE","UPGRADE_INSECURE_REQUESTS","USER_AGENT","VARY","VIA","Vacant","VacantEntry","ValueDrain","ValueIter","ValueIterMut","Values","ValuesMut","WARNING","WWW_AUTHENTICATE","X_CONTENT_TYPE_OPTIONS","X_DNS_PREFETCH_CONTROL","X_FRAME_OPTIONS","X_XSS_PROTECTION","append","as_bytes","as_ref","as_ref","as_ref","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","description","description","description","description","description","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_lowercase","from_name","from_shared","from_shared_unchecked","from_static","from_static","from_str","from_str","from_str","get","get_mut","hash","hash","insert","insert","insert_entry","insert_mult","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_mut","is_empty","is_sensitive","iter","iter","iter_mut","key","key","key","len","ne","next","next","next","next","next","next","next","next","next","next","next_back","next_back","or_insert","or_insert_with","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","remove","remove_entry","remove_entry_mult","set_sensitive","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_str","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","Error","Error","Future","Item","Item","Stream","and_then","and_then","buffer_unordered","buffered","by_ref","catch_unwind","catch_unwind","chain","chunks","collect","concat","concat2","filter","filter_map","flatten","flatten","flatten_stream","fold","for_each","forward","from_err","from_err","fuse","fuse","inspect","inspect","inspect_err","into_future","into_stream","join","join3","join4","join5","lazy","map","map","map_err","map_err","merge","or_else","or_else","peekable","poll","poll","poll_fn","run","select","select","select2","shared","skip","skip_while","spawn","split","take","take_while","then","then","wait","wait","zip","Builder","Server","bind","borrow","borrow","borrow_mut","borrow_mut","builder","conn","executor","fmt","fmt","from","from","from_tcp","http1_half_close","http1_keepalive","http1_max_buf_size","http1_only","http1_writev","http2_initial_connection_window_size","http2_initial_stream_window_size","http2_max_concurrent_streams","http2_only","into","into","into_future","local_addr","new","poll","serve","tcp_keepalive","tcp_nodelay","tcp_sleep_on_accept_errors","try_bind","try_from","try_from","try_into","try_into","type_id","type_id","with_graceful_shutdown","AddrIncoming","AddrStream","Connecting","Connection","Http","Parts","Serve","bind","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","graceful_shutdown","http1_half_close","http1_only","http1_writev","http2_initial_connection_window_size","http2_initial_stream_window_size","http2_max_concurrent_streams","http2_only","incoming_mut","incoming_ref","into","into","into","into","into","into","into","into_future","into_future","into_inner","into_parts","io","keep_alive","local_addr","max_buf_size","new","pipeline_flush","poll","poll","poll","poll","poll_without_shutdown","prepare_uninitialized_buffer","read","read_buf","read_buf","remote_addr","serve_addr","serve_addr_handle","serve_connection","serve_incoming","service","set_keepalive","set_nodelay","set_sleep_on_errors","shutdown","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_parts","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_executor","with_upgrades","without_shutdown","write","write_buf","Error","Error","Future","Future","MakeError","MakeService","ReqBody","ReqBody","ResBody","ResBody","Service","Service","call","make_service","make_service_fn","poll_ready","poll_ready","poll_ready","poll_ready","service_fn","service_fn_ok","OnUpgrade","Parts","Upgraded","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","downcast","flush","fmt","fmt","fmt","from","from","from","into","into","into","into_future","io","poll","prepare_uninitialized_buffer","read","read_buf","read_buf","shutdown","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write_buf"],"q":["hyperhyper::body","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hyper::client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hyper::client::conn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hyper::client::connect","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hyper::client::connect::dns","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hyper::error","","","","","","","","","","","","","","","","","","","","","hyper::header","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hyper::header::Entry","","hyper::rt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hyper::server","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hyper::server::conn","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hyper::service","","","","","","","","","","","","","","","","","","","","","hyper::upgrade","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["202 Accepted [RFC7231, Section 6.3.3]","208 Already Reported [RFC5842]","502 Bad Gateway [RFC7231, Section 6.6.3]","400 Bad Request [RFC7231, Section 6.5.1]","A stream of <code>Chunk</code>s, used when receiving bodies.","409 Conflict [RFC7231, Section 6.5.8]","CONNECT","100 Continue [RFC7231, Section 6.2.1]","201 Created [RFC7231, Section 6.3.2]","A piece of a message body.","","DELETE","417 Expectation Failed [RFC7231, Section 6.5.14]","","424 Failed Dependency [RFC4918]","403 Forbidden [RFC7231, Section 6.5.3]","302 Found [RFC7231, Section 6.4.3]","504 Gateway Timeout [RFC7231, Section 6.6.5]","GET","410 Gone [RFC7231, Section 6.5.9]","HEAD","<code>HTTP/0.9</code>","<code>HTTP/1.0</code>","<code>HTTP/1.1</code>","<code>HTTP/2.0</code>","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]","A set of HTTP headers","418 I’m a teapot [curiously not registered by IANA but …","226 IM Used [RFC3229]","507 Insufficient Storage [RFC4918]","500 Internal Server Error [RFC7231, Section 6.6.1]","411 Length Required [RFC7231, Section 6.5.10]","423 Locked [RFC4918]","508 Loop Detected [RFC5842]","405 Method Not Allowed [RFC7231, Section 6.5.5]","421 Misdirected Request RFC7540, Section 9.1.2","301 Moved Permanently [RFC7231, Section 6.4.2]","300 Multiple Choices [RFC7231, Section 6.4.1]","207 Multi-Status [RFC4918]","The Request Method (VERB)","511 Network Authentication Required [RFC6585]","203 Non-Authoritative Information [RFC7231, Section 6.3.4]","406 Not Acceptable [RFC7231, Section 6.5.6]","510 Not Extended [RFC2774]","404 Not Found [RFC7231, Section 6.5.4]","501 Not Implemented [RFC7231, Section 6.6.2]","304 Not Modified [RFC7232, Section 4.1]","204 No Content [RFC7231, Section 6.3.5]","200 OK [RFC7231, Section 6.3.1]","OPTIONS","206 Partial Content [RFC7233, Section 4.1]","PATCH","413 Payload Too Large [RFC7231, Section 6.5.11]","402 Payment Required [RFC7231, Section 6.5.2]","308 Permanent Redirect [RFC7238]","POST","412 Precondition Failed [RFC7232, Section 4.2]","428 Precondition Required [RFC6585]","102 Processing [RFC2518]","407 Proxy Authentication Required [RFC7235, Section 3.2]","PUT","416 Range Not Satisfiable [RFC7233, Section 4.4]","431 Request Header Fields Too Large [RFC6585]","408 Request Timeout [RFC7231, Section 6.5.7]","205 Reset Content [RFC7231, Section 6.3.6]","Represents an HTTP request.","Represents an HTTP response","","303 See Other [RFC7231, Section 6.4.4]","503 Service Unavailable [RFC7231, Section 6.6.4]","101 Switching Protocols [RFC7231, Section 6.2.2]","","An HTTP status code (<code>status-code</code> in RFC 7230 et al.).","307 Temporary Redirect [RFC7231, Section 6.4.7]","429 Too Many Requests [RFC6585]","TRACE","401 Unauthorized [RFC7235, Section 3.1]","451 Unavailable For Legal Reasons [RFC7725]","422 Unprocessable Entity [RFC4918]","415 Unsupported Media Type [RFC7231, Section 6.5.13]","426 Upgrade Required [RFC7231, Section 6.5.15]","414 URI Too Long [RFC7231, Section 6.5.12]","305 Use Proxy [RFC7231, Section 6.4.5]","The URI component of a request.","506 Variant Also Negotiates [RFC2295]","Represents a version of the HTTP spec.","Inserts a key-value pair into the map.","","Return a &amp;str representation of the HTTP method","Returns a &amp;str representation of the <code>StatusCode</code>","Returns the <code>u16</code> corresponding to this <code>StatusCode</code>.","Get the authority of this <code>Uri</code>.","Streaming bodies for Requests and Responses","Returns a reference to the associated HTTP body.","Returns a reference to the associated HTTP body.","Returns a mutable reference to the associated HTTP body.","Returns a mutable reference to the associated HTTP body.","","","","","","","","","","","","","","","Creates a new builder-style object to manufacture a <code>Request</code>","Creates a new builder-style object to manufacture a …","Creates a new builder-style object to manufacture a <code>Uri</code>.","Get the standardised <code>reason-phrase</code> for this status code.","Returns the number of headers the map can hold without …","Clears the map, removing all key-value pairs. Keeps the …","HTTP Client","","","","","","","","","","","","","Creates a new <code>Builder</code> initialized with a CONNECT method …","Returns true if the map contains a value for the specified …","","","","","","","","Creates a new <code>Builder</code> initialized with a DELETE method and …","Clears the map, returning all entries as an iterator.","Gets the given key’s corresponding entry in the map for …","","","","","","","","","","","","","","","","","","Error and Result module.","","Extend a <code>HeaderMap</code> with the contents of another <code>HeaderMap</code>.","Returns a reference to the associated extensions.","Returns a reference to the associated extensions.","Returns a mutable reference to the associated extensions.","Returns a mutable reference to the associated extensions.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a slice of bytes to an HTTP method.","Converts a &amp;u8 to a status code","","Creates a new <code>Request</code> with the given components parts and …","Creates a new <code>Response</code> with the given head and body","Attempt to convert a <code>Uri</code> from <code>Parts</code>","Attempt to convert a <code>Uri</code> from <code>Bytes</code>","Convert a <code>Uri</code> from a static string.","","","","Converts a u16 to a status code.","Creates a new <code>Builder</code> initialized with a GET method and …","Returns a reference to the value associated with the key.","Returns a view of all values associated with a key.","Returns a mutable reference to the value associated with …","","","","","Creates a new <code>Builder</code> initialized with a HEAD method and …","HTTP header types","Returns a reference to the associated header field map.","Returns a reference to the associated header field map.","Returns a mutable reference to the associated header field …","Returns a mutable reference to the associated header field …","Get the host of this <code>Uri</code>.","Panics","Inserts a key-value pair into the map.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the request, returning just the body.","Consumes the response, returning just the body.","","","Creates a consuming iterator, that is, one that moves keys …","Consumes the request returning the head and body parts.","Consumes the response returning the head and body parts.","Convert a <code>Uri</code> into <code>Parts</code>.","Check if status is within 400-499.","Returns true if the map contains no elements.","Whether a method is considered “idempotent”, meaning …","Check if status is within 100-199.","Check if status is within 300-399.","Whether a method is considered “safe”, meaning the …","Check if status is within 500-599.","Check if status is within 200-299.","An iterator visiting all key-value pairs.","An iterator visiting all key-value pairs, with mutable …","An iterator visiting all keys.","Returns the number of keys stored in the map.","Returns the number of headers stored in the map.","Consumes the request returning a new request with body …","Consumes the response returning a new response with body …","Returns a reference to the associated HTTP method.","Returns a mutable reference to the associated HTTP method.","","","","Creates a new blank <code>Request</code> with the body","Creates a new blank <code>Response</code> with the body","Create an empty <code>HeaderMap</code>.","Creates a new <code>Builder</code> initialized with an OPTIONS method …","","","Creates a new <code>Builder</code> initialized with a PATCH method and …","Get the path of this <code>Uri</code>.","Returns the path &amp; query components of the Uri","Get the port part of this <code>Uri</code>.","Get the port of this <code>Uri</code> as a <code>u16</code>.","Creates a new <code>Builder</code> initialized with a POST method and …","Creates a new <code>Builder</code> initialized with a PUT method and …","Get the query string of this <code>Uri</code>, starting after the <code>?</code>.","Removes a key from the map, returning the value associated …","Reserves capacity for at least <code>additional</code> more headers to …","Default runtime","Get the scheme of this <code>Uri</code>.","Get the scheme of this <code>Uri</code> as a <code>&amp;str</code>.","HTTP Server","Services and MakeServices","Returns the <code>StatusCode</code>.","Returns a mutable reference to the associated <code>StatusCode</code>.","","","","","","","","","Creates a new <code>Builder</code> initialized with a TRACE method and …","","","","","","","","","","","","","","","","","","","","","","HTTP Upgrades","Returns a reference to the associated URI.","Returns a mutable reference to the associated URI.","An iterator visiting all values.","An iterator visiting all values mutably.","Returns the associated version.","Returns a reference to the associated version.","Returns a mutable reference to the associated version.","Returns a mutable reference to the associated version.","Create an empty <code>HeaderMap</code> with the specified capacity.","A stream of <code>Chunk</code>s, used when receiving bodies.","A piece of a message body.","A buffer of bytes representing a single chunk of a body.","The error type of this stream.","This trait represents a streaming body of a <code>Request</code> or …","A sender half used with <code>Body::channel()</code>.","Aborts the body in an abnormal fashion.","","","","","","","","","","Create a <code>Body</code> stream with an associated sender half.","","Return a length of the total bytes that will be streamed, …","Return a length of the total bytes that will be streamed, …","Returns <code>Body::empty()</code>.","","","Create an empty <code>Body</code> stream.","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Converts this <code>Chunk</code> directly into the <code>Bytes</code> type without …","","","A hint that the <code>Body</code> is complete, and doesn’t need to be …","A hint that the <code>Body</code> is complete, and doesn’t need to be …","Converts this <code>Body</code> into a <code>Future</code> of a pending HTTP upgrade.","","","Poll for a <code>Data</code> buffer.","","Check to see if this <code>Sender</code> can send more data.","","Poll for an optional <strong>single</strong> <code>HeaderMap</code> of trailers.","Poll for an optional <strong>single</strong> <code>HeaderMap</code> of trailers.","","Sends data on this channel.","","","","","","","","","","","Wrap a futures <code>Stream</code> in a box inside <code>Body</code>.","A builder to configure a new <code>Client</code>.","A Client to make outgoing HTTP requests.","A connector for the <code>http</code> scheme.","A <code>Future</code> that will resolve to an HTTP Response.","","","","","","","Combine the configuration of this builder with a connector …","Builder a client with this configuration and the default …","Create a builder to configure a new <code>Client</code>.","","","","","Lower-level client connection API.","The <code>Connect</code> trait, and supporting types.","","","Provide an executor to execute background <code>Connection</code> tasks.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Send a <code>GET</code> request to the supplied <code>Uri</code>.","Set the maximum buffer size for the connection.","Sets the exact size of the read buffer to <em>always</em> use.","Set whether HTTP/1 connections will write header names as …","Set whether HTTP/1 connections should try to use vectored …","Sets the max connection-level flow control for HTTP2","Sets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …","Set whether the connection <strong>must</strong> use HTTP/2.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Enable or disable keep-alive mechanics.","Set an optional timeout for idle sockets being kept-alive.","Sets the maximum idle connection per host allowed in the …","Create a new Client with the default config.","","Send a constructed <code>Request</code> using this <code>Client</code>.","Set whether to retry requests that get disrupted before …","Set whether to automatically add the <code>Host</code> header to …","","","","","","","","","","","","A builder to configure an HTTP connection.","A future that processes all HTTP state for the IO object.","A future setting up HTTP over an IO object.","Deconstructed parts of a <code>Connection</code>.","A future returned by <code>SendRequest::send_request</code>.","The sender side of an established connection.","","","","","","","","","","","","","","","Provide an executor to execute background HTTP2 tasks.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a <code>Handshake</code> future over some IO.","Constructs a connection with the configured options and IO.","Sets the max connection-level flow control for HTTP2","Sets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …","Sets whether HTTP2 is required.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Return the inner IO object, and additional information.","The original IO object used in the handshake.","Creates a new connection builder.","","","","Polls to determine whether this sender can be used yet for …","Poll the connection for completion, but without calling …","A buffer of bytes that have been read but not processed as …","Sends a <code>Request</code> on the associated connection.","","","","","","","","","","","","","","","","","","","","Prevent shutdown of the underlying IO object at the end of …","Connect to a destination, returning an IO transport.","Extra information about the connected transport.","A set of properties to describe where and how to try to …","An error occured when trying to connect.","A Future that will resolve to the connected Transport.","A connector for the <code>http</code> scheme.","Extra information about the transport when an …","The connected IO Stream.","","","","","","","","","","","","","","","Connect to a destination.","","The <code>Resolve</code> trait, support types, and some basic …","Option to enforce all <code>Uri</code>s have the <code>http</code> scheme.","Set extra connection information to be set in the …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the hostname.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Set that the connected transport negotiated HTTP/2 as it’…","Construct a new HttpConnector.","Create new <code>Connected</code> type with empty metadata.","Construct a new HttpConnector.","Construct a new HttpConnector.","Construct a new HttpConnector using the …","Get the port, if specified.","Set whether the connected transport is to an HTTP proxy.","Get the remote address of the transport used.","Get the protocol scheme.","Set timeout for RFC 6555 (Happy Eyeballs) algorithm.","Update the host of this destination.","Set that all sockets have <code>SO_KEEPALIVE</code> set with the …","Set that all sockets are bound to the configured address …","Set that all sockets have <code>SO_NODELAY</code> set to the supplied …","Update the port of this destination.","Set a handle to a <code>Reactor</code> to register connections to.","Set that all socket have <code>SO_REUSEADDR</code> set to the supplied …","Update the scheme of this destination.","","","","","","","","Try to convert a <code>Uri</code> into a <code>Destination</code>","","","","","","","","","The set of IP addresses to try to connect to.","A Future of the resolved set of addresses.","An iterator of IP addresses returned from <code>getaddrinfo</code>.","A future to resole a name returned by <code>GaiResolver</code>.","A resolver using blocking <code>getaddrinfo</code> calls in a …","Error indicating a given string was not a valid domain …","A domain name to resolve into IP addresses.","Resolve a hostname to a set of IP addresses.","The future returned by <code>TokioThreadpoolGaiResolver</code>.","A resolver using <code>getaddrinfo</code> calls via the …","View the hostname as a string slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Construct a new <code>GaiResolver</code>.","Creates a new DNS resolver that will use tokio threadpool…","Construct a new <code>GaiResolver</code> with a shared thread pool …","","","","Resolve a hostname.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents errors that can occur handling HTTP streams.","Result type often returned from methods that can have …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Consumes the error, returning its cause.","Returns true if this was about a <code>Request</code> that was canceled.","Returns true if a sender’s channel is closed.","Returns true if this was an error from <code>Connect</code>.","Returns true if the connection closed before a message …","Returns true if this was an HTTP parse error.","Returns true if this error was caused by user code.","","","","","Advertises which content types the client is able to …","Advertises which character set the client is able to …","Advertises which content encoding the client is able to …","Advertises which languages the client is able to …","Marker used by the server to advertise partial request …","Preflight response indicating if the response to the …","Preflight response indicating permitted HTTP headers.","Preflight header response indicating permitted access …","Indicates whether the response can be shared with …","Indicates which headers can be exposed as part of the …","Indicates how long the results of a preflight request can …","Informs the server which HTTP headers will be used when an …","Informs the server know which HTTP method will be used …","Indicates the time in seconds the object has been in a …","Lists the set of methods support by a resource.","Advertises the availability of alternate services to …","Contains the credentials to authenticate a user agent with …","A marker trait used to identify values that can be used as …","Specifies directives for caching mechanisms in both …","Controls whether or not the network connection stays open …","Indicates if the content is expected to be displayed …","Used to compress the media-type.","Used to describe the languages intended for the audience.","Indicates the size fo the entity-body.","Indicates an alternate location for the returned data.","Indicates where in a full body message a partial message …","Allows controlling resources the user agent is allowed to …","Allows experimenting with policies by monitoring their …","Used to indicate the media type of the resource.","Contains stored HTTP cookies previously sent by the server …","Contains the date and time at which the message was …","Indicates the client’s tracking preference.","A drain iterator for <code>HeaderMap</code>.","Identifier for a specific version of a resource.","Indicates expectations that need to be fulfilled by the …","Contains the date/time after which the response is …","A view into a single location in a <code>HeaderMap</code>, which may be …","Contains information from the client-facing side of proxy …","Contains an Internet email address for a human user who …","A view to all values stored in a single entry.","Specifies the domain name of the server and (optionally) …","A set of HTTP headers","Represents an HTTP header field name","Represents an HTTP header field value.","Makes a request conditional based on the E-Tag.","Makes a request conditional based on the modification date.","Makes a request conditional based on the E-Tag.","Makes a request conditional based on range.","Makes the request conditional based on the last …","A marker trait used to identify values that can be used as …","An owning iterator over the entries of a <code>HeaderMap</code>.","A possible error when converting a <code>HeaderName</code> from another …","A possible error when converting a <code>HeaderName</code> from another …","A possible error when converting a <code>HeaderValue</code> from a …","A possible error when converting a <code>HeaderValue</code> from a …","<code>HeaderMap</code> entry iterator.","<code>HeaderMap</code> mutable entry iterator","An iterator over <code>HeaderMap</code> keys.","Content-Types that are acceptable for the response.","Allows the server to point an interested client to another …","Indicates the URL to redirect a page to.","Indicates the max number of intermediaries the request …","Indicates where a fetch originates from.","An occupied entry","A view into a single occupied location in a <code>HeaderMap</code>.","HTTP/1.0 header usually used for backwards compatibility.","Defines the authentication method that should be used to …","Contains the credentials to authenticate a user agent to a …","Associates a specific cryptographic public key with a …","Sends reports of pinning violation to the report-uri …","Indicates the part of a document that the server should …","Contains the address of the previous web page from which a …","Governs which referrer information should be included with …","Informs the web browser that the current page or frame …","The Retry-After response HTTP header indicates how long …","The |Sec-WebSocket-Accept| header field is used in the …","The |Sec-WebSocket-Extensions| header field is used in the …","The |Sec-WebSocket-Key| header field is used in the …","The |Sec-WebSocket-Protocol| header field is used in the …","The |Sec-WebSocket-Version| header field is used in the …","Contains information about the software used by the origin …","Used to send cookies from the server to the user agent.","Tells the client to communicate with HTTPS instead of …","Informs the server of transfer encodings willing to be …","Allows the sender to include additional fields at the end …","Specifies the form of encoding used to safely transfer the …","A possible error when converting a <code>HeaderValue</code> to a string …","Used as part of the exchange to upgrade the protocol.","Sends a signal to the server expressing the client’s …","Contains a string that allows identifying the requesting …","Determines how to match future requests with cached …","Added by proxies to track routing.","A vacant entry","A view into a single empty location in a <code>HeaderMap</code>.","An drain iterator of all values associated with a single …","An iterator of all values associated with a single header …","A mutable iterator of all values associated with a single …","<code>HeaderMap</code> value iterator.","<code>HeaderMap</code> mutable value iterator","General HTTP header contains information about possible …","Defines the authentication method that should be used to …","Marker used by the server to indicate that the MIME types …","Controls DNS prefetching.","Indicates whether or not a browser should be allowed to …","Stop pages from loading when an XSS attack is detected.","Insert the value into the entry.","Converts a <code>HeaderValue</code> to a byte slice.","","","","Returns a <code>str</code> representation of the header.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs a case-insensitive comparison of the string …","Performs a case-insensitive comparison of the string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Converts a slice of bytes to an HTTP header name.","Attempt to convert a byte slice to a <code>HeaderValue</code>.","Converts a slice of bytes to an HTTP header name.","Converts a HeaderName into a HeaderValue","Attempt to convert a <code>Bytes</code> buffer to a <code>HeaderValue</code>.","Convert a <code>Bytes</code> directly into a <code>HeaderValue</code> without …","Converts a static string to a HTTP header name.","Convert a static string to a <code>HeaderValue</code>.","","","Attempt to convert a string to a <code>HeaderValue</code>.","Get a reference to the first value in the entry.","Get a mutable reference to the first value in the entry.","","","Insert the value into the entry.","Sets the value of the entry.","Insert the value into the entry.","Sets the value of the entry.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Take ownership of the key","Converts the <code>OccupiedEntry</code> into a mutable reference to the …","Returns true if the <code>HeaderValue</code> has a length of zero bytes.","Returns <code>true</code> if the value represents sensitive data.","Returns an iterator visiting all values associated with …","Returns an iterator visiting all values associated with …","Returns an iterator mutably visiting all values associated …","Returns a reference to the entry’s key","Returns a reference to the entry’s key","Returns a reference to the entry’s key.","Returns the length of <code>self</code>.","","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","","","","","","","Remove the entry from the map.","Remove the entry from the map.","Remove the entry from the map.","Mark that the header value represents sensitive …","","","","","","","","","","","","Yields a <code>&amp;str</code> slice if the <code>HeaderValue</code> only contains …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The type of error that this future will resolve with if it …","The type of error this stream may generate.","Trait for types which are a placeholder of a value that …","The type of value that this future will resolved with if …","The type of item this stream will yield on success.","A stream of values, not all of which may have been …","Execute another future after this one has resolved …","Chain on a computation for when a value is ready, passing …","An adaptor for creating a buffered list of pending futures …","An adaptor for creating a buffered list of pending futures.","Borrows a stream, rather than consuming it.","Catches unwinding panics while polling the future.","Catches unwinding panics while polling the stream.","Adapter for chaining two stream.","An adaptor for chunking up items of the stream inside a …","Collect all of the values of this stream into a vector, …","Concatenate all results of a stream into a single …","Concatenate all results of a stream into a single …","Filters the values produced by this stream according to …","Filters the values produced by this stream while …","Flatten the execution of this future when the successful …","Flattens a stream of streams into just one continuous …","Flatten the execution of this future when the successful …","Execute an accumulating computation over a stream, …","Runs this stream to completion, executing the provided …","A future that completes after the given stream has been …","Map this future’s error to any error implementing <code>From</code> …","Map this stream’s error to any error implementing <code>From</code> …","Fuse a future such that <code>poll</code> will never again be called …","Fuse a stream such that <code>poll</code> will never again be called …","Do something with the item of a future, passing it on.","Do something with each item of this stream, afterwards …","Do something with the error of this stream, afterwards …","Converts this stream into a <code>Future</code>.","Convert this future into a single element stream.","Joins the result of two futures, waiting for them both to …","Same as <code>join</code>, but with more futures.","Same as <code>join</code>, but with more futures.","Same as <code>join</code>, but with more futures.","Creates a new future which will eventually be the same as …","Map this future’s result to a different type, returning …","Converts a stream of type <code>T</code> to a stream of type <code>U</code>.","Map this future’s error to a different error, returning …","Converts a stream of error type <code>T</code> to a stream of error …","An adapter for merging the output of two streams.","Execute another future if this one resolves with an error.","Chain on a computation for when an error happens, passing …","Creates a new stream which exposes a <code>peek</code> method.","Query this future to see if its value has become …","Attempt to pull out the next value of this stream, …","Creates a new future wrapping around a function returning …","Start the Tokio runtime using the supplied future to …","Waits for either one of two futures to complete.","Creates a stream that selects the next element from either …","Waits for either one of two differently-typed futures to …","Create a cloneable handle to this future where all handles …","Creates a new stream which skips <code>amt</code> items of the …","Skip elements on this stream while the predicate provided …","Spawns a future on the default executor.","Splits this <code>Stream + Sink</code> object into separate <code>Stream</code> and …","Creates a new stream of at most <code>amt</code> items of the …","Take elements from this stream while the predicate …","Chain on a computation for when a future finished, passing …","Chain on a computation for when a value is ready, passing …","Block the current thread until this future is resolved.","Creates an iterator which blocks the current thread until …","An adapter for zipping two streams together.","A builder for a <code>Server</code>.","A listening HTTP server that accepts connections in both …","Binds to the provided address, and returns a <code>Builder</code>.","","","","","Starts a <code>Builder</code> with the provided incoming stream.","Lower-level Server connection API.","Sets the <code>Executor</code> to deal with connection tasks.","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new instance from a <code>std::net::TcpListener</code> …","Set whether HTTP/1 connections should support …","Sets whether to use keep-alive for HTTP/1 connections.","Set the maximum buffer size.","Sets whether HTTP/1 is required.","Set whether HTTP/1 connections should try to use vectored …","Sets the max connection-level flow control for HTTP2","Sets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …","Sets the <code>SETTINGS_MAX_CONCURRENT_STREAMS</code> option for HTTP2 …","Sets whether HTTP/2 is required.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the local address that this server is bound to.","Start a new builder, wrapping an incoming stream and …","","Consume this <code>Builder</code>, creating a <code>Server</code>.","Set whether TCP keepalive messages are enabled on accepted …","Set the value of <code>TCP_NODELAY</code> option for accepted …","Set whether to sleep on accept errors.","Tries to bind to the provided address, and returns a …","","","","","","","Prepares a server to handle graceful shutdown when the …","A stream of connections from binding to an address.","A transport returned yieled by <code>AddrIncoming</code>.","A future building a new <code>Service</code> to a <code>Connection</code>.","A future binding a connection with a Service.","A lower-level configuration of the HTTP protocol.","Deconstructed parts of a <code>Connection</code>.","A stream mapping incoming IOs to new services.","Creates a new <code>AddrIncoming</code> binding to provided socket …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Start a graceful shutdown process for this connection.","Set whether HTTP/1 connections should support …","Sets whether HTTP1 is required.","Set whether HTTP/1 connections should try to use vectored …","Sets the max connection-level flow control for HTTP2","Sets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …","Sets the <code>SETTINGS_MAX_CONCURRENT_STREAMS</code> option for HTTP2 …","Sets whether HTTP2 is required.","Get a mutable reference to the incoming stream.","Get a reference to the incoming stream.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Consumes the AddrStream and returns the underlying IO …","Return the inner IO object, and additional information.","The original IO object used in the handshake.","Enables or disables HTTP keep-alive.","Get the local address bound to this listener.","Set the maximum buffer size for the connection.","Creates a new instance of the HTTP protocol, ready to …","Aggregates flushes to better support pipelined responses.","","","","","Poll the connection for completion, but without calling …","","","","A buffer of bytes that have been read but not processed as …","Returns the remote (peer) address of this connection.","Bind the provided <code>addr</code> with the default <code>Handle</code> and return …","Bind the provided <code>addr</code> with the <code>Handle</code> and return a <code>Serve</code>","Bind a connection together with a <code>Service</code>.","Bind the provided stream of incoming IO objects with a …","The <code>Service</code> used to serve this connection.","Set whether TCP keepalive messages are enabled on accepted …","Set the value of <code>TCP_NODELAY</code> option for accepted …","Set whether to sleep on accept errors.","","","","","","","","","","","","","","","","","Return the inner IO object, and additional information, if …","","","","","","","","Set the executor used to spawn background tasks.","Enable this connection to support higher-level HTTP …","Prevent shutdown of the underlying IO object at the end of …","","","The error type that can be returned by <code>Service</code>s.","The error type that can occur within this <code>Service</code>.","The future returned from <code>new_service</code> of a <code>Service</code>.","The <code>Future</code> returned by this <code>Service</code>.","The error type that can be returned when creating a new …","An asynchronous constructor of <code>Service</code>s.","The <code>Payload</code> body of the <code>http::Request</code>.","The <code>Payload</code> body of the <code>http::Request</code>.","The <code>Payload</code> body of the <code>http::Response</code>.","The <code>Payload</code> body of the <code>http::Response</code>.","An asynchronous function from <code>Request</code> to <code>Response</code>.","The resolved <code>Service</code> from <code>new_service()</code>.","Calls this <code>Service</code> with a request, returning a <code>Future</code> of …","Create a new <code>Service</code>.","Create a <code>MakeService</code> from a function.","Returns <code>Ready</code> when the constructor is ready to create a …","Returns <code>Ready</code> when the constructor is ready to create a …","Returns <code>Ready</code> when the service is able to process requests.","Returns <code>Ready</code> when the service is able to process requests.","Create a <code>Service</code> from a function.","Create a <code>Service</code> from a function that never errors.","A future for a possible HTTP upgrade.","The deconstructed parts of an <code>Upgraded</code> type.","An upgraded HTTP connection.","","","","","","","Tries to downcast the internal trait object to the type …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The original IO object used before the upgrade.","","","","","A buffer of bytes that have been read but not processed as …","","","","","","","","","","","",""],"i":[1,1,1,1,0,1,2,1,1,0,0,2,1,0,1,1,1,1,2,1,2,3,3,3,3,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,1,1,2,1,1,1,1,2,1,1,1,1,0,0,0,1,1,1,0,0,1,1,2,1,1,1,1,1,1,1,0,1,0,4,2,2,1,1,5,0,6,7,6,7,6,7,4,2,1,3,5,6,7,4,2,1,3,5,6,7,5,1,4,4,0,4,2,1,3,5,4,2,1,3,5,1,3,6,4,6,7,4,2,1,3,5,6,4,4,4,2,2,2,2,2,1,1,3,5,5,5,4,2,1,3,5,0,4,4,6,7,6,7,6,7,4,2,2,1,1,3,5,5,6,7,4,2,2,1,1,3,5,2,1,4,6,7,5,5,5,2,1,5,1,6,4,4,4,2,1,3,5,6,0,6,7,6,7,5,4,4,6,7,4,2,1,3,5,6,7,4,4,4,6,7,5,1,4,2,1,1,2,1,1,4,4,4,4,4,6,7,6,6,2,1,3,6,7,4,6,1,3,6,5,5,5,5,6,6,5,4,4,0,5,5,0,0,7,7,4,2,1,3,5,2,1,5,6,6,7,4,2,1,3,5,6,7,4,2,1,3,5,6,7,4,2,1,3,5,0,6,6,4,4,6,7,6,7,4,0,0,8,8,0,0,9,10,10,11,10,9,11,10,9,10,11,11,8,8,11,10,10,11,10,11,10,9,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,9,11,10,9,10,10,10,11,8,8,11,11,9,8,11,9,11,8,8,10,9,9,11,10,9,11,10,9,11,10,9,11,0,0,0,0,12,13,14,12,13,14,14,14,12,12,14,12,14,0,0,12,14,14,12,13,14,12,13,14,12,14,14,14,14,14,14,14,12,13,14,13,14,14,14,12,13,12,14,14,12,14,12,13,14,12,13,14,12,13,14,0,0,0,0,0,0,15,16,17,18,19,20,15,16,17,18,19,20,19,19,19,15,16,17,18,19,20,15,16,17,18,19,20,0,19,19,19,19,15,16,17,18,19,20,16,17,18,16,20,19,16,17,18,15,16,20,15,19,15,16,17,18,19,20,15,16,17,18,19,20,15,16,17,18,19,20,16,0,0,0,21,21,0,0,21,22,23,24,25,22,23,24,25,22,23,24,22,23,24,21,22,0,22,25,22,23,24,25,22,23,24,25,24,22,23,24,25,25,22,25,22,22,22,24,25,23,24,22,24,22,22,22,24,22,22,24,22,23,24,22,23,24,25,24,22,23,24,25,22,23,24,25,26,26,0,0,0,0,0,0,0,0,27,28,29,27,30,31,32,33,28,29,27,30,31,32,33,27,30,32,27,30,32,31,27,27,28,29,27,27,30,31,31,32,33,28,29,27,30,31,32,33,27,27,28,29,27,30,31,32,33,29,33,28,27,30,32,30,28,29,33,26,30,32,27,30,32,27,31,28,29,27,30,31,32,33,28,29,27,30,31,32,33,28,29,27,30,31,32,33,0,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,36,37,38,38,37,38,39,40,41,42,43,44,45,46,35,47,36,48,49,50,38,38,51,52,37,53,54,55,39,40,41,42,43,44,45,46,35,47,36,48,49,50,38,51,52,37,53,54,55,38,37,38,37,37,51,52,53,54,55,41,45,50,46,38,38,38,38,38,37,37,37,37,37,37,38,37,39,40,41,42,43,44,45,46,35,47,36,48,49,50,38,38,51,51,52,52,37,53,53,54,54,55,55,39,40,41,42,43,44,45,46,35,47,36,48,49,50,38,38,51,52,37,37,37,37,37,37,37,37,37,37,37,53,54,55,38,37,38,37,37,37,38,37,38,37,37,36,36,38,37,47,36,47,36,39,40,41,42,43,44,45,46,35,47,36,48,49,50,38,51,52,37,53,54,55,39,40,41,42,43,44,45,46,46,36,36,36,48,49,50,47,36,37,37,46,36,36,35,47,36,37,38,39,40,41,42,43,44,45,48,49,50,48,49,35,35,37,37,37,37,37,37,36,36,36,37,39,40,41,42,43,44,45,48,50,38,37,37,38,51,52,53,54,55,39,40,41,42,43,44,45,46,35,47,36,48,49,50,38,51,52,37,53,54,55,39,40,41,42,43,44,45,46,35,47,36,48,49,50,38,51,52,37,53,54,55,39,40,41,42,43,44,45,46,35,47,36,48,49,50,38,51,52,37,53,54,55,56,57,58,59,0,58,59,0,58,59,59,59,59,58,59,59,59,59,59,59,59,59,58,59,58,59,59,59,58,59,58,59,58,59,59,59,58,58,58,58,58,0,58,59,58,59,59,58,59,59,58,59,0,0,58,59,58,58,59,59,0,59,59,59,58,59,58,59,59,0,0,60,60,61,60,61,60,0,61,60,61,60,61,60,61,61,61,61,61,61,61,61,61,60,61,60,60,61,60,61,61,61,61,60,60,61,60,61,60,61,60,0,0,0,0,0,0,0,62,63,62,64,65,66,67,68,63,62,64,65,66,67,68,64,64,68,63,62,64,65,66,67,68,63,62,64,65,66,67,68,63,64,64,64,64,64,64,64,65,65,63,62,64,65,66,67,68,63,66,68,63,67,64,62,64,64,64,63,62,65,66,63,68,68,68,67,68,64,64,64,64,67,62,62,62,68,64,63,62,64,65,66,67,68,63,62,64,65,66,67,68,63,63,62,64,65,66,67,68,64,63,63,68,68,69,70,69,70,69,0,69,70,69,70,0,69,70,69,0,69,69,70,70,0,0,0,0,0,71,72,73,71,72,73,71,71,71,72,73,71,72,73,71,72,73,72,73,72,71,71,71,73,71,71,72,73,71,72,73,71,72,73,71,71],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["headermap",3]],["bool",0]],[[["method",3]],["str",0]],[[["method",3]],["str",0]],[[["statuscode",3]],["str",0]],[[["statuscode",3]],["u16",0]],[[["uri",3]],["option",4,[["authority",3]]]],null,[[["request",3]],["",0]],[[["response",3]],["",0]],[[["request",3]],["",0]],[[["response",3]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["builder",3]],[[],["builder",3]],[[],["builder",3]],[[["statuscode",3]],["option",4,[["str",0]]]],[[["headermap",3]],["usize",0]],[[["headermap",3]]],null,[[["headermap",3]],["headermap",3]],[[["method",3]],["method",3]],[[["statuscode",3]],["statuscode",3]],[[["version",3]],["version",3]],[[["uri",3]],["uri",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["statuscode",3],["statuscode",3]],["ordering",4]],[[["version",3],["version",3]],["ordering",4]],[[],["builder",3]],[[["headermap",3]],["bool",0]],[[],["request",3]],[[],["response",3]],[[],["headermap",3]],[[],["method",3]],[[],["statuscode",3]],[[],["version",3]],[[],["uri",3]],[[],["builder",3]],[[["headermap",3]],["drain",3]],[[["headermap",3]],["result",4,[["entry",4],["invalidheadername",3]]]],[[["headermap",3],["headermap",3]],["bool",0]],[[["method",3],["method",3]],["bool",0]],[[["method",3],["method",3]],["bool",0]],[[["method",3],["method",3]],["bool",0]],[[["method",3],["str",0]],["bool",0]],[[["method",3],["str",0]],["bool",0]],[[["statuscode",3],["statuscode",3]],["bool",0]],[[["statuscode",3],["u16",0]],["bool",0]],[[["version",3],["version",3]],["bool",0]],[[["uri",3],["str",0]],["bool",0]],[[["uri",3],["uri",3]],["bool",0]],[[["uri",3],["str",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],null,[[["headermap",3]]],[[["headermap",3]]],[[["request",3]],["extensions",3]],[[["response",3]],["extensions",3]],[[["request",3]],["extensions",3]],[[["response",3]],["extensions",3]],[[["request",3],["formatter",3]],["result",4,[["error",3]]]],[[["response",3],["formatter",3]],["result",4,[["error",3]]]],[[["headermap",3],["formatter",3]],["result",4,[["error",3]]]],[[["method",3],["formatter",3]],["result",4,[["error",3]]]],[[["method",3],["formatter",3]],["result",4,[["error",3]]]],[[["statuscode",3],["formatter",3]],["result",4,[["error",3]]]],[[["statuscode",3],["formatter",3]],["result",4,[["error",3]]]],[[["version",3],["formatter",3]],["result",4,[["error",3]]]],[[["uri",3],["formatter",3]],["result",4,[["error",3]]]],[[["uri",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[["method",3]],["method",3]],[[]],[[["statuscode",3]],["statuscode",3]],[[]],[[]],[[]],[[],["result",4,[["method",3],["invalidmethod",3]]]],[[],["result",4,[["statuscode",3],["invalidstatuscode",3]]]],[[],["headermap",3]],[[["parts",3]],["request",3]],[[["parts",3]],["response",3]],[[["parts",3]],["result",4,[["uri",3],["invaliduriparts",3]]]],[[["bytes",3]],["result",4,[["uri",3],["invaliduribytes",3]]]],[[["str",0]],["uri",3]],[[["str",0]],["result",4,[["method",3]]]],[[["str",0]],["result",4,[["statuscode",3],["invalidstatuscode",3]]]],[[["str",0]],["result",4,[["uri",3],["invaliduri",3]]]],[[["u16",0]],["result",4,[["statuscode",3],["invalidstatuscode",3]]]],[[],["builder",3]],[[["headermap",3]],["option",4]],[[["headermap",3]],["getall",3]],[[["headermap",3]],["option",4]],[[["method",3],["",0]]],[[["statuscode",3],["",0]]],[[["version",3],["",0]]],[[["uri",3],["",0]]],[[],["builder",3]],null,[[["request",3]],["headermap",3]],[[["response",3]],["headermap",3]],[[["request",3]],["headermap",3]],[[["response",3]],["headermap",3]],[[["uri",3]],["option",4,[["str",0]]]],[[["headermap",3]],["",0]],[[["headermap",3]],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["request",3]]],[[["response",3]]],[[["headermap",3]],["itermut",3]],[[["headermap",3]],["iter",3]],[[["headermap",3]],["intoiter",3]],[[["request",3]]],[[["response",3]]],[[["uri",3]],["parts",3]],[[["statuscode",3]],["bool",0]],[[["headermap",3]],["bool",0]],[[["method",3]],["bool",0]],[[["statuscode",3]],["bool",0]],[[["statuscode",3]],["bool",0]],[[["method",3]],["bool",0]],[[["statuscode",3]],["bool",0]],[[["statuscode",3]],["bool",0]],[[["headermap",3]],["iter",3]],[[["headermap",3]],["itermut",3]],[[["headermap",3]],["keys",3]],[[["headermap",3]],["usize",0]],[[["headermap",3]],["usize",0]],[[["request",3]],["request",3]],[[["response",3]],["response",3]],[[["request",3]],["method",3]],[[["request",3]],["method",3]],[[["method",3],["method",3]],["bool",0]],[[["statuscode",3],["statuscode",3]],["bool",0]],[[["version",3],["version",3]],["bool",0]],[[],["request",3]],[[],["response",3]],[[],["headermap",3,[["headervalue",3]]]],[[],["builder",3]],[[["statuscode",3],["statuscode",3]],["option",4,[["ordering",4]]]],[[["version",3],["version",3]],["option",4,[["ordering",4]]]],[[],["builder",3]],[[["uri",3]],["str",0]],[[["uri",3]],["option",4,[["pathandquery",3]]]],[[["uri",3]],["option",4,[["port",3,[["str",0]]]]]],[[["uri",3]],["option",4,[["u16",0]]]],[[],["builder",3]],[[],["builder",3]],[[["uri",3]],["option",4,[["str",0]]]],[[["headermap",3]],["option",4]],[[["headermap",3],["usize",0]]],null,[[["uri",3]],["option",4,[["scheme",3]]]],[[["uri",3]],["option",4,[["str",0]]]],null,null,[[["response",3]],["statuscode",3]],[[["response",3]],["statuscode",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["builder",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["request",3]],["uri",3]],[[["request",3]],["uri",3]],[[["headermap",3]],["values",3]],[[["headermap",3]],["valuesmut",3]],[[["request",3]],["version",3]],[[["response",3]],["version",3]],[[["request",3]],["version",3]],[[["response",3]],["version",3]],[[["usize",0]],["headermap",3]],null,null,null,null,null,null,[[["sender",3]]],[[["chunk",3],["usize",0]]],[[["chunk",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["chunk",3]]],[[]],[[["body",3]],["option",4,[["u64",0]]]],[[["",0]],["option",4,[["u64",0]]]],[[["",0]],["option",4,[["u64",0]]]],[[],["body",3]],[[],["chunk",3]],[[["chunk",3]]],[[],["body",3]],[[["chunk",3]]],[[["body",3],["formatter",3]],["result",6]],[[["chunk",3],["formatter",3]],["result",6]],[[["sender",3],["formatter",3]],["result",6]],[[["box",3,[["stream",8]]]],["body",3]],[[["chunk",3]],["body",3]],[[]],[[["cow",4,[["str",0]]]],["body",3]],[[["str",0]],["body",3]],[[["string",3]],["body",3]],[[["cow",4]],["body",3]],[[],["body",3]],[[["vec",3,[["u8",0]]]],["body",3]],[[["bytes",3]],["body",3]],[[]],[[["bytes",3]],["chunk",3]],[[["str",0]],["chunk",3]],[[["string",3]],["chunk",3]],[[],["chunk",3]],[[["vec",3,[["u8",0]]]],["chunk",3]],[[]],[[]],[[]],[[]],[[]],[[["chunk",3]],["bytes",3]],[[["chunk",3]]],[[["body",3]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["body",3]],["onupgrade",3]],[[["body",3]],["poll",6,[["option",4]]]],[[["sender",3]],["poll",6]],[[["",0]],["poll",6,[["option",4]]]],[[["body",3]],["poll",6,[["option",4]]]],[[["sender",3]],["poll",6,[["error",3]]]],[[["body",3]],["poll",6,[["option",4,[["headermap",3]]]]]],[[["",0]],["poll",6,[["option",4,[["headermap",3]]]]]],[[["",0]],["poll",6,[["option",4,[["headermap",3]]]]]],[[["chunk",3]],["usize",0]],[[["sender",3],["chunk",3]],["result",4,[["chunk",3]]]],[[["sender",3],["chunk",3]],["startsend",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["body",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["builder",3]],["client",3]],[[["builder",3]],["client",3,[["httpconnector",3]]]],[[],["builder",3]],[[["client",3]],["client",3]],[[["builder",3]],["builder",3]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[],["client",3,[["httpconnector",3],["body",3]]]],[[],["builder",3]],[[["builder",3]],["builder",3]],[[["client",3],["formatter",3]],["result",6]],[[["responsefuture",3],["formatter",3]],["result",6]],[[["builder",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["client",3],["uri",3]],["responsefuture",3]],[[["builder",3],["usize",0]],["builder",3]],[[["builder",3],["usize",0]],["builder",3]],[[["builder",3],["bool",0]],["builder",3]],[[["builder",3],["bool",0]],["builder",3]],[[["builder",3],["into",8,[["option",4,[["u32",0]]]]]],["builder",3]],[[["builder",3],["into",8,[["option",4,[["u32",0]]]]]],["builder",3]],[[["builder",3],["bool",0]],["builder",3]],[[]],[[]],[[]],[[]],[[["builder",3],["bool",0]],["builder",3]],[[["builder",3]],["builder",3]],[[["builder",3],["usize",0]],["builder",3]],[[],["client",3,[["httpconnector",3],["body",3]]]],[[["responsefuture",3]],["poll",6]],[[["client",3],["request",3]],["responsefuture",3]],[[["builder",3],["bool",0]],["builder",3]],[[["builder",3],["bool",0]],["builder",3]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["builder",3]],["builder",3]],[[["",0],["",0]]],[[["builder",3]],["builder",3]],[[["sendrequest",3],["formatter",3]],["result",6]],[[["connection",3],["formatter",3]],["result",6]],[[["handshake",3],["formatter",3]],["result",6]],[[["responsefuture",3],["formatter",3]],["result",6]],[[["builder",3],["formatter",3]],["result",6]],[[["parts",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["handshake",3,[["body",3]]]],[[["builder",3]],["handshake",3]],[[["builder",3],["into",8,[["option",4,[["u32",0]]]]]],["builder",3]],[[["builder",3],["into",8,[["option",4,[["u32",0]]]]]],["builder",3]],[[["builder",3],["bool",0]],["builder",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["connection",3]],["parts",3]],null,[[],["builder",3]],[[["connection",3]],["poll",6]],[[["handshake",3]],["poll",6]],[[["responsefuture",3]],["poll",6]],[[["sendrequest",3]],["poll",6,[["error",3]]]],[[["connection",3]],["poll",6,[["error",3]]]],null,[[["sendrequest",3],["request",3]],["responsefuture",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["connection",3]],["future",8]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["httpconnector",3,[["clone",8]]]],["httpconnector",3,[["clone",8]]]],[[["httpinfo",3]],["httpinfo",3]],[[["destination",3]],["destination",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["destination",3]]],[[["httpconnector",3],["destination",3]]],null,[[["httpconnector",3],["bool",0]]],[[["connected",3],["",26,[["clone",8],["send",8],["sync",8]]]],["connected",3]],[[["httpconnector",3,[["debug",8]]],["formatter",3]],["result",6]],[[["httpinfo",3],["formatter",3]],["result",6]],[[["destination",3],["formatter",3]],["result",6]],[[["connected",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["destination",3]],["str",0]],[[]],[[]],[[]],[[]],[[["connected",3]],["connected",3]],[[["usize",0]],["httpconnector",3]],[[],["connected",3]],[[["option",4,[["handle",3]]]],["httpconnector",3]],[[],["httpconnector",3]],[[],["httpconnector",3,[["tokiothreadpoolgairesolver",3]]]],[[["destination",3]],["option",4,[["u16",0]]]],[[["connected",3],["bool",0]],["connected",3]],[[["httpinfo",3]],["socketaddr",4]],[[["destination",3]],["str",0]],[[["httpconnector",3],["option",4,[["duration",3]]]]],[[["destination",3],["str",0]],["result",6]],[[["httpconnector",3],["option",4,[["duration",3]]]]],[[["httpconnector",3],["option",4,[["ipaddr",4]]]]],[[["httpconnector",3],["bool",0]]],[[["destination",3]]],[[["httpconnector",3],["option",4,[["handle",3]]]]],[[["httpconnector",3],["bool",0]],["httpconnector",3]],[[["destination",3],["str",0]],["result",6]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["uri",3]],["result",6,[["destination",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["name",3]],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["name",3]],["name",3]],[[["gairesolver",3]],["gairesolver",3]],[[["tokiothreadpoolgairesolver",3]],["tokiothreadpoolgairesolver",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["invalidnameerror",3]],["str",0]],[[["name",3],["name",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["gaiaddrs",3],["formatter",3]],["result",6]],[[["gaifuture",3],["formatter",3]],["result",6]],[[["name",3],["formatter",3]],["result",6]],[[["name",3],["formatter",3]],["result",6]],[[["gairesolver",3],["formatter",3]],["result",6]],[[["invalidnameerror",3],["formatter",3]],["result",6]],[[["invalidnameerror",3],["formatter",3]],["result",6]],[[["tokiothreadpoolgairesolver",3],["formatter",3]],["result",6]],[[["tokiothreadpoolgaifuture",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",0]],["result",4,[["name",3]]]],[[["name",3],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["name",3],["name",3]],["bool",0]],[[["usize",0]],["gairesolver",3]],[[],["tokiothreadpoolgairesolver",3]],[[],["gairesolver",3]],[[["gaiaddrs",3]],["option",4]],[[["gaifuture",3]],["poll",6]],[[["tokiothreadpoolgaifuture",3]],["poll",6,[["gaiaddrs",3],["error",3]]]],[[["",0],["name",3]]],[[["gairesolver",3],["name",3]]],[[["tokiothreadpoolgairesolver",3],["name",3]],["tokiothreadpoolgaifuture",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["error",3]],["option",4,[["stderror",8]]]],[[["error",3]],["str",0]],[[["error",3],["formatter",3]],["result",6]],[[["error",3],["formatter",3]],["result",6]],[[]],[[]],[[["error",3]],["option",4,[["box",3,[["stderror",8]]]]]],[[["error",3]],["bool",0]],[[["error",3]],["bool",0]],[[["error",3]],["bool",0]],[[["error",3]],["bool",0]],[[["error",3]],["bool",0]],[[["error",3]],["bool",0]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["occupiedentry",3]]],[[["headervalue",3]]],[[["headername",3]],["str",0]],[[["headername",3]]],[[["headervalue",3]]],[[["headername",3]],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["headername",3]],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["headername",3]],["headername",3]],[[["headervalue",3]],["headervalue",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["headervalue",3],["headervalue",3]],["ordering",4]],[[["invalidheadername",3]],["str",0]],[[["invalidheadernamebytes",3]],["str",0]],[[["invalidheadervalue",3]],["str",0]],[[["invalidheadervaluebytes",3]],["str",0]],[[["tostrerror",3]],["str",0]],[[["intoiter",3]]],[[["drain",3]]],[[["valuedrain",3]]],[[["getall",3],["getall",3]],["bool",0]],[[["headername",3],["headername",3]],["bool",0]],[[["headername",3],["str",0]],["bool",0]],[[["headername",3],["str",0]],["bool",0]],[[["headername",3],["headername",3]],["bool",0]],[[["headername",3],["headername",3]],["bool",0]],[[["headervalue",3],["",0]],["bool",0]],[[["headervalue",3],["headervalue",3]],["bool",0]],[[["headervalue",3],["headervalue",3]],["bool",0]],[[["headervalue",3]],["bool",0]],[[["headervalue",3],["str",0]],["bool",0]],[[["headervalue",3],["string",3]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["iter",3],["formatter",3]],["result",4,[["error",3]]]],[[["itermut",3],["formatter",3]],["result",4,[["error",3]]]],[[["intoiter",3],["formatter",3]],["result",4,[["error",3]]]],[[["keys",3],["formatter",3]],["result",4,[["error",3]]]],[[["values",3],["formatter",3]],["result",4,[["error",3]]]],[[["valuesmut",3],["formatter",3]],["result",4,[["error",3]]]],[[["drain",3],["formatter",3]],["result",4,[["error",3]]]],[[["getall",3],["formatter",3]],["result",4,[["error",3]]]],[[["entry",4],["formatter",3]],["result",4,[["error",3]]]],[[["vacantentry",3],["formatter",3]],["result",4,[["error",3]]]],[[["occupiedentry",3],["formatter",3]],["result",4,[["error",3]]]],[[["valueiter",3],["formatter",3]],["result",4,[["error",3]]]],[[["valueitermut",3],["formatter",3]],["result",4,[["error",3]]]],[[["valuedrain",3],["formatter",3]],["result",4,[["error",3]]]],[[["headername",3],["formatter",3]],["result",4,[["error",3]]]],[[["headername",3],["formatter",3]],["result",4,[["error",3]]]],[[["invalidheadername",3],["formatter",3]],["result",4,[["error",3]]]],[[["invalidheadername",3],["formatter",3]],["result",4,[["error",3]]]],[[["invalidheadernamebytes",3],["formatter",3]],["result",4,[["error",3]]]],[[["invalidheadernamebytes",3],["formatter",3]],["result",4,[["error",3]]]],[[["headervalue",3],["formatter",3]],["result",4,[["error",3]]]],[[["invalidheadervalue",3],["formatter",3]],["result",4,[["error",3]]]],[[["invalidheadervalue",3],["formatter",3]],["result",4,[["error",3]]]],[[["invalidheadervaluebytes",3],["formatter",3]],["result",4,[["error",3]]]],[[["invalidheadervaluebytes",3],["formatter",3]],["result",4,[["error",3]]]],[[["tostrerror",3],["formatter",3]],["result",4,[["error",3]]]],[[["tostrerror",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["headername",3]],["headername",3]],[[]],[[]],[[["u32",0]],["headervalue",3]],[[["i64",0]],["headervalue",3]],[[["i32",0]],["headervalue",3]],[[["u64",0]],["headervalue",3]],[[["i16",0]],["headervalue",3]],[[]],[[["u16",0]],["headervalue",3]],[[["headername",3]],["headervalue",3]],[[["isize",0]],["headervalue",3]],[[["usize",0]],["headervalue",3]],[[["headervalue",3]],["headervalue",3]],[[]],[[]],[[]],[[],["result",4,[["headername",3],["invalidheadername",3]]]],[[],["result",4,[["headervalue",3],["invalidheadervalue",3]]]],[[],["result",4,[["headername",3],["invalidheadername",3]]]],[[["headername",3]],["headervalue",3]],[[["bytes",3]],["result",4,[["headervalue",3],["invalidheadervaluebytes",3]]]],[[["bytes",3]],["headervalue",3]],[[["str",0]],["headername",3]],[[["str",0]],["headervalue",3]],[[["str",0]],["result",4,[["headername",3],["invalidheadername",3]]]],[[["str",0]],["result",4,[["headervalue",3]]]],[[["str",0]],["result",4,[["headervalue",3],["invalidheadervalue",3]]]],[[["occupiedentry",3]],["",0]],[[["occupiedentry",3]],["",0]],[[["headername",3],["",0]]],[[["headervalue",3],["",0]]],[[["vacantentry",3]],["",0]],[[["occupiedentry",3]]],[[["vacantentry",3]],["occupiedentry",3]],[[["occupiedentry",3]],["valuedrain",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["getall",3]],["valueiter",3]],[[["getall",3]],["valueiter",3]],[[["occupiedentry",3]],["valueiter",3]],[[["occupiedentry",3]],["valueitermut",3]],[[["occupiedentry",3]],["valueitermut",3]],[[]],[[]],[[]],[[["vacantentry",3]],["headername",3]],[[["occupiedentry",3]],["",0]],[[["headervalue",3]],["bool",0]],[[["headervalue",3]],["bool",0]],[[["getall",3]],["valueiter",3]],[[["occupiedentry",3]],["valueiter",3]],[[["occupiedentry",3]],["valueitermut",3]],[[["entry",4]],["headername",3]],[[["vacantentry",3]],["headername",3]],[[["occupiedentry",3]],["headername",3]],[[["headervalue",3]],["usize",0]],[[["headername",3],["headername",3]],["bool",0]],[[["iter",3]],["option",4]],[[["itermut",3]],["option",4]],[[["intoiter",3]],["option",4]],[[["keys",3]],["option",4]],[[["values",3]],["option",4]],[[["valuesmut",3]],["option",4]],[[["drain",3]],["option",4]],[[["valueiter",3]],["option",4]],[[["valueitermut",3]],["option",4]],[[["valuedrain",3]],["option",4]],[[["valueiter",3]],["option",4]],[[["valueitermut",3]],["option",4]],[[["entry",4]],["",0]],[[["entry",4]],["",0]],[[["headervalue",3],["headervalue",3]],["option",4,[["ordering",4]]]],[[["headervalue",3],["",0]],["option",4,[["ordering",4]]]],[[["headervalue",3],["string",3]],["option",4,[["ordering",4]]]],[[["headervalue",3],["headervalue",3]],["option",4,[["ordering",4]]]],[[["headervalue",3]],["option",4,[["ordering",4]]]],[[["headervalue",3],["str",0]],["option",4,[["ordering",4]]]],[[["occupiedentry",3]]],[[["occupiedentry",3]]],[[["occupiedentry",3]]],[[["headervalue",3],["bool",0]]],[[["iter",3]]],[[["itermut",3]]],[[["intoiter",3]]],[[["keys",3]]],[[["values",3]]],[[["valuesmut",3]]],[[["drain",3]]],[[["valueiter",3]]],[[["valuedrain",3]]],[[["",0]]],[[["",0]]],[[["headervalue",3]],["result",4,[["str",0],["tostrerror",3]]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,[[],["andthen",3]],[[],["andthen",3]],[[["usize",0]],["bufferunordered",3]],[[["usize",0]],["buffered",3]],[[["",0]],["",0]],[[],["catchunwind",3]],[[],["catchunwind",3]],[[],["chain",3]],[[["usize",0]],["chunks",3]],[[],["collect",3]],[[],["concat",3]],[[],["concat2",3]],[[],["filter",3]],[[],["filtermap",3]],[[],["flatten",3]],[[],["flatten",3]],[[],["flattenstream",3]],[[],["fold",3]],[[],["foreach",3]],[[],["forward",3]],[[],["fromerr",3]],[[],["fromerr",3]],[[],["fuse",3]],[[],["fuse",3]],[[],["inspect",3]],[[],["inspect",3]],[[],["inspecterr",3]],[[],["streamfuture",3]],[[],["intostream",3]],[[],["join",3]],[[],["join3",3]],[[],["join4",3]],[[],["join5",3]],[[],["lazy",3]],[[],["map",3]],[[],["map",3]],[[],["maperr",3]],[[],["maperr",3]],[[],["merge",3]],[[],["orelse",3]],[[],["orelse",3]],[[],["peekable",3]],[[["",0]],["result",4,[["async",4]]]],[[["",0]],["result",4,[["async",4,[["option",4]]]]]],[[],["pollfn",3]],[[]],[[],["select",3]],[[],["select",3]],[[],["select2",3]],[[],["shared",3]],[[["u64",0]],["skip",3]],[[],["skipwhile",3]],[[],["spawn",3]],[[]],[[["u64",0]],["take",3]],[[],["takewhile",3]],[[],["then",3]],[[],["then",3]],[[],["result",4]],[[],["wait",3]],[[],["zip",3]],null,null,[[["socketaddr",4]],["builder",3,[["addrincoming",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["builder",3]],null,[[["builder",3]],["builder",3]],[[["server",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["builder",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[["stdtcplistener",3]],["result",4,[["builder",3,[["addrincoming",3]]],["error",3]]]],[[["builder",3],["bool",0]],["builder",3]],[[["builder",3],["bool",0]],["builder",3]],[[["builder",3],["usize",0]],["builder",3]],[[["builder",3],["bool",0]],["builder",3]],[[["builder",3],["bool",0]],["builder",3]],[[["builder",3],["into",8,[["option",4,[["u32",0]]]]]],["builder",3]],[[["builder",3],["into",8,[["option",4,[["u32",0]]]]]],["builder",3]],[[["builder",3],["into",8,[["option",4,[["u32",0]]]]]],["builder",3]],[[["builder",3],["bool",0]],["builder",3]],[[]],[[]],[[]],[[["server",3,[["addrincoming",3]]]],["socketaddr",4]],[[["http_",3]],["builder",3]],[[["server",3]],["poll",6]],[[["builder",3]],["server",3]],[[["builder",3,[["addrincoming",3]]],["option",4,[["duration",3]]]],["builder",3,[["addrincoming",3]]]],[[["builder",3,[["addrincoming",3]]],["bool",0]],["builder",3,[["addrincoming",3]]]],[[["builder",3,[["addrincoming",3]]],["bool",0]],["builder",3,[["addrincoming",3]]]],[[["socketaddr",4]],["result",6,[["builder",3,[["addrincoming",3]]]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["server",3]],["graceful",3]],null,null,null,null,null,null,null,[[["socketaddr",4]],["result",6,[["addrincoming",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["http",3,[["clone",8]]]],["http",3,[["clone",8]]]],[[["",0],["",0]]],[[["addrstream",3]],["result",6]],[[["connection",3],["formatter",3]],["result",6]],[[["addrincoming",3],["formatter",3]],["result",6]],[[["http",3,[["debug",8]]],["formatter",3]],["result",6]],[[["serve",3,[["debug",8],["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["connecting",3,[["debug",8],["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["parts",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["addrstream",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["connection",3]]],[[["http",3],["bool",0]],["http",3]],[[["http",3],["bool",0]],["http",3]],[[["http",3],["bool",0]],["http",3]],[[["http",3],["into",8,[["option",4,[["u32",0]]]]]],["http",3]],[[["http",3],["into",8,[["option",4,[["u32",0]]]]]],["http",3]],[[["http",3],["into",8,[["option",4,[["u32",0]]]]]],["http",3]],[[["http",3],["bool",0]],["http",3]],[[["serve",3]],["",0]],[[["serve",3]],["",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["addrstream",3]],["tcpstream",3]],[[["connection",3]],["parts",3]],null,[[["http",3],["bool",0]],["http",3]],[[["addrincoming",3]],["socketaddr",4]],[[["http",3],["usize",0]],["http",3]],[[],["http",3]],[[["http",3],["bool",0]],["http",3]],[[["connection",3]],["poll",6]],[[["addrincoming",3]],["poll",6,[["option",4]]]],[[["serve",3]],["poll",6,[["option",4]]]],[[["connecting",3]],["poll",6]],[[["connection",3]],["poll",6,[["error",3]]]],[[["addrstream",3]],["bool",0]],[[["addrstream",3]],["result",6,[["usize",0]]]],[[["addrstream",3],["",0]],["poll",6,[["usize",0],["error",3]]]],null,[[["addrstream",3]],["socketaddr",4]],[[["http",3],["socketaddr",4]],["result",6,[["serve",3,[["addrincoming",3]]]]]],[[["http",3],["socketaddr",4],["handle",3]],["result",6,[["serve",3,[["addrincoming",3]]]]]],[[["http",3]],["connection",3]],[[["http",3]],["serve",3]],null,[[["addrincoming",3],["option",4,[["duration",3]]]],["addrincoming",3]],[[["addrincoming",3],["bool",0]],["addrincoming",3]],[[["addrincoming",3],["bool",0]]],[[["addrstream",3]],["poll",6,[["error",3]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["connection",3]],["option",4,[["parts",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["http",3]],["http",3]],[[["connection",3]],["upgradeableconnection",3]],[[["connection",3]],["future",8]],[[["addrstream",3]],["result",6,[["usize",0]]]],[[["addrstream",3],["",0]],["poll",6,[["usize",0],["error",3]]]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["request",3]]],[[["",0]]],[[],["makeservicefn",3]],[[["",0]],["poll",6]],[[["",0]],["poll",6]],[[["",0]],["poll",6]],[[["",0]],["poll",6]],[[],["servicefn",3]],[[],["servicefnok",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["upgraded",3]],["result",4,[["parts",3,[["",26,[["asyncread",8],["asyncwrite",8]]]]],["upgraded",3]]]],[[["upgraded",3]],["result",6]],[[["upgraded",3],["formatter",3]],["result",6]],[[["onupgrade",3],["formatter",3]],["result",6]],[[["parts",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["onupgrade",3]],["poll",6]],[[["upgraded",3]],["bool",0]],[[["upgraded",3]],["result",6,[["usize",0]]]],[[["upgraded",3],["",0]],["poll",6,[["usize",0],["error",3]]]],null,[[["upgraded",3]],["poll",6,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["upgraded",3]],["result",6,[["usize",0]]]],[[["upgraded",3],["",0]],["poll",6,[["usize",0],["error",3]]]]],"p":[[3,"StatusCode"],[3,"Method"],[3,"Version"],[3,"HeaderMap"],[3,"Uri"],[3,"Request"],[3,"Response"],[8,"Payload"],[3,"Sender"],[3,"Chunk"],[3,"Body"],[3,"Client"],[3,"ResponseFuture"],[3,"Builder"],[3,"SendRequest"],[3,"Connection"],[3,"Handshake"],[3,"ResponseFuture"],[3,"Builder"],[3,"Parts"],[8,"Connect"],[3,"HttpConnector"],[3,"HttpInfo"],[3,"Destination"],[3,"Connected"],[8,"Resolve"],[3,"Name"],[3,"GaiAddrs"],[3,"GaiFuture"],[3,"GaiResolver"],[3,"InvalidNameError"],[3,"TokioThreadpoolGaiResolver"],[3,"TokioThreadpoolGaiFuture"],[3,"Error"],[4,"Entry"],[3,"OccupiedEntry"],[3,"HeaderValue"],[3,"HeaderName"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Drain"],[3,"GetAll"],[3,"VacantEntry"],[3,"ValueIter"],[3,"ValueIterMut"],[3,"ValueDrain"],[3,"InvalidHeaderName"],[3,"InvalidHeaderNameBytes"],[3,"InvalidHeaderValue"],[3,"InvalidHeaderValueBytes"],[3,"ToStrError"],[13,"Occupied"],[13,"Vacant"],[8,"Future"],[8,"Stream"],[3,"Server"],[3,"Builder"],[3,"AddrIncoming"],[3,"Connection"],[3,"Http"],[3,"Serve"],[3,"Connecting"],[3,"Parts"],[3,"AddrStream"],[8,"MakeService"],[8,"Service"],[3,"Upgraded"],[3,"OnUpgrade"],[3,"Parts"]]},\
"idna":{"doc":"This Rust crate implements IDNA per the WHATWG URL Standard…","t":[5,5,0,0,5,5,5,5,3,3,7,11,11,11,11,11,11,11,11,11,11,11,5,11,5,12,11,11,11,11,11,11,12,12],"n":["domain_to_ascii","domain_to_unicode","punycode","uts46","decode","decode_to_string","encode","encode_str","Errors","Flags","PUNYCODE_PREFIX","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","from","from","into","into","to_ascii","to_owned","to_unicode","transitional_processing","try_from","try_from","try_into","try_into","type_id","type_id","use_std3_ascii_rules","verify_dns_length"],"q":["idna","","","","idna::punycode","","","","idna::uts46","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The domain to ASCII algorithm.","The domain to Unicode algorithm.","Punycode (RFC 3492) implementation.","<em>Unicode IDNA Compatibility Processing</em> (Unicode Technical …","Convert Punycode to Unicode.","Convert Punycode to an Unicode <code>String</code>.","Convert Unicode to Punycode.","Convert an Unicode <code>str</code> to Punycode.","Errors recorded during UTS #46 processing.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","http://www.unicode.org/reports/tr46/#ToASCII","","http://www.unicode.org/reports/tr46/#ToUnicode","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,1,2,1,2,1,1,2,1,2,1,2,0,1,0,1,1,2,1,2,1,2,1,1],"f":[[[["str",0]],["result",4,[["string",3],["errors",3]]]],[[["str",0]]],null,null,[[["str",0]],["option",4,[["vec",3,[["char",0]]]]]],[[["str",0]],["option",4,[["string",3]]]],[[],["option",4,[["string",3]]]],[[["str",0]],["option",4,[["string",3]]]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["flags",3]],["flags",3]],[[["",0],["",0]]],[[["errors",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["str",0],["flags",3]],["result",4,[["string",3],["errors",3]]]],[[["",0]]],[[["str",0],["flags",3]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null],"p":[[3,"Flags"],[3,"Errors"]]},\
"indexmap":{"doc":"<code>IndexMap</code> is a hash table where the iteration order of the …","t":[8,2,2,10,14,14,0,0,3,4,3,3,3,3,16,3,8,13,3,13,3,16,3,3,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Equivalent","IndexMap","IndexSet","equivalent","indexmap","indexset","map","set","Drain","Entry","IndexMap","IntoIter","Iter","IterMut","Key","Keys","MutableKeys","Occupied","OccupiedEntry","Vacant","VacantEntry","Value","Values","ValuesMut","__private_marker","__private_marker","and_modify","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone_into","collect","collect","collect","collect","collect","collect","collect","contains_key","count","count","count","count","count","count","count","default","drain","entry","eq","extend","extend","fmt","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","get_full","get_full_mut","get_full_mut2","get_full_mut2","get_index","get_index_mut","get_mut","get_mut","hasher","index","index","index","index","index_mut","insert","insert","insert","insert_full","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_key","into_mut","is_empty","iter","iter_mut","key","key","key","keys","last","last","last","last","last","last","last","len","len","len","len","len","len","len","new","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","nth","nth","nth","or_default","or_insert","or_insert_with","pop","remove","remove","remove_entry","reserve","retain","retain2","retain2","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort_by","sort_keys","sorted_by","swap_remove","swap_remove_full","swap_remove_index","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","with_capacity_and_hasher","with_hasher","0","0","Difference","Drain","IndexSet","Intersection","IntoIter","Iter","SymmetricDifference","Union","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone_into","collect","collect","collect","contains","count","count","count","default","difference","drain","eq","extend","extend","fmt","fold","fold","from","from","from","from","from","from","from","from","from_iter","get","get_full","get_index","hasher","insert","insert_full","intersection","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_disjoint","is_empty","is_subset","is_superset","iter","last","last","last","len","len","len","new","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","pop","remove","replace","reserve","retain","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","sort","sort_by","sorted_by","sub","swap_remove","swap_remove_full","swap_remove_index","swap_take","symmetric_difference","take","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","with_capacity","with_capacity_and_hasher","with_hasher"],"q":["indexmap","","","","","","","","indexmap::mapindexmap::map::Entry","","indexmap::set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Key equivalence trait.","","","Compare self to <code>key</code> and return <code>true</code> if they are equal.","Create an <code>IndexMap</code> from a list of key-value pairs","Create an <code>IndexSet</code> from a list of values","<code>IndexMap</code> is a hash table where the iteration order of the …","A hash set implemented using <code>IndexMap</code>","","Entry for an existing key-value pair or a vacant location …","A hash table where the iteration order of the key-value …","","","","","","Opt-in mutable access to keys.","Existing slot with equivalent key.","","Vacant slot (no equivalent key in the map).","","","","","This method is not useful in itself – it is there to …","","Modifies the entry if it is occupied.","","","","","","","","","","","","","","","","","","","","","","","Computes in <strong>O(1)</strong> time.","Remove all key-value pairs in the map, while preserving …","","","","","","","","","","Return <code>true</code> if an equivalent to <code>key</code> exists in the map.","","","","","","","","Return an empty <code>IndexMap</code>","Clears the <code>IndexMap</code>, returning all key-value pairs as a …","Get the given key’s corresponding entry in the map for …","","Extend the map with all key-value pairs in the iterable.","Extend the map with all key-value pairs in the iterable.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create an <code>IndexMap</code> from the sequence of key-value pairs in …","","Return a reference to the value stored for <code>key</code>, if it is …","Return item index, key and value","","Return item index, mutable reference to key and value","","Get a key-value pair by index","Get a key-value pair by index","","","Return a reference to the map’s <code>BuildHasher</code>.","Return the index where the key-value pair exists or will …","Return the index of the key-value pair","Return the index where the key-value pair will be inserted.","<em><strong>Panics</strong></em> if <code>key</code> is not present in the map.","<em><strong>Panics</strong></em> if <code>key</code> is not present in the map.","Sets the value of the entry to <code>value</code>, and returns the entry…","","Insert a key-value pair in the map.","Insert a key-value pair in the map, and get their index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Returns true if the map contains no elements.","Return an iterator over the key-value pairs of the map, in …","Return an iterator over the key-value pairs of the map, in …","","","","Return an iterator over the keys of the map, in their order","","","","","","","","","","","","","","Return the number of key-value pairs in the map.","Create a new map. (Does not allocate.)","","","","","","","","","","","","","","","","","","","","","","Inserts a default-constructed value in the entry if it is …","Computes in <strong>O(1)</strong> time (amortized average).","Computes in <strong>O(1)</strong> time (amortized average).","Remove the last key-value pair","","NOTE: Same as .swap_remove","Remove and return the key, value pair stored in the map …","Reserve capacity for <code>additional</code> more key-value pairs.","Scan through each key-value pair in the map and keep those …","Scan through each key-value pair in the map and keep those …","","","","","","","","","Sort the map’s key-value pairs in place using the …","Sort the map’s key-value pairs by the default ordering …","Sort the key-value pairs of the map and return a by value …","Remove the key-value pair equivalent to <code>key</code> and return its …","Remove the key-value pair equivalent to <code>key</code> and return it …","Remove the key-value pair by index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over the values of the map, in their …","Return an iterator over mutable references to the the …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with capacity for <code>n</code> key-value pairs. …","Create a new map with <code>hash_builder</code>","","","","","A hash set where the iteration order of the values is …","","","","","","Returns the set intersection, cloned into a new set.","Returns the set union, cloned into a new set.","Returns the set symmetric-difference, cloned into a new …","","","","","","","","","","","","","","","","","Computes in <strong>O(1)</strong> time.","Remove all elements in the set, while preserving its …","","","","","","Return <code>true</code> if an equivalent to <code>value</code> exists in the set.","","","","Return an empty <code>IndexSet</code>","Return an iterator over the values that are in <code>self</code> but …","Clears the <code>IndexSet</code>, returning all values as a drain …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Return a reference to the value stored in the set, if it …","Return item index and value","Get a value by index","Return a reference to the set’s <code>BuildHasher</code>.","Insert the value into the set.","Insert the value into the set, and get its index.","Return an iterator over the values that are in both <code>self</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>.","Returns true if the set contains no elements.","Returns <code>true</code> if all elements of <code>self</code> are contained in <code>other</code>…","Returns <code>true</code> if all elements of <code>other</code> are contained in <code>self</code>…","Return an iterator over the values of the set, in their …","","","","","","Return the number of elements in the set.","Create a new set. (Does not allocate.)","","","","","","","","","","","","","","","","","","Remove the last value","FIXME Same as .swap_remove","Adds a value to the set, replacing the existing value, if …","FIXME Not implemented fully yet","Scan through each value in the set and keep those where the","","","","","","","","Sort the set’s values by their default ordering.","Sort the set’s values in place using the comparison …","Sort the values of the set and return a by value iterator …","Returns the set difference, cloned into a new set.","Remove the value from the set, and return <code>true</code> if it was …","Remove the value from the set return it and the index it …","Remove the key-value pair by index","Removes and returns the value in the set, if any, that is …","Return an iterator over the values that are in <code>self</code> or …","FIXME Same as .swap_take","","","","","","","","","","","","","","","","","","","","","","","","","","Return an iterator over all values that are in <code>self</code> or …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with capacity for <code>n</code> elements. (Does not …","Create a new set with <code>hash_builder</code>"],"i":[0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,0,0,3,0,3,0,2,0,0,2,4,3,3,5,6,7,8,9,10,11,12,13,4,3,5,6,7,8,9,10,11,12,13,4,4,4,4,4,7,8,9,10,11,12,13,4,7,8,9,10,11,12,13,4,4,4,4,4,4,4,3,5,6,7,8,9,10,11,12,13,4,4,5,4,4,4,2,4,4,4,5,4,4,3,5,6,4,4,5,6,4,4,3,5,6,7,8,9,10,11,12,13,4,7,8,9,10,11,12,13,4,4,4,6,5,4,4,4,3,5,6,4,7,8,9,10,11,12,13,7,8,9,10,11,12,4,4,7,8,9,10,11,12,13,7,8,9,10,11,12,13,7,8,9,10,11,12,13,3,3,3,4,5,4,5,4,4,2,4,7,8,9,10,11,12,13,4,4,4,4,4,4,4,3,5,6,7,8,9,10,11,12,13,4,3,5,6,7,8,9,10,11,12,13,4,3,5,6,7,8,9,10,11,12,13,4,4,4,4,4,4,14,15,0,0,0,0,0,0,0,0,16,16,16,17,18,19,20,21,22,23,16,17,18,19,20,21,22,23,16,16,16,16,16,17,18,19,16,17,18,19,16,16,16,16,16,16,16,22,23,17,18,19,20,21,22,23,16,16,16,16,16,16,16,16,16,17,18,19,20,21,22,23,16,17,18,19,20,21,22,23,16,16,16,16,16,16,16,17,18,19,17,18,16,16,17,18,19,20,21,22,23,17,18,19,20,21,22,23,17,18,19,16,16,16,16,16,17,18,19,20,21,22,23,16,16,16,16,16,16,16,16,16,16,16,17,18,19,20,21,22,23,16,17,18,19,20,21,22,23,16,17,18,19,20,21,22,23,16,16,16,16,16],"f":[null,null,null,[[["",0],["",0]],["bool",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["privatemarker",3]],[[["indexmap",3]],["privatemarker",3]],[[["entry",4]],["entry",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["indexmap",3]],["usize",0]],[[["indexmap",3]]],[[["indexmap",3,[["clone",8],["clone",8],["clone",8]]]],["indexmap",3,[["clone",8],["clone",8],["clone",8]]]],[[["",0],["",0]]],[[["keys",3]]],[[["values",3]]],[[["valuesmut",3]]],[[["iter",3]]],[[["itermut",3]]],[[["intoiter",3]]],[[["drain",3]]],[[["indexmap",3],["",0]],["bool",0]],[[["keys",3]],["usize",0]],[[["values",3]],["usize",0]],[[["valuesmut",3]],["usize",0]],[[["iter",3]],["usize",0]],[[["itermut",3]],["usize",0]],[[["intoiter",3]],["usize",0]],[[["drain",3]],["usize",0]],[[],["indexmap",3]],[[["indexmap",3],["rangefull",3]],["drain",3]],[[["indexmap",3]],["entry",4]],[[["indexmap",3],["indexmap",3]],["bool",0]],[[["indexmap",3],["intoiterator",8]]],[[["indexmap",3],["intoiterator",8]]],[[["indexmap",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]],["indexmap",3]],[[["occupiedentry",3]],["",0]],[[["indexmap",3],["",0]],["option",4]],[[["indexmap",3],["",0]],["option",4]],[[["indexmap",3],["",0]],["option",4]],[[["",0],["",0]],["option",4]],[[["indexmap",3],["",0]],["option",4]],[[["indexmap",3],["usize",0]],["option",4]],[[["indexmap",3],["usize",0]],["option",4]],[[["occupiedentry",3]],["",0]],[[["indexmap",3],["",0]],["option",4]],[[["indexmap",3]],["",0]],[[["entry",4]],["usize",0]],[[["occupiedentry",3]],["usize",0]],[[["vacantentry",3]],["usize",0]],[[["indexmap",3],["",0]],["",0]],[[["indexmap",3],["",0]],["",0]],[[["occupiedentry",3]]],[[["vacantentry",3]],["",0]],[[["indexmap",3]],["option",4]],[[["indexmap",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["indexmap",3]]],[[["indexmap",3]]],[[["indexmap",3]]],[[["vacantentry",3]]],[[["occupiedentry",3]],["",0]],[[["indexmap",3]],["bool",0]],[[["indexmap",3]],["iter",3]],[[["indexmap",3]],["itermut",3]],[[["entry",4]],["",0]],[[["occupiedentry",3]],["",0]],[[["vacantentry",3]],["",0]],[[["indexmap",3]],["keys",3]],[[["keys",3]],["option",4]],[[["values",3]],["option",4]],[[["valuesmut",3]],["option",4]],[[["iter",3]],["option",4]],[[["itermut",3]],["option",4]],[[["intoiter",3]],["option",4]],[[["drain",3]],["option",4]],[[["keys",3]],["usize",0]],[[["values",3]],["usize",0]],[[["valuesmut",3]],["usize",0]],[[["iter",3]],["usize",0]],[[["itermut",3]],["usize",0]],[[["intoiter",3]],["usize",0]],[[["indexmap",3]],["usize",0]],[[],["indexmap",3]],[[["keys",3]],["option",4]],[[["values",3]],["option",4]],[[["valuesmut",3]],["option",4]],[[["iter",3]],["option",4]],[[["itermut",3]],["option",4]],[[["intoiter",3]],["option",4]],[[["drain",3]],["option",4]],[[["keys",3]],["option",4]],[[["values",3]],["option",4]],[[["valuesmut",3]],["option",4]],[[["iter",3]],["option",4]],[[["itermut",3]],["option",4]],[[["intoiter",3]],["option",4]],[[["drain",3]],["option",4]],[[["keys",3],["usize",0]],["option",4]],[[["values",3],["usize",0]],["option",4]],[[["valuesmut",3],["usize",0]],["option",4]],[[["iter",3],["usize",0]],["option",4]],[[["itermut",3],["usize",0]],["option",4]],[[["intoiter",3],["usize",0]],["option",4]],[[["drain",3],["usize",0]],["option",4]],[[["entry",4]],["",0]],[[["entry",4]],["",0]],[[["entry",4]],["",0]],[[["indexmap",3]],["option",4]],[[["occupiedentry",3]]],[[["indexmap",3],["",0]],["option",4]],[[["occupiedentry",3]]],[[["indexmap",3],["usize",0]]],[[["indexmap",3]]],[[["",0]]],[[["indexmap",3]]],[[["keys",3]]],[[["values",3]]],[[["valuesmut",3]]],[[["iter",3]]],[[["itermut",3]]],[[["intoiter",3]]],[[["drain",3]]],[[["indexmap",3]]],[[["indexmap",3]]],[[["indexmap",3]],["intoiter",3]],[[["indexmap",3],["",0]],["option",4]],[[["indexmap",3],["",0]],["option",4]],[[["indexmap",3],["usize",0]],["option",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["indexmap",3]],["values",3]],[[["indexmap",3]],["valuesmut",3]],[[["usize",0]],["indexmap",3]],[[["usize",0]],["indexmap",3]],[[],["indexmap",3]],null,null,null,null,null,null,null,null,null,null,[[["indexset",3],["indexset",3]]],[[["indexset",3],["indexset",3]]],[[["indexset",3],["indexset",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["indexset",3]],["usize",0]],[[["indexset",3]]],[[["indexset",3,[["clone",8],["clone",8]]]],["indexset",3,[["clone",8],["clone",8]]]],[[["",0],["",0]]],[[["intoiter",3]]],[[["iter",3]]],[[["drain",3]]],[[["indexset",3],["",0]],["bool",0]],[[["intoiter",3]],["usize",0]],[[["iter",3]],["usize",0]],[[["drain",3]],["usize",0]],[[],["indexset",3]],[[["indexset",3],["indexset",3]],["difference",3]],[[["indexset",3],["rangefull",3]],["drain",3]],[[["indexset",3],["indexset",3]],["bool",0]],[[["indexset",3],["intoiterator",8]]],[[["indexset",3],["intoiterator",8]]],[[["indexset",3],["formatter",3]],["result",6]],[[["symmetricdifference",3]]],[[["union",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]],["indexset",3]],[[["indexset",3],["",0]],["option",4]],[[["indexset",3],["",0]],["option",4]],[[["indexset",3],["usize",0]],["option",4]],[[["indexset",3]],["",0]],[[["indexset",3]],["bool",0]],[[["indexset",3]]],[[["indexset",3],["indexset",3]],["intersection",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["indexset",3]]],[[["indexset",3]]],[[["indexset",3],["indexset",3]],["bool",0]],[[["indexset",3]],["bool",0]],[[["indexset",3],["indexset",3]],["bool",0]],[[["indexset",3],["indexset",3]],["bool",0]],[[["indexset",3]],["iter",3]],[[["intoiter",3]],["option",4]],[[["iter",3]],["option",4]],[[["drain",3]],["option",4]],[[["intoiter",3]],["usize",0]],[[["iter",3]],["usize",0]],[[["indexset",3]],["usize",0]],[[],["indexset",3]],[[["intoiter",3]],["option",4]],[[["iter",3]],["option",4]],[[["drain",3]],["option",4]],[[["difference",3]],["option",4]],[[["intersection",3]],["option",4]],[[["symmetricdifference",3]],["option",4]],[[["union",3]],["option",4]],[[["intoiter",3]],["option",4]],[[["iter",3]],["option",4]],[[["drain",3]],["option",4]],[[["difference",3]],["option",4]],[[["intersection",3]],["option",4]],[[["symmetricdifference",3]],["option",4]],[[["union",3]],["option",4]],[[["intoiter",3],["usize",0]],["option",4]],[[["iter",3],["usize",0]],["option",4]],[[["drain",3],["usize",0]],["option",4]],[[["indexset",3]],["option",4]],[[["indexset",3],["",0]],["bool",0]],[[["indexset",3]],["option",4]],[[["indexset",3],["usize",0]]],[[["indexset",3]]],[[["intoiter",3]]],[[["iter",3]]],[[["drain",3]]],[[["difference",3]]],[[["intersection",3]]],[[["symmetricdifference",3]]],[[["union",3]]],[[["indexset",3]]],[[["indexset",3]]],[[["indexset",3]],["intoiter",3]],[[["indexset",3],["indexset",3]]],[[["indexset",3],["",0]],["bool",0]],[[["indexset",3],["",0]],["option",4]],[[["indexset",3],["usize",0]],["option",4]],[[["indexset",3],["",0]],["option",4]],[[["indexset",3],["indexset",3]],["symmetricdifference",3]],[[["indexset",3],["",0]],["option",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["indexset",3],["indexset",3]],["union",3]],[[["usize",0]],["indexset",3]],[[["usize",0]],["indexset",3]],[[],["indexset",3]]],"p":[[8,"Equivalent"],[8,"MutableKeys"],[4,"Entry"],[3,"IndexMap"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[13,"Occupied"],[13,"Vacant"],[3,"IndexSet"],[3,"IntoIter"],[3,"Iter"],[3,"Drain"],[3,"Difference"],[3,"Intersection"],[3,"SymmetricDifference"],[3,"Union"]]},\
"iovec":{"doc":"A specialized byte slice type for performing vectored I/O …","t":[3,17,11,11,11,11,11,11,11,0,5,5],"n":["IoVec","MAX_LENGTH","borrow","borrow_mut","deref","deref_mut","from_bytes","from_bytes_mut","type_id","unix","as_os_slice","as_os_slice_mut"],"q":["iovec","","","","","","","","","","iovec::unix",""],"d":["A specialized byte slice type for performing vectored I/O …","Max length of an <code>IoVec</code> slice.","","","","","","","","IoVec extensions for Unix platforms.","Convert a slice of <code>IoVec</code> refs to a slice of <code>libc::iovec</code>.","Convert a mutable slice of <code>IoVec</code> refs to a mutable slice …"],"i":[0,0,1,1,1,1,1,1,1,0,0,0],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["iovec",3]]],[[["iovec",3]]],[[],["option",4,[["iovec",3]]]],[[],["option",4,[["iovec",3]]]],[[["",0]],["typeid",3]],null,[[]],[[]]],"p":[[3,"IoVec"]]},\
"itoa":{"doc":"","t":[3,8,11,11,11,11,11,5,11,11,11,11,11,11,11,11,5],"n":["Buffer","Integer","borrow","borrow_mut","clone","clone_into","default","fmt","format","from","into","new","to_owned","try_from","try_into","type_id","write"],"q":["itoa","","","","","","","","","","","","","","","",""],"d":["A safe API for formatting integers to text.","An integer that can be formatted by <code>itoa::write</code> and …","","","","","","Write integer to an <code>fmt::Write</code>.","Print an integer into this buffer and return a reference …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This is a cheap operation; you don’t need to worry about …","","","","","Write integer to an <code>io::Write</code>."],"i":[0,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["buffer",3]],["buffer",3]],[[["",0],["",0]]],[[],["buffer",3]],[[["write",8],["integer",8]],["result",6]],[[["buffer",3],["integer",8]],["str",0]],[[]],[[]],[[],["buffer",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["write",8],["integer",8]],["result",6,[["usize",0]]]]],"p":[[3,"Buffer"]]},\
"lambda_http":{"doc":"Enriches the <code>lambda_runtime</code> crate with http types …","t":[13,4,13,8,8,6,8,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,11,11,11,10,11,11,11,14,11,11,11,11,10,10,10,0,10,10,11,10,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,3,3,4,12,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["Binary","Body","Empty","Handler","IntoResponse","Request","RequestExt","Response","StrMap","Text","as_ref","body","body_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","clone","clone_into","default","default","default","deref","deserialize","eq","eq","extensions","extensions_mut","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_parts","get","get_all","headers","headers_mut","http","into","into","into","into_body","into_parts","into_response","into_response","is_empty","iter","lambda","map","ne","ne","new","path_parameters","payload","query_string_parameters","request","request_context","run","serialize","stage_variables","start","status","status_mut","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","version_mut","0","0","Alb","ApiGateway","Elb","Identity","RequestContext","access_key","account_id","api_key","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","caller","clone","clone","clone","clone_into","clone_into","clone_into","cognito_authentication_provider","cognito_authentication_type","cognito_identity_id","cognito_identity_pool_id","default","default","default","deserialize","deserialize","deserialize","fmt","fmt","fmt","from","from","from","into","into","into","is_alb","source_ip","target_group_arn","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","user","user_agent","user_arn","account_id","api_id","authorizer","elb","http_method","identity","request_id","resource_id","resource_path","stage"],"q":["lambda_http","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lambda_http::Body","","lambda_http::request","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lambda_http::request::RequestContext","","","","","","","","",""],"d":["A body containing binary data","Representation of http request and response bodies as …","An empty body","Functions serving as ALB and API Gateway handlers must …","A conversion of self into a <code>Response</code>","Type alias for <code>http::Request</code>s with a fixed …","Extentions for <code>lambda_http::Request</code> structs that provide …","Represents an HTTP response","A read-only view into a map of string data which may …","A body containing string data","","Returns a reference to the associated HTTP body.","Returns a mutable reference to the associated HTTP body.","","","","","","","Creates a new builder-style object to manufacture a …","","","","","","","","","","Returns a reference to the associated extensions.","Returns a mutable reference to the associated extensions.","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Creates a new <code>Response</code> with the given head and body","Return a named value where available. If there is more …","Return all values associated with name where available","Returns a reference to the associated header field map.","Returns a mutable reference to the associated header field …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the response, returning just the body.","Consumes the response returning the head and body parts.","Return a translation of <code>self</code> into a <code>Response&lt;Body&gt;</code>","","Return true if the underlying map is empty","Return an iterator over keys and values","A macro for starting new handler’s poll for API Gateway …","Consumes the response returning a new response with body …","","","Creates a new blank <code>Response</code> with the body","Return pre-extracted path parameters, parameter provided …","Return the Result of a payload parsed into a serde …","Return pre-parsed http query string parameters, parameters …","ALB andAPI Gateway request types.","Return request context data assocaited with the ALB or API …","Run the handler.","","Return stage variables associated with the API gateway …","Creates a new <code>lambda_runtime::Runtime</code> and begins polling …","Returns the <code>StatusCode</code>.","Returns a mutable reference to the associated <code>StatusCode</code>.","","","","","","","","","","","Returns a reference to the associated version.","Returns a mutable reference to the associated version.","","","ALB request context","Api Gateway request context","Elastic load balancer context information","Identity assoicated with API Gateway request","Event request context as an enumeration of request contexts","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return true if this request context represents an ALB …","","AWS ARN identifier for the ELB Target Group this lambda …","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,0,1,0,0,0,0,0,0,1,1,2,2,1,3,2,1,3,2,2,3,3,1,3,2,1,3,1,3,2,2,1,3,2,1,1,1,1,1,1,1,1,3,3,2,2,3,3,2,2,0,1,3,2,2,2,4,2,3,3,0,2,1,3,2,5,5,5,0,5,6,1,5,0,2,2,3,1,3,2,1,3,2,1,3,2,2,2,7,8,9,9,0,0,0,10,10,10,9,11,10,9,11,10,10,9,11,10,9,11,10,10,10,10,10,9,11,10,9,11,10,9,11,10,9,11,10,9,11,10,9,10,11,9,11,10,9,11,10,9,11,10,9,11,10,10,10,10,12,12,12,13,12,12,12,12,12,12],"f":[null,null,null,null,null,null,null,null,null,null,[[["body",4]]],[[["response",3]],["",0]],[[["response",3]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["builder",3]],[[["strmap",3]],["strmap",3]],[[["",0],["",0]]],[[],["body",4]],[[],["strmap",3]],[[],["response",3]],[[["body",4]]],[[],["result",4,[["strmap",3]]]],[[["body",4],["body",4]],["bool",0]],[[["strmap",3],["strmap",3]],["bool",0]],[[["response",3]],["extensions",3]],[[["response",3]],["extensions",3]],[[["body",4],["formatter",3]],["result",6]],[[["strmap",3],["formatter",3]],["result",6]],[[["response",3],["formatter",3]],["result",4,[["error",3]]]],[[["str",0]],["body",4]],[[],["body",4]],[[]],[[["cow",4,[["str",0]]]],["body",4]],[[["cow",4]],["body",4]],[[],["body",4]],[[["vec",3,[["u8",0]]]],["body",4]],[[["string",3]],["body",4]],[[]],[[["hashmap",3,[["string",3],["vec",3,[["string",3]]]]]],["strmap",3]],[[]],[[["parts",3]],["response",3]],[[["strmap",3],["str",0]],["option",4,[["str",0]]]],[[["strmap",3],["str",0]],["option",4,[["vec",3,[["str",0]]]]]],[[["response",3]],["headermap",3]],[[["response",3]],["headermap",3]],null,[[]],[[]],[[]],[[["response",3]]],[[["response",3]]],[[],["response",3,[["body",4]]]],[[["response",3]],["response",3,[["body",4]]]],[[["strmap",3]],["bool",0]],[[["strmap",3]],["strmapiter",3]],null,[[["response",3]],["response",3]],[[["body",4],["body",4]],["bool",0]],[[["strmap",3],["strmap",3]],["bool",0]],[[],["response",3]],[[["",0]],["strmap",3]],[[["",0]],["result",4,[["option",4],["payloaderror",4]]]],[[["",0]],["strmap",3]],null,[[["",0]],["requestcontext",4]],[[["",0],["request",6],["context",3]],["result",4,[["handlererror",3]]]],[[["body",4]],["result",4]],[[["",0]],["strmap",3]],[[["handler",8],["option",4,[["tokioruntime",3]]]]],[[["response",3]],["statuscode",3]],[[["response",3]],["statuscode",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["response",3]],["version",3]],[[["response",3]],["version",3]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["requestcontext",4]],["requestcontext",4]],[[["elb",3]],["elb",3]],[[["identity",3]],["identity",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,null,null,[[],["requestcontext",4]],[[],["elb",3]],[[],["identity",3]],[[],["result",4,[["requestcontext",4]]]],[[],["result",4,[["elb",3]]]],[[],["result",4,[["identity",3]]]],[[["requestcontext",4],["formatter",3]],["result",6]],[[["elb",3],["formatter",3]],["result",6]],[[["identity",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["requestcontext",4]],["bool",0]],null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[4,"Body"],[3,"Response"],[3,"StrMap"],[8,"IntoResponse"],[8,"RequestExt"],[8,"Handler"],[13,"Text"],[13,"Binary"],[4,"RequestContext"],[3,"Identity"],[3,"Elb"],[13,"ApiGateway"],[13,"Alb"]]},\
"lambda_runtime":{"doc":"Lambda runtime makes it easy to run Rust code inside AWS …","t":[3,8,12,11,11,12,11,11,12,11,0,11,12,12,11,12,11,12,14,12,12,12,10,5,11,11,11,11,12,3,8,24,8,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11],"n":["Context","Handler","aws_request_id","borrow","borrow_mut","client_context","clone","clone_into","deadline","default","error","from","function_name","function_version","get_time_remaining_millis","identity","into","invoked_function_arn","lambda","log_group_name","log_stream_name","memory_limit_in_mb","run","start","to_owned","try_from","try_into","type_id","xray_trace_id","HandlerError","LambdaErrorExt","LambdaErrorExt","LambdaResultExt","as_fail","borrow","borrow_mut","error_type","error_type","failure_compat","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","handler_error","into","new","to_string","try_from","try_into","type_id"],"q":["lambda_runtime","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lambda_runtime::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The Lambda function execution context. The values in this …","Functions acting as a handler must conform to this type.","The AWS request ID for the current invocation event. This …","","","The client context sent by the AWS Mobile SDK with the …","","","The deadline for the current handler execution in …","","The error module exposes the HandlerError type.","Returns the argument unchanged.","The name of the Lambda function as registered with the …","The version of the function being invoked. This value is …","Returns the remaining time in the execution in …","The information of the Cognito identity that sent the …","Calls <code>U::from(self)</code>.","The fully qualified ARN (Amazon Resource Name) for the …","Initializes the Lambda runtime with the given handler. …","The name of the CloudWatch log group for the current …","The name of the CloudWatch log stream for the current …","The amount of memory allocated to the Lambda function in …","Method to execute the handler function","Creates a new runtime and begins polling for events using …","","","","","The X-Ray trace ID for the current invocation. This value …","The <code>HandlerError</code> struct can be use to abstract any <code>Err</code> of …","The <code>LambdaErrorExt</code> trait defines the <code>error_type()</code> method …","","<code>Result</code> type extension for AWS that makes it easy to …","","","","The value for this field should be an alphanumeric unique …","","Takes the incoming result and converts it into an <code>Error</code> …","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Takes the incoming <code>Result</code> and maps it to a Result that …","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,2,0,1,1,1,1,1,0,0,0,0,3,3,3,4,3,5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,5,3,3,3,3,3,3],"f":[null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],null,[[["context",3]],["context",3]],[[["",0],["",0]]],null,[[],["context",3]],null,[[]],null,null,[[["context",3]],["i64",0]],null,[[]],null,null,null,null,null,[[["",0],["context",3]],["result",4]],[[["handler",8],["option",4,[["tokioruntime",3]]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["fail",8]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["str",0]],[[["handlererror",3]],["str",0]],[[],["result",4,[["compat",3,[["error",3]]]]]],[[["handlererror",3],["formatter",3]],["result",4,[["error",3]]]],[[["handlererror",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[["decodeutf16error",3]],["handlererror",3]],[[["borrowerror",3]],["handlererror",3]],[[["fromutf16error",3]],["handlererror",3]],[[["frombyteswithnulerror",3]],["handlererror",3]],[[["error",3]],["handlererror",3]],[[["recvtimeouterror",4]],["handlererror",3]],[[["parsefloaterror",3]],["handlererror",3]],[[["joinpathserror",3]],["handlererror",3]],[[["nulerror",3]],["handlererror",3]],[[["infallible",4]],["handlererror",3]],[[["recverror",3]],["handlererror",3]],[[["systemtimeerror",3]],["handlererror",3]],[[["parsecharerror",3]],["handlererror",3]],[[["borrowmuterror",3]],["handlererror",3]],[[["fromutf8error",3]],["handlererror",3]],[[["utf8error",3]],["handlererror",3]],[[["parseboolerror",3]],["handlererror",3]],[[["stripprefixerror",3]],["handlererror",3]],[[["tryrecverror",4]],["handlererror",3]],[[["addrparseerror",3]],["handlererror",3]],[[["intostringerror",3]],["handlererror",3]],[[["str",0]],["handlererror",3]],[[["error",3]],["handlererror",3]],[[["varerror",4]],["handlererror",3]],[[["parseinterror",3]],["handlererror",3]],[[["layouterror",3]],["handlererror",3]],[[],["result",4,[["handlererror",3]]]],[[]],[[],["handlererror",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"Context"],[8,"Handler"],[3,"HandlerError"],[8,"LambdaErrorExt"],[8,"LambdaResultExt"]]},\
"lambda_runtime_client":{"doc":"Rust client SDK for the AWS Lambda Runtime APIs. This …","t":[3,3,13,3,13,13,3,13,4,13,3,13,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,12,12,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,4,3,17,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["ClientApplication","ClientContext","ClientContext","CognitoIdentity","CognitoIdentity","Deadline","EventContext","FunctionArn","LambdaHeaders","RequestId","RuntimeClient","TraceId","app_package_name","app_title","app_version_code","app_version_name","aws_request_id","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","client","client_context","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","custom","deadline","deserialize","deserialize","deserialize","environment","error","event_error","event_response","fail_init","fmt","from","from","from","from","from","from","get_endpoint","identity","identity_id","identity_pool_id","installation_id","into","into","into","into","into","into","invoked_function_arn","new","next_event","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","xray_trace_id","ApiError","ApiErrorKind","ErrorResponse","RUNTIME_ERROR_TYPE","Recoverable","Unrecoverable","as_fail","as_fail","backtrace","backtrace","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cause","cause","clone","clone_into","eq","error_message","error_type","error_type","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","is_recoverable","name","ne","serialize","stack_trace","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0"],"q":["lambda_runtime_client","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lambda_runtime_client::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","lambda_runtime_client::error::ApiErrorKind",""],"d":["AWS Moble SDK client properties","Client context sent by the AWS Mobile SDK.","The client context header. This field is populated when …","Cognito identity information sent with the event","The Cognito Identity context for the invocation. This …","The deadline for the function execution in milliseconds","The Lambda function execution context. The values in this …","The ARN of the Lambda function being invoked","Enum of the headers returned by Lambda’s <code>/next</code> API call.","The AWS request ID","Used by the Runtime to communicate with the internal …","The X-Ray trace ID generated for this invocation","The package name for the mobile application invoking the …","The app title for the mobile app as registered with AWS’ …","The app version code.","The version name of the application as registered with AWS…","The AWS request ID generated by the Lambda service.","","","","","","","","","","","","","Information about the mobile application invoking the …","The client context object sent by the AWS mobile SDK. This …","","","","","","","","","Custom properties attached to the mobile event context.","The execution deadline for the current invocation in …","","","","Environment settings from the mobile client.","This module defines the <code>RuntimeApiError</code> trait that …","Calls Lambda’s Runtime APIs to send an error generated …","Calls the Lambda Runtime APIs to submit a response to an …","Calls the Runtime APIs to report a failure during the init …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the endpoint configured for this HTTP Runtime …","The Cognito identity that invoked the function. This field …","The unique identity id for the Cognito credentials …","The identity pool id the caller is “registered” with.","The mobile app installation id","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The ARN of the Lambda function being invoked.","Creates a new instance of the Runtime APIclient SDK. The …","Polls for new events to the Runtime APIs.","","","","","","","","","","","","","","","","","","","","","","","","The X-Ray trace ID for the current invocation.","Represents an error generated by the Lambda Runtime API …","Failure context for the <code>ApiError</code> type. The kind is used to …","This object is used to generate requests to the Lambda …","Error type for the error responses to the Runtime APIs. In …","Runtime implementations that receive recoverable errors …","Unrecoverable error should cause the runtime …","","","","","","","","","","","","","","","","The error message generated by the application.","","The error type for Lambda. Normally, this value is …","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the API error is recoverable and should be …","","","","The stack trace for the exception as vector of strings. In …","","","","","","","","","","","","","",""],"i":[0,0,1,0,1,1,0,1,0,1,0,1,2,2,2,2,3,1,4,2,5,6,3,1,4,2,5,6,3,5,3,2,5,6,3,2,5,6,3,5,3,2,5,6,5,0,4,4,4,1,1,4,2,5,6,3,4,3,6,6,2,1,4,2,5,6,3,3,4,4,2,5,6,3,1,1,4,2,5,6,3,1,4,2,5,6,3,1,4,2,5,6,3,3,0,0,0,0,7,7,8,7,8,7,9,8,7,9,8,7,8,7,7,7,7,9,8,9,8,8,7,7,9,9,8,8,8,7,9,8,7,8,7,7,9,9,7,8,7,9,8,7,9,8,7,9,8,7,10,11],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["clientapplication",3]],["clientapplication",3]],[[["clientcontext",3]],["clientcontext",3]],[[["cognitoidentity",3]],["cognitoidentity",3]],[[["eventcontext",3]],["eventcontext",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[],["result",4,[["clientapplication",3]]]],[[],["result",4,[["clientcontext",3]]]],[[],["result",4,[["cognitoidentity",3]]]],null,null,[[["runtimeclient",3],["str",0],["errorresponse",3]],["result",4,[["apierror",3]]]],[[["runtimeclient",3],["str",0]],["result",4,[["apierror",3]]]],[[["runtimeclient",3],["errorresponse",3]]],[[["lambdaheaders",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["runtimeclient",3]],["str",0]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,[[["str",0],["option",4,[["string",3]]],["option",4,[["runtime",3]]]],["result",4,[["runtimeclient",3],["apierror",3]]]],[[["runtimeclient",3]],["result",4,[["apierror",3]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["",0]],["fail",8]],[[["",0]],["fail",8]],[[["apierror",3]],["option",4,[["backtrace",3]]]],[[["apierrorkind",4]],["option",4,[["backtrace",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["apierror",3]],["option",4,[["fail",8]]]],[[["apierrorkind",4]],["option",4,[["fail",8]]]],[[["apierrorkind",4]],["apierrorkind",4]],[[["",0],["",0]]],[[["apierrorkind",4],["apierrorkind",4]],["bool",0]],null,[[["apierror",3]],["str",0]],null,[[["apierror",3],["formatter",3]],["result",6]],[[["apierror",3],["formatter",3]],["result",6]],[[["apierrorkind",4],["formatter",3]],["result",6]],[[["apierrorkind",4],["formatter",3]],["result",6]],[[]],[[["",26,[["asfail",8],["lambdaerrorext",8],["display",8]]]],["errorresponse",3]],[[["context",3,[["apierrorkind",4]]]],["apierror",3]],[[["apierrorkind",4]],["apierror",3]],[[]],[[]],[[]],[[]],[[]],[[["apierror",3]],["bool",0]],[[["apierrorkind",4]],["option",4,[["str",0]]]],[[["apierrorkind",4],["apierrorkind",4]],["bool",0]],[[["errorresponse",3]],["result",4]],null,[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null],"p":[[4,"LambdaHeaders"],[3,"ClientApplication"],[3,"EventContext"],[3,"RuntimeClient"],[3,"ClientContext"],[3,"CognitoIdentity"],[4,"ApiErrorKind"],[3,"ApiError"],[3,"ErrorResponse"],[13,"Recoverable"],[13,"Unrecoverable"]]},\
"lambda_runtime_core":{"doc":"The Lambda runtime core crate implements Lambda’s custom …","t":[8,3,3,8,3,8,24,8,11,12,11,11,11,11,11,11,12,11,11,12,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,10,11,11,10,12,11,11,11,12,14,14,12,12,12,11,10,5,5,5,11,11,11,11,11,11,11,11,11,11,11,12],"n":["ConfigProvider","Context","EnvConfigProvider","Handler","HandlerError","LambdaErrorExt","LambdaErrorExt","LambdaResultExt","as_fail","aws_request_id","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","client_context","clone","clone_into","deadline","default","default","error_type","error_type","failure_compat","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","function_name","function_version","get_function_settings","get_function_settings","get_runtime_api_endpoint","get_runtime_api_endpoint","get_time_remaining_millis","handler_error","identity","into","into","into","invoked_function_arn","lambda","lambda","log_group_name","log_stream_name","memory_limit_in_mb","new","run","runtime_release","start","start_with_config","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","xray_trace_id"],"q":["lambda_runtime_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Trait used by the <code>RustRuntime</code> module to retrieve …","The Lambda function execution context. The values in this …","Implementation of the <code>ConfigProvider</code> trait that reads the …","Functions acting as a handler must conform to this type.","The <code>HandlerError</code> struct can be use to abstract any <code>Err</code> of …","The <code>LambdaErrorExt</code> trait defines the <code>error_type()</code> method …","","<code>Result</code> type extension for AWS that makes it easy to …","","The AWS request ID for the current invocation event. This …","","","","","","","The client context sent by the AWS Mobile SDK with the …","","","The deadline for the current handler execution in …","","","The value for this field should be an alphanumeric unique …","","Takes the incoming result and converts it into an <code>Error</code> …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","The name of the Lambda function as registered with the …","The version of the function being invoked. This value is …","Loads the function settings such as name, arn, memory …","Loads the function settings from the Lambda environment …","Returns the endpoint (hostname:port) for the Runtime API …","Loads the endpoint from Lambda’s default environment …","Returns the remaining time in the execution in …","Takes the incoming <code>Result</code> and maps it to a Result that …","The information of the Cognito identity that sent the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The fully qualified ARN (Amazon Resource Name) for the …","Starts an event listener which will parse incoming events …","Starts an event listener which will parse incoming events …","The name of the CloudWatch log group for the current …","The name of the CloudWatch log stream for the current …","The amount of memory allocated to the Lambda function in …","","Run the handler.","returns metdata information about the Lambda runtime","Creates a new runtime and begins polling for events using …","Internal implementation of the start method that receives …","","","","","","","","","","","","The X-Ray trace ID for the current invocation. This value …"],"i":[0,0,0,0,0,0,0,0,1,2,3,2,1,3,2,1,2,2,2,2,3,2,4,1,5,1,1,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,6,3,6,3,2,5,2,3,2,1,2,0,0,2,2,2,1,7,0,0,0,2,1,3,2,1,3,2,1,3,2,1,2],"f":[null,null,null,null,null,null,null,null,[[["",0]],["fail",8]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["context",3]],["context",3]],[[["",0],["",0]]],null,[[],["envconfigprovider",3]],[[],["context",3]],[[["",0]],["str",0]],[[["handlererror",3]],["str",0]],[[],["result",4,[["compat",3,[["error",3]]]]]],[[["handlererror",3],["formatter",3]],["result",4,[["error",3]]]],[[["handlererror",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[["borrowmuterror",3]],["handlererror",3]],[[["error",3]],["handlererror",3]],[[["borrowerror",3]],["handlererror",3]],[[["parseboolerror",3]],["handlererror",3]],[[["layouterror",3]],["handlererror",3]],[[["parseinterror",3]],["handlererror",3]],[[["varerror",4]],["handlererror",3]],[[["str",0]],["handlererror",3]],[[["intostringerror",3]],["handlererror",3]],[[["addrparseerror",3]],["handlererror",3]],[[["tryrecverror",4]],["handlererror",3]],[[["stripprefixerror",3]],["handlererror",3]],[[["decodeutf16error",3]],["handlererror",3]],[[["utf8error",3]],["handlererror",3]],[[["fromutf8error",3]],["handlererror",3]],[[["parsecharerror",3]],["handlererror",3]],[[["systemtimeerror",3]],["handlererror",3]],[[["recverror",3]],["handlererror",3]],[[["infallible",4]],["handlererror",3]],[[["nulerror",3]],["handlererror",3]],[[]],[[["joinpathserror",3]],["handlererror",3]],[[["parsefloaterror",3]],["handlererror",3]],[[["recvtimeouterror",4]],["handlererror",3]],[[["error",3]],["handlererror",3]],[[["frombyteswithnulerror",3]],["handlererror",3]],[[["fromutf16error",3]],["handlererror",3]],null,null,[[["",0]],["result",4,[["functionsettings",3],["runtimeerror",3]]]],[[["envconfigprovider",3]],["result",4,[["functionsettings",3],["runtimeerror",3]]]],[[["",0]],["result",4,[["string",3],["runtimeerror",3]]]],[[["envconfigprovider",3]],["result",4,[["string",3],["runtimeerror",3]]]],[[["context",3]],["i64",0]],[[],["result",4,[["handlererror",3]]]],null,[[]],[[]],[[]],null,null,null,null,null,null,[[],["handlererror",3]],[[["",0],["vec",3,[["u8",0]]],["context",3]],["result",4,[["vec",3,[["u8",0]]]]]],[[],["str",0]],[[["handler",8],["option",4,[["tokioruntime",3]]]]],[[["handler",8],["",0],["option",4,[["tokioruntime",3]]]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null],"p":[[3,"HandlerError"],[3,"Context"],[3,"EnvConfigProvider"],[8,"LambdaErrorExt"],[8,"LambdaResultExt"],[8,"ConfigProvider"],[8,"Handler"]]},\
"lambda_runtime_errors":{"doc":"The Lambda runtime errors crate defines the <code>LambdaErrorExt</code> …","t":[3,8,24,8,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11],"n":["HandlerError","LambdaErrorExt","LambdaErrorExt","LambdaResultExt","as_fail","borrow","borrow_mut","error_type","error_type","failure_compat","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","handler_error","into","new","to_string","try_from","try_into","type_id"],"q":["lambda_runtime_errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The <code>HandlerError</code> struct can be use to abstract any <code>Err</code> of …","The <code>LambdaErrorExt</code> trait defines the <code>error_type()</code> method …","","<code>Result</code> type extension for AWS that makes it easy to …","","","","The value for this field should be an alphanumeric unique …","","Takes the incoming result and converts it into an <code>Error</code> …","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","Takes the incoming <code>Result</code> and maps it to a Result that …","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,0,0,1,1,1,2,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1],"f":[null,null,null,null,[[["",0]],["fail",8]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["str",0]],[[["handlererror",3]],["str",0]],[[],["result",4,[["compat",3,[["error",3]]]]]],[[["handlererror",3],["formatter",3]],["result",6]],[[["handlererror",3],["formatter",3]],["result",6]],[[["borrowerror",3]],["handlererror",3]],[[["nulerror",6]],["handlererror",3]],[[]],[[["error",3]],["handlererror",3]],[[["error",3]],["handlererror",3]],[[["str",0]],["handlererror",3]],[[["varerror",4]],["handlererror",3]],[[["parseerror",6]],["handlererror",3]],[[["recvtimeouterror",4]],["handlererror",3]],[[["tryrecverror",4]],["handlererror",3]],[[["layouterr",6]],["handlererror",3]],[[["borrowmuterror",3]],["handlererror",3]],[[["decodeutf16error",3]],["handlererror",3]],[[["parsecharerror",3]],["handlererror",3]],[[["joinpathserror",3]],["handlererror",3]],[[["frombyteswithnulerror",6]],["handlererror",3]],[[["intostringerror",6]],["handlererror",3]],[[["systemtimeerror",3]],["handlererror",3]],[[["addrparseerror",3]],["handlererror",3]],[[["parsefloaterror",3]],["handlererror",3]],[[["parseinterror",3]],["handlererror",3]],[[["stripprefixerror",3]],["handlererror",3]],[[["parseboolerror",3]],["handlererror",3]],[[["utf8error",3]],["handlererror",3]],[[["fromutf16error",3]],["handlererror",3]],[[["fromutf8error",3]],["handlererror",3]],[[["recverror",3]],["handlererror",3]],[[],["result",4,[["handlererror",3]]]],[[]],[[["",26,[["fail",8],["lambdaerrorext",8],["send",8],["sync",8]]]],["handlererror",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"HandlerError"],[8,"LambdaErrorExt"],[8,"LambdaResultExt"]]},\
"lambda_runtime_errors_derive":{"doc":"","t":[24],"n":["LambdaErrorExt"],"q":["lambda_runtime_errors_derive"],"d":[""],"i":[0],"f":[null],"p":[]},\
"lazy_static":{"doc":"A macro for declaring lazily evaluated statics.","t":[8,5,14],"n":["LazyStatic","initialize","lazy_static"],"q":["lazy_static","",""],"d":["Support trait for enabling a few common operation on lazy …","Takes a shared reference to a lazy static and initializes …",""],"i":[0,0,0],"f":[null,[[["",0]]],null],"p":[]},\
"lazycell":{"doc":"This crate provides a <code>LazyCell</code> struct which acts as a …","t":[3,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AtomicLazyCell","LazyCell","NONE","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut_with","borrow_with","clone","clone","default","default","fill","fill","filled","filled","fmt","fmt","from","from","get","get","into","into","into_inner","into_inner","new","new","replace","replace","try_borrow_mut_with","try_borrow_with","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["lazycell","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A lazily filled and thread-safe <code>Cell</code>, with frozen contents.","A lazily filled <code>Cell</code>, with mutable contents.","An empty <code>AtomicLazyCell</code>.","Borrows the contents of this lazy cell for the duration of …","","Borrows the contents of this lazy cell for the duration of …","","Borrows the contents of this lazy cell mutably for the …","","","Borrows the contents of this <code>LazyCell</code> mutably for the …","Borrows the contents of this lazy cell for the duration of …","Create a clone of this <code>LazyCell</code>","Create a clone of this <code>AtomicLazyCell</code>","","","Put a value into this cell.","Put a value into this cell.","Test whether this cell has been previously filled.","Test whether this cell has been previously filled.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a copy of the contents of the lazy cell.","Returns a copy of the contents of the lazy cell.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this <code>LazyCell</code>, returning the underlying value.","Consumes this <code>LazyCell</code>, returning the underlying value.","Creates a new, empty, <code>LazyCell</code>.","Creates a new, empty, <code>AtomicLazyCell</code>.","Put a value into this cell.","Put a value into this cell.","Same as <code>borrow_mut_with</code>, but allows the initializing …","Same as <code>borrow_with</code>, but allows the initializing function …","","","","","",""],"i":[0,0,1,2,2,1,1,2,2,1,2,2,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,2,1,2,1,2,1],"f":[null,null,null,[[["lazycell",3]],["option",4]],[[["",0]],["",0]],[[["atomiclazycell",3]],["option",4]],[[["",0]],["",0]],[[["lazycell",3]],["option",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["lazycell",3],["fnonce",8]],["",0]],[[["lazycell",3],["fnonce",8]],["",0]],[[["lazycell",3,[["clone",8]]]],["lazycell",3,[["clone",8]]]],[[["atomiclazycell",3,[["clone",8]]]],["atomiclazycell",3,[["clone",8]]]],[[],["lazycell",3,[["default",8]]]],[[],["atomiclazycell",3,[["default",8]]]],[[["lazycell",3]],["result",4]],[[["atomiclazycell",3]],["result",4]],[[["lazycell",3]],["bool",0]],[[["atomiclazycell",3]],["bool",0]],[[["lazycell",3,[["debug",8]]],["formatter",3]],["result",6]],[[["atomiclazycell",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[["lazycell",3,[["copy",8]]]],["option",4,[["copy",8]]]],[[["atomiclazycell",3,[["copy",8]]]],["option",4,[["copy",8]]]],[[]],[[]],[[["lazycell",3]],["option",4]],[[["atomiclazycell",3]],["option",4]],[[],["lazycell",3]],[[],["atomiclazycell",3]],[[["lazycell",3]],["option",4]],[[["atomiclazycell",3]],["option",4]],[[["lazycell",3]],["result",4]],[[["lazycell",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"AtomicLazyCell"],[3,"LazyCell"]]},\
"libc":{"doc":"libc - Raw FFI bindings to platforms’ system libraries","tn":["ABDAY_1","ABDAY_2","ABDAY_3","ABDAY_4","ABDAY_5","ABDAY_6","ABDAY_7","ABMON_1","ABMON_10","ABMON_11","ABMON_12","ABMON_2","ABMON_3","ABMON_4","ABMON_5","ABMON_6","ABMON_7","ABMON_8","ABMON_9","ACCOUNTING","AF_APPLETALK","AF_CCITT","AF_CHAOS","AF_CNT","AF_COIP","AF_DATAKIT","AF_DECnet","AF_DLI","AF_E164","AF_ECMA","AF_HYLINK","AF_IMPLINK","AF_INET","AF_INET6","AF_IPX","AF_ISDN","AF_ISO","AF_LAT","AF_LINK","AF_LOCAL","AF_NATM","AF_NETBIOS","AF_NS","AF_OSI","AF_PPP","AF_PUP","AF_ROUTE","AF_SIP","AF_SNA","AF_SYSTEM","AF_SYS_CONTROL","AF_UNIX","AF_UNSPEC","AIO_ALLDONE","AIO_CANCELED","AIO_LISTIO_MAX","AIO_NOTCANCELED","AI_ADDRCONFIG","AI_ALL","AI_CANONNAME","AI_DEFAULT","AI_MASK","AI_NUMERICHOST","AI_NUMERICSERV","AI_PASSIVE","AI_UNUSABLE","AI_V4MAPPED","AI_V4MAPPED_CFG","ALTWERASE","ALT_DIGITS","AM_STR","ARPOP_REPLY","ARPOP_REQUEST","ATF_COM","ATF_PERM","ATF_PUBL","ATF_USETRAILERS","AT_EACCESS","AT_FDCWD","AT_REMOVEDIR","AT_SYMLINK_FOLLOW","AT_SYMLINK_NOFOLLOW","B0","B110","B115200","B1200","B134","B14400","B150","B1800","B19200","B200","B230400","B2400","B28800","B300","B38400","B4800","B50","B57600","B600","B7200","B75","B76800","B9600","BOOT_TIME","BPF_ALIGNMENT","BRKINT","BS0","BS1","BSDLY","BUFSIZ","CIGNORE","CLOCAL","CLOCK_MONOTONIC","CLOCK_PROCESS_CPUTIME_ID","CLOCK_REALTIME","CLOCK_THREAD_CPUTIME_ID","CMSG_DATA","CMSG_FIRSTHDR","CMSG_LEN","CMSG_NXTHDR","CMSG_SPACE","CODESET","CR0","CR1","CR2","CR3","CRDLY","CREAD","CRNCYSTR","CRTSCTS","CS5","CS6","CS7","CS8","CSIZE","CSTOPB","CTLFLAG_ANYBODY","CTLFLAG_KERN","CTLFLAG_LOCKED","CTLFLAG_MASKED","CTLFLAG_NOAUTO","CTLFLAG_NOLOCK","CTLFLAG_OID2","CTLFLAG_RD","CTLFLAG_RW","CTLFLAG_SECURE","CTLFLAG_WR","CTLTYPE","CTLTYPE_INT","CTLTYPE_NODE","CTLTYPE_OPAQUE","CTLTYPE_QUAD","CTLTYPE_STRING","CTLTYPE_STRUCT","CTL_DEBUG","CTL_DEBUG_MAXID","CTL_DEBUG_NAME","CTL_DEBUG_VALUE","CTL_HW","CTL_KERN","CTL_MACHDEP","CTL_MAXID","CTL_NET","CTL_UNSPEC","CTL_USER","CTL_VFS","CTL_VM","DAY_1","DAY_2","DAY_3","DAY_4","DAY_5","DAY_6","DAY_7","DEAD_PROCESS","DIR","DLT_ARCNET","DLT_ATM_RFC1483","DLT_AX25","DLT_CHAOS","DLT_EN10MB","DLT_EN3MB","DLT_FDDI","DLT_IEEE802","DLT_LOOP","DLT_NULL","DLT_PPP","DLT_PRONET","DLT_RAW","DLT_SLIP","DT_BLK","DT_CHR","DT_DIR","DT_FIFO","DT_LNK","DT_REG","DT_SOCK","DT_UNKNOWN","D_FMT","D_MD_ORDER","D_T_FMT","Dl_info","E2BIG","EACCES","EADDRINUSE","EADDRNOTAVAIL","EAFNOSUPPORT","EAGAIN","EAI_AGAIN","EAI_BADFLAGS","EAI_FAIL","EAI_FAMILY","EAI_MEMORY","EAI_NODATA","EAI_NONAME","EAI_OVERFLOW","EAI_SERVICE","EAI_SOCKTYPE","EAI_SYSTEM","EALREADY","EAUTH","EBADARCH","EBADEXEC","EBADF","EBADMACHO","EBADMSG","EBADRPC","EBUSY","ECANCELED","ECHILD","ECHO","ECHOCTL","ECHOE","ECHOK","ECHOKE","ECHONL","ECHOPRT","ECONNABORTED","ECONNREFUSED","ECONNRESET","EDEADLK","EDESTADDRREQ","EDEVERR","EDOM","EDQUOT","EEXIST","EFAULT","EFBIG","EFTYPE","EHOSTDOWN","EHOSTUNREACH","EIDRM","EILSEQ","EINPROGRESS","EINTR","EINVAL","EIO","EISCONN","EISDIR","ELAST","ELOOP","EMFILE","EMLINK","EMPTY","EMSGSIZE","EMULTIHOP","ENAMETOOLONG","ENEEDAUTH","ENETDOWN","ENETRESET","ENETUNREACH","ENFILE","ENOATTR","ENOBUFS","ENODATA","ENODEV","ENOENT","ENOEXEC","ENOLCK","ENOLINK","ENOMEM","ENOMSG","ENOPOLICY","ENOPROTOOPT","ENOSPC","ENOSR","ENOSTR","ENOSYS","ENOTBLK","ENOTCONN","ENOTDIR","ENOTEMPTY","ENOTRECOVERABLE","ENOTSOCK","ENOTSUP","ENOTTY","ENXIO","EOF","EOPNOTSUPP","EOVERFLOW","EOWNERDEAD","EPERM","EPFNOSUPPORT","EPIPE","EPROCLIM","EPROCUNAVAIL","EPROGMISMATCH","EPROGUNAVAIL","EPROTO","EPROTONOSUPPORT","EPROTOTYPE","EPWROFF","EQFULL","ERA","ERANGE","ERA_D_FMT","ERA_D_T_FMT","ERA_T_FMT","EREMOTE","EROFS","ERPCMISMATCH","ESHLIBVERS","ESHUTDOWN","ESOCKTNOSUPPORT","ESPIPE","ESRCH","ESTALE","ETIME","ETIMEDOUT","ETOOMANYREFS","ETXTBSY","EUSERS","EVFILT_AIO","EVFILT_FS","EVFILT_MACHPORT","EVFILT_PROC","EVFILT_READ","EVFILT_SIGNAL","EVFILT_TIMER","EVFILT_USER","EVFILT_VM","EVFILT_VNODE","EVFILT_WRITE","EV_ADD","EV_CLEAR","EV_DELETE","EV_DISABLE","EV_DISPATCH","EV_ENABLE","EV_EOF","EV_ERROR","EV_FLAG0","EV_FLAG1","EV_ONESHOT","EV_OOBAND","EV_POLL","EV_RECEIPT","EV_SYSFLAGS","EWOULDBLOCK","EXDEV","EXIT_FAILURE","EXIT_SUCCESS","EXTA","EXTB","EXTPROC","FD_CLOEXEC","FD_CLR","FD_ISSET","FD_SET","FD_SETSIZE","FD_ZERO","FF0","FF1","FFDLY","FILE","FILENAME_MAX","FIOASYNC","FIOCLEX","FIODTYPE","FIOGETOWN","FIONBIO","FIONCLEX","FIONREAD","FIOSETOWN","FLUSHO","FOPEN_MAX","F_ALLOCATEALL","F_ALLOCATECONTIG","F_DUPFD","F_DUPFD_CLOEXEC","F_FREEZE_FS","F_FULLFSYNC","F_GETFD","F_GETFL","F_GETLK","F_GETOWN","F_GETPATH","F_GLOBAL_NOCACHE","F_LOCK","F_NOCACHE","F_NODIRECT","F_OK","F_PEOFPOSMODE","F_PREALLOCATE","F_RDADVISE","F_RDAHEAD","F_RDLCK","F_SETFD","F_SETFL","F_SETLK","F_SETLKW","F_SETOWN","F_TEST","F_THAW_FS","F_TLOCK","F_ULOCK","F_UNLCK","F_VOLPOSMODE","F_WRLCK","GETALL","GETNCNT","GETPID","GETVAL","GETZCNT","GLOB_ABORTED","GLOB_APPEND","GLOB_DOOFFS","GLOB_ERR","GLOB_MARK","GLOB_NOCHECK","GLOB_NOESCAPE","GLOB_NOMATCH","GLOB_NOSORT","GLOB_NOSPACE","GRPQUOTA","HUPCL","HW_AVAILCPU","HW_BUS_FREQ","HW_BYTEORDER","HW_CACHELINE","HW_CPU_FREQ","HW_DISKNAMES","HW_DISKSTATS","HW_EPOCH","HW_FLOATINGPT","HW_L1DCACHESIZE","HW_L1ICACHESIZE","HW_L2CACHESIZE","HW_L2SETTINGS","HW_L3CACHESIZE","HW_L3SETTINGS","HW_MACHINE","HW_MACHINE_ARCH","HW_MAXID","HW_MEMSIZE","HW_MODEL","HW_NCPU","HW_PAGESIZE","HW_PHYSMEM","HW_TB_FREQ","HW_USERMEM","HW_VECTORUNIT","ICANON","ICRNL","IEXTEN","IFF_ALLMULTI","IFF_ALTPHYS","IFF_BROADCAST","IFF_DEBUG","IFF_LINK0","IFF_LINK1","IFF_LINK2","IFF_LOOPBACK","IFF_MULTICAST","IFF_NOARP","IFF_NOTRAILERS","IFF_OACTIVE","IFF_POINTOPOINT","IFF_PROMISC","IFF_RUNNING","IFF_SIMPLEX","IFF_UP","IFNAMSIZ","IF_NAMESIZE","IGNBRK","IGNCR","IGNPAR","IMAXBEL","INADDR_ANY","INADDR_BROADCAST","INADDR_LOOPBACK","INADDR_NONE","INIT_PROCESS","INLCR","INPCK","INT_MAX","INT_MIN","IPC_CREAT","IPC_EXCL","IPC_M","IPC_NOWAIT","IPC_PRIVATE","IPC_R","IPC_RMID","IPC_SET","IPC_STAT","IPC_W","IPPROTO_3PC","IPPROTO_ADFS","IPPROTO_AH","IPPROTO_AHIP","IPPROTO_APES","IPPROTO_ARGUS","IPPROTO_AX25","IPPROTO_BHA","IPPROTO_BLT","IPPROTO_BRSATMON","IPPROTO_CFTP","IPPROTO_CHAOS","IPPROTO_CMTP","IPPROTO_CPHB","IPPROTO_CPNX","IPPROTO_DDP","IPPROTO_DGP","IPPROTO_DIVERT","IPPROTO_DONE","IPPROTO_DSTOPTS","IPPROTO_EGP","IPPROTO_EMCON","IPPROTO_ENCAP","IPPROTO_EON","IPPROTO_ESP","IPPROTO_ETHERIP","IPPROTO_FRAGMENT","IPPROTO_GGP","IPPROTO_GMTP","IPPROTO_GRE","IPPROTO_HELLO","IPPROTO_HMP","IPPROTO_HOPOPTS","IPPROTO_ICMP","IPPROTO_ICMPV6","IPPROTO_IDP","IPPROTO_IDPR","IPPROTO_IDRP","IPPROTO_IGMP","IPPROTO_IGP","IPPROTO_IGRP","IPPROTO_IL","IPPROTO_INLSP","IPPROTO_INP","IPPROTO_IP","IPPROTO_IPCOMP","IPPROTO_IPCV","IPPROTO_IPEIP","IPPROTO_IPIP","IPPROTO_IPPC","IPPROTO_IPV6","IPPROTO_IRTP","IPPROTO_KRYPTOLAN","IPPROTO_LARP","IPPROTO_LEAF1","IPPROTO_LEAF2","IPPROTO_MAX","IPPROTO_MEAS","IPPROTO_MHRP","IPPROTO_MICP","IPPROTO_MTP","IPPROTO_MUX","IPPROTO_ND","IPPROTO_NHRP","IPPROTO_NONE","IPPROTO_NSP","IPPROTO_NVPII","IPPROTO_OSPFIGP","IPPROTO_PGM","IPPROTO_PIGP","IPPROTO_PIM","IPPROTO_PRM","IPPROTO_PUP","IPPROTO_PVP","IPPROTO_RAW","IPPROTO_RCCMON","IPPROTO_RDP","IPPROTO_ROUTING","IPPROTO_RSVP","IPPROTO_RVD","IPPROTO_SATEXPAK","IPPROTO_SATMON","IPPROTO_SCCSP","IPPROTO_SCTP","IPPROTO_SDRP","IPPROTO_SEP","IPPROTO_SRPC","IPPROTO_ST","IPPROTO_SVMTP","IPPROTO_SWIPE","IPPROTO_TCF","IPPROTO_TCP","IPPROTO_TP","IPPROTO_TPXX","IPPROTO_TRUNK1","IPPROTO_TRUNK2","IPPROTO_TTP","IPPROTO_UDP","IPPROTO_VINES","IPPROTO_VISA","IPPROTO_VMTP","IPPROTO_WBEXPAK","IPPROTO_WBMON","IPPROTO_WSN","IPPROTO_XNET","IPPROTO_XTP","IPTOS_ECN_CE","IPTOS_ECN_ECT0","IPTOS_ECN_ECT1","IPTOS_ECN_MASK","IPTOS_ECN_NOTECT","IPV6_JOIN_GROUP","IPV6_LEAVE_GROUP","IPV6_MULTICAST_HOPS","IPV6_MULTICAST_IF","IPV6_MULTICAST_LOOP","IPV6_PKTINFO","IPV6_RECVPKTINFO","IPV6_RECVTCLASS","IPV6_TCLASS","IPV6_UNICAST_HOPS","IPV6_V6ONLY","IP_ADD_MEMBERSHIP","IP_DROP_MEMBERSHIP","IP_HDRINCL","IP_MULTICAST_IF","IP_MULTICAST_LOOP","IP_MULTICAST_TTL","IP_PKTINFO","IP_RECVDSTADDR","IP_RECVIF","IP_RECVTOS","IP_TOS","IP_TTL","ISIG","ISTRIP","IUTF8","IXANY","IXOFF","IXON","KERN_AFFINITY","KERN_AIOMAX","KERN_AIOPROCMAX","KERN_AIOTHREADS","KERN_ARGMAX","KERN_BOOTFILE","KERN_BOOTTIME","KERN_CHECKOPENEVT","KERN_CLASSIC","KERN_CLASSICHANDLER","KERN_CLOCKRATE","KERN_COREDUMP","KERN_COREFILE","KERN_DOMAINNAME","KERN_DUMMY","KERN_DUMPDEV","KERN_EXEC","KERN_FILE","KERN_HOSTID","KERN_HOSTNAME","KERN_IPC","KERN_JOB_CONTROL","KERN_KDBUFWAIT","KERN_KDCPUMAP","KERN_KDDFLAGS","KERN_KDDISABLE_BG_TRACE","KERN_KDEBUG","KERN_KDEFLAGS","KERN_KDENABLE","KERN_KDENABLE_BG_TRACE","KERN_KDGETBUF","KERN_KDGETENTROPY","KERN_KDGETREG","KERN_KDPIDEX","KERN_KDPIDTR","KERN_KDREADCURTHRMAP","KERN_KDREADTR","KERN_KDREMOVE","KERN_KDSETBUF","KERN_KDSETREG","KERN_KDSETRTCDEC","KERN_KDSETUP","KERN_KDSET_TYPEFILTER","KERN_KDTHRMAP","KERN_KDWRITEMAP","KERN_KDWRITETR","KERN_LOGSIGEXIT","KERN_LOW_PRI_DELAY","KERN_LOW_PRI_WINDOW","KERN_MAXFILES","KERN_MAXFILESPERPROC","KERN_MAXID","KERN_MAXPARTITIONS","KERN_MAXPROC","KERN_MAXPROCPERUID","KERN_MAXVNODES","KERN_NETBOOT","KERN_NGROUPS","KERN_NISDOMAINNAME","KERN_NTP_PLL","KERN_NX_PROTECTION","KERN_OPENEVT_PROC","KERN_OSRELDATE","KERN_OSRELEASE","KERN_OSREV","KERN_OSTYPE","KERN_OSVERSION","KERN_POSIX","KERN_POSIX1","KERN_PROC","KERN_PROCARGS","KERN_PROCARGS2","KERN_PROCDELAYTERM","KERN_PROCNAME","KERN_PROC_ALL","KERN_PROC_LCID","KERN_PROC_PGRP","KERN_PROC_PID","KERN_PROC_RUID","KERN_PROC_SESSION","KERN_PROC_TTY","KERN_PROC_UID","KERN_PROF","KERN_PS_STRINGS","KERN_RAGEVNODE","KERN_RAGE_PROC","KERN_RAGE_THREAD","KERN_SAFEBOOT","KERN_SAVED_IDS","KERN_SECURELVL","KERN_SHREG_PRIVATIZABLE","KERN_SPECULATIVE_READS","KERN_SUGID_COREDUMP","KERN_SYMFILE","KERN_SYSV","KERN_TFP","KERN_TFP_POLICY","KERN_TFP_POLICY_DEFAULT","KERN_TFP_POLICY_DENY","KERN_THALTSTACK","KERN_THREADNAME","KERN_TRANSLATE","KERN_TTY","KERN_UNOPENEVT_PROC","KERN_UNRAGE_PROC","KERN_UNRAGE_THREAD","KERN_UPDATEINTERVAL","KERN_USRSTACK32","KERN_USRSTACK64","KERN_VERSION","KERN_VNODE","KIPC_MAXSOCKBUF","KIPC_MAX_DATALEN","KIPC_MAX_HDR","KIPC_MAX_LINKHDR","KIPC_MAX_PROTOHDR","KIPC_MBSTAT","KIPC_NMBCLUSTERS","KIPC_SOCKBUF_WASTE","KIPC_SOMAXCONN","KIPC_SOQLIMITCOMPAT","LC_ALL","LC_ALL_MASK","LC_COLLATE","LC_COLLATE_MASK","LC_CTYPE","LC_CTYPE_MASK","LC_MESSAGES","LC_MESSAGES_MASK","LC_MONETARY","LC_MONETARY_MASK","LC_NUMERIC","LC_NUMERIC_MASK","LC_SEGMENT","LC_SEGMENT_64","LC_TIME","LC_TIME_MASK","LIO_NOP","LIO_NOWAIT","LIO_READ","LIO_WAIT","LIO_WRITE","LOCAL_PEERCRED","LOCAL_PEEREPID","LOCAL_PEEREUUID","LOCAL_PEERPID","LOCAL_PEERUUID","LOCK_EX","LOCK_NB","LOCK_SH","LOCK_UN","LOGIN_PROCESS","LOG_ALERT","LOG_AUTH","LOG_AUTHPRIV","LOG_CONS","LOG_CRIT","LOG_CRON","LOG_DAEMON","LOG_DEBUG","LOG_EMERG","LOG_ERR","LOG_FACMASK","LOG_FTP","LOG_INFO","LOG_INSTALL","LOG_KERN","LOG_LAUNCHD","LOG_LOCAL0","LOG_LOCAL1","LOG_LOCAL2","LOG_LOCAL3","LOG_LOCAL4","LOG_LOCAL5","LOG_LOCAL6","LOG_LOCAL7","LOG_LPR","LOG_MAIL","LOG_NDELAY","LOG_NETINFO","LOG_NEWS","LOG_NFACILITIES","LOG_NOTICE","LOG_NOWAIT","LOG_ODELAY","LOG_PERROR","LOG_PID","LOG_PRIMASK","LOG_RAS","LOG_REMOTEAUTH","LOG_SYSLOG","LOG_USER","LOG_UUCP","LOG_WARNING","L_tmpnam","MADV_CAN_REUSE","MADV_DONTNEED","MADV_FREE","MADV_FREE_REUSABLE","MADV_FREE_REUSE","MADV_NORMAL","MADV_RANDOM","MADV_SEQUENTIAL","MADV_WILLNEED","MADV_ZERO_WIRED_PAGES","MAP_ANON","MAP_ANONYMOUS","MAP_COPY","MAP_FAILED","MAP_FILE","MAP_FIXED","MAP_HASSEMAPHORE","MAP_JIT","MAP_NOCACHE","MAP_NOEXTEND","MAP_NORESERVE","MAP_PRIVATE","MAP_RENAME","MAP_SHARED","MAXCOMLEN","MAXTHREADNAMESIZE","MCL_CURRENT","MCL_FUTURE","MDMBUF","MH_MAGIC","MH_MAGIC_64","MINCORE_INCORE","MINCORE_MODIFIED","MINCORE_MODIFIED_OTHER","MINCORE_REFERENCED","MINCORE_REFERENCED_OTHER","MNT_FORCE","MON_1","MON_10","MON_11","MON_12","MON_2","MON_3","MON_4","MON_5","MON_6","MON_7","MON_8","MON_9","MSG_CTRUNC","MSG_DONTROUTE","MSG_DONTWAIT","MSG_EOF","MSG_EOR","MSG_FLUSH","MSG_HAVEMORE","MSG_HOLD","MSG_OOB","MSG_PEEK","MSG_RCVMORE","MSG_SEND","MSG_TRUNC","MSG_WAITALL","MS_ASYNC","MS_DEACTIVATE","MS_INVALIDATE","MS_KILLPAGES","MS_SYNC","NCCS","NET_RT_DUMP","NET_RT_FLAGS","NET_RT_IFLIST","NET_RT_IFLIST2","NEW_TIME","NI_DGRAM","NI_MAXHOST","NI_MAXSERV","NI_NAMEREQD","NI_NOFQDN","NI_NUMERICHOST","NI_NUMERICSCOPE","NI_NUMERICSERV","NL0","NL1","NLDLY","NOEXPR","NOFLSH","NOKERNINFO","NOSTR","NOTE_ABSOLUTE","NOTE_ATTRIB","NOTE_BACKGROUND","NOTE_CHILD","NOTE_CRITICAL","NOTE_DELETE","NOTE_EXEC","NOTE_EXIT","NOTE_EXITSTATUS","NOTE_EXIT_CSERROR","NOTE_EXIT_DECRYPTFAIL","NOTE_EXIT_DETAIL","NOTE_EXIT_DETAIL_MASK","NOTE_EXIT_MEMORY","NOTE_EXIT_REPARENTED","NOTE_EXTEND","NOTE_FFAND","NOTE_FFCOPY","NOTE_FFCTRLMASK","NOTE_FFLAGSMASK","NOTE_FFNOP","NOTE_FFOR","NOTE_FORK","NOTE_LEEWAY","NOTE_LINK","NOTE_LOWAT","NOTE_NONE","NOTE_NSECONDS","NOTE_PCTRLMASK","NOTE_PDATAMASK","NOTE_REAP","NOTE_RENAME","NOTE_REVOKE","NOTE_SECONDS","NOTE_SIGNAL","NOTE_TRACK","NOTE_TRACKERR","NOTE_TRIGGER","NOTE_USECONDS","NOTE_VM_ERROR","NOTE_VM_PRESSURE","NOTE_VM_PRESSURE_SUDDEN_TERMINATE","NOTE_VM_PRESSURE_TERMINATE","NOTE_WRITE","OCRNL","OFDEL","OFILL","OLD_TIME","ONLCR","ONLRET","ONOCR","ONOEOT","OPOST","OXTABS","O_ACCMODE","O_APPEND","O_ASYNC","O_CLOEXEC","O_CREAT","O_DIRECTORY","O_DSYNC","O_EXCL","O_EXLOCK","O_FSYNC","O_NDELAY","O_NOCTTY","O_NOFOLLOW","O_NONBLOCK","O_RDONLY","O_RDWR","O_SHLOCK","O_SYNC","O_TRUNC","O_WRONLY","PARENB","PARMRK","PARODD","PATH_MAX","PENDIN","PF_APPLETALK","PF_CCITT","PF_CHAOS","PF_CNT","PF_COIP","PF_DATAKIT","PF_DECnet","PF_DLI","PF_ECMA","PF_HYLINK","PF_IMPLINK","PF_INET","PF_INET6","PF_IPX","PF_ISDN","PF_ISO","PF_KEY","PF_LAT","PF_LINK","PF_LOCAL","PF_NATM","PF_NETBIOS","PF_NS","PF_OSI","PF_PIP","PF_PPP","PF_PUP","PF_ROUTE","PF_RTIP","PF_SIP","PF_SNA","PF_SYSTEM","PF_UNIX","PF_UNSPEC","PF_XTP","PIPE_BUF","PM_STR","POLLERR","POLLHUP","POLLIN","POLLNVAL","POLLOUT","POLLPRI","POLLRDBAND","POLLRDNORM","POLLWRBAND","POLLWRNORM","POSIX_MADV_DONTNEED","POSIX_MADV_NORMAL","POSIX_MADV_RANDOM","POSIX_MADV_SEQUENTIAL","POSIX_MADV_WILLNEED","POSIX_SPAWN_CLOEXEC_DEFAULT","POSIX_SPAWN_RESETIDS","POSIX_SPAWN_SETEXEC","POSIX_SPAWN_SETPGROUP","POSIX_SPAWN_SETSIGDEF","POSIX_SPAWN_SETSIGMASK","POSIX_SPAWN_START_SUSPENDED","PRIO_DARWIN_BG","PRIO_DARWIN_NONUI","PRIO_DARWIN_PROCESS","PRIO_DARWIN_THREAD","PRIO_MAX","PRIO_MIN","PRIO_PGRP","PRIO_PROCESS","PRIO_USER","PROC_PIDTASKALLINFO","PROC_PIDTASKINFO","PROC_PIDTHREADINFO","PROT_EXEC","PROT_NONE","PROT_READ","PROT_WRITE","PTHREAD_COND_INITIALIZER","PTHREAD_CREATE_DETACHED","PTHREAD_CREATE_JOINABLE","PTHREAD_MUTEX_DEFAULT","PTHREAD_MUTEX_ERRORCHECK","PTHREAD_MUTEX_INITIALIZER","PTHREAD_MUTEX_NORMAL","PTHREAD_MUTEX_RECURSIVE","PTHREAD_PROCESS_PRIVATE","PTHREAD_PROCESS_SHARED","PTHREAD_RWLOCK_INITIALIZER","PTHREAD_STACK_MIN","PT_ATTACH","PT_ATTACHEXC","PT_CONTINUE","PT_DENY_ATTACH","PT_DETACH","PT_FIRSTMACH","PT_FORCEQUOTA","PT_KILL","PT_READ_D","PT_READ_I","PT_READ_U","PT_SIGEXC","PT_STEP","PT_THUPDATE","PT_TRACE_ME","PT_WRITE_D","PT_WRITE_I","PT_WRITE_U","P_ALL","P_PGID","P_PID","QCMD","Q_GETQUOTA","Q_QUOTAOFF","Q_QUOTAON","Q_SETQUOTA","Q_SYNC","RADIXCHAR","RAND_MAX","RENAME_EXCL","RENAME_SWAP","RLIMIT_AS","RLIMIT_CORE","RLIMIT_CPU","RLIMIT_DATA","RLIMIT_FSIZE","RLIMIT_MEMLOCK","RLIMIT_NOFILE","RLIMIT_NPROC","RLIMIT_RSS","RLIMIT_STACK","RLIM_INFINITY","RLIM_NLIMITS","RTAX_AUTHOR","RTAX_BRD","RTAX_DST","RTAX_GATEWAY","RTAX_GENMASK","RTAX_IFA","RTAX_IFP","RTAX_MAX","RTAX_NETMASK","RTA_AUTHOR","RTA_BRD","RTA_DST","RTA_GATEWAY","RTA_GENMASK","RTA_IFA","RTA_IFP","RTA_NETMASK","RTF_BLACKHOLE","RTF_BROADCAST","RTF_CLONING","RTF_CONDEMNED","RTF_DELCLONE","RTF_DONE","RTF_DYNAMIC","RTF_GATEWAY","RTF_HOST","RTF_IFREF","RTF_IFSCOPE","RTF_LLINFO","RTF_LOCAL","RTF_MODIFIED","RTF_MULTICAST","RTF_NOIFREF","RTF_PINNED","RTF_PRCLONING","RTF_PROTO1","RTF_PROTO2","RTF_PROTO3","RTF_PROXY","RTF_REJECT","RTF_ROUTER","RTF_STATIC","RTF_UP","RTF_WASCLONED","RTF_XRESOLVE","RTLD_DEFAULT","RTLD_FIRST","RTLD_GLOBAL","RTLD_LAZY","RTLD_LOCAL","RTLD_NEXT","RTLD_NODELETE","RTLD_NOLOAD","RTLD_NOW","RTLD_SELF","RTM_ADD","RTM_CHANGE","RTM_DELADDR","RTM_DELETE","RTM_DELMADDR","RTM_GET","RTM_GET2","RTM_IFINFO","RTM_IFINFO2","RTM_LOCK","RTM_LOSING","RTM_MISS","RTM_NEWADDR","RTM_NEWMADDR","RTM_NEWMADDR2","RTM_OLDADD","RTM_OLDDEL","RTM_REDIRECT","RTM_RESOLVE","RTM_VERSION","RTV_EXPIRE","RTV_HOPCOUNT","RTV_MTU","RTV_RPIPE","RTV_RTT","RTV_RTTVAR","RTV_SPIPE","RTV_SSTHRESH","RUN_LVL","RUSAGE_CHILDREN","RUSAGE_SELF","R_OK","SA_NOCLDSTOP","SA_NOCLDWAIT","SA_NODEFER","SA_ONSTACK","SA_RESETHAND","SA_RESTART","SA_SIGINFO","SCM_CREDS","SCM_RIGHTS","SCM_TIMESTAMP","SEEK_CUR","SEEK_END","SEEK_SET","SEM_FAILED","SEM_UNDO","SETALL","SETVAL","SF_APPEND","SF_ARCHIVED","SF_IMMUTABLE","SF_SETTABLE","SHMLBA","SHM_R","SHM_RDONLY","SHM_RND","SHM_W","SHUTDOWN_TIME","SHUT_RD","SHUT_RDWR","SHUT_WR","SIGABRT","SIGALRM","SIGBUS","SIGCHLD","SIGCONT","SIGEMT","SIGEV_NONE","SIGEV_SIGNAL","SIGEV_THREAD","SIGFPE","SIGHUP","SIGILL","SIGINFO","SIGINT","SIGIO","SIGIOT","SIGKILL","SIGNATURE","SIGPIPE","SIGPROF","SIGQUIT","SIGSEGV","SIGSTKSZ","SIGSTOP","SIGSYS","SIGTERM","SIGTRAP","SIGTSTP","SIGTTIN","SIGTTOU","SIGURG","SIGUSR1","SIGUSR2","SIGVTALRM","SIGWINCH","SIGXCPU","SIGXFSZ","SIG_BLOCK","SIG_DFL","SIG_ERR","SIG_IGN","SIG_SETMASK","SIG_UNBLOCK","SOCK_DGRAM","SOCK_MAXADDRLEN","SOCK_RAW","SOCK_RDM","SOCK_SEQPACKET","SOCK_STREAM","SOL_LOCAL","SOL_SOCKET","SOMAXCONN","SO_ACCEPTCONN","SO_BROADCAST","SO_DEBUG","SO_DONTROUTE","SO_DONTTRUNC","SO_ERROR","SO_KEEPALIVE","SO_LABEL","SO_LINGER","SO_NKE","SO_NOADDRERR","SO_NOSIGPIPE","SO_NOTIFYCONFLICT","SO_NP_EXTENSIONS","SO_NREAD","SO_NWRITE","SO_OOBINLINE","SO_PEERLABEL","SO_RANDOMPORT","SO_RCVBUF","SO_RCVLOWAT","SO_RCVTIMEO","SO_REUSEADDR","SO_REUSEPORT","SO_REUSESHAREUID","SO_SNDBUF","SO_SNDLOWAT","SO_SNDTIMEO","SO_TIMESTAMP","SO_TIMESTAMP_MONOTONIC","SO_TYPE","SO_USELOOPBACK","SO_WANTMORE","SO_WANTOOBFLAG","SS_DISABLE","SS_ONSTACK","STDERR_FILENO","STDIN_FILENO","STDOUT_FILENO","ST_NOSUID","ST_RDONLY","SUPERPAGE_NONE","SUPERPAGE_SIZE_2MB","SUPERPAGE_SIZE_ANY","SYSPROTO_CONTROL","SYSPROTO_EVENT","S_IEXEC","S_IFBLK","S_IFCHR","S_IFDIR","S_IFIFO","S_IFLNK","S_IFMT","S_IFREG","S_IFSOCK","S_IREAD","S_IRGRP","S_IROTH","S_IRUSR","S_IRWXG","S_IRWXO","S_IRWXU","S_ISGID","S_ISUID","S_ISVTX","S_IWGRP","S_IWOTH","S_IWRITE","S_IWUSR","S_IXGRP","S_IXOTH","S_IXUSR","TAB0","TAB1","TAB2","TAB3","TABDLY","TCIFLUSH","TCIOFF","TCIOFLUSH","TCION","TCOFLUSH","TCOOFF","TCOON","TCP_KEEPALIVE","TCP_MAXSEG","TCP_NODELAY","TCP_NOOPT","TCP_NOPUSH","TCSADRAIN","TCSAFLUSH","TCSANOW","THOUSEP","TIOCCBRK","TIOCCDTR","TIOCCONS","TIOCDCDTIMESTAMP","TIOCDRAIN","TIOCDSIMICROCODE","TIOCEXCL","TIOCEXT","TIOCFLUSH","TIOCGDRAINWAIT","TIOCGETD","TIOCGPGRP","TIOCGWINSZ","TIOCIXOFF","TIOCIXON","TIOCMBIC","TIOCMBIS","TIOCMGDTRWAIT","TIOCMGET","TIOCMODG","TIOCMODS","TIOCMSDTRWAIT","TIOCMSET","TIOCM_CAR","TIOCM_CD","TIOCM_CTS","TIOCM_DSR","TIOCM_DTR","TIOCM_LE","TIOCM_RI","TIOCM_RNG","TIOCM_RTS","TIOCM_SR","TIOCM_ST","TIOCNOTTY","TIOCNXCL","TIOCOUTQ","TIOCPKT","TIOCPKT_DATA","TIOCPKT_DOSTOP","TIOCPKT_FLUSHREAD","TIOCPKT_FLUSHWRITE","TIOCPKT_IOCTL","TIOCPKT_NOSTOP","TIOCPKT_START","TIOCPKT_STOP","TIOCPTYGNAME","TIOCPTYGRANT","TIOCPTYUNLK","TIOCREMOTE","TIOCSBRK","TIOCSCONS","TIOCSCTTY","TIOCSDRAINWAIT","TIOCSDTR","TIOCSETD","TIOCSIG","TIOCSPGRP","TIOCSTART","TIOCSTAT","TIOCSTI","TIOCSTOP","TIOCSWINSZ","TIOCTIMESTAMP","TIOCUCNTL","TMP_MAX","TOSTOP","T_FMT","T_FMT_AMPM","UF_APPEND","UF_COMPRESSED","UF_HIDDEN","UF_IMMUTABLE","UF_NODUMP","UF_OPAQUE","UF_SETTABLE","UF_TRACKED","USER_BC_BASE_MAX","USER_BC_DIM_MAX","USER_BC_SCALE_MAX","USER_BC_STRING_MAX","USER_COLL_WEIGHTS_MAX","USER_CS_PATH","USER_EXPR_NEST_MAX","USER_LINE_MAX","USER_MAXID","USER_POSIX2_CHAR_TERM","USER_POSIX2_C_BIND","USER_POSIX2_C_DEV","USER_POSIX2_FORT_DEV","USER_POSIX2_FORT_RUN","USER_POSIX2_LOCALEDEF","USER_POSIX2_SW_DEV","USER_POSIX2_UPE","USER_POSIX2_VERSION","USER_PROCESS","USER_RE_DUP_MAX","USER_STREAM_MAX","USER_TZNAME_MAX","USRQUOTA","UTUN_OPT_FLAGS","UTUN_OPT_IFNAME","VDISCARD","VDSUSP","VEOF","VEOL","VEOL2","VERASE","VINTR","VKILL","VLNEXT","VMIN","VM_FLAGS_ALIAS_MASK","VM_FLAGS_ANYWHERE","VM_FLAGS_FIXED","VM_FLAGS_NO_CACHE","VM_FLAGS_OVERWRITE","VM_FLAGS_PURGABLE","VM_FLAGS_RANDOM_ADDR","VM_FLAGS_RESILIENT_CODESIGN","VM_FLAGS_RESILIENT_MEDIA","VM_FLAGS_RETURN_4K_DATA_ADDR","VM_FLAGS_RETURN_DATA_ADDR","VM_FLAGS_SUPERPAGE_MASK","VM_FLAGS_SUPERPAGE_NONE","VM_FLAGS_SUPERPAGE_SHIFT","VM_FLAGS_SUPERPAGE_SIZE_2MB","VM_FLAGS_SUPERPAGE_SIZE_ANY","VM_FLAGS_USER_ALLOCATE","VM_FLAGS_USER_MAP","VM_FLAGS_USER_REMAP","VM_LOADAVG","VM_MACHFACTOR","VM_MAXID","VM_MEMORY_ACCELERATE","VM_MEMORY_ANALYSIS_TOOL","VM_MEMORY_APPKIT","VM_MEMORY_APPLICATION_SPECIFIC_1","VM_MEMORY_APPLICATION_SPECIFIC_16","VM_MEMORY_ASL","VM_MEMORY_ASSETSD","VM_MEMORY_ATS","VM_MEMORY_CARBON","VM_MEMORY_CGIMAGE","VM_MEMORY_COREDATA","VM_MEMORY_COREDATA_OBJECTIDS","VM_MEMORY_COREGRAPHICS","VM_MEMORY_COREGRAPHICS_BACKINGSTORES","VM_MEMORY_COREGRAPHICS_DATA","VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS","VM_MEMORY_COREGRAPHICS_MISC","VM_MEMORY_COREGRAPHICS_SHARED","VM_MEMORY_COREGRAPHICS_XALLOC","VM_MEMORY_COREIMAGE","VM_MEMORY_COREPROFILE","VM_MEMORY_CORESERVICES","VM_MEMORY_COREUI","VM_MEMORY_COREUIFILE","VM_MEMORY_CORPSEINFO","VM_MEMORY_DHMM","VM_MEMORY_DYLD","VM_MEMORY_DYLD_MALLOC","VM_MEMORY_DYLIB","VM_MEMORY_FOUNDATION","VM_MEMORY_GENEALOGY","VM_MEMORY_GLSL","VM_MEMORY_GUARD","VM_MEMORY_IMAGEIO","VM_MEMORY_IOKIT","VM_MEMORY_JAVA","VM_MEMORY_JAVASCRIPT_CORE","VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR","VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE","VM_MEMORY_LAYERKIT","VM_MEMORY_LIBDISPATCH","VM_MEMORY_MACH_MSG","VM_MEMORY_MALLOC","VM_MEMORY_MALLOC_HUGE","VM_MEMORY_MALLOC_LARGE","VM_MEMORY_MALLOC_LARGE_REUSABLE","VM_MEMORY_MALLOC_LARGE_REUSED","VM_MEMORY_MALLOC_NANO","VM_MEMORY_MALLOC_SMALL","VM_MEMORY_MALLOC_TINY","VM_MEMORY_OBJC_DISPATCHERS","VM_MEMORY_OPENCL","VM_MEMORY_OS_ALLOC_ONCE","VM_MEMORY_RAWCAMERA","VM_MEMORY_REALLOC","VM_MEMORY_SBRK","VM_MEMORY_SCENEKIT","VM_MEMORY_SHARED_PMAP","VM_MEMORY_SKYWALK","VM_MEMORY_SQLITE","VM_MEMORY_STACK","VM_MEMORY_SWIFT_METADATA","VM_MEMORY_SWIFT_RUNTIME","VM_MEMORY_TCMALLOC","VM_MEMORY_UNSHARED_PMAP","VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS","VM_METER","VM_SWAPUSAGE","VQUIT","VREPRINT","VSTART","VSTATUS","VSTOP","VSUSP","VT0","VT1","VTDLY","VTIME","VWERASE","WCONTINUED","WCOREDUMP","WEXITED","WEXITSTATUS","WIFCONTINUED","WIFEXITED","WIFSIGNALED","WIFSTOPPED","WNOHANG","WNOWAIT","WSTOPPED","WSTOPSIG","WTERMSIG","WUNTRACED","W_OK","XATTR_CREATE","XATTR_NODEFAULT","XATTR_NOFOLLOW","XATTR_NOSECURITY","XATTR_REPLACE","XATTR_SHOWCOMPRESSION","XUCRED_VERSION","X_OK","YESEXPR","YESSTR","_IOFBF","_IOLBF","_IONBF","_PC_CHOWN_RESTRICTED","_PC_LINK_MAX","_PC_MAX_CANON","_PC_MAX_INPUT","_PC_NAME_MAX","_PC_NO_TRUNC","_PC_PATH_MAX","_PC_PIPE_BUF","_PC_VDISABLE","_POSIX_VDISABLE","_PTHREAD_COND_SIG_init","_PTHREAD_MUTEX_SIG_init","_PTHREAD_RWLOCK_SIG_init","_RLIMIT_POSIX_FLAG","_SC_2_CHAR_TERM","_SC_2_C_BIND","_SC_2_C_DEV","_SC_2_FORT_DEV","_SC_2_FORT_RUN","_SC_2_LOCALEDEF","_SC_2_PBS","_SC_2_PBS_ACCOUNTING","_SC_2_PBS_CHECKPOINT","_SC_2_PBS_LOCATE","_SC_2_PBS_MESSAGE","_SC_2_PBS_TRACK","_SC_2_SW_DEV","_SC_2_UPE","_SC_2_VERSION","_SC_ADVISORY_INFO","_SC_AIO_LISTIO_MAX","_SC_AIO_MAX","_SC_AIO_PRIO_DELTA_MAX","_SC_ARG_MAX","_SC_ASYNCHRONOUS_IO","_SC_ATEXIT_MAX","_SC_BARRIERS","_SC_BC_BASE_MAX","_SC_BC_DIM_MAX","_SC_BC_SCALE_MAX","_SC_BC_STRING_MAX","_SC_CHILD_MAX","_SC_CLK_TCK","_SC_CLOCK_SELECTION","_SC_COLL_WEIGHTS_MAX","_SC_CPUTIME","_SC_DELAYTIMER_MAX","_SC_EXPR_NEST_MAX","_SC_FILE_LOCKING","_SC_FSYNC","_SC_GETGR_R_SIZE_MAX","_SC_GETPW_R_SIZE_MAX","_SC_HOST_NAME_MAX","_SC_IOV_MAX","_SC_IPV6","_SC_JOB_CONTROL","_SC_LINE_MAX","_SC_LOGIN_NAME_MAX","_SC_MAPPED_FILES","_SC_MEMLOCK","_SC_MEMLOCK_RANGE","_SC_MEMORY_PROTECTION","_SC_MESSAGE_PASSING","_SC_MONOTONIC_CLOCK","_SC_MQ_OPEN_MAX","_SC_MQ_PRIO_MAX","_SC_NGROUPS_MAX","_SC_NPROCESSORS_CONF","_SC_NPROCESSORS_ONLN","_SC_OPEN_MAX","_SC_PAGESIZE","_SC_PAGE_SIZE","_SC_PASS_MAX","_SC_PHYS_PAGES","_SC_PRIORITIZED_IO","_SC_PRIORITY_SCHEDULING","_SC_RAW_SOCKETS","_SC_READER_WRITER_LOCKS","_SC_REALTIME_SIGNALS","_SC_REGEXP","_SC_RE_DUP_MAX","_SC_RTSIG_MAX","_SC_SAVED_IDS","_SC_SEMAPHORES","_SC_SEM_NSEMS_MAX","_SC_SEM_VALUE_MAX","_SC_SHARED_MEMORY_OBJECTS","_SC_SHELL","_SC_SIGQUEUE_MAX","_SC_SPAWN","_SC_SPIN_LOCKS","_SC_SPORADIC_SERVER","_SC_SS_REPL_MAX","_SC_STREAM_MAX","_SC_SYMLOOP_MAX","_SC_SYNCHRONIZED_IO","_SC_THREADS","_SC_THREAD_ATTR_STACKADDR","_SC_THREAD_ATTR_STACKSIZE","_SC_THREAD_CPUTIME","_SC_THREAD_DESTRUCTOR_ITERATIONS","_SC_THREAD_KEYS_MAX","_SC_THREAD_PRIORITY_SCHEDULING","_SC_THREAD_PRIO_INHERIT","_SC_THREAD_PRIO_PROTECT","_SC_THREAD_PROCESS_SHARED","_SC_THREAD_SAFE_FUNCTIONS","_SC_THREAD_SPORADIC_SERVER","_SC_THREAD_STACK_MIN","_SC_THREAD_THREADS_MAX","_SC_TIMEOUTS","_SC_TIMERS","_SC_TIMER_MAX","_SC_TRACE","_SC_TRACE_EVENT_FILTER","_SC_TRACE_EVENT_NAME_MAX","_SC_TRACE_INHERIT","_SC_TRACE_LOG","_SC_TRACE_NAME_MAX","_SC_TRACE_SYS_MAX","_SC_TRACE_USER_EVENT_MAX","_SC_TTY_NAME_MAX","_SC_TYPED_MEMORY_OBJECTS","_SC_TZNAME_MAX","_SC_V6_ILP32_OFF32","_SC_V6_ILP32_OFFBIG","_SC_V6_LP64_OFF64","_SC_V6_LPBIG_OFFBIG","_SC_VERSION","_SC_XBS5_ILP32_OFF32","_SC_XBS5_ILP32_OFFBIG","_SC_XBS5_LP64_OFF64","_SC_XBS5_LPBIG_OFFBIG","_SC_XOPEN_CRYPT","_SC_XOPEN_ENH_I18N","_SC_XOPEN_LEGACY","_SC_XOPEN_REALTIME","_SC_XOPEN_REALTIME_THREADS","_SC_XOPEN_SHM","_SC_XOPEN_STREAMS","_SC_XOPEN_UNIX","_SC_XOPEN_VERSION","_SC_XOPEN_XCU_VERSION","_UTX_HOSTSIZE","_UTX_IDSIZE","_UTX_LINESIZE","_UTX_USERSIZE","_WSTATUS","_WSTOPPED","__PTHREAD_CONDATTR_SIZE__","__PTHREAD_COND_SIZE__","__PTHREAD_MUTEX_SIZE__","__PTHREAD_RWLOCKATTR_SIZE__","__PTHREAD_RWLOCK_SIZE__","__error","_dyld_get_image_header","_dyld_get_image_name","_dyld_get_image_vmaddr_slide","_dyld_image_count","_exit","_key","_seq","abort","abs","accept","access","acct","actime","addrinfo","ai_addr","ai_addrlen","ai_canonname","ai_family","ai_flags","ai_next","ai_protocol","ai_socktype","aio_buf","aio_cancel","aio_error","aio_fildes","aio_fsync","aio_lio_opcode","aio_nbytes","aio_offset","aio_read","aio_reqprio","aio_return","aio_sigevent","aio_suspend","aio_write","aiocb","alarm","ar_hln","ar_hrd","ar_op","ar_pln","ar_pro","arphdr","array","atexit","atof","atoi","backtrace","bh_caplen","bh_datalen","bh_hdrlen","bh_tstamp","bind","blkcnt_t","blksize_t","boolean_t","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bpf_hdr","brk","buf","c_cc","c_cflag","c_char","c_double","c_float","c_iflag","c_int","c_ispeed","c_lflag","c_long","c_longlong","c_oflag","c_ospeed","c_schar","c_short","c_uchar","c_uint","c_ulong","c_ulonglong","c_ushort","c_void","calloc","cc_t","cfgetispeed","cfgetospeed","cfmakeraw","cfsetispeed","cfsetospeed","cfsetspeed","cgid","chdir","chflags","chmod","chown","chroot","clock_getres","clock_gettime","clock_t","clockid_t","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","close","closedir","closelog","cmd","cmd","cmd","cmdsize","cmdsize","cmdsize","cmsg_len","cmsg_level","cmsg_type","cmsghdr","connect","cpu_subtype_t","cpu_type_t","cpusubtype","cpusubtype","cputype","cputype","cr_groups","cr_ngroups","cr_uid","cr_version","creat","cuid","currency_symbol","d_ino","d_name","d_namlen","d_reclen","d_seekoff","d_type","daemon","data","data","decimal_point","denom","dev_t","difftime","dirent","dirfd","dladdr","dlclose","dlerror","dli_fbase","dli_fname","dli_saddr","dli_sname","dlopen","dlsym","dqb_bhardlimit","dqb_bsoftlimit","dqb_btime","dqb_curbytes","dqb_curinodes","dqb_id","dqb_ihardlimit","dqb_isoftlimit","dqb_itime","dqb_spare","dqblk","dup","dup2","duplocale","e_tdev","e_tpgid","endgrent","endpwent","endutxent","events","exchangedata","execl","execle","execlp","execv","execve","execvp","exit","ext","f_bavail","f_bavail","f_bfree","f_bfree","f_blocks","f_blocks","f_bsize","f_bsize","f_favail","f_ffree","f_ffree","f_files","f_files","f_flag","f_flags","f_frsize","f_fsid","f_fsid","f_fssubtype","f_fstypename","f_iosize","f_mntfromname","f_mntonname","f_namemax","f_owner","f_reserved","f_type","faccessat","fchdir","fchflags","fchmod","fchmodat","fchown","fchownat","fclose","fcntl","fd","fd_set","fdopen","fdopendir","feof","ferror","fflags","fflags","fflush","fgetc","fgetpos","fgets","fgetxattr","fileno","fileoff","fileoff","filesize","filesize","filetype","filetype","filter","filter","flags","flags","flags","flags","flags","flags","flistxattr","flock","flock","fmt","fopen","fork","forkpty","fpathconf","fpos_t","fprintf","fputc","fputs","frac_digits","fread","free","freeaddrinfo","freeifaddrs","freelocale","fremovexattr","freopen","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fsblkcnt_t","fscanf","fseek","fseeko","fsetpos","fsetxattr","fsfilcnt_t","fsid_t","fst_bytesalloc","fst_flags","fst_length","fst_offset","fst_posmode","fstat","fstatat","fstatfs","fstatvfs","fstore_t","fsync","ftell","ftello","ftok","ftruncate","futimens","futimes","fwrite","gai_strerror","getaddrinfo","getchar","getchar_unlocked","getcwd","getdomainname","getdtablesize","getegid","getenv","geteuid","getgid","getgrent","getgrgid","getgrgid_r","getgrnam","getgrnam_r","getgrouplist","getgroups","gethostname","getifaddrs","getline","getloadavg","getlogin","getnameinfo","getopt","getpeereid","getpeername","getpgid","getpgrp","getpid","getppid","getpriority","getprogname","getprotobyname","getprotobynumber","getpwent","getpwnam","getpwnam_r","getpwuid","getpwuid_r","getrlimit","getrusage","getservbyname","getsid","getsockname","getsockopt","gettimeofday","getuid","getutxent","getutxid","getutxline","getxattr","gid","gid_t","gl_offs","gl_pathc","gl_pathv","glob","glob_t","globfree","gmtime","gmtime_r","gr_gid","gr_mem","gr_name","gr_passwd","grantpt","group","grouping","h_addr_list","h_addrtype","h_aliases","h_length","h_name","hdr_cnt","headers","hostent","id_t","ident","ident","idtype_t","if_data","if_freenameindex","if_index","if_indextoname","if_msghdr","if_name","if_nameindex","if_nameindex","if_nametoindex","ifa_addr","ifa_data","ifa_dstaddr","ifa_flags","ifa_name","ifa_netmask","ifa_next","ifaddrs","ifi_addrlen","ifi_baudrate","ifi_collisions","ifi_hdrlen","ifi_hwassist","ifi_ibytes","ifi_ierrors","ifi_imcasts","ifi_ipackets","ifi_iqdrops","ifi_lastchange","ifi_metric","ifi_mtu","ifi_noproto","ifi_obytes","ifi_oerrors","ifi_omcasts","ifi_opackets","ifi_physical","ifi_recvquota","ifi_recvtiming","ifi_reserved1","ifi_reserved2","ifi_type","ifi_typelen","ifi_unused1","ifi_unused2","ifi_xmitquota","ifi_xmittiming","ifm_addrs","ifm_data","ifm_flags","ifm_index","ifm_msglen","ifm_type","ifm_version","imr_interface","imr_multiaddr","in6_addr","in6_pktinfo","in_addr","in_addr_t","in_pktinfo","in_port_t","initgroups","initprot","initprot","ino_t","int16_t","int32_t","int64_t","int8_t","int_curr_symbol","int_frac_digits","int_n_cs_precedes","int_n_sep_by_space","int_n_sign_posn","int_p_cs_precedes","int_p_sep_by_space","int_p_sign_posn","integer_t","intmax_t","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","intptr_t","ioctl","iov_base","iov_len","iovec","ip_mreq","ipc_perm","ipi6_addr","ipi6_ifindex","ipi_addr","ipi_ifindex","ipi_spec_dst","ipv6_mreq","ipv6mr_interface","ipv6mr_multiaddr","isalnum","isalpha","isatty","iscntrl","isdigit","isgraph","islower","isprint","ispunct","isspace","isupper","isxdigit","it_interval","it_value","itimerval","kevent","kevent","kevent64","kevent64_s","key_t","kill","killpg","kqueue","l_len","l_linger","l_onoff","l_pid","l_start","l_type","l_whence","labs","lchown","lconv","linger","link","linkat","lio_listio","listen","listxattr","load_command","locale_t","localeconv","localeconv_l","localtime","localtime_r","login_tty","lseek","lstat","lutimes","mach_absolute_time","mach_header","mach_header_64","mach_timebase_info","mach_timebase_info","mach_timebase_info_data_t","machine","madvise","magic","magic","malloc","maxprot","maxprot","memchr","memcmp","memcpy","memmove","memset","mincore","mkdir","mkdirat","mkdtemp","mkfifo","mknod","mkstemp","mkstemps","mktime","mlock","mlockall","mmap","mode","mode_t","modtime","mon_decimal_point","mon_grouping","mon_thousands_sep","mount","mprotect","msg_control","msg_controllen","msg_flags","msg_iov","msg_iovlen","msg_name","msg_namelen","msghdr","msync","munlock","munlockall","munmap","n_cs_precedes","n_sep_by_space","n_sign_posn","nanosleep","ncmds","ncmds","negative_sign","newlocale","nfds_t","nice","nl_item","nl_langinfo","nlink_t","nodename","nsects","nsects","numer","off_t","open","openat","opendir","openlog","openpty","p_aliases","p_cs_precedes","p_name","p_proto","p_sep_by_space","p_sign_posn","passwd","pathconf","pause","pbi_comm","pbi_flags","pbi_gid","pbi_name","pbi_nfiles","pbi_nice","pbi_pgid","pbi_pid","pbi_pjobc","pbi_ppid","pbi_rgid","pbi_ruid","pbi_start_tvsec","pbi_start_tvusec","pbi_status","pbi_svgid","pbi_svuid","pbi_uid","pbi_xstatus","pbsd","pclose","perror","pid_t","pipe","poll","pollfd","popen","positive_sign","posix_madvise","posix_memalign","posix_openpt","posix_spawn","posix_spawn_file_actions_addclose","posix_spawn_file_actions_adddup2","posix_spawn_file_actions_addopen","posix_spawn_file_actions_destroy","posix_spawn_file_actions_init","posix_spawn_file_actions_t","posix_spawnattr_destroy","posix_spawnattr_getflags","posix_spawnattr_getpgroup","posix_spawnattr_getsigdefault","posix_spawnattr_getsigmask","posix_spawnattr_init","posix_spawnattr_setflags","posix_spawnattr_setpgroup","posix_spawnattr_setsigdefault","posix_spawnattr_setsigmask","posix_spawnattr_t","posix_spawnp","pread","printf","proc_bsdinfo","proc_taskallinfo","proc_taskinfo","proc_threadinfo","protoent","pselect","pseudo_AF_HDRCMPLT","pseudo_AF_KEY","pseudo_AF_PIP","pseudo_AF_RTIP","pseudo_AF_XTP","pth_cpu_usage","pth_curpri","pth_flags","pth_maxpriority","pth_name","pth_policy","pth_priority","pth_run_state","pth_sleep_time","pth_system_time","pth_user_time","pthread_atfork","pthread_attr_destroy","pthread_attr_init","pthread_attr_setdetachstate","pthread_attr_setstacksize","pthread_attr_t","pthread_cancel","pthread_cond_broadcast","pthread_cond_destroy","pthread_cond_init","pthread_cond_signal","pthread_cond_t","pthread_cond_timedwait","pthread_cond_wait","pthread_condattr_destroy","pthread_condattr_getpshared","pthread_condattr_init","pthread_condattr_setpshared","pthread_condattr_t","pthread_create","pthread_detach","pthread_exit","pthread_get_stackaddr_np","pthread_get_stacksize_np","pthread_getspecific","pthread_join","pthread_key_create","pthread_key_delete","pthread_key_t","pthread_kill","pthread_mutex_destroy","pthread_mutex_init","pthread_mutex_lock","pthread_mutex_t","pthread_mutex_trylock","pthread_mutex_unlock","pthread_mutexattr_destroy","pthread_mutexattr_getpshared","pthread_mutexattr_init","pthread_mutexattr_setpshared","pthread_mutexattr_settype","pthread_mutexattr_t","pthread_rwlock_destroy","pthread_rwlock_init","pthread_rwlock_rdlock","pthread_rwlock_t","pthread_rwlock_tryrdlock","pthread_rwlock_trywrlock","pthread_rwlock_unlock","pthread_rwlock_wrlock","pthread_rwlockattr_destroy","pthread_rwlockattr_getpshared","pthread_rwlockattr_init","pthread_rwlockattr_setpshared","pthread_rwlockattr_t","pthread_self","pthread_setname_np","pthread_setspecific","pthread_sigmask","pthread_t","pti_cow_faults","pti_csw","pti_faults","pti_messages_received","pti_messages_sent","pti_numrunning","pti_pageins","pti_policy","pti_priority","pti_resident_size","pti_syscalls_mach","pti_syscalls_unix","pti_threadnum","pti_threads_system","pti_threads_user","pti_total_system","pti_total_user","pti_virtual_size","ptinfo","ptrace","ptrdiff_t","ptsname","putchar","putchar_unlocked","putenv","puts","pututxline","pw_change","pw_class","pw_dir","pw_expire","pw_gecos","pw_gid","pw_name","pw_passwd","pw_shell","pw_uid","pwrite","querylocale","quotactl","ra_count","ra_offset","radvisory","raise","rand","read","readdir","readdir_r","readlink","readlinkat","readv","realloc","realpath","recv","recvfrom","recvmsg","release","remove","removexattr","rename","renameat","renameatx_np","renamex_np","res_init","reserved","revents","rewind","rewinddir","rfu_1","rlim_cur","rlim_max","rlim_t","rlimit","rmdir","ru_idrss","ru_inblock","ru_isrss","ru_ixrss","ru_majflt","ru_maxrss","ru_minflt","ru_msgrcv","ru_msgsnd","ru_nivcsw","ru_nsignals","ru_nswap","ru_nvcsw","ru_oublock","ru_stime","ru_utime","rusage","s6_addr","s_addr","s_aliases","s_name","s_port","s_proto","sa_data","sa_family","sa_family_t","sa_flags","sa_len","sa_mask","sa_sigaction","sbrk","sc_family","sc_id","sc_len","sc_reserved","sc_unit","scanf","sched_yield","sdl_alen","sdl_data","sdl_family","sdl_index","sdl_len","sdl_nlen","sdl_slen","sdl_type","seekdir","segment_command","segment_command_64","segname","segname","select","sem_base","sem_close","sem_ctime","sem_destroy","sem_flg","sem_init","sem_nsems","sem_num","sem_op","sem_open","sem_otime","sem_pad1","sem_pad2","sem_pad3","sem_perm","sem_post","sem_t","sem_trywait","sem_unlink","sem_wait","sembuf","semctl","semget","semid_ds","semop","semun","send","sendfile","sendmsg","sendto","servent","setbuf","setdomainname","setegid","setenv","seteuid","setgid","setgrent","setgroups","sethostname","setlocale","setlogmask","setpgid","setpriority","setprogname","setpwent","setrlimit","setsid","setsockopt","settimeofday","setuid","setutxent","setvbuf","setxattr","sf_hdtr","shm_atime","shm_cpid","shm_ctime","shm_dtime","shm_internal","shm_lpid","shm_nattch","shm_open","shm_perm","shm_segsz","shm_unlink","shmat","shmatt_t","shmctl","shmdt","shmget","shmid_ds","shutdown","si_addr","si_code","si_errno","si_pid","si_signo","si_status","si_uid","sigaction","sigaction","sigaddset","sigaltstack","sigdelset","sigemptyset","sigev_notify","sigev_notify_attributes","sigev_signo","sigev_value","sigevent","sigfillset","sighandler_t","siginfo_t","sigismember","signal","sigpending","sigprocmask","sigset_t","sigval","sigwait","sin6_addr","sin6_family","sin6_flowinfo","sin6_len","sin6_port","sin6_scope_id","sin_addr","sin_addr","sin_family","sin_family","sin_len","sin_len","sin_other","sin_port","sin_port","sin_srcaddr","sin_tos","sin_zero","sival_ptr","size_t","sizeofcmds","sizeofcmds","sleep","snprintf","sockaddr","sockaddr_ctl","sockaddr_dl","sockaddr_in","sockaddr_in6","sockaddr_inarp","sockaddr_storage","sockaddr_un","socket","socketpair","socklen_t","speed_t","sprintf","srand","ss_family","ss_flags","ss_len","ss_size","ss_sp","ss_sysaddr","sscanf","ssize_t","st_atime","st_atime_nsec","st_birthtime","st_birthtime_nsec","st_blksize","st_blocks","st_ctime","st_ctime_nsec","st_dev","st_flags","st_gen","st_gid","st_ino","st_lspare","st_mode","st_mtime","st_mtime_nsec","st_nlink","st_qspare","st_rdev","st_size","st_uid","stack_t","stat","stat","statfs","statfs","statvfs","statvfs","strcasecmp","strcasestr","strcat","strchr","strcmp","strcoll","strcpy","strcspn","strdup","strerror","strerror_r","strlen","strncasecmp","strncat","strncmp","strncpy","strnlen","strpbrk","strrchr","strspn","strstr","strtod","strtok","strtol","strtoul","strxfrm","sun_family","sun_len","sun_path","suseconds_t","symlink","symlinkat","sync","syscall","sysconf","sysctl","sysctlbyname","sysctlnametomib","syslog","sysname","system","tcdrain","tcflag_t","tcflow","tcflush","tcgetattr","tcgetpgrp","tcgetsid","tcsendbreak","tcsetattr","tcsetpgrp","telldir","termios","thousands_sep","time","time_t","timegm","times","timespec","timeval","timeval32","timezone","tm","tm_gmtoff","tm_hour","tm_isdst","tm_mday","tm_min","tm_mon","tm_sec","tm_wday","tm_yday","tm_year","tm_zone","tmpfile","tmpnam","tms","tms_cstime","tms_cutime","tms_stime","tms_utime","tolower","toupper","trailers","trl_cnt","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttyname","tv_nsec","tv_sec","tv_sec","tv_sec","tv_usec","tv_usec","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","udata","udata","uid","uid_t","uint16_t","uint32_t","uint64_t","uint8_t","uintmax_t","uintptr_t","umask","uname","ungetc","unlink","unlinkat","unlockpt","unmount","unsetenv","useconds_t","uselocale","usleep","ut_host","ut_id","ut_line","ut_pid","ut_tv","ut_type","ut_user","utimbuf","utime","utimensat","utimes","utmpx","utmpxname","utsname","val","version","vm_prot_t","vm_size_t","vmaddr","vmaddr","vmsize","vmsize","wait","waitid","waitpid","wchar_t","wcslen","wcstombs","winsize","write","writev","ws_col","ws_row","ws_xpixel","ws_ypixel","xsu_avail","xsu_encrypted","xsu_pagesize","xsu_total","xsu_used","xsw_usage","xucred"],"q":["libcdhird Party Connect","Any distributed FS","IP6 Auth Header","any host internal protocol","any private encr. scheme","Argus","AX.25 Frames","BHA","Bulk Data Transfer","BackRoom SATNET Monitoring","CFTP","Chaos","Control Message Transport","Comp. Prot. HeartBeat","Comp. Prot. Net. Executive","Datagram Delivery","dissimilar gateway prot.","divert pseudo-protocol","last return value of *_input(), meaning “all job for …","IP6 destination option","exterior gateway protocol","EMCON","encapsulation header","ISO cnlp","IP6 Encap Sec. Payload","Ethernet IP encapsulation","IP6 fragmentation header","gateway2 (deprecated)","GMTP","General Routing Encap.","“hello” routing protocol","Host Monitoring","IP6 hop-by-hop options","","","xns idp","InterDomain Policy Routing","InterDomain Routing","group mgmt protocol","NSFNET-IGP","Cisco/GXS IGRP","IL transport protocol","Integ. Net Layer Security","Merit Internodal","","payload compression (IPComp)","Packet Core Utility","IP encapsulated in IP","for compatibility","Pluribus Packet Core","","Reliable Transaction","Kryptolan","Locus Address Resoloution","Leaf-1","Leaf-2","","DCN Measurement Subsystems","Mobile Host Routing","Mobile Int.ing control","Multicast Transport","Multiplexing","Sun net disk proto (temp.)","Next Hop Resolution","IP6 no next header","Network Services","network voice protocol","OSPFIGP","PGM","private interior gateway","Protocol Independent Mcast","Packet Radio Measurement","pup","Packet Video Protocol","raw IP packet","BBN RCC Monitoring","Reliable Data","IP6 routing header","resource reservation","Remote Virtual Disk","SATNET/Backroom EXPAK","Satnet Monitoring","Semaphore Comm. security","SCTP","Source Demand Routing","Sequential Exchange","Strite RPC protocol","Stream protocol II.","Secure VMTP","IP with encryption","TCF","","tp-4 w/ class negotiation","TP++ Transport","Trunk-1","Trunk-2","TTP","","Banyon VINES","VISA Protocol","VMTP","WIDEBAND EXPAK","WIDEBAND Monitoring","Wang Span Network","Cross Net Debuggerquivalent to C’s <code>void</code> type when used as a pointer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchangedalls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codehe 64-bit libc on Solaris and illumos only has readdir_r. …i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,2,0,3,3,3,3,3,3,3,3,4,0,0,4,0,4,4,4,0,4,0,4,0,0,0,0,5,5,5,5,5,0,6,0,0,0,0,7,7,7,7,0,0,0,0,8,9,10,11,12,2,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,4,42,3,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,1,79,5,80,81,82,83,84,85,86,87,88,89,90,91,6,92,93,7,94,95,96,8,9,10,11,12,2,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,4,42,3,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,1,79,5,80,81,82,83,84,85,86,87,88,89,90,91,6,92,93,7,94,95,96,0,0,6,59,59,0,0,0,59,0,59,59,0,0,59,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,8,9,10,11,12,2,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,4,42,3,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,1,79,5,80,81,82,83,84,85,86,87,88,89,90,91,6,92,93,7,94,95,0,0,0,71,72,73,71,72,73,35,35,35,0,0,0,0,69,70,69,70,68,68,68,68,0,1,62,86,86,86,86,86,86,0,56,81,62,43,0,0,0,0,0,0,0,54,54,54,54,0,0,57,57,57,57,57,57,57,57,57,57,0,0,0,0,65,65,0,0,0,20,0,0,0,0,0,0,0,0,56,53,85,53,85,53,85,53,85,53,53,85,53,85,53,85,53,53,85,85,85,85,85,85,53,85,85,85,0,0,0,0,0,0,0,0,0,20,0,0,0,0,0,56,81,0,0,0,0,0,0,71,72,71,72,69,70,56,81,56,69,70,71,72,81,0,0,0,96,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,8,9,10,11,12,2,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,4,42,3,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,1,79,5,80,81,82,83,84,85,86,87,88,89,90,91,6,92,93,7,94,95,96,0,0,0,0,0,0,0,0,51,51,51,51,51,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,42,42,42,0,0,0,0,0,12,12,12,12,0,0,62,18,18,18,18,18,61,61,0,0,56,81,0,0,0,37,0,0,37,0,0,0,31,31,31,31,31,31,31,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,58,58,58,58,58,58,58,41,41,0,0,0,0,0,0,0,71,72,0,0,0,0,0,62,62,62,62,62,62,62,62,0,0,8,9,10,11,12,2,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,4,42,3,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,1,79,5,80,81,82,83,84,85,86,87,88,89,90,91,6,92,93,7,94,95,96,0,0,19,19,0,0,0,78,78,77,77,77,0,17,17,0,0,0,0,0,0,0,0,0,0,0,0,24,24,0,0,0,0,0,0,0,0,0,60,22,22,60,60,60,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,69,70,0,71,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,62,62,62,0,0,34,34,34,34,34,34,34,0,0,0,0,0,62,62,62,0,69,70,62,0,0,0,0,0,0,39,71,72,43,0,0,0,0,0,0,27,62,27,27,62,62,0,0,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,66,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,84,84,84,84,84,84,84,84,84,84,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,66,0,0,0,0,0,0,0,0,30,30,30,30,30,30,30,30,30,30,0,0,0,52,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,0,0,0,0,70,20,0,0,65,15,15,0,0,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,95,80,26,26,26,26,28,28,0,49,28,49,49,0,76,76,76,76,76,0,0,74,74,74,74,74,74,74,74,0,0,0,71,72,0,82,0,82,0,79,0,82,79,79,0,82,82,82,82,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,83,83,83,83,83,83,0,83,83,0,0,0,0,0,0,0,0,48,48,48,48,48,48,48,0,0,0,0,0,0,63,63,63,63,0,0,0,0,0,0,0,0,0,0,0,29,29,29,29,29,29,55,75,55,75,55,75,75,55,75,75,75,55,23,0,69,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,50,90,50,50,76,0,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,38,38,0,0,0,0,0,0,0,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,33,33,33,33,33,33,33,33,33,33,33,0,0,0,25,25,25,25,0,0,61,61,0,8,9,10,11,12,2,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,4,42,3,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,1,79,5,80,81,82,83,84,85,86,87,88,89,90,91,6,92,93,7,94,95,96,8,9,10,11,12,2,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,4,42,3,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,1,79,5,80,81,82,83,84,85,86,87,88,89,90,91,6,92,93,7,94,95,96,0,14,13,14,92,13,92,8,9,10,11,12,2,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,4,42,3,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,1,79,5,80,81,82,83,84,85,86,87,88,89,90,91,6,92,93,7,94,95,96,56,81,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,91,91,91,91,91,91,0,0,0,0,0,0,0,6,39,0,0,71,72,71,72,0,0,0,0,0,0,0,0,0,21,21,21,21,67,67,67,67,67,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["cmsghdr",0]],["c_uchar",0]],[[["msghdr",0]],["cmsghdr",0]],[[["c_uint",6]],["c_uint",6]],[[["msghdr",0],["cmsghdr",0]],["cmsghdr",0]],[[["c_uint",6]],["c_uint",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_int",6],["fd_set",0]]],[[["c_int",6],["fd_set",0]],["bool",0]],[[["c_int",6],["fd_set",0]]],null,[[["fd_set",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_int",6],["c_int",6]],["c_int",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_int",6]],["bool",0]],null,[[["c_int",6]],["c_int",6]],[[["c_int",6]],["bool",0]],[[["c_int",6]],["bool",0]],[[["c_int",6]],["bool",0]],[[["c_int",6]],["bool",0]],null,null,null,[[["c_int",6]],["c_int",6]],[[["c_int",6]],["c_int",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_int",6]],["c_int",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["dir",4]],["dir",4]],[[["locale_t",4]],["locale_t",4]],[[["file",4]],["file",4]],[[["fpos_t",4]],["fpos_t",4]],[[["group",3]],["group",3]],[[["utimbuf",3]],["utimbuf",3]],[[["timeval",3]],["timeval",3]],[[["timespec",3]],["timespec",3]],[[["rlimit",3]],["rlimit",3]],[[["rusage",3]],["rusage",3]],[[["ipv6_mreq",3]],["ipv6_mreq",3]],[[["hostent",3]],["hostent",3]],[[["iovec",3]],["iovec",3]],[[["pollfd",3]],["pollfd",3]],[[["winsize",3]],["winsize",3]],[[["linger",3]],["linger",3]],[[["sigval",3]],["sigval",3]],[[["itimerval",3]],["itimerval",3]],[[["tms",3]],["tms",3]],[[["servent",3]],["servent",3]],[[["protoent",3]],["protoent",3]],[[["sockaddr",3]],["sockaddr",3]],[[["sockaddr_in6",3]],["sockaddr_in6",3]],[[["passwd",3]],["passwd",3]],[[["ifaddrs",3]],["ifaddrs",3]],[[["fd_set",3]],["fd_set",3]],[[["tm",3]],["tm",3]],[[["msghdr",3]],["msghdr",3]],[[["cmsghdr",3]],["cmsghdr",3]],[[["fsid_t",3]],["fsid_t",3]],[[["if_nameindex",3]],["if_nameindex",3]],[[["sockaddr_un",3]],["sockaddr_un",3]],[[["utsname",3]],["utsname",3]],[[["timezone",4]],["timezone",4]],[[["ip_mreq",3]],["ip_mreq",3]],[[["aiocb",3]],["aiocb",3]],[[["glob_t",3]],["glob_t",3]],[[["addrinfo",3]],["addrinfo",3]],[[["mach_timebase_info",3]],["mach_timebase_info",3]],[[["stat",3]],["stat",3]],[[["pthread_mutexattr_t",3]],["pthread_mutexattr_t",3]],[[["pthread_condattr_t",3]],["pthread_condattr_t",3]],[[["pthread_rwlockattr_t",3]],["pthread_rwlockattr_t",3]],[[["siginfo_t",3]],["siginfo_t",3]],[[["sigaction",3]],["sigaction",3]],[[["stack_t",3]],["stack_t",3]],[[["fstore_t",3]],["fstore_t",3]],[[["radvisory",3]],["radvisory",3]],[[["statvfs",3]],["statvfs",3]],[[["dl_info",3]],["dl_info",3]],[[["sockaddr_in",3]],["sockaddr_in",3]],[[["kevent64_s",3]],["kevent64_s",3]],[[["dqblk",3]],["dqblk",3]],[[["if_msghdr",3]],["if_msghdr",3]],[[["termios",3]],["termios",3]],[[["flock",3]],["flock",3]],[[["sf_hdtr",3]],["sf_hdtr",3]],[[["lconv",3]],["lconv",3]],[[["sigevent",3]],["sigevent",3]],[[["proc_taskinfo",3]],["proc_taskinfo",3]],[[["proc_bsdinfo",3]],["proc_bsdinfo",3]],[[["proc_taskallinfo",3]],["proc_taskallinfo",3]],[[["xsw_usage",3]],["xsw_usage",3]],[[["xucred",3]],["xucred",3]],[[["mach_header",3]],["mach_header",3]],[[["mach_header_64",3]],["mach_header_64",3]],[[["segment_command",3]],["segment_command",3]],[[["segment_command_64",3]],["segment_command_64",3]],[[["load_command",3]],["load_command",3]],[[["sockaddr_dl",3]],["sockaddr_dl",3]],[[["sockaddr_inarp",3]],["sockaddr_inarp",3]],[[["sockaddr_ctl",3]],["sockaddr_ctl",3]],[[["in_pktinfo",3]],["in_pktinfo",3]],[[["in6_pktinfo",3]],["in6_pktinfo",3]],[[["ipc_perm",3]],["ipc_perm",3]],[[["sembuf",3]],["sembuf",3]],[[["arphdr",3]],["arphdr",3]],[[["in_addr",3]],["in_addr",3]],[[["kevent",3]],["kevent",3]],[[["semid_ds",3]],["semid_ds",3]],[[["shmid_ds",3]],["shmid_ds",3]],[[["proc_threadinfo",3]],["proc_threadinfo",3]],[[["statfs",3]],["statfs",3]],[[["dirent",3]],["dirent",3]],[[["pthread_rwlock_t",3]],["pthread_rwlock_t",3]],[[["pthread_mutex_t",3]],["pthread_mutex_t",3]],[[["pthread_cond_t",3]],["pthread_cond_t",3]],[[["sockaddr_storage",3]],["sockaddr_storage",3]],[[["utmpx",3]],["utmpx",3]],[[["semun",19]],["semun",19]],[[["timeval32",3]],["timeval32",3]],[[["if_data",3]],["if_data",3]],[[["bpf_hdr",3]],["bpf_hdr",3]],[[["pthread_attr_t",3]],["pthread_attr_t",3]],[[["in6_addr",3]],["in6_addr",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["c_void",4],["formatter",3]],["result",4,[["error",3]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[3,"ipc_perm"],[3,"utimbuf"],[3,"addrinfo"],[3,"aiocb"],[3,"arphdr"],[19,"semun"],[3,"bpf_hdr"],[4,"DIR"],[4,"locale_t"],[4,"FILE"],[4,"fpos_t"],[3,"group"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"passwd"],[3,"ifaddrs"],[3,"fd_set"],[3,"tm"],[3,"msghdr"],[3,"cmsghdr"],[3,"fsid_t"],[3,"if_nameindex"],[3,"sockaddr_un"],[3,"utsname"],[4,"timezone"],[3,"ip_mreq"],[3,"glob_t"],[3,"mach_timebase_info"],[3,"stat"],[3,"pthread_mutexattr_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlockattr_t"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"kevent64_s"],[3,"dqblk"],[3,"if_msghdr"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"sigevent"],[3,"proc_taskinfo"],[3,"proc_bsdinfo"],[3,"proc_taskallinfo"],[3,"xsw_usage"],[3,"xucred"],[3,"mach_header"],[3,"mach_header_64"],[3,"segment_command"],[3,"segment_command_64"],[3,"load_command"],[3,"sockaddr_dl"],[3,"sockaddr_inarp"],[3,"sockaddr_ctl"],[3,"in_pktinfo"],[3,"in6_pktinfo"],[3,"sembuf"],[3,"in_addr"],[3,"kevent"],[3,"semid_ds"],[3,"shmid_ds"],[3,"proc_threadinfo"],[3,"statfs"],[3,"dirent"],[3,"pthread_rwlock_t"],[3,"pthread_mutex_t"],[3,"pthread_cond_t"],[3,"sockaddr_storage"],[3,"utmpx"],[3,"timeval32"],[3,"if_data"],[3,"pthread_attr_t"],[3,"in6_addr"],[4,"c_void"]]},\
"lock_api":{"doc":"This library provides type-safe and fully-featured <code>Mutex</code> …","t":[16,16,8,16,16,3,3,18,18,18,16,16,3,3,3,3,3,3,8,8,8,8,8,8,8,8,8,8,8,8,8,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,10,10,10,11,11,10,10,10,10,10,10,10,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,10,11,11],"n":["Duration","Duration","GetThreadId","GuardMarker","GuardMarker","GuardNoSend","GuardSend","INIT","INIT","INIT","Instant","Instant","MappedMutexGuard","MappedReentrantMutexGuard","MappedRwLockReadGuard","MappedRwLockWriteGuard","Mutex","MutexGuard","RawMutex","RawMutexFair","RawMutexTimed","RawRwLock","RawRwLockDowngrade","RawRwLockFair","RawRwLockRecursive","RawRwLockRecursiveTimed","RawRwLockTimed","RawRwLockUpgrade","RawRwLockUpgradeDowngrade","RawRwLockUpgradeFair","RawRwLockUpgradeTimed","ReentrantMutex","ReentrantMutexGuard","RwLock","RwLockReadGuard","RwLockUpgradableReadGuard","RwLockWriteGuard","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bump","bump","bump","bump","bump","bump","bump","bump_exclusive","bump_exclusive","bump_shared","bump_shared","bump_upgradable","bump_upgradable","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","downgrade","downgrade","downgrade","downgrade","downgrade_to_upgradable","downgrade_to_upgradable","downgrade_upgradable","drop","drop","drop","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","force_unlock","force_unlock","force_unlock_fair","force_unlock_fair","force_unlock_read","force_unlock_read_fair","force_unlock_write","force_unlock_write_fair","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","get_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","lock","lock","lock","lock_exclusive","lock_shared","lock_shared_recursive","lock_upgradable","map","map","map","map","map","map","map","map","mutex","new","new","new","nonzero_thread_id","raw","raw","raw","read","read_recursive","remutex","rwlock","rwlock","rwlock","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","try_lock","try_lock","try_lock_exclusive","try_lock_exclusive_for","try_lock_exclusive_until","try_lock_for","try_lock_for","try_lock_for","try_lock_shared","try_lock_shared_for","try_lock_shared_recursive","try_lock_shared_recursive_for","try_lock_shared_recursive_until","try_lock_shared_until","try_lock_until","try_lock_until","try_lock_until","try_lock_upgradable","try_lock_upgradable_for","try_lock_upgradable_until","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_map","try_read","try_read_for","try_read_recursive","try_read_recursive_for","try_read_recursive_until","try_read_until","try_upgradable_read","try_upgradable_read_for","try_upgradable_read_until","try_upgrade","try_upgrade","try_upgrade_for","try_upgrade_for","try_upgrade_until","try_upgrade_until","try_write","try_write_for","try_write_until","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlock","unlock_exclusive","unlock_exclusive_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_fair","unlock_shared","unlock_shared_fair","unlock_upgradable","unlock_upgradable_fair","unlocked","unlocked","unlocked","unlocked","unlocked","unlocked_fair","unlocked_fair","unlocked_fair","unlocked_fair","unlocked_fair","upgradable_read","upgrade","upgrade","write"],"q":["lock_apid":["Duration type used for <code>try_lock_for</code>.","Duration type used for <code>try_lock_for</code>.","Helper trait which returns a non-zero thread ID.","Marker type which determines whether a lock guard should …","Marker type which determines whether a lock guard should …","Marker type which indicates that the Guard type for a lock …","Marker type which indicates that the Guard type for a lock …","Initial value for an unlocked mutex.","Initial value.","Initial value for an unlocked <code>RwLock</code>.","Instant type used for <code>try_lock_until</code>.","Instant type used for <code>try_lock_until</code>.","An RAII mutex guard returned by <code>MutexGuard::map</code>, which can …","An RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …","An RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …","An RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…","A mutual exclusion primitive useful for protecting shared …","An RAII implementation of a “scoped lock” of a mutex. …","Basic operations for a mutex.","Additional methods for mutexes which support fair …","Additional methods for mutexes which support locking with …","Basic operations for a reader-writer lock.","Additional methods for RwLocks which support atomically …","Additional methods for RwLocks which support fair …","Additional methods for RwLocks which support recursive …","Additional methods for RwLocks which support recursive …","Additional methods for RwLocks which support locking with …","Additional methods for RwLocks which support atomically …","Additional methods for RwLocks which support upgradable …","Additional methods for RwLocks which support upgradable …","Additional methods for RwLocks which support upgradable …","A mutex which can be recursively locked by a single thread.","An RAII implementation of a “scoped lock” of a …","A reader-writer lock","RAII structure used to release the shared read access of a …","RAII structure used to release the upgradable read access …","RAII structure used to release the exclusive write access …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the mutex to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields the <code>RwLock</code> to a waiting thread if there …","Temporarily yields an exclusive lock to a waiting thread …","Temporarily yields an exclusive lock to a waiting thread …","Temporarily yields a shared lock to a waiting thread if …","Temporarily yields a shared lock to a waiting thread if …","Temporarily yields an upgradable lock to a waiting thread …","Temporarily yields an upgradable lock to a waiting thread …","","","","","","","","","","","","","","","","","Atomically downgrades an exclusive lock into a shared lock …","Atomically downgrades a write lock into a read lock …","Atomically downgrades an upgradable read lock lock into a …","Atomically downgrades a write lock into a read lock …","Downgrades an exclusive lock to an upgradable lock.","Atomically downgrades a write lock into an upgradable read …","Downgrades an upgradable lock to a shared lock.","","","","","","","","","","","","","Forcibly unlocks the mutex.","Forcibly unlocks the mutex.","Forcibly unlocks the mutex using a fair unlock procotol.","Forcibly unlocks the mutex using a fair unlock protocol.","Forcibly unlocks a read lock.","Forcibly unlocks a read lock using a fair unlock procotol.","Forcibly unlocks a write lock.","Forcibly unlocks a write lock using a fair unlock procotol.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Returns a mutable reference to the underlying data.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this mutex, returning the underlying data.","Consumes this mutex, returning the underlying data.","Consumes this <code>RwLock</code>, returning the underlying data.","Acquires this mutex, blocking the current thread until it …","Acquires a mutex, blocking the current thread until it is …","Acquires a reentrant mutex, blocking the current thread …","Acquires an exclusive lock, blocking the current thread …","Acquires a shared lock, blocking the current thread until …","Acquires a shared lock without deadlocking in case of a …","Acquires an upgradable lock, blocking the current thread …","Makes a new <code>MappedMutexGuard</code> for a component of the locked …","Makes a new <code>MappedMutexGuard</code> for a component of the locked …","Makes a new <code>MappedReentrantMutexGuard</code> for a component of …","Makes a new <code>MappedReentrantMutexGuard</code> for a component of …","Make a new <code>MappedRwLockReadGuard</code> for a component of the …","Make a new <code>MappedRwLockWriteGuard</code> for a component of the …","Make a new <code>MappedRwLockReadGuard</code> for a component of the …","Make a new <code>MappedRwLockWriteGuard</code> for a component of the …","Returns a reference to the original <code>Mutex</code> object.","Creates a new mutex in an unlocked state ready for use.","Creates a new reentrant mutex in an unlocked state ready …","Creates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked.","Returns a non-zero thread ID which identifies the current …","Returns the underlying raw mutex object.","Returns the underlying raw mutex object.","Returns the underlying raw reader-writer lock object.","Locks this <code>RwLock</code> with shared read access, blocking the …","Locks this <code>RwLock</code> with shared read access, blocking the …","Returns a reference to the original <code>ReentrantMutex</code> object.","Returns a reference to the original reader-writer lock …","Returns a reference to the original reader-writer lock …","Returns a reference to the original reader-writer lock …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to acquire this mutex without blocking.","Attempts to acquire this lock.","Attempts to acquire this lock.","Attempts to acquire an exclusive lock without blocking.","Attempts to acquire an exclusive lock until a timeout is …","Attempts to acquire an exclusive lock until a timeout is …","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire a shared lock without blocking.","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock without deadlocking in …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire a shared lock until a timeout is …","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire this lock until a timeout is reached.","Attempts to acquire an upgradable lock without blocking.","Attempts to acquire an upgradable lock until a timeout is …","Attempts to acquire an upgradable lock until a timeout is …","Attempts to make  a new <code>MappedMutexGuard</code> for a component …","Attempts to make  a new <code>MappedMutexGuard</code> for a component …","Attempts to make  a new <code>MappedReentrantMutexGuard</code> for a …","Attempts to make  a new <code>MappedReentrantMutexGuard</code> for a …","Attempts to make  a new <code>MappedRwLockReadGuard</code> for a …","Attempts to make  a new <code>MappedRwLockWriteGuard</code> for a …","Attempts to make  a new <code>MappedRwLockReadGuard</code> for a …","Attempts to make  a new <code>MappedRwLockWriteGuard</code> for a …","Attempts to acquire this <code>RwLock</code> with shared read access.","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access.","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with shared read access …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to acquire this <code>RwLock</code> with upgradable read …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into a …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into a …","Attempts to upgrade an upgradable lock to an exclusive …","Tries to atomically upgrade an upgradable read lock into a …","Attempts to lock this <code>RwLock</code> with exclusive write access.","Attempts to acquire this <code>RwLock</code> with exclusive write …","Attempts to acquire this <code>RwLock</code> with exclusive write …","","","","","","","","","","","","","","","Unlocks this mutex.","Releases an exclusive lock.","Releases an exclusive lock using a fair unlock protocol.","Unlocks this mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the mutex using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Unlocks the <code>RwLock</code> using a fair unlock protocol.","Releases a shared lock.","Releases a shared lock using a fair unlock protocol.","Releases an upgradable lock.","Releases an upgradable lock using a fair unlock protocol.","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the mutex to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Temporarily unlocks the <code>RwLock</code> to execute the given …","Locks this <code>RwLock</code> with upgradable read access, blocking …","Upgrades an upgradable lock to an exclusive lock.","Atomically upgrades an upgradable read lock lock into a …","Locks this <code>RwLock</code> with exclusive write access, blocking …"],"i":[1,2,0,3,4,0,0,3,5,4,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,20,9,12,15,16,17,21,21,21,21,22,22,8,11,14,9,10,12,13,15,16,17,18,19,9,10,16,19,23,16,17,19,24,16,24,9,10,12,13,15,16,17,18,19,8,11,14,8,11,8,11,14,14,14,14,6,7,8,8,8,9,10,11,11,11,12,13,14,14,14,15,16,17,18,19,8,11,14,6,7,8,9,10,11,12,13,14,15,16,17,18,19,8,11,14,3,8,11,4,4,25,26,9,10,12,13,15,16,18,19,9,8,11,14,5,8,11,14,14,14,12,15,16,17,6,7,8,9,10,11,12,13,14,15,16,17,18,19,6,7,8,9,10,11,12,13,14,15,16,17,18,19,3,8,11,4,2,2,1,8,11,4,2,25,27,27,2,1,8,11,26,28,28,9,10,12,13,15,16,18,19,14,14,14,14,14,14,14,14,14,26,17,28,17,28,17,14,14,14,6,7,8,9,10,11,12,13,14,15,16,17,18,19,3,4,21,20,9,10,12,13,15,16,17,18,19,4,21,26,22,9,12,15,16,17,9,12,15,16,17,14,26,17,14],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullmutexguard",3,[["rawmutexfair",8],["sized",8]]]]],[[["reentrantmutexguard",3,[["rawmutexfair",8],["getthreadid",8],["sized",8]]]]],[[["rwlockreadguard",3,[["rawrwlockfair",8],["sized",8]]]]],[[["rwlockwriteguard",3,[["rawrwlockfair",8],["sized",8]]]]],[[["rwlockupgradablereadguard",3,[["rawrwlockupgradefair",8],["sized",8]]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["mutex",3,[["rawmutex",8],["",26,[["sized",8],["default",8]]]]]],[[],["reentrantmutex",3,[["rawmutex",8],["getthreadid",8],["",26,[["sized",8],["default",8]]]]]],[[],["rwlock",3,[["rawrwlock",8],["",26,[["sized",8],["default",8]]]]]],[[["mutexguard",3,[["rawmutex",8],["sized",8]]]],["",0]],[[["mappedmutexguard",3,[["rawmutex",8],["sized",8]]]],["",0]],[[["reentrantmutexguard",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]],["",0]],[[["mappedreentrantmutexguard",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]],["",0]],[[["rwlockreadguard",3,[["rawrwlock",8],["sized",8]]]],["",0]],[[["rwlockwriteguard",3,[["rawrwlock",8],["sized",8]]]],["",0]],[[["rwlockupgradablereadguard",3,[["rawrwlockupgrade",8],["sized",8]]]],["",0]],[[["mappedrwlockreadguard",3,[["rawrwlock",8],["sized",8]]]],["",0]],[[["mappedrwlockwriteguard",3,[["rawrwlock",8],["sized",8]]]],["",0]],[[["mutexguard",3,[["rawmutex",8],["sized",8]]]],["",0]],[[["mappedmutexguard",3,[["rawmutex",8],["sized",8]]]],["",0]],[[["rwlockwriteguard",3,[["rawrwlock",8],["sized",8]]]],["",0]],[[["mappedrwlockwriteguard",3,[["rawrwlock",8],["sized",8]]]],["",0]],[[["",0]]],[[["rwlockwriteguard",3,[["rawrwlockdowngrade",8],["sized",8]]]],["rwlockreadguard",3,[["rawrwlockdowngrade",8],["sized",8]]]],[[["rwlockupgradablereadguard",3,[["rawrwlockupgradedowngrade",8],["sized",8]]]],["rwlockreadguard",3,[["rawrwlockupgradedowngrade",8],["sized",8]]]],[[["mappedrwlockwriteguard",3,[["rawrwlockdowngrade",8],["sized",8]]]],["mappedrwlockreadguard",3,[["rawrwlockdowngrade",8],["sized",8]]]],[[["",0]]],[[["rwlockwriteguard",3,[["rawrwlockupgradedowngrade",8],["sized",8]]]],["rwlockupgradablereadguard",3,[["rawrwlockupgradedowngrade",8],["sized",8]]]],[[["",0]]],[[["mutexguard",3,[["rawmutex",8],["sized",8]]]]],[[["mappedmutexguard",3,[["rawmutex",8],["sized",8]]]]],[[["reentrantmutexguard",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]]],[[["mappedreentrantmutexguard",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]]],[[["rwlockreadguard",3,[["rawrwlock",8],["sized",8]]]]],[[["rwlockwriteguard",3,[["rawrwlock",8],["sized",8]]]]],[[["rwlockupgradablereadguard",3,[["rawrwlockupgrade",8],["sized",8]]]]],[[["mappedrwlockreadguard",3,[["rawrwlock",8],["sized",8]]]]],[[["mappedrwlockwriteguard",3,[["rawrwlock",8],["sized",8]]]]],[[["mutex",3,[["rawmutex",8],["",26,[["sized",8],["debug",8]]]]],["formatter",3]],["result",6]],[[["reentrantmutex",3,[["rawmutex",8],["getthreadid",8],["",26,[["sized",8],["debug",8]]]]],["formatter",3]],["result",6]],[[["rwlock",3,[["rawrwlock",8],["",26,[["sized",8],["debug",8]]]]],["formatter",3]],["result",6]],[[["mutex",3,[["rawmutex",8],["sized",8]]]]],[[["reentrantmutex",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]]],[[["mutex",3,[["rawmutexfair",8],["sized",8]]]]],[[["reentrantmutex",3,[["rawmutexfair",8],["getthreadid",8],["sized",8]]]]],[[["rwlock",3,[["rawrwlock",8],["sized",8]]]]],[[["rwlock",3,[["rawrwlockfair",8],["sized",8]]]]],[[["rwlock",3,[["rawrwlock",8],["sized",8]]]]],[[["rwlock",3,[["rawrwlockfair",8],["sized",8]]]]],[[]],[[]],[[]],[[],["mutex",3,[["rawmutex",8]]]],[[["never",0]]],[[]],[[]],[[],["reentrantmutex",3,[["rawmutex",8],["getthreadid",8]]]],[[["never",0]]],[[]],[[]],[[]],[[]],[[["never",0]]],[[],["rwlock",3,[["rawrwlock",8]]]],[[]],[[]],[[]],[[]],[[]],[[["mutex",3,[["rawmutex",8],["sized",8]]]],["",0]],[[["reentrantmutex",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]],["",0]],[[["rwlock",3,[["rawrwlock",8],["sized",8]]]],["",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["mutex",3,[["rawmutex",8]]]]],[[["reentrantmutex",3,[["rawmutex",8],["getthreadid",8]]]]],[[["rwlock",3,[["rawrwlock",8]]]]],[[["",0]]],[[["mutex",3,[["rawmutex",8],["sized",8]]]],["mutexguard",3,[["rawmutex",8],["sized",8]]]],[[["reentrantmutex",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]],["reentrantmutexguard",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["mutexguard",3,[["rawmutex",8],["sized",8]]]],["mappedmutexguard",3,[["rawmutex",8],["sized",8]]]],[[["mappedmutexguard",3,[["rawmutex",8],["sized",8]]]],["mappedmutexguard",3,[["rawmutex",8],["sized",8]]]],[[["reentrantmutexguard",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]],["mappedreentrantmutexguard",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]],[[["mappedreentrantmutexguard",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]],["mappedreentrantmutexguard",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]],[[["rwlockreadguard",3,[["rawrwlock",8],["sized",8]]]],["mappedrwlockreadguard",3,[["rawrwlock",8],["sized",8]]]],[[["rwlockwriteguard",3,[["rawrwlock",8],["sized",8]]]],["mappedrwlockwriteguard",3,[["rawrwlock",8],["sized",8]]]],[[["mappedrwlockreadguard",3,[["rawrwlock",8],["sized",8]]]],["mappedrwlockreadguard",3,[["rawrwlock",8],["sized",8]]]],[[["mappedrwlockwriteguard",3,[["rawrwlock",8],["sized",8]]]],["mappedrwlockwriteguard",3,[["rawrwlock",8],["sized",8]]]],[[["mutexguard",3,[["rawmutex",8],["sized",8]]]],["mutex",3]],[[],["mutex",3,[["rawmutex",8]]]],[[],["reentrantmutex",3,[["rawmutex",8],["getthreadid",8]]]],[[],["rwlock",3,[["rawrwlock",8]]]],[[["",0]],["usize",0]],[[["mutex",3,[["rawmutex",8],["sized",8]]]],["",0]],[[["reentrantmutex",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]],["",0]],[[["rwlock",3,[["rawrwlock",8],["sized",8]]]],["",0]],[[["rwlock",3,[["rawrwlock",8],["sized",8]]]],["rwlockreadguard",3,[["rawrwlock",8],["sized",8]]]],[[["rwlock",3,[["rawrwlockrecursive",8],["sized",8]]]],["rwlockreadguard",3,[["rawrwlockrecursive",8],["sized",8]]]],[[["reentrantmutexguard",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]],["reentrantmutex",3]],[[["rwlockreadguard",3,[["rawrwlock",8],["sized",8]]]],["rwlock",3]],[[["rwlockwriteguard",3,[["rawrwlock",8],["sized",8]]]],["rwlock",3]],[[["rwlockupgradablereadguard",3,[["rawrwlockupgrade",8],["sized",8]]]],["rwlock",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["bool",0]],[[["mutex",3,[["rawmutex",8],["sized",8]]]],["option",4,[["mutexguard",3,[["rawmutex",8],["sized",8]]]]]],[[["reentrantmutex",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]],["option",4,[["reentrantmutexguard",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["mutex",3,[["rawmutextimed",8],["sized",8]]]],["option",4,[["mutexguard",3,[["rawmutextimed",8],["sized",8]]]]]],[[["reentrantmutex",3,[["rawmutextimed",8],["getthreadid",8],["sized",8]]]],["option",4,[["reentrantmutexguard",3,[["rawmutextimed",8],["getthreadid",8],["sized",8]]]]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["mutex",3,[["rawmutextimed",8],["sized",8]]]],["option",4,[["mutexguard",3,[["rawmutextimed",8],["sized",8]]]]]],[[["reentrantmutex",3,[["rawmutextimed",8],["getthreadid",8],["sized",8]]]],["option",4,[["reentrantmutexguard",3,[["rawmutextimed",8],["getthreadid",8],["sized",8]]]]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["mutexguard",3,[["rawmutex",8],["sized",8]]]],["result",4,[["mappedmutexguard",3,[["rawmutex",8],["sized",8]]],["mutexguard",3,[["rawmutex",8],["sized",8]]]]]],[[["mappedmutexguard",3,[["rawmutex",8],["sized",8]]]],["result",4,[["mappedmutexguard",3,[["rawmutex",8],["sized",8]]],["mappedmutexguard",3,[["rawmutex",8],["sized",8]]]]]],[[["reentrantmutexguard",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]],["result",4,[["mappedreentrantmutexguard",3,[["rawmutex",8],["getthreadid",8],["sized",8]]],["reentrantmutexguard",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]]]],[[["mappedreentrantmutexguard",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]],["result",4,[["mappedreentrantmutexguard",3,[["rawmutex",8],["getthreadid",8],["sized",8]]],["mappedreentrantmutexguard",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]]]],[[["rwlockreadguard",3,[["rawrwlock",8],["sized",8]]]],["result",4,[["mappedrwlockreadguard",3,[["rawrwlock",8],["sized",8]]],["rwlockreadguard",3,[["rawrwlock",8],["sized",8]]]]]],[[["rwlockwriteguard",3,[["rawrwlock",8],["sized",8]]]],["result",4,[["mappedrwlockwriteguard",3,[["rawrwlock",8],["sized",8]]],["rwlockwriteguard",3,[["rawrwlock",8],["sized",8]]]]]],[[["mappedrwlockreadguard",3,[["rawrwlock",8],["sized",8]]]],["result",4,[["mappedrwlockreadguard",3,[["rawrwlock",8],["sized",8]]],["mappedrwlockreadguard",3,[["rawrwlock",8],["sized",8]]]]]],[[["mappedrwlockwriteguard",3,[["rawrwlock",8],["sized",8]]]],["result",4,[["mappedrwlockwriteguard",3,[["rawrwlock",8],["sized",8]]],["mappedrwlockwriteguard",3,[["rawrwlock",8],["sized",8]]]]]],[[["rwlock",3,[["rawrwlock",8],["sized",8]]]],["option",4,[["rwlockreadguard",3,[["rawrwlock",8],["sized",8]]]]]],[[["rwlock",3,[["rawrwlocktimed",8],["sized",8]]]],["option",4,[["rwlockreadguard",3,[["rawrwlocktimed",8],["sized",8]]]]]],[[["rwlock",3,[["rawrwlockrecursive",8],["sized",8]]]],["option",4,[["rwlockreadguard",3,[["rawrwlockrecursive",8],["sized",8]]]]]],[[["rwlock",3,[["rawrwlockrecursivetimed",8],["sized",8]]]],["option",4,[["rwlockreadguard",3,[["rawrwlockrecursivetimed",8],["sized",8]]]]]],[[["rwlock",3,[["rawrwlockrecursivetimed",8],["sized",8]]]],["option",4,[["rwlockreadguard",3,[["rawrwlockrecursivetimed",8],["sized",8]]]]]],[[["rwlock",3,[["rawrwlocktimed",8],["sized",8]]]],["option",4,[["rwlockreadguard",3,[["rawrwlocktimed",8],["sized",8]]]]]],[[["rwlock",3,[["rawrwlockupgrade",8],["sized",8]]]],["option",4,[["rwlockupgradablereadguard",3,[["rawrwlockupgrade",8],["sized",8]]]]]],[[["rwlock",3,[["rawrwlockupgradetimed",8],["sized",8]]]],["option",4,[["rwlockupgradablereadguard",3,[["rawrwlockupgradetimed",8],["sized",8]]]]]],[[["rwlock",3,[["rawrwlockupgradetimed",8],["sized",8]]]],["option",4,[["rwlockupgradablereadguard",3,[["rawrwlockupgradetimed",8],["sized",8]]]]]],[[["",0]],["bool",0]],[[["rwlockupgradablereadguard",3,[["rawrwlockupgrade",8],["sized",8]]]],["result",4,[["rwlockwriteguard",3,[["rawrwlockupgrade",8],["sized",8]]],["rwlockupgradablereadguard",3,[["rawrwlockupgrade",8],["sized",8]]]]]],[[["",0]],["bool",0]],[[["rwlockupgradablereadguard",3,[["rawrwlockupgradetimed",8],["sized",8]]]],["result",4,[["rwlockwriteguard",3,[["rawrwlockupgradetimed",8],["sized",8]]],["rwlockupgradablereadguard",3,[["rawrwlockupgradetimed",8],["sized",8]]]]]],[[["",0]],["bool",0]],[[["rwlockupgradablereadguard",3,[["rawrwlockupgradetimed",8],["sized",8]]]],["result",4,[["rwlockwriteguard",3,[["rawrwlockupgradetimed",8],["sized",8]]],["rwlockupgradablereadguard",3,[["rawrwlockupgradetimed",8],["sized",8]]]]]],[[["rwlock",3,[["rawrwlock",8],["sized",8]]]],["option",4,[["rwlockwriteguard",3,[["rawrwlock",8],["sized",8]]]]]],[[["rwlock",3,[["rawrwlocktimed",8],["sized",8]]]],["option",4,[["rwlockwriteguard",3,[["rawrwlocktimed",8],["sized",8]]]]]],[[["rwlock",3,[["rawrwlocktimed",8],["sized",8]]]],["option",4,[["rwlockwriteguard",3,[["rawrwlocktimed",8],["sized",8]]]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["mutexguard",3,[["rawmutexfair",8],["sized",8]]]]],[[["mappedmutexguard",3,[["rawmutexfair",8],["sized",8]]]]],[[["reentrantmutexguard",3,[["rawmutexfair",8],["getthreadid",8],["sized",8]]]]],[[["mappedreentrantmutexguard",3,[["rawmutexfair",8],["getthreadid",8],["sized",8]]]]],[[["rwlockreadguard",3,[["rawrwlockfair",8],["sized",8]]]]],[[["rwlockwriteguard",3,[["rawrwlockfair",8],["sized",8]]]]],[[["rwlockupgradablereadguard",3,[["rawrwlockupgradefair",8],["sized",8]]]]],[[["mappedrwlockreadguard",3,[["rawrwlockfair",8],["sized",8]]]]],[[["mappedrwlockwriteguard",3,[["rawrwlockfair",8],["sized",8]]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["mutexguard",3,[["rawmutex",8],["sized",8]]]]],[[["reentrantmutexguard",3,[["rawmutex",8],["getthreadid",8],["sized",8]]]]],[[["rwlockreadguard",3,[["rawrwlock",8],["sized",8]]]]],[[["rwlockwriteguard",3,[["rawrwlock",8],["sized",8]]]]],[[["rwlockupgradablereadguard",3,[["rawrwlockupgrade",8],["sized",8]]]]],[[["mutexguard",3,[["rawmutexfair",8],["sized",8]]]]],[[["reentrantmutexguard",3,[["rawmutexfair",8],["getthreadid",8],["sized",8]]]]],[[["rwlockreadguard",3,[["rawrwlockfair",8],["sized",8]]]]],[[["rwlockwriteguard",3,[["rawrwlockfair",8],["sized",8]]]]],[[["rwlockupgradablereadguard",3,[["rawrwlockupgradefair",8],["sized",8]]]]],[[["rwlock",3,[["rawrwlockupgrade",8],["sized",8]]]],["rwlockupgradablereadguard",3,[["rawrwlockupgrade",8],["sized",8]]]],[[["",0]]],[[["rwlockupgradablereadguard",3,[["rawrwlockupgrade",8],["sized",8]]]],["rwlockwriteguard",3,[["rawrwlockupgrade",8],["sized",8]]]],[[["rwlock",3,[["rawrwlock",8],["sized",8]]]],["rwlockwriteguard",3,[["rawrwlock",8],["sized",8]]]]],"p":[[8,"RawMutexTimed"],[8,"RawRwLockTimed"],[8,"RawMutex"],[8,"RawRwLock"],[8,"GetThreadId"],[3,"GuardSend"],[3,"GuardNoSend"],[3,"Mutex"],[3,"MutexGuard"],[3,"MappedMutexGuard"],[3,"ReentrantMutex"],[3,"ReentrantMutexGuard"],[3,"MappedReentrantMutexGuard"],[3,"RwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"RwLockUpgradableReadGuard"],[3,"MappedRwLockReadGuard"],[3,"MappedRwLockWriteGuard"],[8,"RawMutexFair"],[8,"RawRwLockFair"],[8,"RawRwLockUpgradeFair"],[8,"RawRwLockDowngrade"],[8,"RawRwLockUpgradeDowngrade"],[8,"RawRwLockRecursive"],[8,"RawRwLockUpgrade"],[8,"RawRwLockRecursiveTimed"],[8,"RawRwLockUpgradeTimed"]]},\
"log":{"doc":"A lightweight logging facade.","t":[13,13,13,13,13,13,4,4,8,3,3,13,3,3,3,17,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,10,11,11,11,11,11,11,11,14,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,14,14,5,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14],"n":["Debug","Debug","Error","Error","Info","Info","Level","LevelFilter","Log","Metadata","MetadataBuilder","Off","ParseLevelError","Record","RecordBuilder","STATIC_MAX_LEVEL","SetLoggerError","Trace","Trace","Warn","Warn","args","args","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","builder","builder","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","debug","description","description","enabled","eq","eq","eq","eq","eq","eq","eq","error","file","file","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","from_str","ge","ge","ge","ge","gt","gt","gt","gt","hash","hash","hash","hash","info","into","into","into","into","into","into","into","into","le","le","le","le","level","level","level","level","line","line","log","log","log_enabled","logger","lt","lt","lt","lt","max","max","max_level","metadata","metadata","module_path","module_path","ne","ne","ne","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","set_boxed_logger","set_logger","set_max_level","target","target","target","target","to_level","to_level_filter","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","trace","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","warn"],"q":["logd":["The “debug” level.","Corresponds to the <code>Debug</code> log level.","The “error” level.","Corresponds to the <code>Error</code> log level.","The “info” level.","Corresponds to the <code>Info</code> log level.","An enum representing the available verbosity levels of the …","An enum representing the available verbosity level filters …","A trait encapsulating the operations required of a logger.","Metadata about a log message.","Builder for <code>Metadata</code>.","A level lower than all log levels.","The type returned by <code>from_str</code> when the string doesn’t …","The “payload” of a log message.","Builder for <code>Record</code>.","The statically resolved maximum log level.","The type returned by <code>set_logger</code> if <code>set_logger</code> has already …","The “trace” level.","Corresponds to the <code>Trace</code> log level.","The “warn” level.","Corresponds to the <code>Warn</code> log level.","The message body.","Set <code>args</code>.","","","","","","","","","","","","","","","","","Invoke the builder and return a <code>Record</code>","Returns a <code>Metadata</code> object.","Returns a new builder.","Returns a new builder.","","","","","","","","","","","","","Logs a message at the debug level.","","","Determines if a log message with the specified metadata …","","","","","","","","Logs a message at the error level.","The source file containing the message.","Set <code>file</code>","Flushes any buffered records.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Logs a message at the info level.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","The verbosity level of the message.","Set <code>Metadata::level</code>.","The verbosity level of the message.","Setter for <code>level</code>.","The line containing the message.","Set <code>line</code>","Logs the <code>Record</code>.","The standard logging macro.","Determines if a message logged at the specified level in …","Returns a reference to the logger.","","","","","Returns the most verbose logging level.","Returns the most verbose logging level filter.","Returns the current maximum log level.","Metadata about the log directive.","Set <code>metadata</code>. Construct a <code>Metadata</code> object with …","The module path of the message.","Set <code>module_path</code>","","","","Construct new <code>RecordBuilder</code>.","Construct a new <code>MetadataBuilder</code>.","","","","","","","Sets the global logger to a <code>Box&lt;Log&gt;</code>.","Sets the global logger to a <code>&amp;&#39;static Log</code>.","Sets the global maximum log level.","The name of the target of the directive.","Set <code>Metadata::target</code>","The name of the target of the directive.","Setter for <code>target</code>.","Converts <code>self</code> to the equivalent <code>Level</code>.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","","","","","","","","","Logs a message at the trace level.","","","","","","","","","","","","","","","","","","","","","","","","","Logs a message at the warn level."],"i":[1,2,1,2,1,2,0,0,0,0,0,2,0,0,0,0,0,1,2,1,2,3,4,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,4,6,3,5,1,2,3,5,1,2,3,5,1,2,5,6,0,7,8,9,1,1,2,2,5,6,8,0,3,4,9,1,1,2,2,3,4,5,6,7,7,8,8,1,2,3,4,5,6,7,8,1,2,1,1,2,2,1,1,2,2,1,2,5,6,0,1,2,3,4,5,6,7,8,1,1,2,2,3,4,5,6,3,4,9,0,0,0,1,1,2,2,1,2,0,3,4,3,4,5,6,8,4,6,1,1,2,2,5,6,0,0,0,3,4,5,6,2,1,1,2,3,5,1,2,7,8,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["record",3]],["arguments",3]],[[["recordbuilder",3],["arguments",3]],["recordbuilder",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["recordbuilder",3]],["record",3]],[[["metadatabuilder",3]],["metadata",3]],[[],["recordbuilder",3]],[[],["metadatabuilder",3]],[[["level",4]],["level",4]],[[["levelfilter",4]],["levelfilter",4]],[[["record",3]],["record",3]],[[["metadata",3]],["metadata",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["level",4],["level",4]],["ordering",4]],[[["levelfilter",4],["levelfilter",4]],["ordering",4]],[[["metadata",3],["metadata",3]],["ordering",4]],[[["metadatabuilder",3],["metadatabuilder",3]],["ordering",4]],null,[[["setloggererror",3]],["str",0]],[[["parselevelerror",3]],["str",0]],[[["",0],["metadata",3]],["bool",0]],[[["level",4],["levelfilter",4]],["bool",0]],[[["level",4],["level",4]],["bool",0]],[[["levelfilter",4],["level",4]],["bool",0]],[[["levelfilter",4],["levelfilter",4]],["bool",0]],[[["metadata",3],["metadata",3]],["bool",0]],[[["metadatabuilder",3],["metadatabuilder",3]],["bool",0]],[[["parselevelerror",3],["parselevelerror",3]],["bool",0]],null,[[["record",3]],["option",4,[["str",0]]]],[[["recordbuilder",3],["option",4,[["str",0]]]],["recordbuilder",3]],[[["",0]]],[[["level",4],["formatter",3]],["result",6]],[[["level",4],["formatter",3]],["result",6]],[[["levelfilter",4],["formatter",3]],["result",6]],[[["levelfilter",4],["formatter",3]],["result",6]],[[["record",3],["formatter",3]],["result",6]],[[["recordbuilder",3],["formatter",3]],["result",6]],[[["metadata",3],["formatter",3]],["result",6]],[[["metadatabuilder",3],["formatter",3]],["result",6]],[[["setloggererror",3],["formatter",3]],["result",6]],[[["setloggererror",3],["formatter",3]],["result",6]],[[["parselevelerror",3],["formatter",3]],["result",6]],[[["parselevelerror",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",0]],["result",4,[["level",4]]]],[[["str",0]],["result",4,[["levelfilter",4]]]],[[["level",4],["levelfilter",4]],["bool",0]],[[["level",4],["level",4]],["bool",0]],[[["levelfilter",4],["level",4]],["bool",0]],[[["levelfilter",4],["levelfilter",4]],["bool",0]],[[["level",4],["levelfilter",4]],["bool",0]],[[["level",4],["level",4]],["bool",0]],[[["levelfilter",4],["level",4]],["bool",0]],[[["levelfilter",4],["levelfilter",4]],["bool",0]],[[["level",4],["",0]]],[[["levelfilter",4],["",0]]],[[["metadata",3],["",0]]],[[["metadatabuilder",3],["",0]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["level",4],["levelfilter",4]],["bool",0]],[[["level",4],["level",4]],["bool",0]],[[["levelfilter",4],["levelfilter",4]],["bool",0]],[[["levelfilter",4],["level",4]],["bool",0]],[[["record",3]],["level",4]],[[["recordbuilder",3],["level",4]],["recordbuilder",3]],[[["metadata",3]],["level",4]],[[["metadatabuilder",3],["level",4]],["metadatabuilder",3]],[[["record",3]],["option",4,[["u32",0]]]],[[["recordbuilder",3],["option",4,[["u32",0]]]],["recordbuilder",3]],[[["",0],["record",3]]],null,null,[[],["log",8]],[[["level",4],["level",4]],["bool",0]],[[["level",4],["levelfilter",4]],["bool",0]],[[["levelfilter",4],["levelfilter",4]],["bool",0]],[[["levelfilter",4],["level",4]],["bool",0]],[[],["level",4]],[[],["levelfilter",4]],[[],["levelfilter",4]],[[["record",3]],["metadata",3]],[[["recordbuilder",3],["metadata",3]],["recordbuilder",3]],[[["record",3]],["option",4,[["str",0]]]],[[["recordbuilder",3],["option",4,[["str",0]]]],["recordbuilder",3]],[[["metadata",3],["metadata",3]],["bool",0]],[[["metadatabuilder",3],["metadatabuilder",3]],["bool",0]],[[["parselevelerror",3],["parselevelerror",3]],["bool",0]],[[],["recordbuilder",3]],[[],["metadatabuilder",3]],[[["level",4],["level",4]],["option",4,[["ordering",4]]]],[[["level",4],["levelfilter",4]],["option",4,[["ordering",4]]]],[[["levelfilter",4],["levelfilter",4]],["option",4,[["ordering",4]]]],[[["levelfilter",4],["level",4]],["option",4,[["ordering",4]]]],[[["metadata",3],["metadata",3]],["option",4,[["ordering",4]]]],[[["metadatabuilder",3],["metadatabuilder",3]],["option",4,[["ordering",4]]]],[[["box",3,[["log",8]]]],["result",4,[["setloggererror",3]]]],[[["log",8]],["result",4,[["setloggererror",3]]]],[[["levelfilter",4]]],[[["record",3]],["str",0]],[[["recordbuilder",3],["str",0]],["recordbuilder",3]],[[["metadata",3]],["str",0]],[[["metadatabuilder",3],["str",0]],["metadatabuilder",3]],[[["levelfilter",4]],["option",4,[["level",4]]]],[[["level",4]],["levelfilter",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null],"p":[[4,"Level"],[4,"LevelFilter"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"],[8,"Log"]]},\
"matches":{"doc":"","t":[14,14,14],"n":["assert_matches","debug_assert_matches","matches"],"q":["matches","",""],"d":["Assert that an expression matches a refutable pattern.","Assert that an expression matches a refutable pattern …","Check if an expression matches a refutable pattern."],"i":[0,0,0],"f":[null,null,null],"p":[]},\
"memoffset":{"doc":"A crate used for calculating offsets of struct members and …","t":[14,14],"n":["offset_of","span_of"],"q":["memoffset",""],"d":["Calculates the offset of the specified field from the …","Produces a range instance representing the sub-slice …"],"i":[0,0],"f":[null,null],"p":[]},\
"mio":{"doc":"A fast, low-level IO library for Rust focusing on …","t":[12,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,3,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["0","Events","Poll","PollOpt","Ready","Registration","SetReadiness","Token","all","as_raw_fd","as_usize","bitand","bitand","bitand_assign","bitor","bitor","bitor_assign","bitxor","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","contains","contains","deregister","deregister","drop","edge","empty","empty","eq","eq","eq","event","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_usize","hash","insert","insert","into","into","into","into","into","into","is_edge","is_empty","is_level","is_oneshot","is_readable","is_writable","level","ne","ne","ne","net","new","new2","oneshot","partial_cmp","partial_cmp","partial_cmp","poll","poll_interruptible","readable","readiness","register","register","remove","remove","reregister","reregister","set_readiness","sub","sub","sub_assign","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unix","writable","Event","Evented","Events","Iter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone","clone_into","clone_into","deregister","eq","fmt","fmt","fmt","from","from","from","into","into","into","into_iter","into_iter","into_iter","is_empty","iter","ne","new","next","readiness","register","reregister","to_owned","to_owned","token","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_capacity","TcpListener","TcpStream","UdpSocket","accept","accept_std","as_raw_fd","as_raw_fd","as_raw_fd","bind","bind","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","broadcast","connect","connect","connect_stream","deregister","deregister","deregister","flush","flush","fmt","fmt","fmt","from","from","from","from_raw_fd","from_raw_fd","from_raw_fd","from_socket","from_std","from_stream","into","into","into","into_raw_fd","into_raw_fd","into_raw_fd","join_multicast_v4","join_multicast_v6","keepalive","leave_multicast_v4","leave_multicast_v6","linger","local_addr","local_addr","local_addr","multicast_loop_v4","multicast_loop_v6","multicast_ttl_v4","nodelay","only_v6","only_v6","only_v6","peek","peer_addr","read","read","read_bufs","recv","recv_buffer_size","recv_from","register","register","register","reregister","reregister","reregister","send","send_buffer_size","send_to","set_broadcast","set_keepalive","set_linger","set_multicast_loop_v4","set_multicast_loop_v6","set_multicast_ttl_v4","set_nodelay","set_only_v6","set_only_v6","set_only_v6","set_recv_buffer_size","set_send_buffer_size","set_ttl","set_ttl","set_ttl","shutdown","take_error","take_error","take_error","try_clone","try_clone","try_clone","try_from","try_from","try_from","try_into","try_into","try_into","ttl","ttl","ttl","type_id","type_id","type_id","write","write","write_bufs","0","EventedFd","UnixReady","aio","bitand","bitor","bitxor","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","deref","deref_mut","deregister","eq","error","fmt","fmt","from","from","from","hup","into","into","is_aio","is_error","is_hup","ne","partial_cmp","register","reregister","sub","to_owned","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["mio","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mio::event","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mio::net","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","mio::unix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A collection of readiness events.","Polls for readiness events on all registered values.","Options supplied when registering an <code>Evented</code> handle with …","A set of readiness event kinds","Handle to a user space <code>Poll</code> registration.","Updates the readiness state of the associated <code>Registration</code>.","Associates readiness notifications with <code>Evented</code> handles.","Returns a <code>Ready</code> representing readiness for all operations.","","Returns a <code>usize</code> representation of the <code>Ready</code> value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if <code>self</code> is a superset of <code>other</code>.","Returns true if <code>self</code> is a superset of <code>other</code>.","Deregister an <code>Evented</code> handle with the <code>Poll</code> instance.","","","Return a <code>PollOpt</code> representing edge-triggered notifications.","Return a <code>PollOpt</code> representing no set options.","Returns the empty <code>Ready</code> set.","","","","Readiness event types and utilities.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Create a <code>Ready</code> instance using the given <code>usize</code> …","","Adds all options represented by <code>other</code> into <code>self</code>.","Adds all readiness represented by <code>other</code> into <code>self</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the options include edge-triggered …","Returns true if <code>Ready</code> is the empty set","Returns true if the options include level-triggered …","Returns true if the options includes oneshot.","Returns true if the value includes readable readiness","Returns true if the value includes writable readiness","Return a <code>PollOpt</code> representing level-triggered …","","","","Networking primitives","Return a new <code>Poll</code> handle.","Create and return a new <code>Registration</code> and the associated …","Return a <code>PollOpt</code> representing oneshot notifications.","","","","Wait for readiness events","Like <code>poll</code>, but may be interrupted by a signal","Returns a <code>Ready</code> representing readable readiness.","Returns the registration’s current readiness.","Register an <code>Evented</code> handle with the <code>Poll</code> instance.","","Removes all options represented by <code>other</code> from <code>self</code>.","Removes all options represented by <code>other</code> from <code>self</code>.","Re-register an <code>Evented</code> handle with the <code>Poll</code> instance.","","Set the registration’s readiness","","","","","","","","","","","","","","","","","","","","","","","","","","Unix only extensions","Returns a <code>Ready</code> representing writable readiness.","An readiness event returned by <code>Poll::poll</code>.","A value that may be registered with <code>Poll</code>","A collection of readiness events.","<code>Events</code> iterator.","","","","","","","Returns the number of <code>Event</code> values that <code>self</code> can hold.","Clearing all <code>Event</code> values from container explicitly.","","","","","Deregister <code>self</code> from the given <code>Poll</code> instance","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns <code>true</code> if <code>self</code> contains no <code>Event</code> values.","Returns an iterator over the <code>Event</code> values.","","Creates a new <code>Event</code> containing <code>readiness</code> and <code>token</code>","","Returns the event’s readiness.","Register <code>self</code> with the given <code>Poll</code> instance.","Re-register <code>self</code> with the given <code>Poll</code> instance.","","","Returns the event’s token.","","","","","","","","","","Return a new <code>Events</code> capable of holding up to <code>capacity</code> …","A structure representing a socket server","A non-blocking TCP stream between a local socket and a …","A User Datagram Protocol socket.","Accepts a new <code>TcpStream</code>.","Accepts a new <code>std::net::TcpStream</code>.","","","","Convenience method to bind a new TCP listener to the …","Creates a UDP socket from the given address.","","","","","","","Gets the value of the <code>SO_BROADCAST</code> option for this socket.","Create a new TCP stream and issue a non-blocking connect …","Connects the UDP socket setting the default destination …","Creates a new <code>TcpStream</code> from the pending socket inside the …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Creates a new mio-wrapped socket from an underlying and …","Creates a new <code>TcpListener</code> from an instance of a …","Creates a new <code>TcpStream</code> from a standard <code>net::TcpStream</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Executes an operation of the <code>IP_ADD_MEMBERSHIP</code> type.","Executes an operation of the <code>IPV6_ADD_MEMBERSHIP</code> type.","Returns whether keepalive messages are enabled on this …","Executes an operation of the <code>IP_DROP_MEMBERSHIP</code> type.","Executes an operation of the <code>IPV6_DROP_MEMBERSHIP</code> type.","Gets the value of the <code>SO_LINGER</code> option on this socket.","Returns the socket address of the local half of this TCP …","Returns the local socket address of this listener.","Returns the socket address that this socket was created …","Gets the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Gets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Gets the value of the <code>IP_MULTICAST_TTL</code> option for this …","Gets the value of the <code>TCP_NODELAY</code> option on this socket.","Gets the value of the <code>IPV6_V6ONLY</code> option for this socket.","Gets the value of the <code>IPV6_V6ONLY</code> option for this socket.","Gets the value of the <code>IPV6_V6ONLY</code> option for this socket.","Receives data on the socket from the remote address to …","Returns the socket address of the remote peer of this TCP …","","","Read in a list of buffers all at once.","Receives data from the socket previously bound with …","Gets the value of the <code>SO_RCVBUF</code> option on this socket.","Receives data from the socket. On success, returns the …","","","","","","","Sends data on the socket to the address previously bound …","Gets the value of the <code>SO_SNDBUF</code> option on this socket.","Sends data on the socket to the given address. On success, …","Sets the value of the <code>SO_BROADCAST</code> option for this socket.","Sets whether keepalive messages are enabled to be sent on …","Sets the value for the <code>SO_LINGER</code> option on this socket.","Sets the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Sets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Sets the value of the <code>IP_MULTICAST_TTL</code> option for this …","Sets the value of the <code>TCP_NODELAY</code> option on this socket.","Sets the value for the <code>IPV6_V6ONLY</code> option on this socket.","Sets the value for the <code>IPV6_V6ONLY</code> option on this socket.","Sets the value for the <code>IPV6_V6ONLY</code> option on this socket.","Sets the value of the <code>SO_RCVBUF</code> option on this socket.","Sets the value of the <code>SO_SNDBUF</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Shuts down the read, write, or both halves of this …","Get the value of the <code>SO_ERROR</code> option on this socket.","Get the value of the <code>SO_ERROR</code> option on this socket.","Get the value of the <code>SO_ERROR</code> option on this socket.","Creates a new independently owned handle to the underlying …","Creates a new independently owned handle to the underlying …","Creates a new independently owned handle to the underlying …","","","","","","","Gets the value of the <code>IP_TTL</code> option for this socket.","Gets the value of the <code>IP_TTL</code> option for this socket.","Gets the value of the <code>IP_TTL</code> option for this socket.","","","","","","Write a list of buffers all at once.","","Adapter for <code>RawFd</code> providing an <code>Evented</code> implementation.","Unix specific extensions to <code>Ready</code>","Returns a <code>Ready</code> representing AIO completion readiness","","","","","","","","","","","","","","","Returns a <code>Ready</code> representing error readiness.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a <code>Ready</code> representing HUP readiness.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if <code>Ready</code> contains AIO readiness","Returns true if the value includes error readiness","Returns true if the value includes HUP readiness","","","","","","","","","","","",""],"i":[1,0,0,0,0,0,0,0,2,3,2,4,2,2,4,2,2,4,2,2,3,5,4,2,6,1,3,5,4,2,6,1,4,2,6,1,4,2,6,1,4,2,1,4,2,3,5,5,4,4,2,4,2,1,0,3,5,4,2,6,1,3,5,4,2,2,6,1,1,2,1,4,2,3,5,4,2,6,1,4,2,4,4,2,2,4,4,2,1,0,3,5,4,4,2,1,3,3,2,6,3,5,4,2,3,5,6,4,2,2,4,2,6,1,3,5,4,2,6,1,3,5,4,2,6,1,3,5,4,2,6,1,0,2,0,0,0,0,7,8,9,7,8,9,7,7,8,9,8,9,10,8,7,8,9,7,8,9,7,8,9,7,7,9,7,7,8,8,9,8,10,10,8,9,8,7,8,9,7,8,9,7,8,9,7,0,0,0,11,11,12,11,13,11,13,12,11,13,12,11,13,13,12,13,12,12,11,13,12,12,12,11,13,12,11,13,12,11,13,13,11,12,12,11,13,12,11,13,13,13,12,13,13,12,12,11,13,13,13,13,12,12,11,13,12,12,12,12,12,13,12,13,12,11,13,12,11,13,13,12,13,13,12,12,13,13,13,12,12,11,13,12,12,12,11,13,12,12,11,13,12,11,13,12,11,13,12,11,13,12,11,13,12,11,13,12,12,12,14,0,0,15,15,15,15,14,15,14,15,15,15,15,15,15,14,15,15,14,15,14,15,15,15,14,15,15,15,15,15,15,14,14,15,15,14,15,14,15,14,15],"f":[null,null,null,null,null,null,null,null,[[],["ready",3]],[[["poll",3]],["rawfd",6]],[[["ready",3]],["usize",0]],[[["pollopt",3],["pollopt",3]],["pollopt",3]],[[["ready",3],["into",8,[["ready",3]]]],["ready",3]],[[["ready",3],["into",8,[["ready",3]]]]],[[["pollopt",3],["pollopt",3]],["pollopt",3]],[[["ready",3],["into",8,[["ready",3]]]],["ready",3]],[[["ready",3],["into",8,[["ready",3]]]]],[[["pollopt",3],["pollopt",3]],["pollopt",3]],[[["ready",3],["into",8,[["ready",3]]]],["ready",3]],[[["ready",3],["into",8,[["ready",3]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["pollopt",3]],["pollopt",3]],[[["ready",3]],["ready",3]],[[["setreadiness",3]],["setreadiness",3]],[[["token",3]],["token",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["pollopt",3],["pollopt",3]],["ordering",4]],[[["ready",3],["ready",3]],["ordering",4]],[[["token",3],["token",3]],["ordering",4]],[[["pollopt",3],["pollopt",3]],["bool",0]],[[["ready",3],["into",8,[["ready",3]]]],["bool",0]],[[["poll",3],["",0]],["result",6]],[[["registration",3],["poll",3]],["result",6]],[[["registration",3]]],[[],["pollopt",3]],[[],["pollopt",3]],[[],["ready",3]],[[["pollopt",3],["pollopt",3]],["bool",0]],[[["ready",3],["ready",3]],["bool",0]],[[["token",3],["token",3]],["bool",0]],null,[[["poll",3],["formatter",3]],["result",6]],[[["registration",3],["formatter",3]],["result",6]],[[["pollopt",3],["formatter",3]],["result",6]],[[["ready",3],["formatter",3]],["result",6]],[[["setreadiness",3],["formatter",3]],["result",6]],[[["token",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["unixready",3]],["ready",3]],[[]],[[]],[[]],[[["usize",0]],["token",3]],[[["usize",0]],["ready",3]],[[["token",3],["",0]]],[[["pollopt",3],["pollopt",3]]],[[["ready",3],["into",8,[["ready",3]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pollopt",3]],["bool",0]],[[["ready",3]],["bool",0]],[[["pollopt",3]],["bool",0]],[[["pollopt",3]],["bool",0]],[[["ready",3]],["bool",0]],[[["ready",3]],["bool",0]],[[],["pollopt",3]],[[["pollopt",3],["pollopt",3]],["bool",0]],[[["ready",3],["ready",3]],["bool",0]],[[["token",3],["token",3]],["bool",0]],null,[[],["result",6,[["poll",3]]]],[[]],[[],["pollopt",3]],[[["pollopt",3],["pollopt",3]],["option",4,[["ordering",4]]]],[[["ready",3],["ready",3]],["option",4,[["ordering",4]]]],[[["token",3],["token",3]],["option",4,[["ordering",4]]]],[[["poll",3],["events",3],["option",4,[["duration",3]]]],["result",6,[["usize",0]]]],[[["poll",3],["events",3],["option",4,[["duration",3]]]],["result",6,[["usize",0]]]],[[],["ready",3]],[[["setreadiness",3]],["ready",3]],[[["poll",3],["",0],["token",3],["ready",3],["pollopt",3]],["result",6]],[[["registration",3],["poll",3],["token",3],["ready",3],["pollopt",3]],["result",6]],[[["pollopt",3],["pollopt",3]]],[[["ready",3],["into",8,[["ready",3]]]]],[[["poll",3],["",0],["token",3],["ready",3],["pollopt",3]],["result",6]],[[["registration",3],["poll",3],["token",3],["ready",3],["pollopt",3]],["result",6]],[[["setreadiness",3],["ready",3]],["result",6]],[[["pollopt",3],["pollopt",3]],["pollopt",3]],[[["ready",3],["into",8,[["ready",3]]]],["ready",3]],[[["ready",3],["into",8,[["ready",3]]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[],["ready",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["events",3]],["usize",0]],[[["events",3]]],[[["event",3]],["event",3]],[[["iter",3]],["iter",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["poll",3]],["result",6]],[[["event",3],["event",3]],["bool",0]],[[["events",3],["formatter",3]],["result",6]],[[["event",3],["formatter",3]],["result",6]],[[["iter",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["events",3]]],[[["events",3]]],[[]],[[["events",3]],["bool",0]],[[["events",3]],["iter",3]],[[["event",3],["event",3]],["bool",0]],[[["ready",3],["token",3]],["event",3]],[[["iter",3]],["option",4,[["event",3]]]],[[["event",3]],["ready",3]],[[["",0],["poll",3],["token",3],["ready",3],["pollopt",3]],["result",6]],[[["",0],["poll",3],["token",3],["ready",3],["pollopt",3]],["result",6]],[[["",0]]],[[["",0]]],[[["event",3]],["token",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["usize",0]],["events",3]],null,null,null,[[["tcplistener",3]],["result",6]],[[["tcplistener",3]],["result",6]],[[["tcpstream",3]],["rawfd",6]],[[["tcplistener",3]],["rawfd",6]],[[["udpsocket",3]],["rawfd",6]],[[["socketaddr",4]],["result",6,[["tcplistener",3]]]],[[["socketaddr",4]],["result",6,[["udpsocket",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["udpsocket",3]],["result",6,[["bool",0]]]],[[["socketaddr",4]],["result",6,[["tcpstream",3]]]],[[["udpsocket",3],["socketaddr",4]],["result",6]],[[["tcpstream",3],["socketaddr",4]],["result",6,[["tcpstream",3]]]],[[["tcpstream",3],["poll",3]],["result",6]],[[["tcplistener",3],["poll",3]],["result",6]],[[["udpsocket",3],["poll",3]],["result",6]],[[["tcpstream",3]],["result",6]],[[["tcpstream",3]],["result",6]],[[["tcpstream",3],["formatter",3]],["result",6]],[[["tcplistener",3],["formatter",3]],["result",6]],[[["udpsocket",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["rawfd",6]],["tcpstream",3]],[[["rawfd",6]],["tcplistener",3]],[[["rawfd",6]],["udpsocket",3]],[[["udpsocket",3]],["result",6,[["udpsocket",3]]]],[[["tcplistener",3]],["result",6,[["tcplistener",3]]]],[[["tcpstream",3]],["result",6,[["tcpstream",3]]]],[[]],[[]],[[]],[[["tcpstream",3]],["rawfd",6]],[[["tcplistener",3]],["rawfd",6]],[[["udpsocket",3]],["rawfd",6]],[[["udpsocket",3],["ipv4addr",3],["ipv4addr",3]],["result",6]],[[["udpsocket",3],["ipv6addr",3],["u32",0]],["result",6]],[[["tcpstream",3]],["result",6,[["option",4,[["duration",3]]]]]],[[["udpsocket",3],["ipv4addr",3],["ipv4addr",3]],["result",6]],[[["udpsocket",3],["ipv6addr",3],["u32",0]],["result",6]],[[["tcpstream",3]],["result",6,[["option",4,[["duration",3]]]]]],[[["tcpstream",3]],["result",6,[["socketaddr",4]]]],[[["tcplistener",3]],["result",6,[["socketaddr",4]]]],[[["udpsocket",3]],["result",6,[["socketaddr",4]]]],[[["udpsocket",3]],["result",6,[["bool",0]]]],[[["udpsocket",3]],["result",6,[["bool",0]]]],[[["udpsocket",3]],["result",6,[["u32",0]]]],[[["tcpstream",3]],["result",6,[["bool",0]]]],[[["tcpstream",3]],["result",6,[["bool",0]]]],[[["tcplistener",3]],["result",6,[["bool",0]]]],[[["udpsocket",3]],["result",6,[["bool",0]]]],[[["tcpstream",3]],["result",6,[["usize",0]]]],[[["tcpstream",3]],["result",6,[["socketaddr",4]]]],[[["tcpstream",3]],["result",6,[["usize",0]]]],[[["tcpstream",3]],["result",6,[["usize",0]]]],[[["tcpstream",3]],["result",6,[["usize",0]]]],[[["udpsocket",3]],["result",6,[["usize",0]]]],[[["tcpstream",3]],["result",6,[["usize",0]]]],[[["udpsocket",3]],["result",6]],[[["tcpstream",3],["poll",3],["token",3],["ready",3],["pollopt",3]],["result",6]],[[["tcplistener",3],["poll",3],["token",3],["ready",3],["pollopt",3]],["result",6]],[[["udpsocket",3],["poll",3],["token",3],["ready",3],["pollopt",3]],["result",6]],[[["tcpstream",3],["poll",3],["token",3],["ready",3],["pollopt",3]],["result",6]],[[["tcplistener",3],["poll",3],["token",3],["ready",3],["pollopt",3]],["result",6]],[[["udpsocket",3],["poll",3],["token",3],["ready",3],["pollopt",3]],["result",6]],[[["udpsocket",3]],["result",6,[["usize",0]]]],[[["tcpstream",3]],["result",6,[["usize",0]]]],[[["udpsocket",3],["socketaddr",4]],["result",6,[["usize",0]]]],[[["udpsocket",3],["bool",0]],["result",6]],[[["tcpstream",3],["option",4,[["duration",3]]]],["result",6]],[[["tcpstream",3],["option",4,[["duration",3]]]],["result",6]],[[["udpsocket",3],["bool",0]],["result",6]],[[["udpsocket",3],["bool",0]],["result",6]],[[["udpsocket",3],["u32",0]],["result",6]],[[["tcpstream",3],["bool",0]],["result",6]],[[["tcpstream",3],["bool",0]],["result",6]],[[["tcplistener",3],["bool",0]],["result",6]],[[["udpsocket",3],["bool",0]],["result",6]],[[["tcpstream",3],["usize",0]],["result",6]],[[["tcpstream",3],["usize",0]],["result",6]],[[["tcpstream",3],["u32",0]],["result",6]],[[["tcplistener",3],["u32",0]],["result",6]],[[["udpsocket",3],["u32",0]],["result",6]],[[["tcpstream",3],["shutdown",4]],["result",6]],[[["tcpstream",3]],["result",6,[["option",4,[["error",3]]]]]],[[["tcplistener",3]],["result",6,[["option",4,[["error",3]]]]]],[[["udpsocket",3]],["result",6,[["option",4,[["error",3]]]]]],[[["tcpstream",3]],["result",6,[["tcpstream",3]]]],[[["tcplistener",3]],["result",6,[["tcplistener",3]]]],[[["udpsocket",3]],["result",6,[["udpsocket",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["tcpstream",3]],["result",6,[["u32",0]]]],[[["tcplistener",3]],["result",6,[["u32",0]]]],[[["udpsocket",3]],["result",6,[["u32",0]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["tcpstream",3]],["result",6,[["usize",0]]]],[[["tcpstream",3]],["result",6,[["usize",0]]]],[[["tcpstream",3]],["result",6,[["usize",0]]]],null,null,null,[[],["unixready",3]],[[["unixready",3],["unixready",3]],["unixready",3]],[[["unixready",3],["unixready",3]],["unixready",3]],[[["unixready",3],["unixready",3]],["unixready",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["unixready",3]],["unixready",3]],[[["",0],["",0]]],[[["unixready",3],["unixready",3]],["ordering",4]],[[["unixready",3]],["ready",3]],[[["unixready",3]],["ready",3]],[[["eventedfd",3],["poll",3]],["result",6]],[[["unixready",3],["unixready",3]],["bool",0]],[[],["unixready",3]],[[["eventedfd",3],["formatter",3]],["result",6]],[[["unixready",3],["formatter",3]],["result",6]],[[]],[[]],[[["ready",3]],["unixready",3]],[[],["unixready",3]],[[]],[[]],[[["unixready",3]],["bool",0]],[[["unixready",3]],["bool",0]],[[["unixready",3]],["bool",0]],[[["unixready",3],["unixready",3]],["bool",0]],[[["unixready",3],["unixready",3]],["option",4,[["ordering",4]]]],[[["eventedfd",3],["poll",3],["token",3],["ready",3],["pollopt",3]],["result",6]],[[["eventedfd",3],["poll",3],["token",3],["ready",3],["pollopt",3]],["result",6]],[[["unixready",3],["unixready",3]],["unixready",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"Token"],[3,"Ready"],[3,"Poll"],[3,"PollOpt"],[3,"Registration"],[3,"SetReadiness"],[3,"Events"],[3,"Event"],[3,"Iter"],[8,"Evented"],[3,"TcpListener"],[3,"TcpStream"],[3,"UdpSocket"],[3,"EventedFd"],[3,"UnixReady"]]},\
"mio_uds":{"doc":"MIO bindings for Unix Domain Sockets","t":[3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["UnixDatagram","UnixListener","UnixStream","accept","accept_std","as_raw_fd","as_raw_fd","as_raw_fd","bind","bind","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","connect","connect","deregister","deregister","deregister","flush","flush","fmt","fmt","fmt","from","from","from","from_datagram","from_listener","from_raw_fd","from_raw_fd","from_raw_fd","from_stream","into","into","into","into_raw_fd","into_raw_fd","into_raw_fd","local_addr","local_addr","local_addr","pair","pair","peer_addr","peer_addr","read","read","read_bufs","recv","recv_from","register","register","register","reregister","reregister","reregister","send","send_to","shutdown","shutdown","take_error","take_error","take_error","try_clone","try_clone","try_clone","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unbound","write","write","write_bufs"],"q":["mio_uds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A Unix datagram socket.","A structure representing a Unix domain socket server.","A Unix stream socket.","Accepts a new incoming connection to this listener.","Accepts a new incoming connection to this listener.","","","","Creates a Unix datagram socket bound to the given path.","Creates a new <code>UnixListener</code> bound to the specified socket.","","","","","","","Connects the socket to the specified address.","Connects to the socket named by <code>path</code>.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Consumes a standard library <code>UnixDatagram</code> and returns a …","Consumes a standard library <code>UnixListener</code> and returns a …","","","","Consumes a standard library <code>UnixStream</code> and returns a …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns the address of this socket.","Returns the local socket address of this listener.","Returns the socket address of the local half of this …","Create an unnamed pair of connected sockets.","Creates an unnamed pair of connected sockets.","Returns the address of this socket’s peer.","Returns the socket address of the remote half of this …","","","Read in a list of buffers all at once.","Receives data from the socket.","Receives data from the socket.","","","","","","","Sends data on the socket to the socket’s peer.","Sends data on the socket to the specified address.","Shut down the read, write, or both halves of this …","Shuts down the read, write, or both halves of this …","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","Creates a new independently owned handle to the underlying …","Creates a new independently owned handle to the underlying …","Creates a new independently owned handle to the underlying …","","","","","","","","","","Creates a Unix Datagram socket which is not bound to any …","","","Write a list of buffers all at once."],"i":[0,0,0,1,1,2,1,3,2,1,2,1,3,2,1,3,2,3,2,1,3,3,3,2,1,3,2,1,3,2,1,2,1,3,3,2,1,3,2,1,3,2,1,3,2,3,2,3,3,3,3,2,2,2,1,3,2,1,3,2,2,2,3,2,1,3,2,1,3,2,1,3,2,1,3,2,1,3,2,3,3,3],"f":[null,null,null,[[["unixlistener",3]],["result",6,[["option",4]]]],[[["unixlistener",3]],["result",6,[["option",4]]]],[[["unixdatagram",3]],["i32",0]],[[["unixlistener",3]],["i32",0]],[[["unixstream",3]],["i32",0]],[[["asref",8,[["path",3]]]],["result",6,[["unixdatagram",3]]]],[[["asref",8,[["path",3]]]],["result",6,[["unixlistener",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["unixdatagram",3],["asref",8,[["path",3]]]],["result",6]],[[["asref",8,[["path",3]]]],["result",6,[["unixstream",3]]]],[[["unixdatagram",3],["poll",3]],["result",6]],[[["unixlistener",3],["poll",3]],["result",6]],[[["unixstream",3],["poll",3]],["result",6]],[[["unixstream",3]],["result",6]],[[["unixstream",3]],["result",6]],[[["unixdatagram",3],["formatter",3]],["result",6]],[[["unixlistener",3],["formatter",3]],["result",6]],[[["unixstream",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["unixdatagram",3]],["result",6,[["unixdatagram",3]]]],[[["unixlistener",3]],["result",6,[["unixlistener",3]]]],[[["i32",0]],["unixdatagram",3]],[[["i32",0]],["unixlistener",3]],[[["i32",0]],["unixstream",3]],[[["unixstream",3]],["result",6,[["unixstream",3]]]],[[]],[[]],[[]],[[["unixdatagram",3]],["i32",0]],[[["unixlistener",3]],["i32",0]],[[["unixstream",3]],["i32",0]],[[["unixdatagram",3]],["result",6,[["socketaddr",3]]]],[[["unixlistener",3]],["result",6,[["socketaddr",3]]]],[[["unixstream",3]],["result",6,[["socketaddr",3]]]],[[],["result",6]],[[],["result",6]],[[["unixdatagram",3]],["result",6,[["socketaddr",3]]]],[[["unixstream",3]],["result",6,[["socketaddr",3]]]],[[["unixstream",3]],["result",6,[["usize",0]]]],[[["unixstream",3]],["result",6,[["usize",0]]]],[[["unixstream",3]],["result",6,[["usize",0]]]],[[["unixdatagram",3]],["result",6,[["usize",0]]]],[[["unixdatagram",3]],["result",6]],[[["unixdatagram",3],["poll",3],["token",3],["ready",3],["pollopt",3]],["result",6]],[[["unixlistener",3],["poll",3],["token",3],["ready",3],["pollopt",3]],["result",6]],[[["unixstream",3],["poll",3],["token",3],["ready",3],["pollopt",3]],["result",6]],[[["unixdatagram",3],["poll",3],["token",3],["ready",3],["pollopt",3]],["result",6]],[[["unixlistener",3],["poll",3],["token",3],["ready",3],["pollopt",3]],["result",6]],[[["unixstream",3],["poll",3],["token",3],["ready",3],["pollopt",3]],["result",6]],[[["unixdatagram",3]],["result",6,[["usize",0]]]],[[["unixdatagram",3],["asref",8,[["path",3]]]],["result",6,[["usize",0]]]],[[["unixdatagram",3],["shutdown",4]],["result",6]],[[["unixstream",3],["shutdown",4]],["result",6]],[[["unixdatagram",3]],["result",6,[["option",4,[["error",3]]]]]],[[["unixlistener",3]],["result",6,[["option",4,[["error",3]]]]]],[[["unixstream",3]],["result",6,[["option",4,[["error",3]]]]]],[[["unixdatagram",3]],["result",6,[["unixdatagram",3]]]],[[["unixlistener",3]],["result",6,[["unixlistener",3]]]],[[["unixstream",3]],["result",6,[["unixstream",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",6,[["unixdatagram",3]]]],[[["unixstream",3]],["result",6,[["usize",0]]]],[[["unixstream",3]],["result",6,[["usize",0]]]],[[["unixstream",3]],["result",6,[["usize",0]]]]],"p":[[3,"UnixListener"],[3,"UnixDatagram"],[3,"UnixStream"]]},\
"net2":{"doc":"Extensions to <code>std::net</code> networking types.","t":[3,8,8,3,8,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,10,10,11,11,10,10,10,10,10,10,11,11,11,11,10,10,10,10,11,11,10,10,10,10,10,10,10,11,11,11,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,10,0,10,10,10,10,8,8,10,10,10,10],"n":["TcpBuilder","TcpListenerExt","TcpStreamExt","UdpBuilder","UdpSocketExt","as_raw_fd","as_raw_fd","bind","bind","borrow","borrow","borrow_mut","borrow_mut","broadcast","connect","connect","connect","fmt","fmt","from","from","from_raw_fd","from_raw_fd","get_reuse_address","get_reuse_address","get_reuse_port","get_reuse_port","into","into","join_multicast_v4","join_multicast_v6","keepalive","keepalive_ms","leave_multicast_v4","leave_multicast_v6","linger","linger","listen","local_addr","multicast_hops_v6","multicast_if_v4","multicast_if_v6","multicast_loop_v4","multicast_loop_v6","multicast_ttl_v4","new_v4","new_v4","new_v6","new_v6","nodelay","only_v6","only_v6","only_v6","only_v6","only_v6","read_timeout","read_timeout","read_timeout_ms","read_timeout_ms","recv","recv_buffer_size","recv_buffer_size","reuse_address","reuse_address","reuse_port","reuse_port","send","send_buffer_size","send_buffer_size","set_broadcast","set_keepalive","set_keepalive_ms","set_linger","set_linger","set_multicast_hops_v6","set_multicast_if_v4","set_multicast_if_v6","set_multicast_loop_v4","set_multicast_loop_v6","set_multicast_ttl_v4","set_nodelay","set_nonblocking","set_nonblocking","set_nonblocking","set_only_v6","set_only_v6","set_only_v6","set_read_timeout","set_read_timeout","set_read_timeout_ms","set_read_timeout_ms","set_recv_buffer_size","set_recv_buffer_size","set_send_buffer_size","set_send_buffer_size","set_ttl","set_ttl","set_ttl","set_unicast_hops_v6","set_write_timeout","set_write_timeout","set_write_timeout_ms","set_write_timeout_ms","take_error","take_error","take_error","take_error","take_error","to_tcp_listener","to_tcp_stream","try_from","try_from","try_into","try_into","ttl","ttl","ttl","ttl","ttl","type_id","type_id","unicast_hops_v6","unix","write_timeout","write_timeout","write_timeout_ms","write_timeout_ms","UnixTcpBuilderExt","UnixUdpBuilderExt","get_reuse_port","get_reuse_port","reuse_port","reuse_port"],"q":["net2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","net2::unix","","","","",""],"d":["An “in progress” TCP socket which has not yet been …","Extension methods for the standard <code>TcpListener</code> type in …","Extension methods for the standard <code>TcpStream</code> type in …","An “in progress” UDP socket which has not yet been …","Extension methods for the standard <code>UdpSocket</code> type in …","","","Binds this socket to the specified address.","Binds this socket to the specified address.","","","","","Gets the value of the <code>SO_BROADCAST</code> option for this socket.","Executes a <code>connect</code> operation on this socket, establishing …","Connects this UDP socket to a remote address, allowing the …","Initiate a connection on this socket to the specified …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Check the <code>SO_REUSEADDR</code> option on this socket.","Check the <code>SO_REUSEADDR</code> option on this socket.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Executes an operation of the <code>IP_ADD_MEMBERSHIP</code> type.","Executes an operation of the <code>IPV6_ADD_MEMBERSHIP</code> type.","Returns whether keepalive messages are enabled on this …","Returns whether keepalive messages are enabled on this …","Executes an operation of the <code>IP_DROP_MEMBERSHIP</code> type.","Executes an operation of the <code>IPV6_DROP_MEMBERSHIP</code> type.","reads the linger duration for this socket by getting the …","reads the linger duration for this socket by getting the …","Mark a socket as ready to accept incoming connection …","Returns the address of the local half of this TCP socket.","Gets the value of the <code>IPV6_MULTICAST_HOPS</code> option for this …","Gets the value of the <code>IP_MULTICAST_IF</code> option for this …","Gets the value of the <code>IPV6_MULTICAST_IF</code> option for this …","Gets the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Gets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Gets the value of the <code>IP_MULTICAST_TTL</code> option for this …","Constructs a new TcpBuilder with the <code>AF_INET</code> domain, the …","Constructs a new UdpBuilder with the <code>AF_INET</code> domain, the …","Constructs a new TcpBuilder with the <code>AF_INET6</code> domain, the …","Constructs a new UdpBuilder with the <code>AF_INET6</code> domain, the …","Gets the value of the <code>TCP_NODELAY</code> option on this socket.","Gets the value of the <code>IPV6_V6ONLY</code> option for this socket.","Gets the value of the <code>IPV6_V6ONLY</code> option for this socket.","Gets the value of the <code>IPV6_V6ONLY</code> option for this socket.","Sets the value for the <code>IPV6_V6ONLY</code> option on this socket.","Sets the value for the <code>IPV6_V6ONLY</code> option on this socket.","Gets the value of the <code>SO_RCVTIMEO</code> option for this socket.","Gets the value of the <code>SO_RCVTIMEO</code> option for this socket.","Gets the value of the <code>SO_RCVTIMEO</code> option for this socket.","Gets the value of the <code>SO_RCVTIMEO</code> option for this socket.","Receives data on the socket from the remote address to …","Gets the value of the <code>SO_RCVBUF</code> option on this socket.","Gets the value of the <code>SO_RCVBUF</code> option on this socket.","Set value for the <code>SO_REUSEADDR</code> option on this socket.","Set value for the <code>SO_REUSEADDR</code> option on this socket.","","","Sends data on the socket to the remote address to which it …","Gets the value of the <code>SO_SNDBUF</code> option on this socket.","Gets the value of the <code>SO_SNDBUF</code> option on this socket.","Sets the value of the <code>SO_BROADCAST</code> option for this socket.","Sets whether keepalive messages are enabled to be sent on …","Sets whether keepalive messages are enabled to be sent on …","Sets the linger duration of this socket by setting the …","Sets the linger duration of this socket by setting the …","Sets the value of the <code>IPV6_MULTICAST_HOPS</code> option for this …","Sets the value of the <code>IP_MULTICAST_IF</code> option for this …","Sets the value of the <code>IPV6_MULTICAST_IF</code> option for this …","Sets the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Sets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Sets the value of the <code>IP_MULTICAST_TTL</code> option for this …","Sets the value of the <code>TCP_NODELAY</code> option on this socket.","Moves this TCP stream into or out of nonblocking mode.","Moves this TCP listener into or out of nonblocking mode.","Moves this UDP socket into or out of nonblocking mode.","Sets the value for the <code>IPV6_V6ONLY</code> option on this socket.","Sets the value for the <code>IPV6_V6ONLY</code> option on this socket.","Sets the value for the <code>IPV6_V6ONLY</code> option on this socket.","Sets the <code>SO_RCVTIMEO</code> option for this socket.","Sets the <code>SO_RCVTIMEO</code> option for this socket.","Sets the <code>SO_RCVTIMEO</code> option for this socket.","Sets the <code>SO_RCVTIMEO</code> option for this socket.","Sets the value of the <code>SO_RCVBUF</code> option on this socket.","Sets the value of the <code>SO_RCVBUF</code> option on this socket.","Sets the value of the <code>SO_SNDBUF</code> option on this socket.","Sets the value of the <code>SO_SNDBUF</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Sets the value for the <code>IPV6_UNICAST_HOPS</code> option on this …","Sets the <code>SO_SNDTIMEO</code> option for this socket.","Sets the <code>SO_SNDTIMEO</code> option for this socket.","Sets the <code>SO_SNDTIMEO</code> option for this socket.","Sets the <code>SO_SNDTIMEO</code> option for this socket.","Get the value of the <code>SO_ERROR</code> option on this socket.","Get the value of the <code>SO_ERROR</code> option on this socket.","Get the value of the <code>SO_ERROR</code> option on this socket.","Get the value of the <code>SO_ERROR</code> option on this socket.","Get the value of the <code>SO_ERROR</code> option on this socket.","Converts this builder into a <code>TcpListener</code>","Converts this builder into a <code>TcpStream</code>","","","","","Gets the value of the <code>IP_TTL</code> option for this socket.","Gets the value of the <code>IP_TTL</code> option for this socket.","Gets the value of the <code>IP_TTL</code> option for this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","","","Gets the value of the <code>IPV6_UNICAST_HOPS</code> option for this …","Unix-specific extensions to the <code>std::net</code> types.","Gets the value of the <code>SO_SNDTIMEO</code> option for this socket.","Gets the value of the <code>SO_SNDTIMEO</code> option for this socket.","Gets the value of the <code>SO_SNDTIMEO</code> option for this socket.","Gets the value of the <code>SO_SNDTIMEO</code> option for this socket.","Unix-specific extensions for the <code>TcpBuilder</code> type in this …","Unix-specific extensions for the <code>UdpBuilder</code> type in this …","Check the value of the <code>SO_REUSEPORT</code> option on this socket.","Check the value of the <code>SO_REUSEPORT</code> option on this socket.","Set value for the <code>SO_REUSEPORT</code> option on this socket.","Set value for the <code>SO_REUSEPORT</code> option on this socket."],"i":[0,0,0,0,0,1,2,1,2,1,2,1,2,3,4,3,1,1,2,1,2,1,2,1,2,1,2,1,2,3,3,4,4,3,3,4,5,1,1,3,3,3,3,3,3,1,2,1,2,4,4,5,3,1,2,4,3,4,3,3,4,3,1,2,1,2,3,4,3,3,4,4,4,5,3,3,3,3,3,3,4,4,5,3,4,5,3,4,3,4,3,4,3,4,3,4,5,3,3,4,3,4,3,4,5,3,1,2,1,1,1,2,1,2,4,5,3,1,2,1,2,3,0,4,3,4,3,0,0,6,7,6,7],"f":[null,null,null,null,null,[[["tcpbuilder",3]],["c_int",6]],[[["udpbuilder",3]],["c_int",6]],[[["tcpbuilder",3]],["result",6,[["tcpbuilder",3]]]],[[["udpbuilder",3]],["result",6,[["udpsocket",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["result",6,[["bool",0]]]],[[["",0],["tosocketaddrs",8]],["result",6]],[[["",0],["tosocketaddrs",8]],["result",6]],[[["tcpbuilder",3]],["result",6,[["tcpstream",3]]]],[[["tcpbuilder",3],["formatter",3]],["result",6]],[[["udpbuilder",3],["formatter",3]],["result",6]],[[]],[[]],[[["c_int",6]],["tcpbuilder",3]],[[["c_int",6]],["udpbuilder",3]],[[["tcpbuilder",3]],["result",6,[["bool",0]]]],[[["udpbuilder",3]],["result",6,[["bool",0]]]],[[["tcpbuilder",3]],["result",6,[["bool",0]]]],[[["udpbuilder",3]],["result",6,[["bool",0]]]],[[]],[[]],[[["",0],["ipv4addr",3],["ipv4addr",3]],["result",6]],[[["",0],["ipv6addr",3],["u32",0]],["result",6]],[[["",0]],["result",6,[["option",4,[["duration",3]]]]]],[[["",0]],["result",6,[["option",4,[["u32",0]]]]]],[[["",0],["ipv4addr",3],["ipv4addr",3]],["result",6]],[[["",0],["ipv6addr",3],["u32",0]],["result",6]],[[["",0]],["result",6,[["option",4,[["duration",3]]]]]],[[["",0]],["result",6,[["option",4,[["duration",3]]]]]],[[["tcpbuilder",3],["i32",0]],["result",6,[["tcplistener",3]]]],[[["tcpbuilder",3]],["result",6,[["socketaddr",4]]]],[[["",0]],["result",6,[["u32",0]]]],[[["",0]],["result",6,[["ipv4addr",3]]]],[[["",0]],["result",6,[["u32",0]]]],[[["",0]],["result",6,[["bool",0]]]],[[["",0]],["result",6,[["bool",0]]]],[[["",0]],["result",6,[["u32",0]]]],[[],["result",6,[["tcpbuilder",3]]]],[[],["result",6,[["udpbuilder",3]]]],[[],["result",6,[["tcpbuilder",3]]]],[[],["result",6,[["udpbuilder",3]]]],[[["",0]],["result",6,[["bool",0]]]],[[["",0]],["result",6,[["bool",0]]]],[[["",0]],["result",6,[["bool",0]]]],[[["",0]],["result",6,[["bool",0]]]],[[["tcpbuilder",3],["bool",0]],["result",6,[["tcpbuilder",3]]]],[[["udpbuilder",3],["bool",0]],["result",6,[["udpbuilder",3]]]],[[["",0]],["result",6,[["option",4,[["duration",3]]]]]],[[["",0]],["result",6,[["option",4,[["duration",3]]]]]],[[["",0]],["result",6,[["option",4,[["u32",0]]]]]],[[["",0]],["result",6,[["option",4,[["u32",0]]]]]],[[["",0]],["result",6,[["usize",0]]]],[[["",0]],["result",6,[["usize",0]]]],[[["",0]],["result",6,[["usize",0]]]],[[["tcpbuilder",3],["bool",0]],["result",6,[["tcpbuilder",3]]]],[[["udpbuilder",3],["bool",0]],["result",6,[["udpbuilder",3]]]],[[["tcpbuilder",3],["bool",0]],["result",6,[["tcpbuilder",3]]]],[[["udpbuilder",3],["bool",0]],["result",6,[["udpbuilder",3]]]],[[["",0]],["result",6,[["usize",0]]]],[[["",0]],["result",6,[["usize",0]]]],[[["",0]],["result",6,[["usize",0]]]],[[["",0],["bool",0]],["result",6]],[[["",0],["option",4,[["duration",3]]]],["result",6]],[[["",0],["option",4,[["u32",0]]]],["result",6]],[[["",0],["option",4,[["duration",3]]]],["result",6]],[[["",0],["option",4,[["duration",3]]]],["result",6]],[[["",0],["u32",0]],["result",6]],[[["",0],["ipv4addr",3]],["result",6]],[[["",0],["u32",0]],["result",6]],[[["",0],["bool",0]],["result",6]],[[["",0],["bool",0]],["result",6]],[[["",0],["u32",0]],["result",6]],[[["",0],["bool",0]],["result",6]],[[["",0],["bool",0]],["result",6]],[[["",0],["bool",0]],["result",6]],[[["",0],["bool",0]],["result",6]],[[["",0],["bool",0]],["result",6]],[[["",0],["bool",0]],["result",6]],[[["",0],["bool",0]],["result",6]],[[["",0],["option",4,[["duration",3]]]],["result",6]],[[["",0],["option",4,[["duration",3]]]],["result",6]],[[["",0],["option",4,[["u32",0]]]],["result",6]],[[["",0],["option",4,[["u32",0]]]],["result",6]],[[["",0],["usize",0]],["result",6]],[[["",0],["usize",0]],["result",6]],[[["",0],["usize",0]],["result",6]],[[["",0],["usize",0]],["result",6]],[[["",0],["u32",0]],["result",6]],[[["",0],["u32",0]],["result",6]],[[["",0],["u32",0]],["result",6]],[[["",0],["u32",0]],["result",6]],[[["",0],["option",4,[["duration",3]]]],["result",6]],[[["",0],["option",4,[["duration",3]]]],["result",6]],[[["",0],["option",4,[["u32",0]]]],["result",6]],[[["",0],["option",4,[["u32",0]]]],["result",6]],[[["",0]],["result",6,[["option",4,[["error",3]]]]]],[[["",0]],["result",6,[["option",4,[["error",3]]]]]],[[["",0]],["result",6,[["option",4,[["error",3]]]]]],[[["tcpbuilder",3]],["result",6,[["option",4,[["error",3]]]]]],[[["udpbuilder",3]],["result",6,[["option",4,[["error",3]]]]]],[[["tcpbuilder",3]],["result",6,[["tcplistener",3]]]],[[["tcpbuilder",3]],["result",6,[["tcpstream",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["result",6,[["u32",0]]]],[[["",0]],["result",6,[["u32",0]]]],[[["",0]],["result",6,[["u32",0]]]],[[["tcpbuilder",3],["u32",0]],["result",6,[["tcpbuilder",3]]]],[[["udpbuilder",3],["u32",0]],["result",6,[["udpbuilder",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["result",6,[["u32",0]]]],null,[[["",0]],["result",6,[["option",4,[["duration",3]]]]]],[[["",0]],["result",6,[["option",4,[["duration",3]]]]]],[[["",0]],["result",6,[["option",4,[["u32",0]]]]]],[[["",0]],["result",6,[["option",4,[["u32",0]]]]]],null,null,[[["",0]],["result",6,[["bool",0]]]],[[["",0]],["result",6,[["bool",0]]]],[[["",0],["bool",0]],["result",6]],[[["",0],["bool",0]],["result",6]]],"p":[[3,"TcpBuilder"],[3,"UdpBuilder"],[8,"UdpSocketExt"],[8,"TcpStreamExt"],[8,"TcpListenerExt"],[8,"UnixTcpBuilderExt"],[8,"UnixUdpBuilderExt"]]},\
"nodrop":{"doc":"The <strong>nodrop</strong> crate has the following cargo feature flags:","t":[3,11,11,11,11,11,11,11,11,11,11,11,11],"n":["NoDrop","borrow","borrow_mut","deref","deref_mut","drop","from","into","into_inner","new","try_from","try_into","type_id"],"q":["nodrop","","","","","","","","","","","",""],"d":["A type holding <strong>T</strong> that will not call its destructor on drop","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Extract the inner value.","Create a new <strong>NoDrop</strong>.","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[["",0]],["",0]],[[["",0]],["",0]],[[["nodrop",3]],["",0]],[[["nodrop",3]],["",0]],[[["nodrop",3]]],[[]],[[]],[[["nodrop",3]]],[[],["nodrop",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"NoDrop"]]},\
"num_cpus":{"doc":"A crate with utilities to determine the number of CPUs …","t":[5,5],"n":["get","get_physical"],"q":["num_cpus",""],"d":["Returns the number of available CPUs of the current system.","Returns the number of physical cores of the current system."],"i":[0,0],"f":[[[],["usize",0]],[[],["usize",0]]],"p":[]},\
"num_integer":{"doc":"Integer trait and functions.","t":[8,3,8,5,11,11,5,11,11,5,10,5,11,5,10,10,11,5,10,11,11,10,10,10,5,10,5,10,5,11,11,5,10,5,11,11,11,11,11],"n":["Integer","IterBinomial","Roots","binomial","borrow","borrow_mut","cbrt","cbrt","cbrt","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","from","gcd","gcd","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","new","next","nth_root","nth_root","sqrt","sqrt","sqrt","try_from","try_into","type_id"],"q":["num_integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Calculate the binomial coefficient.","","","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. Returns …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","Returns the argument unchanged.","Calculates the Greatest Common Divisor (GCD) of the number …","Greatest Common Divisor (GCD).","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","For a given n, iterate over all binomial coefficients …","","Returns the truncated principal <code>n</code>th root of an integer – …","Returns the truncated principal <code>n</code>th root of an integer – …","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","",""],"i":[0,0,0,0,1,1,0,2,2,0,3,0,3,0,3,3,1,0,3,1,1,3,3,3,0,3,0,3,0,1,1,0,2,0,2,2,1,1,1],"f":[null,null,null,[[["",26,[["integer",8],["clone",8]]],["",26,[["integer",8],["clone",8]]]],["",26,[["integer",8],["clone",8]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["roots",8]],["roots",8]],[[["",0]]],[[["",0]]],[[["integer",8],["integer",8]],["integer",8]],[[["",0],["",0]]],[[["integer",8],["integer",8]]],[[["",0],["",0]]],[[["integer",8],["integer",8]]],[[["",0],["",0]]],[[["",0],["",0]],["bool",0]],[[]],[[["integer",8],["integer",8]],["integer",8]],[[["",0],["",0]]],[[]],[[]],[[["",0]],["bool",0]],[[["",0],["",0]],["bool",0]],[[["",0]],["bool",0]],[[["integer",8],["integer",8]],["integer",8]],[[["",0],["",0]]],[[["integer",8],["integer",8]],["integer",8]],[[["",0],["",0]]],[[],["",26,[["integer",8],["clone",8]]]],[[],["iterbinomial",3]],[[["iterbinomial",3]],["option",4]],[[["roots",8],["u32",0]],["roots",8]],[[["",0],["u32",0]]],[[["roots",8]],["roots",8]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"IterBinomial"],[8,"Roots"],[8,"Integer"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":[2,2,2,2,2,2,2,2,2,2,13,2,4,2,16,2,13,2,2,8,8,8,8,2,8,8,2,3,2,2,8,2,2,2,2,2,2,2,2,2,2,2,2,11,11,11,11,0,0,2,2,5,0,11,11,11,11,11,10,0,0,11,11,12,2,0,0,2,0,2,11,11,11,11,11,11,2,8,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,10,10,10,10,10,10,11,11,10,10,11,11,10,10,11,11,11,11,11,11,11,10,11,10,10,10,10,10,11,11,11,11,10,10,11,8,8,11,10,5,10,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,16,10,8,8,16,10,10,8,10,10,8,8,8,8,8,10,10,10,10,10,16,8,5,5,10,8,8,5,10,5,10,10,10,5,10],"n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","Empty","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","Signed","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","sign","signum","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","max_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","FloatConst","FloatCore","LN_10","LN_2","LOG10_E","LOG2_E","PI","SQRT_2","abs","ceil","classify","epsilon","floor","fract","infinity","integer_decode","is_finite","is_infinite","is_nan","is_normal","is_sign_negative","is_sign_positive","max","max_value","min","min_positive_value","min_value","nan","neg_infinity","neg_zero","powi","recip","round","signum","to_degrees","to_radians","trunc","One","Zero","is_one","is_zero","one","one","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_zeros","pow","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_zeros","unsigned_shl","unsigned_shr","checked","inv","mul_add","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","Saturating","saturating_add","saturating_sub","WrappingAdd","WrappingMul","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["num_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::bounds","","","num_traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::identities","","","","","","","","num_traits::int","","","","","","","","","","","","","","","","","num_traits::ops","","","","","num_traits::ops::checked","","","","","","","","","","","","","","","","num_traits::ops::inv","","","num_traits::ops::mul_add","","","","","num_traits::ops::saturating","","","num_traits::ops::wrapping","","","","","","","","","","num_traits::pow","","","","","num_traits::sign","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","The trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","The trait for types implementing basic numeric operations","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for references which implement numeric …","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix &lt;= 36.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","returns the largest finite number this type can represent","returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Convert a <code>f32</code> to return an optional value of this type. If …","Convert a <code>f64</code> to return an optional value of this type. If …","Convert an <code>i128</code> to return an optional value of this type. …","Convert an <code>i16</code> to return an optional value of this type. …","Convert an <code>i32</code> to return an optional value of this type. …","Convert an <code>i64</code> to return an optional value of this type. …","Convert an <code>i8</code> to return an optional value of this type. If …","Convert an <code>isize</code> to return an optional value of this type. …","Convert an <code>u128</code> to return an optional value of this type. …","Convert an <code>u16</code> to return an optional value of this type. …","Convert an <code>u32</code> to return an optional value of this type. …","Convert an <code>u64</code> to return an optional value of this type. …","Convert an <code>u8</code> to return an optional value of this type. If …","Convert a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>.","Converts the value of <code>self</code> to an <code>f64</code>.","Converts the value of <code>self</code> to an <code>i128</code>.","Converts the value of <code>self</code> to an <code>i16</code>.","Converts the value of <code>self</code> to an <code>i32</code>.","Converts the value of <code>self</code> to an <code>i64</code>.","Converts the value of <code>self</code> to an <code>i8</code>.","Converts the value of <code>self</code> to an <code>isize</code>.","Converts the value of <code>self</code> to an <code>u128</code>.","Converts the value of <code>self</code> to an <code>u16</code>.","Converts the value of <code>self</code> to an <code>u32</code>.","Converts the value of <code>self</code> to an <code>u64</code>.","Converts the value of <code>self</code> to an <code>u8</code>.","Converts the value of <code>self</code> to a <code>usize</code>.","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant.","Return <code>sqrt(2.0)</code>.","Computes the absolute value of <code>self</code>. Returns …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns epsilon, a small positive value.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns positive infinity.","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns NaN.","Returns negative infinity.","Returns <code>-0.0</code>.","Raise a number to an integer power.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Converts to degrees, assuming the number is in radians.","Converts to radians, assuming the number is in degrees.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Shifts the bits to the left by a specified amount amount, <code>n</code>…","Shifts the bits to the right by a specified amount amount, …","Shifts the bits to the left by a specified amount amount, <code>n</code>…","Shifts the bits to the right by a specified amount amount, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount amount, <code>n</code>…","Shifts the bits to the right by a specified amount amount, …","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on overflow.","Performs a right shift that returns <code>None</code> on overflow.","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Shifts a number to the left, checking for overflow. If …","Shifts a number to the left, checking for overflow. If …","Subtracts two numbers, checking for underflow. If …","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Saturating math operations","Saturating addition operator. Returns a+b, saturating at …","Saturating subtraction operator. Returns a-b, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,1,3,0,0,0,0,0,0,1,3,3,1,3,2,0,0,1,3,3,0,0,0,0,0,0,1,3,1,3,1,3,0,0,4,4,0,0,0,0,5,0,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,0,0,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,11,12,0,11,0,12,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,14,15,16,17,18,19,20,21,0,22,22,0,0,23,23,24,0,25,25,0,0,0,0,0,26,27,28,29,30,31,0,0,0,31,0,0,0,32,0,32,32,32,0,32],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,null,null,[[["partialord",8],["partialord",8],["partialord",8]],["partialord",8]],null,[[["floaterrorkind",4],["formatter",3]],["result",6]],[[["parsefloaterror",3],["formatter",3]],["result",6]],[[["parsefloaterror",3],["formatter",3]],["result",6]],[[]],[[]],[[["str",0],["u32",0]],["result",4]],null,null,[[]],[[]],null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[]],[[]],null,null,null,null,[[]],[[["numcast",8]],["option",4,[["numcast",8]]]],[[["toprimitive",8]],["option",4]],[[["f32",0]],["option",4]],[[["f64",0]],["option",4]],[[["i128",0]],["option",4]],[[["i16",0]],["option",4]],[[["i32",0]],["option",4]],[[["i64",0]],["option",4]],[[["i8",0]],["option",4]],[[["isize",0]],["option",4]],[[["u128",0]],["option",4]],[[["u16",0]],["option",4]],[[["u32",0]],["option",4]],[[["u64",0]],["option",4]],[[["u8",0]],["option",4]],[[["usize",0]],["option",4]],[[["",0]],["option",4,[["f32",0]]]],[[["",0]],["option",4,[["f64",0]]]],[[["",0]],["option",4,[["i128",0]]]],[[["",0]],["option",4,[["i16",0]]]],[[["",0]],["option",4,[["i32",0]]]],[[["",0]],["option",4,[["i64",0]]]],[[["",0]],["option",4,[["i8",0]]]],[[["",0]],["option",4,[["isize",0]]]],[[["",0]],["option",4,[["u128",0]]]],[[["",0]],["option",4,[["u16",0]]]],[[["",0]],["option",4,[["u32",0]]]],[[["",0]],["option",4,[["u64",0]]]],[[["",0]],["option",4,[["u8",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",0]]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[],["one",8]],[[]],[[],["zero",8]],[[]],null,[[],["u32",0]],[[],["u32",0]],[[]],[[]],[[],["u32",0]],[[["u32",0]]],[[["u32",0]]],[[["u32",0]]],[[["u32",0]]],[[["u32",0]]],[[]],[[]],[[]],[[],["u32",0]],[[["u32",0]]],[[["u32",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["",0]],["option",4]],[[["",0],["",0]],["option",4]],[[["",0],["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["",0]],["option",4]],[[["",0],["u32",0]],["option",4]],[[["",0],["u32",0]],["option",4]],[[["",0],["",0]],["option",4]],null,null,[[]],null,null,null,[[]],[[["",0]]],null,[[]],[[]],null,null,null,null,null,[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["u32",0]]],[[["",0],["u32",0]]],[[["",0],["",0]]],null,null,[[["",26,[["clone",8],["one",8],["checkedmul",8]]],["usize",0]],["option",4,[["",26,[["clone",8],["one",8],["checkedmul",8]]]]]],[[["",26,[["clone",8],["one",8],["mul",8,[["",26,[["clone",8],["one",8],["mul",8,[["",26,[["clone",8],["one",8],["mul",8,[["",26,[["clone",8],["one",8],["mul",8,[["",26,[["clone",8],["one",8],["mul",8]]]]]]]]]]]]]]]]]]],["usize",0]],["",26,[["clone",8],["one",8],["mul",8,[["",26,[["clone",8],["one",8],["mul",8,[["",26,[["clone",8],["one",8],["mul",8,[["",26,[["clone",8],["one",8],["mul",8,[["",26,[["clone",8],["one",8],["mul",8]]]]]]]]]]]]]]]]]]]],[[]],null,null,[[["signed",8]],["signed",8]],[[["",0]]],[[["signed",8],["signed",8]],["signed",8]],[[["",0],["",0]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["signed",8]],["signed",8]],[[["",0]]]],"p":[[4,"FloatErrorKind"],[8,"Num"],[3,"ParseFloatError"],[8,"Bounded"],[8,"AsPrimitive"],[8,"NumCast"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"FloatConst"],[8,"FloatCore"],[8,"One"],[8,"Zero"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Saturating"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Signed"]]},\
"owning_ref":{"doc":"An owning reference.","t":[6,6,6,8,8,16,6,6,6,6,16,16,8,6,6,3,3,3,6,6,6,6,6,6,6,8,6,6,8,8,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ArcRef","BoxRef","BoxRefMut","CloneStableAddress","Erased","Erased","ErasedArcRef","ErasedBoxRef","ErasedBoxRefMut","ErasedRcRef","Handle","HandleMut","IntoErased","MutexGuardRef","MutexGuardRefMut","OwningHandle","OwningRef","OwningRefMut","RcRef","RefMutRef","RefMutRefMut","RefRef","RwLockReadGuardRef","RwLockWriteGuardRef","RwLockWriteGuardRefMut","StableAddress","StringRef","StringRefMut","ToHandle","ToHandleMut","VecRef","VecRefMut","as_mut","as_owner","as_owner","as_owner","as_owner_mut","as_ref","as_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","cmp","deref","deref","deref","deref_mut","deref_mut","eq","eq","erase_owner","erase_owner","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","into","into","into","into_erased","into_owner","into_owner","into_owner","map","map","map_mut","map_owner","map_owner","map_owner_box","map_owner_box","new","new","new","new_assert_stable_address","new_assert_stable_address","new_mut","new_with_fn","partial_cmp","partial_cmp","to_handle","to_handle_mut","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_map","try_map","try_map_mut","try_new","type_id","type_id","type_id"],"q":["owning_ref","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Typedef of a owning reference that uses a <code>Arc</code> as the owner.","Typedef of a owning reference that uses a <code>Box</code> as the owner.","Typedef of a mutable owning reference that uses a <code>Box</code> as …","An unsafe marker trait for types where clones deref to the …","Helper trait for an erased concrete type an owner …","Owner with the dereference type substituted to <code>Erased</code>.","Typedef of a owning reference that uses an erased <code>Arc</code> as …","Typedef of a owning reference that uses an erased <code>Box</code> as …","Typedef of a mutable owning reference that uses an erased …","Typedef of a owning reference that uses an erased <code>Rc</code> as …","The type of handle to be encapsulated by the OwningHandle.","The type of handle to be encapsulated by the OwningHandle.","Helper trait for erasing the concrete type of what an …","Typedef of a owning reference that uses a <code>MutexGuard</code> as …","Typedef of a mutable owning reference that uses a …","<code>OwningHandle</code> is a complement to <code>OwningRef</code>. Where <code>OwningRef</code> …","An owning reference.","An mutable owning reference.","Typedef of a owning reference that uses a <code>Rc</code> as the owner.","Typedef of a owning reference that uses a <code>RefMut</code> as the …","Typedef of a mutable owning reference that uses a <code>RefMut</code> …","Typedef of a owning reference that uses a <code>Ref</code> as the owner.","Typedef of a owning reference that uses a <code>RwLockReadGuard</code> …","Typedef of a owning reference that uses a <code>RwLockWriteGuard</code> …","Typedef of a mutable owning reference that uses a …","An unsafe marker trait for types that deref to a stable …","Typedef of a owning reference that uses a <code>String</code> as the …","Typedef of a mutable owning reference that uses a <code>String</code> …","Trait to implement the conversion of owner to handle for …","Trait to implement the conversion of owner to mutable …","Typedef of a owning reference that uses a <code>Vec</code> as the owner.","Typedef of a mutable owning reference that uses a <code>Vec</code> as …","","A reference to the underlying owner.","A reference to the underlying owner.","A getter for the underlying owner.","A mutable reference to the underlying owner.","","","","","","","","","","","","","","","","","","","","","Erases the concrete base type of the owner with a trait …","Erases the concrete base type of the owner with a trait …","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Perform the type erasure.","Discards the reference and retrieves the owner.","Discards the reference and retrieves the owner.","Discards the dependent object and returns the owner.","Converts <code>self</code> into a new owning reference that points at …","Converts <code>self</code> into a new <em>shared</em> owning reference that …","Converts <code>self</code> into a new <em>mutable</em> owning reference that …","Converts <code>self</code> into a new owning reference with a different …","Converts <code>self</code> into a new owning reference with a different …","Converts <code>self</code> into a new owning reference where the owner …","Converts <code>self</code> into a new owning reference where the owner …","Creates a new owning reference from a owner initialized to …","Creates a new owning reference from a owner initialized to …","Create a new <code>OwningHandle</code> for a type that implements …","Like <code>new</code>, but doesn’t require <code>O</code> to implement the …","Like <code>new</code>, but doesn’t require <code>O</code> to implement the …","Create a new mutable <code>OwningHandle</code> for a type that …","Create a new OwningHandle. The provided callback will be …","","","Given an appropriately-long-lived pointer to ourselves, …","Given an appropriately-long-lived pointer to ourselves, …","","","","","","","","Tries to convert <code>self</code> into a new owning reference that …","Tries to convert <code>self</code> into a new <em>shared</em> owning reference …","Tries to convert <code>self</code> into a new <em>mutable</em> owning reference …","Create a new OwningHandle. The provided callback will be …","","",""],"i":[0,0,0,0,0,1,0,0,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,4,6,4,5,4,5,5,4,6,5,4,6,5,5,5,4,5,4,6,4,6,5,4,5,4,5,4,7,5,5,5,4,4,6,5,4,5,4,6,1,5,4,6,5,4,4,5,4,5,4,5,4,6,5,4,6,6,5,4,2,3,5,5,4,6,5,4,6,5,4,4,6,5,4,6],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["owningrefmut",3,[["sized",8]]]],["",0]],[[["owningref",3,[["sized",8]]]],["",0]],[[["owningrefmut",3,[["sized",8]]]],["",0]],[[["owninghandle",3]],["",0]],[[["owningrefmut",3,[["sized",8]]]],["",0]],[[["owningref",3,[["sized",8]]]],["",0]],[[["owningrefmut",3,[["sized",8]]]],["",0]],[[["owningref",3,[["sized",8]]]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["owningref",3,[["sized",8]]]],["owningref",3,[["sized",8]]]],[[["",0],["",0]]],[[["owningref",3,[["sized",8]]],["owningref",3,[["sized",8]]]],["ordering",4]],[[["owningrefmut",3,[["sized",8]]],["owningrefmut",3,[["sized",8]]]],["ordering",4]],[[["owningref",3,[["sized",8]]]],["",0]],[[["owningrefmut",3,[["sized",8]]]],["",0]],[[["owninghandle",3]]],[[["owningrefmut",3,[["sized",8]]]],["",0]],[[["owninghandle",3]]],[[["owningref",3,[["sized",8]]],["owningref",3,[["sized",8]]]],["bool",0]],[[["owningrefmut",3,[["sized",8]]],["owningrefmut",3,[["sized",8]]]],["bool",0]],[[["owningref",3,[["sized",8]]]],["owningref",3,[["sized",8]]]],[[["owningrefmut",3,[["sized",8]]]],["owningrefmut",3,[["sized",8]]]],[[["owningref",3,[["sized",8]]],["formatter",3]],["result",4,[["error",3]]]],[[["owningrefmut",3,[["sized",8]]],["formatter",3]],["result",4,[["error",3]]]],[[["erased",8],["formatter",3]],["result",4,[["error",3]]]],[[["owningrefmut",3,[["sized",8]]]],["owningref",3,[["sized",8]]]],[[],["owningref",3,[["sized",8]]]],[[]],[[],["owningrefmut",3,[["sized",8]]]],[[]],[[]],[[["owningref",3,[["sized",8]]],["",0]]],[[["owningrefmut",3,[["sized",8]]],["",0]]],[[]],[[]],[[]],[[]],[[["owningref",3,[["sized",8]]]]],[[["owningrefmut",3,[["sized",8]]]]],[[["owninghandle",3]]],[[["owningref",3,[["sized",8]]]],["owningref",3,[["sized",8]]]],[[["owningrefmut",3,[["sized",8]]]],["owningref",3,[["sized",8]]]],[[["owningrefmut",3,[["sized",8]]]],["owningrefmut",3,[["sized",8]]]],[[["owningref",3,[["sized",8]]]],["owningref",3,[["sized",8]]]],[[["owningrefmut",3,[["sized",8]]]],["owningrefmut",3,[["sized",8]]]],[[["owningref",3,[["sized",8]]]],["owningref",3,[["box",3],["sized",8]]]],[[["owningrefmut",3,[["sized",8]]]],["owningrefmut",3,[["box",3],["sized",8]]]],[[],["owningref",3,[["sized",8]]]],[[],["owningrefmut",3,[["sized",8]]]],[[],["owninghandle",3]],[[],["owningref",3,[["sized",8]]]],[[],["owningrefmut",3,[["sized",8]]]],[[],["owninghandle",3]],[[],["owninghandle",3]],[[["owningref",3,[["sized",8]]],["owningref",3,[["sized",8]]]],["option",4,[["ordering",4]]]],[[["owningrefmut",3,[["sized",8]]],["owningrefmut",3,[["sized",8]]]],["option",4,[["ordering",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["owningref",3,[["sized",8]]]],["result",4,[["owningref",3,[["sized",8]]]]]],[[["owningrefmut",3,[["sized",8]]]],["result",4,[["owningref",3,[["sized",8]]]]]],[[["owningrefmut",3,[["sized",8]]]],["result",4,[["owningrefmut",3,[["sized",8]]]]]],[[],["result",4,[["owninghandle",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[8,"IntoErased"],[8,"ToHandle"],[8,"ToHandleMut"],[3,"OwningRefMut"],[3,"OwningRef"],[3,"OwningHandle"],[8,"Erased"]]},\
"parking_lot":{"doc":"This library provides implementations of <code>Mutex</code>, <code>RwLock</code>, …","t":[3,13,13,6,6,6,6,6,6,13,17,3,4,13,3,3,3,6,6,6,6,6,6,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Condvar","Done","InProgress","MappedMutexGuard","MappedReentrantMutexGuard","MappedRwLockReadGuard","MappedRwLockWriteGuard","Mutex","MutexGuard","New","ONCE_INIT","Once","OnceState","Poisoned","RawMutex","RawRwLock","RawThreadId","ReentrantMutex","ReentrantMutexGuard","RwLock","RwLockReadGuard","RwLockUpgradableReadGuard","RwLockWriteGuard","WaitTimeoutResult","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bump","bump_exclusive","bump_shared","bump_upgradable","call_once","call_once_force","clone","clone","clone_into","clone_into","default","default","done","downgrade","downgrade_to_upgradable","downgrade_upgradable","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into","lock","lock_exclusive","lock_shared","lock_shared_recursive","lock_upgradable","ne","new","new","nonzero_thread_id","notify_all","notify_one","poisoned","state","timed_out","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_lock","try_lock_exclusive","try_lock_exclusive_for","try_lock_exclusive_until","try_lock_for","try_lock_shared","try_lock_shared_for","try_lock_shared_recursive","try_lock_shared_recursive_for","try_lock_shared_recursive_until","try_lock_shared_until","try_lock_until","try_lock_upgradable","try_lock_upgradable_for","try_lock_upgradable_until","try_upgrade","try_upgrade_for","try_upgrade_until","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unlock","unlock_exclusive","unlock_exclusive_fair","unlock_fair","unlock_shared","unlock_shared_fair","unlock_upgradable","unlock_upgradable_fair","upgrade","wait","wait_for","wait_until"],"q":["parking_lot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A Condition Variable","A closure has completed successfully.","A thread is currently executing a closure.","An RAII mutex guard returned by <code>MutexGuard::map</code>, which can …","An RAII mutex guard returned by <code>ReentrantMutexGuard::map</code>, …","An RAII read lock guard returned by <code>RwLockReadGuard::map</code>, …","An RAII write lock guard returned by <code>RwLockWriteGuard::map</code>…","A mutual exclusion primitive useful for protecting shared …","An RAII implementation of a “scoped lock” of a mutex. …","A closure has not been executed yet","Initialization value for static <code>Once</code> values.","A synchronization primitive which can be used to run a …","Current state of a <code>Once</code>.","A closure was executed but panicked.","Raw mutex type backed by the parking lot.","Raw reader-writer lock type backed by the parking lot.","Implementation of the <code>GetThreadId</code> trait for …","A mutex which can be recursively locked by a single thread.","An RAII implementation of a “scoped lock” of a …","A reader-writer lock","RAII structure used to release the shared read access of a …","RAII structure used to release the upgradable read access …","RAII structure used to release the exclusive write access …","A type indicating whether a timed wait on a condition …","","","","","","","","","","","","","","","","","","","Performs an initialization routine once and only once. The …","Performs the same function as <code>call_once</code> except ignores …","","","","","","","Returns whether the associated <code>Once</code> has successfully …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Creates a new condition variable which is ready to be …","Creates a new <code>Once</code> value.","","Wakes up all blocked threads on this condvar.","Wakes up one blocked thread on this condvar.","Returns whether the associated <code>Once</code> has been poisoned.","Returns the current state of this <code>Once</code>.","Returns whether the wait was known to have timed out.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Blocks the current thread until this condition variable …","Waits on this condition variable for a notification, …","Waits on this condition variable for a notification, …"],"i":[0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2,3,4,5,6,7,1,2,3,4,5,6,7,1,4,5,5,5,3,3,7,1,7,1,2,3,1,5,5,5,7,1,2,3,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,4,5,5,5,5,7,2,3,6,2,2,1,3,7,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,4,5,5,5,4,5,5,5,5,5,5,4,5,5,5,5,5,5,2,3,4,5,6,7,1,4,5,5,4,5,5,5,5,5,2,2,2],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["rawmutex",3]]],[[["rawrwlock",3]]],[[["rawrwlock",3]]],[[["rawrwlock",3]]],[[["once",3]]],[[["once",3]]],[[["waittimeoutresult",3]],["waittimeoutresult",3]],[[["oncestate",4]],["oncestate",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["condvar",3]],[[],["once",3]],[[["oncestate",4]],["bool",0]],[[["rawrwlock",3]]],[[["rawrwlock",3]]],[[["rawrwlock",3]]],[[["waittimeoutresult",3],["waittimeoutresult",3]],["bool",0]],[[["oncestate",4],["oncestate",4]],["bool",0]],[[["condvar",3],["formatter",3]],["result",6]],[[["once",3],["formatter",3]],["result",6]],[[["waittimeoutresult",3],["formatter",3]],["result",6]],[[["oncestate",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rawmutex",3]]],[[["rawrwlock",3]]],[[["rawrwlock",3]]],[[["rawrwlock",3]]],[[["rawrwlock",3]]],[[["waittimeoutresult",3],["waittimeoutresult",3]],["bool",0]],[[],["condvar",3]],[[],["once",3]],[[["rawthreadid",3]],["usize",0]],[[["condvar",3]],["usize",0]],[[["condvar",3]],["bool",0]],[[["oncestate",4]],["bool",0]],[[["once",3]],["oncestate",4]],[[["waittimeoutresult",3]],["bool",0]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["rawmutex",3]],["bool",0]],[[["rawrwlock",3]],["bool",0]],[[["rawrwlock",3],["duration",3]],["bool",0]],[[["rawrwlock",3],["instant",3]],["bool",0]],[[["rawmutex",3],["duration",3]],["bool",0]],[[["rawrwlock",3]],["bool",0]],[[["rawrwlock",3]],["bool",0]],[[["rawrwlock",3]],["bool",0]],[[["rawrwlock",3]],["bool",0]],[[["rawrwlock",3]],["bool",0]],[[["rawrwlock",3]],["bool",0]],[[["rawmutex",3],["instant",3]],["bool",0]],[[["rawrwlock",3]],["bool",0]],[[["rawrwlock",3],["duration",3]],["bool",0]],[[["rawrwlock",3],["instant",3]],["bool",0]],[[["rawrwlock",3]],["bool",0]],[[["rawrwlock",3],["duration",3]],["bool",0]],[[["rawrwlock",3],["instant",3]],["bool",0]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["rawmutex",3]]],[[["rawrwlock",3]]],[[["rawrwlock",3]]],[[["rawmutex",3]]],[[["rawrwlock",3]]],[[["rawrwlock",3]]],[[["rawrwlock",3]]],[[["rawrwlock",3]]],[[["rawrwlock",3]]],[[["condvar",3],["mutexguard",6]]],[[["condvar",3],["mutexguard",6],["duration",3]],["waittimeoutresult",3]],[[["condvar",3],["mutexguard",6],["instant",3]],["waittimeoutresult",3]]],"p":[[4,"OnceState"],[3,"Condvar"],[3,"Once"],[3,"RawMutex"],[3,"RawRwLock"],[3,"RawThreadId"],[3,"WaitTimeoutResult"]]},\
"parking_lot_core":{"doc":"This library exposes a low-level API for creating your own …","t":[12,12,13,17,17,4,13,4,3,13,13,4,13,3,13,13,13,13,13,3,3,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,12,12,5,5],"n":["0","0","Abort","DEFAULT_PARK_TOKEN","DEFAULT_UNPARK_TOKEN","FilterOp","Invalid","ParkResult","ParkToken","RequeueAll","RequeueOne","RequeueOp","Skip","SpinWait","Stop","TimedOut","Unpark","UnparkOne","UnparkOneRequeueRest","UnparkResult","UnparkToken","Unparked","be_fair","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deadlock","default","default","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","have_more_threads","into","into","into","into","into","into","into","is_unparked","ne","ne","ne","ne","new","park","requeued_threads","reset","spin","spin_no_yield","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpark_all","unpark_filter","unpark_one","unpark_requeue","unparked_threads","0","acquire_resource","release_resource"],"q":["parking_lot_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","parking_lot_core::ParkResult","parking_lot_core::deadlock",""],"d":["","","Abort the operation without doing anything.","A default park token to use.","A default unpark token to use.","Operation that <code>unpark_filter</code> should perform for each …","The validation callback returned false.","Result of a park operation.","A value associated with a parked thread which can be used …","Requeue all threads onto the target queue.","Requeue one thread and leave the rest parked on the …","Operation that <code>unpark_requeue</code> should perform.","Don’t unpark the thread and continue scanning the list …","A counter used to perform exponential backoff in spin …","Don’t unpark the thread and stop scanning the list of …","The timeout expired.","Unpark the thread and continue scanning the list of parked …","Unpark one thread and leave the rest parked. No requeuing …","Unpark one thread and requeue the rest onto the target …","Result of an unpark operation.","A value which is passed from an unparker to a parked …","We were unparked by another thread with the given token.","This is set to true on average once every 0.5ms for any …","","","","","","","","","","","","","","","","","","","","","","","","","","","[Experimental] Deadlock detection","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Whether there are any threads remaining in the queue. This …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if we were unparked by another thread.","","","","","Creates a new <code>SpinWait</code>.","Parks the current thread in the queue associated with the …","The number of threads that were requeued.","Resets a <code>SpinWait</code> to its initial state.","Spins until the sleep threshold has been reached.","Spins without yielding the thread to the OS.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unparks all threads in the queue associated with the given …","Unparks a number of threads from the front of the queue …","Unparks one thread from the queue associated with the …","Removes all threads from the queue associated with <code>key_from</code>…","The number of threads that were unparked.","","Acquire a resource identified by key in the deadlock …","Release a resource identified by key in the deadlock …"],"i":[1,2,3,0,0,0,4,0,0,3,3,0,5,0,5,4,5,3,3,0,0,4,6,7,4,6,3,5,1,2,7,4,6,3,5,1,2,4,6,3,5,1,2,4,6,3,5,1,2,0,7,6,4,6,3,5,1,2,4,6,3,5,1,2,7,4,6,3,5,1,2,6,7,4,6,3,5,1,2,4,4,6,1,2,7,0,6,7,7,7,4,6,3,5,1,2,7,4,6,3,5,1,2,7,4,6,3,5,1,2,7,4,6,3,5,1,2,0,0,0,0,6,8,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["parkresult",4]],["parkresult",4]],[[["unparkresult",3]],["unparkresult",3]],[[["requeueop",4]],["requeueop",4]],[[["filterop",4]],["filterop",4]],[[["unparktoken",3]],["unparktoken",3]],[[["parktoken",3]],["parktoken",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[],["spinwait",3]],[[],["unparkresult",3]],[[["parkresult",4],["parkresult",4]],["bool",0]],[[["unparkresult",3],["unparkresult",3]],["bool",0]],[[["requeueop",4],["requeueop",4]],["bool",0]],[[["filterop",4],["filterop",4]],["bool",0]],[[["unparktoken",3],["unparktoken",3]],["bool",0]],[[["parktoken",3],["parktoken",3]],["bool",0]],[[["parkresult",4],["formatter",3]],["result",6]],[[["unparkresult",3],["formatter",3]],["result",6]],[[["requeueop",4],["formatter",3]],["result",6]],[[["filterop",4],["formatter",3]],["result",6]],[[["unparktoken",3],["formatter",3]],["result",6]],[[["parktoken",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["parkresult",4]],["bool",0]],[[["parkresult",4],["parkresult",4]],["bool",0]],[[["unparkresult",3],["unparkresult",3]],["bool",0]],[[["unparktoken",3],["unparktoken",3]],["bool",0]],[[["parktoken",3],["parktoken",3]],["bool",0]],[[],["spinwait",3]],[[["usize",0],["parktoken",3],["option",4,[["instant",3]]]],["parkresult",4]],null,[[["spinwait",3]]],[[["spinwait",3]],["bool",0]],[[["spinwait",3]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["usize",0],["unparktoken",3]],["usize",0]],[[["usize",0]],["unparkresult",3]],[[["usize",0]],["unparkresult",3]],[[["usize",0],["usize",0]],["unparkresult",3]],null,null,[[["usize",0]]],[[["usize",0]]]],"p":[[3,"UnparkToken"],[3,"ParkToken"],[4,"RequeueOp"],[4,"ParkResult"],[4,"FilterOp"],[3,"UnparkResult"],[3,"SpinWait"],[13,"Unparked"]]},\
"percent_encoding":{"doc":"URLs use special chacters to indicate the parts of the …","t":[3,8,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5],"n":["DEFAULT_ENCODE_SET","EncodeSet","PATH_SEGMENT_ENCODE_SET","PercentDecode","PercentEncode","QUERY_ENCODE_SET","SIMPLE_ENCODE_SET","USERINFO_ENCODE_SET","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","contains","contains","contains","contains","contains","contains","decode_utf8","decode_utf8_lossy","define_encode_set","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","if_any","into","into","into","into","into","into","into","into_iter","into_iter","next","next","percent_decode","percent_encode","percent_encode_byte","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","utf8_percent_encode"],"q":["percent_encoding","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This encode set is used for path components.","Represents a set of characters / bytes that should be …","This encode set is used for on ‘/’-separated path …","The return type of <code>percent_decode()</code>.","The return type of <code>percent_encode()</code> and …","This encode set is used in the URL parser for query …","This encode set is used for the path of cannot-be-a-base …","This encode set is used for username and password.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Called with UTF-8 bytes rather than code points. Should …","","","","","","Decode the result of percent-decoding as UTF-8.","Decode the result of percent-decoding as UTF-8, lossily.","Define a new struct that implements the <code>EncodeSet</code> trait, …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","If the percent-decoding is different from the input, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Percent-decode the given bytes.","Percent-encode the given bytes with the given encode set.","Return the percent-encoding of the given bytes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Percent-encode the UTF-8 encoding of the given string."],"i":[0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,8,1,2,3,4,5,7,7,0,1,2,3,4,5,6,6,7,1,2,3,4,5,6,7,7,1,2,3,4,5,6,7,6,7,6,7,0,0,0,6,7,1,2,3,4,5,6,7,6,1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7,0],"f":[null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["simple_encode_set",3]],["simple_encode_set",3]],[[["query_encode_set",3]],["query_encode_set",3]],[[["default_encode_set",3]],["default_encode_set",3]],[[["path_segment_encode_set",3]],["path_segment_encode_set",3]],[[["userinfo_encode_set",3]],["userinfo_encode_set",3]],[[["percentencode",3,[["",26,[["clone",8],["encodeset",8]]]]]],["percentencode",3,[["",26,[["clone",8],["encodeset",8]]]]]],[[["percentdecode",3]],["percentdecode",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["u8",0]],["bool",0]],[[["simple_encode_set",3],["u8",0]],["bool",0]],[[["query_encode_set",3],["u8",0]],["bool",0]],[[["default_encode_set",3],["u8",0]],["bool",0]],[[["path_segment_encode_set",3],["u8",0]],["bool",0]],[[["userinfo_encode_set",3],["u8",0]],["bool",0]],[[["percentdecode",3]],["result",4,[["cow",4,[["str",0]]],["utf8error",3]]]],[[["percentdecode",3]],["cow",4,[["str",0]]]],null,[[["simple_encode_set",3],["formatter",3]],["result",6]],[[["query_encode_set",3],["formatter",3]],["result",6]],[[["default_encode_set",3],["formatter",3]],["result",6]],[[["path_segment_encode_set",3],["formatter",3]],["result",6]],[[["userinfo_encode_set",3],["formatter",3]],["result",6]],[[["percentencode",3,[["",26,[["debug",8],["encodeset",8]]]]],["formatter",3]],["result",6]],[[["percentencode",3,[["encodeset",8]]],["formatter",3]],["result",6]],[[["percentdecode",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["percentdecode",3]],["option",4,[["vec",3,[["u8",0]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["percentencode",3,[["encodeset",8]]]],["option",4,[["str",0]]]],[[["percentdecode",3]],["option",4,[["u8",0]]]],[[],["percentdecode",3]],[[["encodeset",8]],["percentencode",3,[["encodeset",8]]]],[[["u8",0]],["str",0]],[[["percentencode",3,[["encodeset",8]]]]],[[["percentdecode",3]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["str",0],["encodeset",8]],["percentencode",3,[["encodeset",8]]]]],"p":[[3,"SIMPLE_ENCODE_SET"],[3,"QUERY_ENCODE_SET"],[3,"DEFAULT_ENCODE_SET"],[3,"PATH_SEGMENT_ENCODE_SET"],[3,"USERINFO_ENCODE_SET"],[3,"PercentEncode"],[3,"PercentDecode"],[8,"EncodeSet"]]},\
"proc_macro2":{"doc":"A wrapper around the procedural macro API of the compiler…","t":[13,13,13,4,3,13,3,13,13,3,3,13,13,13,3,13,4,3,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,3,2,11,11,11,11,11,11,11,11,11,11],"n":["Alone","Brace","Bracket","Delimiter","Group","Group","Ident","Ident","Joint","LexError","Literal","Literal","None","Parenthesis","Punct","Punct","Spacing","Span","TokenStream","TokenTree","as_char","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_string","call_site","character","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","default","delimiter","empty","eq","eq","eq","eq","extend","extend","f32_suffixed","f32_unsuffixed","f64_suffixed","f64_unsuffixed","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_str","hash","i128_suffixed","i128_unsuffixed","i16_suffixed","i16_unsuffixed","i32_suffixed","i32_unsuffixed","i64_suffixed","i64_unsuffixed","i8_suffixed","i8_unsuffixed","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","isize_suffixed","isize_unsuffixed","new","new","new","new","partial_cmp","set_span","set_span","set_span","set_span","set_span","spacing","span","span","span","span","span","stream","string","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","token_stream","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u128_suffixed","u128_unsuffixed","u16_suffixed","u16_unsuffixed","u32_suffixed","u32_unsuffixed","u64_suffixed","u64_unsuffixed","u8_suffixed","u8_unsuffixed","unwrap","usize_suffixed","usize_unsuffixed","0","0","0","0","IntoIter","TokenStream","borrow","borrow_mut","fmt","from","into","into_iter","next","try_from","try_into","type_id"],"q":["proc_macroproc_macro2::TokenTree","","","","proc_macro2::token_stream","","","","","","","","","","",""],"d":["E.g. <code>+</code> is <code>Alone</code> in <code>+ =</code>, <code>+ident</code> or <code>+()</code>.","<code>{ ... }</code>","<code>[ ... ]</code>","Describes how a sequence of token trees is delimited.","A delimited token stream.","A token stream surrounded by bracket delimiters.","A word of Rust code, which may be a keyword or legal …","An identifier.","E.g. <code>+</code> is <code>Joint</code> in <code>+=</code> or <code>&#39;#</code>.","Error returned from <code>TokenStream::from_str</code>.","A literal string (<code>&quot;hello&quot;</code>), byte string (<code>b&quot;hello&quot;</code>), …","A literal character (<code>&#39;a&#39;</code>), string (<code>&quot;hello&quot;</code>), number (<code>2.3</code>), …","<code>Ø ... Ø</code>","<code>( ... )</code>","An <code>Punct</code> is an single punctuation character like <code>+</code>, <code>-</code> or <code>#</code>.","A single punctuation character (<code>+</code>, <code>,</code>, <code>$</code>, etc.).","Whether an <code>Punct</code> is followed immediately by another <code>Punct</code> …","A region of source code, along with macro expansion …","An abstract stream of tokens, or more concretely a …","A single token or a delimited sequence of token trees …","Returns the value of this punctuation character as <code>char</code>.","","","","","","","","","","","","","","","","","","","","","","The span of the invocation of the current procedural macro.","","","","","","","","","","","","","","","","","","","","","","Returns the delimiter of this <code>Group</code>","","","","","","","","","Creates a new unsuffixed floating-point literal.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if this <code>TokenStream</code> is empty.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Returns an empty <code>TokenStream</code> containing no token trees.","Creates a new <code>Group</code> with the given delimiter and token …","Creates a new <code>Punct</code> from the given character and spacing.","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","","Configures the span for <em>only this token</em>.","Configures the span for this <code>Group</code>’s delimiters, but not …","Configure the span for this punctuation character.","Configures the span of this <code>Ident</code>, possibly changing its …","","Returns the spacing of this punctuation character, …","Returns the span of this tree, delegating to the <code>span</code> …","Returns the span for the delimiters of this token stream, …","Returns the span for this punctuation character.","Returns the span of this <code>Ident</code>.","","Returns the <code>TokenStream</code> of tokens that are delimited in …","","","","","","","","","","","","","","","","","Public implementation details for the <code>TokenStream</code> type, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","Convert <code>proc_macro2::Span</code> to <code>proc_macro::Span</code>.","Creates a new suffixed integer literal with the specified …","Creates a new unsuffixed integer literal with the …","","","","","An iterator over <code>TokenStream</code>’s <code>TokenTree</code>s.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[1,2,2,0,0,3,0,3,1,0,0,3,2,2,0,3,0,0,0,0,4,5,6,7,3,8,2,4,1,9,10,5,6,7,3,8,2,4,1,9,10,10,7,10,6,7,3,8,2,4,1,9,10,6,7,3,8,2,4,1,9,10,9,6,8,6,2,1,9,9,6,6,10,10,10,10,5,6,6,7,3,3,8,8,2,4,4,1,9,9,10,10,5,6,6,7,7,3,3,3,3,3,8,2,4,1,9,10,6,6,6,9,10,10,10,10,10,10,10,10,10,10,5,6,7,3,8,2,4,1,9,10,6,6,10,10,6,8,4,9,9,3,8,4,9,10,4,3,8,4,9,10,8,10,6,7,3,8,2,4,1,9,10,6,3,8,4,9,10,0,5,6,7,3,8,2,4,1,9,10,5,6,7,3,8,2,4,1,9,10,5,6,7,3,8,2,4,1,9,10,10,10,10,10,10,10,10,10,10,10,7,10,10,11,12,13,14,0,0,15,15,15,15,15,15,15,15,15,15],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["punct",3]],["char",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["literal",3]],[[],["span",3]],[[["char",0]],["literal",3]],[[["tokenstream",3]],["tokenstream",3]],[[["span",3]],["span",3]],[[["tokentree",4]],["tokentree",4]],[[["group",3]],["group",3]],[[["delimiter",4]],["delimiter",4]],[[["punct",3]],["punct",3]],[[["spacing",4]],["spacing",4]],[[["ident",3]],["ident",3]],[[["literal",3]],["literal",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["ident",3],["ident",3]],["ordering",4]],[[],["tokenstream",3]],[[["group",3]],["delimiter",4]],[[],["tokenstream",3]],[[["delimiter",4],["delimiter",4]],["bool",0]],[[["spacing",4],["spacing",4]],["bool",0]],[[["ident",3],["ident",3]],["bool",0]],[[["ident",3],["",0]],["bool",0]],[[["tokenstream",3],["intoiterator",8]]],[[["tokenstream",3],["intoiterator",8]]],[[["f32",0]],["literal",3]],[[["f32",0]],["literal",3]],[[["f64",0]],["literal",3]],[[["f64",0]],["literal",3]],[[["lexerror",3],["formatter",3]],["result",6]],[[["tokenstream",3],["formatter",3]],["result",6]],[[["tokenstream",3],["formatter",3]],["result",6]],[[["span",3],["formatter",3]],["result",6]],[[["tokentree",4],["formatter",3]],["result",6]],[[["tokentree",4],["formatter",3]],["result",6]],[[["group",3],["formatter",3]],["result",6]],[[["group",3],["formatter",3]],["result",6]],[[["delimiter",4],["formatter",3]],["result",6]],[[["punct",3],["formatter",3]],["result",6]],[[["punct",3],["formatter",3]],["result",6]],[[["spacing",4],["formatter",3]],["result",6]],[[["ident",3],["formatter",3]],["result",6]],[[["ident",3],["formatter",3]],["result",6]],[[["literal",3],["formatter",3]],["result",6]],[[["literal",3],["formatter",3]],["result",6]],[[]],[[]],[[["tokenstream",3]],["tokenstream",3]],[[["span",3]],["span",3]],[[]],[[["ident",3]],["tokentree",4]],[[["literal",3]],["tokentree",4]],[[["punct",3]],["tokentree",4]],[[["group",3]],["tokentree",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]],["tokenstream",3]],[[["intoiterator",8]],["tokenstream",3]],[[["str",0]],["result",4,[["tokenstream",3],["lexerror",3]]]],[[["ident",3],["",0]]],[[["i128",0]],["literal",3]],[[["i128",0]],["literal",3]],[[["i16",0]],["literal",3]],[[["i16",0]],["literal",3]],[[["i32",0]],["literal",3]],[[["i32",0]],["literal",3]],[[["i64",0]],["literal",3]],[[["i64",0]],["literal",3]],[[["i8",0]],["literal",3]],[[["i8",0]],["literal",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["tokenstream",3]],["intoiter",3]],[[["tokenstream",3]],["bool",0]],[[["isize",0]],["literal",3]],[[["isize",0]],["literal",3]],[[],["tokenstream",3]],[[["delimiter",4],["tokenstream",3]],["group",3]],[[["char",0],["spacing",4]],["punct",3]],[[["str",0],["span",3]],["ident",3]],[[["ident",3],["ident",3]],["option",4,[["ordering",4]]]],[[["tokentree",4],["span",3]]],[[["group",3],["span",3]]],[[["punct",3],["span",3]]],[[["ident",3],["span",3]]],[[["literal",3],["span",3]]],[[["punct",3]],["spacing",4]],[[["tokentree",4]],["span",3]],[[["group",3]],["span",3]],[[["punct",3]],["span",3]],[[["ident",3]],["span",3]],[[["literal",3]],["span",3]],[[["group",3]],["tokenstream",3]],[[["str",0]],["literal",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["u128",0]],["literal",3]],[[["u128",0]],["literal",3]],[[["u16",0]],["literal",3]],[[["u16",0]],["literal",3]],[[["u32",0]],["literal",3]],[[["u32",0]],["literal",3]],[[["u64",0]],["literal",3]],[[["u64",0]],["literal",3]],[[["u8",0]],["literal",3]],[[["u8",0]],["literal",3]],[[["span",3]],["span",3]],[[["usize",0]],["literal",3]],[[["usize",0]],["literal",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["intoiter",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["intoiter",3]],["option",4,[["tokentree",4]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[4,"Spacing"],[4,"Delimiter"],[4,"TokenTree"],[3,"Punct"],[3,"LexError"],[3,"TokenStream"],[3,"Span"],[3,"Group"],[3,"Ident"],[3,"Literal"],[13,"Group"],[13,"Ident"],[13,"Punct"],[13,"Literal"],[3,"IntoIter"]]},\
"quote":{"doc":"This crate provides the <code>quote!</code> macro for turning Rust …","t":[8,8,10,10,10,10,11,11,14,14,10],"n":["ToTokens","TokenStreamExt","append","append_all","append_separated","append_terminated","into_token_stream","into_token_stream","quote","quote_spanned","to_tokens"],"q":["quote","","","","","","","","","",""],"d":["Types that can be interpolated inside a <code>quote!</code> invocation.","TokenStream extension trait with methods for appending …","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","For use by <code>ToTokens</code> implementations.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","Convert <code>self</code> directly into a <code>TokenStream</code> object.","The whole point.","Same as <code>quote!</code>, but applies a given span to all tokens …","Write <code>self</code> to the given <code>TokenStream</code>."],"i":[0,0,1,1,1,1,2,2,0,0,2],"f":[null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["tokenstream",3]],[[],["tokenstream",3]],null,null,[[["",0],["tokenstream",3]]]],"p":[[8,"TokenStreamExt"],[8,"ToTokens"]]},\
"rand":{"doc":"Utilities for random number generation","t":[8,8,3,4,8,13,8,8,16,8,13,13,13,10,11,11,11,11,11,11,11,11,11,11,11,0,11,11,10,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,12,12,11,10,10,0,0,5,11,0,11,11,11,0,11,11,11,11,5,10,11,11,11,10,11,11,11,11,11,11,11,13,3,3,3,3,3,3,3,3,8,3,3,3,3,3,13,13,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,12,8,8,16,3,3,3,3,8,16,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,2,2,2,2,2,2,2,2,2,2,2,13,3,3,13,13,3,3,3,3,4,13,13,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,3,8,11,11,10,11,10,11,11,10,10,10,11,11,0,11,11,11,11,10,5,5,5,10,11,11,11,11,4,4,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AsByteSliceMut","CryptoRng","Error","ErrorKind","FromEntropy","NotReady","Rng","RngCore","Seed","SeedableRng","Transient","Unavailable","Unexpected","as_byte_slice_mut","borrow","borrow","borrow_mut","borrow_mut","cause","choose","choose_mut","clone","clone_into","description","description","distributions","eq","fill","fill_bytes","fmt","fmt","fmt","from","from","from","from_entropy","from_rng","from_seed","gen","gen_bool","gen_range","gen_ratio","into","into","kind","msg","new","next_u32","next_u64","prelude","prng","random","read","rngs","sample","sample_iter","seed_from_u64","seq","should_retry","should_wait","shuffle","take_cause","thread_rng","to_le","to_owned","to_string","try_fill","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","with_cause","AllWeightsZero","Alphanumeric","Bernoulli","Beta","Binomial","Cauchy","ChiSquared","Dirichlet","DistIter","Distribution","Exp","Exp1","FisherF","Gamma","LogNormal","NegativeWeight","NoItem","Normal","Open01","OpenClosed01","Pareto","Poisson","Standard","StandardNormal","StudentT","Triangular","Uniform","UnitCircle","UnitSphereSurface","Weibull","Weighted","WeightedChoice","WeightedError","WeightedIndex","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","description","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ratio","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","item","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_with_param","next","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_iter","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uniform","weight","SampleBorrow","SampleUniform","Sampler","Uniform","UniformDuration","UniformFloat","UniformInt","UniformSampler","X","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","fmt","fmt","fmt","from","from","from","into","into","into","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","CryptoRng","Distribution","FromEntropy","IteratorRandom","Rng","RngCore","SeedableRng","SliceRandom","SmallRng","StdRng","ThreadRng","random","thread_rng","CoarseTimer","EntropyRng","JitterRng","NoTimer","NotMonotonic","OsRng","SmallRng","StdRng","ThreadRng","TimerError","TinyVariantions","TooManyStuck","adapter","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","description","eq","fill_bytes","fill_bytes","fill_bytes","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_entropy","from_entropy","from_rng","from_rng","from_seed","from_seed","into","into","into","into","into","into","into","mock","new","new","new","new_with_timer","next_u32","next_u32","next_u32","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","next_u64","next_u64","next_u64","set_rounds","test_timer","timer_stats","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ReadRng","ReseedingRng","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fill_bytes","fill_bytes","fmt","fmt","from","from","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reseed","to_owned","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","StepRng","borrow","borrow_mut","clone","clone_into","fill_bytes","fmt","from","into","new","next_u32","next_u64","to_owned","try_fill_bytes","try_from","try_into","type_id","Item","IteratorRandom","SliceChooseIter","SliceRandom","borrow","borrow_mut","choose","choose","choose_multiple","choose_multiple","choose_multiple_fill","choose_mut","choose_weighted","choose_weighted_mut","fmt","from","index","into","into_iter","len","next","partial_shuffle","sample_iter","sample_slice","sample_slice_ref","shuffle","size_hint","try_from","try_into","type_id","IndexVec","IndexVecIntoIter","IndexVecIter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","from","from","from","from","from","index","into","into","into","into_iter","into_iter","into_iter","into_vec","iter","len","next","next","sample","size_hint","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["rand","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::distributionsrand::distributions::uniform","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::prelude","","","","","","","","","","","","","rand::rngs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::rngs::adapter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::rngs::mock","","","","","","","","","","","","","","","","","rand::seq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand::seq::index","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Trait for casting types to byte slices","A marker trait used to indicate that an <code>RngCore</code> or …","Error type of random number generators","Error kind which can be matched over.","A convenience extension to <code>SeedableRng</code> allowing …","Not ready yet: recommended to try again a little later.","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","A transient failure which likely can be resolved or worked …","Feature is not available; not recoverable.","General failure; there may be a chance of recovery on …","Return a mutable reference to self as a byte slice","","","","","","Return a random element from <code>values</code>.","Return a mutable pointer to a random element from <code>values</code>.","","","A description of this error kind","","Generating random samples from probability distributions.","","Fill <code>dest</code> entirely with random bytes (uniform value …","Fill <code>dest</code> with random data.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Creates a new instance, automatically seeded with fresh …","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the range [<code>low</code>, <code>high</code>), i.e. …","Return a bool with a probability of <code>numerator/denominator</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The error kind","The error message","Create a new instance, with specified kind and a message.","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Convenience re-export of common members","Pseudo-random number generators.","Generates a random value using the thread-local random …","","Random number generators and adapters for common usage:","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Functions for randomly accessing and sampling sequences.","True if this kind of error may resolve itself on retry.","True if we should retry but wait before retrying","Shuffle a mutable slice in place.","Take the cause, if any. This allows the embedded cause to …","Retrieve the lazily-initialized thread-local random number …","Call <code>to_le</code> on each element (i.e. byte-swap on Big Endian …","","","Fill <code>dest</code> entirely with random bytes (uniform value …","Fill <code>dest</code> entirely with random data.","","","","","","","Create a new instance, with specified kind, message, and a …","All items in the provided iterator had a weight of zero.","Sample a <code>char</code>, uniformly distributed over ASCII letters …","The Bernoulli distribution.","The Beta distribution with shape parameters <code>alpha</code> and <code>beta</code>.","The binomial distribution <code>Binomial(n, p)</code>.","The Cauchy distribution <code>Cauchy(median, scale)</code>.","The chi-squared distribution <code>χ²(k)</code>, where <code>k</code> is the …","The dirichelet distribution <code>Dirichlet(alpha)</code>.","An iterator that generates random values of <code>T</code> with …","Types (distributions) that can be used to create a random …","The exponential distribution <code>Exp(lambda)</code>.","Samples floating-point numbers according to the …","The Fisher F distribution <code>F(m, n)</code>.","The Gamma distribution <code>Gamma(shape, scale)</code> distribution.","The log-normal distribution <code>ln N(mean, std_dev**2)</code>.","A weight lower than zero was used.","The provided iterator contained no items.","The normal distribution <code>N(mean, std_dev**2)</code>.","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","Samples floating-point numbers according to the Pareto …","The Poisson distribution <code>Poisson(lambda)</code>.","A generic random value distribution, implemented for many …","Samples floating-point numbers according to the normal …","The Student t distribution, <code>t(nu)</code>, where <code>nu</code> is the degrees …","The triangular distribution.","Sample values uniformly between two bounds.","Samples uniformly from the edge of the unit circle in two …","Samples uniformly from the surface of the unit sphere in …","Samples floating-point numbers according to the Weibull …","A value with a particular weight for use with …","A distribution that selects from a finite collection of …","Error type returned from <code>WeightedIndex::new</code>.","A distribution using weighted sampling to pick a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Construct a new <code>Bernoulli</code> with the probability of success …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","The actual item which is being weighted","Construct a new <code>Bernoulli</code> with the given probability of …","Creates a new a <code>WeightedIndex</code> <code>Distribution</code> using the values","Construct a new <code>UnitSphereSurface</code> distribution.","Construct a new <code>UnitCircle</code> distribution.","Construct an object representing the <code>Gamma(shape, scale)</code> …","Create a new chi-squared distribution with …","Create a new <code>FisherF</code> distribution, with the given …","Create a new Student t distribution with <code>n</code> degrees of …","Construct an object representing the <code>Beta(alpha, beta)</code> …","Construct a new <code>Normal</code> distribution with the given mean and","Construct a new <code>LogNormal</code> distribution with the given mean …","Construct a new <code>Exp</code> with the given shape parameter <code>lambda</code>. …","Construct a new Pareto distribution with given <code>scale</code> and …","Construct a new <code>Poisson</code> with the given shape parameter …","Construct a new <code>Binomial</code> with the given shape parameters <code>n</code> …","Construct a new <code>Cauchy</code> with the given shape parameters …","Construct a new <code>Dirichlet</code> with the given alpha parameter …","Construct a new <code>Triangular</code> with minimum <code>min</code>, maximum <code>max</code> …","Construct a new <code>Weibull</code> distribution with given <code>scale</code> and …","Create a new <code>WeightedChoice</code>.","Construct a new <code>Dirichlet</code> with the given shape parameter …","","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an iterator that generates random values of <code>T</code>, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A distribution uniformly sampling numbers within a given …","The numerical weight of this item","Helper trait similar to <code>Borrow</code> but implemented only for …","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Sample values uniformly between two bounds.","The back-end implementing <code>UniformSampler</code> for <code>Duration</code>.","The back-end implementing <code>UniformSampler</code> for …","The back-end implementing <code>UniformSampler</code> for integer types.","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Construct self, with inclusive lower bound and exclusive …","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","Construct self, with inclusive bounds <code>[low, high]</code>.","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","Sample a value.","","","","","","","","","","","","","","","","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Timer too coarse to use as an entropy source.","An interface returning random data from external …","A true random number generator based on jitter in the CPU …","No timer available.","Timer is not monotonically increasing.","A random number generator that retrieves randomness …","An RNG recommended when small state, cheap initialization …","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","The type returned by <code>thread_rng</code>, essentially just a …","An error that can occur when <code>JitterRng::test_timer</code> fails.","Variations of deltas of time too small.","Too many stuck results (indicating no added entropy).","Wrappers / adapters forming RNGs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Mock random number generator","Create a new <code>OsRng</code>.","Create a new <code>JitterRng</code>. Makes use of <code>std::time</code> for a …","Create a new <code>EntropyRng</code>.","Create a new <code>JitterRng</code>. A custom timer can be supplied, …","","","","","","","","","","","","","Configures how many rounds are used to generate each …","Basic quality tests on the timer, by measuring CPU timing …","Statistical test: return the timer delta of one normal run …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An RNG that reads random bytes straight from any type …","A wrapper around any PRNG that implements <code>BlockRngCore</code>, …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ReadRng</code> from a <code>Read</code>.","Create a new <code>ReseedingRng</code> from an existing PRNG, combined …","","","","","Reseed the internal PRNG.","","","","","","","","","","A simple implementation of <code>RngCore</code> for testing purposes.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a <code>StepRng</code>, yielding an arithmetic sequence starting …","","","","","","","","The element type.","Extension trait on iterators, providing random sampling …","Iterator over multiple choices, as returned by `…","Extension trait on slices, providing random mutation and …","","","Returns a reference to one random element of the slice, or …","Choose one element at random from the iterator. If you …","Produces an iterator that chooses <code>amount</code> elements from the …","Collects <code>amount</code> values at random from the iterator into a …","Collects <code>amount</code> values at random from the iterator into a …","Returns a mutable reference to one random element of the …","Similar to <code>choose</code>, where the likelihood of each outcome …","Similar to <code>choose_mut</code>, where the likelihood of each …","","Returns the argument unchanged.","Index sampling","Calls <code>U::from(self)</code>.","","","","Shuffle a slice in place, but exit early.","Randomly sample <code>amount</code> elements from a finite iterator.","Randomly sample exactly <code>amount</code> values from <code>slice</code>.","Randomly sample exactly <code>amount</code> references from <code>slice</code>.","Shuffle a mutable slice in place.","","","","","A vector of indices.","Return type of <code>IndexVec::into_iter</code>.","Return type of <code>IndexVec::iter</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Return the value at the given <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert into an iterator over the indices as a sequence of …","","","Return result as a <code>Vec&lt;usize&gt;</code>. Conversion may or may not …","Iterate over the indices as a sequence of <code>usize</code> values","Returns the number of indices","","","Randomly sample exactly <code>amount</code> distinct indices from …","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,0,0,2,0,1,1,1,3,1,4,1,4,4,5,5,1,1,1,4,0,1,5,6,1,4,4,1,4,4,7,2,2,5,5,5,5,1,4,4,4,4,6,6,0,0,0,6,0,5,5,2,0,1,1,5,4,0,3,1,4,5,6,1,4,1,4,1,4,4,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,10,11,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,9,10,11,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,8,9,10,11,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,35,36,9,10,11,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,35,36,8,8,9,10,11,8,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,9,9,9,10,11,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,10,9,10,11,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,34,36,10,11,12,13,14,15,16,17,18,20,21,23,24,25,26,27,28,29,30,37,28,34,38,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,31,32,32,33,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,37,38,34,9,10,11,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,35,36,8,9,10,11,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,9,10,11,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,9,10,11,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,0,36,0,0,39,0,0,0,0,0,40,41,42,43,44,42,43,44,42,43,44,42,43,44,42,43,44,42,43,44,42,43,44,40,9,42,42,42,42,42,42,42,42,42,42,42,42,43,43,44,40,9,42,42,42,42,42,42,42,42,42,42,42,42,43,43,44,40,42,42,42,42,42,42,42,42,42,42,42,42,43,43,44,40,42,42,42,42,42,42,42,42,42,42,42,42,43,43,42,43,44,42,43,44,42,43,44,42,43,44,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,45,45,0,0,0,0,0,45,45,0,46,47,45,48,49,50,51,46,47,45,48,49,50,51,46,47,45,49,50,51,46,47,45,49,50,51,48,51,45,45,46,47,48,49,50,51,46,47,45,45,48,49,50,51,46,47,45,48,49,50,51,49,50,49,50,49,50,46,47,45,48,49,50,51,0,46,47,48,47,46,47,48,49,50,51,46,47,48,49,50,51,47,47,47,46,47,45,49,50,51,45,46,47,48,49,50,51,46,47,45,48,49,50,51,46,47,45,48,49,50,51,46,47,45,48,49,50,51,0,0,52,53,52,53,53,53,52,53,52,53,52,53,52,53,52,53,52,53,52,53,53,53,52,53,52,53,52,53,52,53,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55,0,0,0,56,56,55,57,55,57,57,55,55,55,56,56,0,56,56,56,56,55,0,0,0,55,56,56,56,56,0,0,0,58,59,60,58,59,60,58,60,58,60,58,58,59,60,58,58,58,59,60,58,58,59,60,58,59,60,58,58,58,59,60,0,59,60,58,60,58,59,60,58,59,60,58,59,60],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["error",3]],["option",4,[["error",8]]]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["errorkind",4]],["errorkind",4]],[[["",0],["",0]]],[[["errorkind",4]],["str",0]],[[["error",3]],["str",0]],null,[[["errorkind",4],["errorkind",4]],["bool",0]],[[["",0],["",0]]],[[["",0]]],[[["errorkind",4],["formatter",3]],["result",4,[["error",3]]]],[[["error",3],["formatter",3]],["result",4,[["error",3]]]],[[["error",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[["timererror",4]],["error",3]],[[]],[[]],[[],["result",4,[["error",3]]]],[[]],[[["",0]]],[[["",0],["f64",0]],["bool",0]],[[["",0]],["sampleuniform",8]],[[["",0],["u32",0],["u32",0]],["bool",0]],[[]],[[]],null,null,[[["errorkind",4],["str",0]],["error",3]],[[["",0]],["u32",0]],[[["",0]],["u64",0]],null,null,[[]],[[["rngcore",8]],["result",4,[["usize",0],["error",3]]]],null,[[["",0],["distribution",8]]],[[["",0],["",0]],["distiter",3,[["distribution",8]]]],[[["u64",0]]],null,[[["errorkind",4]],["bool",0]],[[["errorkind",4]],["bool",0]],[[["",0]]],[[["error",3]],["option",4,[["box",3,[["error",8],["global",3]]]]]],[[],["threadrng",3]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0],["",0]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["errorkind",4],["str",0]],["error",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullweightederror",4]],["option",4,[["error",8]]]],[[["uniform",3,[["",26,[["clone",8],["sampleuniform",8]]]]]],["uniform",3,[["",26,[["clone",8],["sampleuniform",8]]]]]],[[["bernoulli",3]],["bernoulli",3]],[[["weightedindex",3,[["",26,[["clone",8],["sampleuniform",8],["partialord",8]]]]]],["weightedindex",3,[["",26,[["clone",8],["sampleuniform",8],["partialord",8]]]]]],[[["weightederror",4]],["weightederror",4]],[[["unitspheresurface",3]],["unitspheresurface",3]],[[["unitcircle",3]],["unitcircle",3]],[[["gamma",3]],["gamma",3]],[[["chisquared",3]],["chisquared",3]],[[["fisherf",3]],["fisherf",3]],[[["studentt",3]],["studentt",3]],[[["beta",3]],["beta",3]],[[["standardnormal",3]],["standardnormal",3]],[[["normal",3]],["normal",3]],[[["lognormal",3]],["lognormal",3]],[[["exp1",3]],["exp1",3]],[[["exp",3]],["exp",3]],[[["pareto",3]],["pareto",3]],[[["poisson",3]],["poisson",3]],[[["binomial",3]],["binomial",3]],[[["cauchy",3]],["cauchy",3]],[[["dirichlet",3]],["dirichlet",3]],[[["triangular",3]],["triangular",3]],[[["weibull",3]],["weibull",3]],[[["openclosed01",3]],["openclosed01",3]],[[["open01",3]],["open01",3]],[[["standard",3]],["standard",3]],[[["weighted",3,[["clone",8]]]],["weighted",3,[["clone",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["weightederror",4]],["str",0]],[[["weightederror",4],["weightederror",4]],["bool",0]],[[["uniform",3,[["",26,[["debug",8],["sampleuniform",8]]]]],["formatter",3]],["result",6]],[[["bernoulli",3],["formatter",3]],["result",6]],[[["weightedindex",3,[["",26,[["debug",8],["sampleuniform",8],["partialord",8]]]]],["formatter",3]],["result",6]],[[["weightederror",4],["formatter",3]],["result",6]],[[["weightederror",4],["formatter",3]],["result",6]],[[["unitspheresurface",3],["formatter",3]],["result",6]],[[["unitcircle",3],["formatter",3]],["result",6]],[[["gamma",3],["formatter",3]],["result",6]],[[["chisquared",3],["formatter",3]],["result",6]],[[["fisherf",3],["formatter",3]],["result",6]],[[["studentt",3],["formatter",3]],["result",6]],[[["beta",3],["formatter",3]],["result",6]],[[["standardnormal",3],["formatter",3]],["result",6]],[[["normal",3],["formatter",3]],["result",6]],[[["lognormal",3],["formatter",3]],["result",6]],[[["exp1",3],["formatter",3]],["result",6]],[[["exp",3],["formatter",3]],["result",6]],[[["pareto",3],["formatter",3]],["result",6]],[[["poisson",3],["formatter",3]],["result",6]],[[["binomial",3],["formatter",3]],["result",6]],[[["cauchy",3],["formatter",3]],["result",6]],[[["dirichlet",3],["formatter",3]],["result",6]],[[["triangular",3],["formatter",3]],["result",6]],[[["weibull",3],["formatter",3]],["result",6]],[[["openclosed01",3],["formatter",3]],["result",6]],[[["open01",3],["formatter",3]],["result",6]],[[["alphanumeric",3],["formatter",3]],["result",6]],[[["distiter",3,[["debug",8],["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["standard",3],["formatter",3]],["result",6]],[[["weighted",3,[["debug",8]]],["formatter",3]],["result",6]],[[["weightedchoice",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[["rangeinclusive",3,[["sampleuniform",8]]]],["uniform",3,[["sampleuniform",8]]]],[[["range",3,[["sampleuniform",8]]]],["uniform",3,[["sampleuniform",8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",0],["u32",0]],["bernoulli",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["f64",0]],["bernoulli",3]],[[],["result",4,[["weightedindex",3,[["",26,[["sampleuniform",8],["partialord",8]]]]],["weightederror",4]]]],[[],["unitspheresurface",3]],[[],["unitcircle",3]],[[["f64",0],["f64",0]],["gamma",3]],[[["f64",0]],["chisquared",3]],[[["f64",0],["f64",0]],["fisherf",3]],[[["f64",0]],["studentt",3]],[[["f64",0],["f64",0]],["beta",3]],[[["f64",0],["f64",0]],["normal",3]],[[["f64",0],["f64",0]],["lognormal",3]],[[["f64",0]],["exp",3]],[[["f64",0],["f64",0]],["pareto",3]],[[["f64",0]],["poisson",3]],[[["u64",0],["f64",0]],["binomial",3]],[[["f64",0],["f64",0]],["cauchy",3]],[[["into",8,[["vec",3,[["f64",0]]]]]],["dirichlet",3]],[[["f64",0],["f64",0],["f64",0]],["triangular",3]],[[["f64",0],["f64",0]],["weibull",3]],[[],["weightedchoice",3,[["clone",8]]]],[[["f64",0],["usize",0]],["dirichlet",3]],[[["distiter",3]],["option",4]],[[["",0],["",0]]],[[["uniform",3,[["sampleuniform",8]]],["",0]],["sampleuniform",8]],[[["bernoulli",3],["",0]],["bool",0]],[[["weightedindex",3],["",0]],["usize",0]],[[["unitspheresurface",3],["",0]]],[[["unitcircle",3],["",0]]],[[["gamma",3],["",0]],["f64",0]],[[["chisquared",3],["",0]],["f64",0]],[[["fisherf",3],["",0]],["f64",0]],[[["studentt",3],["",0]],["f64",0]],[[["beta",3],["",0]],["f64",0]],[[["standardnormal",3],["",0]],["f64",0]],[[["normal",3],["",0]],["f64",0]],[[["lognormal",3],["",0]],["f64",0]],[[["exp1",3],["",0]],["f64",0]],[[["exp",3],["",0]],["f64",0]],[[["pareto",3],["",0]],["f64",0]],[[["poisson",3],["",0]],["u64",0]],[[["binomial",3],["",0]],["u64",0]],[[["cauchy",3],["",0]],["f64",0]],[[["dirichlet",3],["",0]],["vec",3,[["f64",0]]]],[[["triangular",3],["",0]],["f64",0]],[[["weibull",3],["",0]],["f64",0]],[[["openclosed01",3],["",0]],["f32",0]],[[["openclosed01",3],["",0]],["f64",0]],[[["open01",3],["",0]],["f32",0]],[[["open01",3],["",0]],["f64",0]],[[["alphanumeric",3],["",0]],["char",0]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]],["f32",0]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]],["f64",0]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]],["u8",0]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]],["bool",0]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]]],[[["standard",3],["",0]],["char",0]],[[["standard",3],["",0]],["isize",0]],[[["standard",3],["",0]],["u16",0]],[[["standard",3],["",0]]],[[["standard",3],["",0]],["i128",0]],[[["standard",3],["",0]]],[[["standard",3],["",0]],["option",4]],[[["standard",3],["",0]],["wrapping",3]],[[["standard",3],["",0]],["i64",0]],[[["standard",3],["",0]],["i32",0]],[[["standard",3],["",0]],["i16",0]],[[["standard",3],["",0]],["i8",0]],[[["standard",3],["",0]],["u32",0]],[[["standard",3],["",0]],["usize",0]],[[["standard",3],["",0]],["u64",0]],[[["standard",3],["",0]],["u128",0]],[[["weightedchoice",3,[["clone",8]]],["",0]],["clone",8]],[[["",0],["",0]],["distiter",3]],[[["distiter",3]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["uniformint",3,[["clone",8]]]],["uniformint",3,[["clone",8]]]],[[["uniformfloat",3,[["clone",8]]]],["uniformfloat",3,[["clone",8]]]],[[["uniformduration",3]],["uniformduration",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["uniformint",3,[["debug",8]]],["formatter",3]],["result",6]],[[["uniformfloat",3,[["debug",8]]],["formatter",3]],["result",6]],[[["uniformduration",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["uniform",3,[["sampleuniform",8]]]],[[],["uniformint",3,[["i16",0]]]],[[],["uniformint",3,[["u128",0]]]],[[],["uniformint",3,[["usize",0]]]],[[],["uniformint",3,[["u64",0]]]],[[],["uniformint",3,[["u32",0]]]],[[],["uniformint",3,[["u16",0]]]],[[],["uniformint",3,[["u8",0]]]],[[],["uniformint",3,[["isize",0]]]],[[],["uniformint",3,[["i128",0]]]],[[],["uniformint",3,[["i64",0]]]],[[],["uniformint",3,[["i32",0]]]],[[],["uniformint",3,[["i8",0]]]],[[],["uniformfloat",3,[["f64",0]]]],[[],["uniformfloat",3,[["f32",0]]]],[[],["uniformduration",3]],[[]],[[],["uniform",3,[["sampleuniform",8]]]],[[],["uniformint",3,[["u64",0]]]],[[],["uniformint",3,[["u32",0]]]],[[],["uniformint",3,[["isize",0]]]],[[],["uniformint",3,[["u8",0]]]],[[],["uniformint",3,[["i64",0]]]],[[],["uniformint",3,[["i32",0]]]],[[],["uniformint",3,[["i16",0]]]],[[],["uniformint",3,[["u128",0]]]],[[],["uniformint",3,[["i8",0]]]],[[],["uniformint",3,[["usize",0]]]],[[],["uniformint",3,[["u16",0]]]],[[],["uniformint",3,[["i128",0]]]],[[],["uniformfloat",3,[["f64",0]]]],[[],["uniformfloat",3,[["f32",0]]]],[[],["uniformduration",3]],[[["",0],["",0]]],[[["uniformint",3,[["u32",0]]],["",0]]],[[["uniformint",3,[["u16",0]]],["",0]]],[[["uniformint",3,[["u64",0]]],["",0]]],[[["uniformint",3,[["i8",0]]],["",0]]],[[["uniformint",3,[["u8",0]]],["",0]]],[[["uniformint",3,[["usize",0]]],["",0]]],[[["uniformint",3,[["i16",0]]],["",0]]],[[["uniformint",3,[["i128",0]]],["",0]]],[[["uniformint",3,[["u128",0]]],["",0]]],[[["uniformint",3,[["i32",0]]],["",0]]],[[["uniformint",3,[["isize",0]]],["",0]]],[[["uniformint",3,[["i64",0]]],["",0]]],[[["uniformfloat",3,[["f32",0]]],["",0]]],[[["uniformfloat",3,[["f64",0]]],["",0]]],[[["uniformduration",3],["",0]],["duration",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["osrng",3]],["osrng",3]],[[["jitterrng",3]],["jitterrng",3]],[[["timererror",4]],["timererror",4]],[[["smallrng",3]],["smallrng",3]],[[["stdrng",3]],["stdrng",3]],[[["threadrng",3]],["threadrng",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["entropyrng",3]],[[],["threadrng",3]],[[["timererror",4]],["str",0]],[[["timererror",4],["timererror",4]],["bool",0]],[[["osrng",3]]],[[["jitterrng",3]]],[[["entropyrng",3]]],[[["smallrng",3]]],[[["stdrng",3]]],[[["threadrng",3]]],[[["osrng",3],["formatter",3]],["result",4,[["error",3]]]],[[["jitterrng",3],["formatter",3]],["result",4,[["error",3]]]],[[["timererror",4],["formatter",3]],["result",4,[["error",3]]]],[[["timererror",4],["formatter",3]],["result",4,[["error",3]]]],[[["entropyrng",3],["formatter",3]],["result",6]],[[["smallrng",3],["formatter",3]],["result",6]],[[["stdrng",3],["formatter",3]],["result",6]],[[["threadrng",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rngcore",8]],["result",4,[["smallrng",3],["error",3]]]],[[["rngcore",8]],["result",4,[["stdrng",3],["error",3]]]],[[],["smallrng",3]],[[],["stdrng",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["result",4,[["osrng",3],["error",3]]]],[[],["result",4,[["jitterrng",3],["timererror",4]]]],[[],["entropyrng",3]],[[],["jitterrng",3]],[[["osrng",3]],["u32",0]],[[["jitterrng",3]],["u32",0]],[[["entropyrng",3]],["u32",0]],[[["smallrng",3]],["u32",0]],[[["stdrng",3]],["u32",0]],[[["threadrng",3]],["u32",0]],[[["osrng",3]],["u64",0]],[[["jitterrng",3]],["u64",0]],[[["entropyrng",3]],["u64",0]],[[["smallrng",3]],["u64",0]],[[["stdrng",3]],["u64",0]],[[["threadrng",3]],["u64",0]],[[["jitterrng",3],["u8",0]]],[[["jitterrng",3]],["result",4,[["u8",0],["timererror",4]]]],[[["jitterrng",3],["bool",0]],["i64",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["osrng",3]],["result",4,[["error",3]]]],[[["jitterrng",3]],["result",4,[["error",3]]]],[[["entropyrng",3]],["result",4,[["error",3]]]],[[["smallrng",3]],["result",4,[["error",3]]]],[[["stdrng",3]],["result",4,[["error",3]]]],[[["threadrng",3]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["reseedingrng",3]],["reseedingrng",3]],[[["",0],["",0]]],[[["readrng",3,[["read",8]]]]],[[["reseedingrng",3,[["rngcore",8]]]]],[[["readrng",3,[["debug",8]]],["formatter",3]],["result",6]],[[["reseedingrng",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["read",8]],["readrng",3,[["read",8]]]],[[["u64",0]],["reseedingrng",3]],[[["readrng",3,[["read",8]]]],["u32",0]],[[["reseedingrng",3,[["rngcore",8]]]],["u32",0]],[[["readrng",3,[["read",8]]]],["u64",0]],[[["reseedingrng",3,[["rngcore",8]]]],["u64",0]],[[["reseedingrng",3]],["result",4,[["error",3]]]],[[["",0]]],[[["readrng",3,[["read",8]]]],["result",4,[["error",3]]]],[[["reseedingrng",3,[["rngcore",8]]]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["steprng",3]],["steprng",3]],[[["",0],["",0]]],[[["steprng",3]]],[[["steprng",3],["formatter",3]],["result",6]],[[]],[[]],[[["u64",0],["u64",0]],["steprng",3]],[[["steprng",3]],["u32",0]],[[["steprng",3]],["u64",0]],[[["",0]]],[[["steprng",3]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["",0],["usize",0]],["slicechooseiter",3]],[[["",0],["usize",0]],["vec",3]],[[["",0]],["usize",0]],[[["",0],["",0]],["option",4]],[[["",0],["",0]],["result",4,[["weightederror",4]]]],[[["",0],["",0]],["result",4,[["weightederror",4]]]],[[["slicechooseiter",3,[["",26,[["debug",8],["sized",8]]],["debug",8]]],["formatter",3]],["result",6]],[[]],null,[[]],[[]],[[["slicechooseiter",3,[["",26,[["index",8,[["usize",0]]],["sized",8]]]]]],["usize",0]],[[["slicechooseiter",3,[["",26,[["index",8,[["usize",0]]],["sized",8]]]]]],["option",4]],[[["",0],["",0],["usize",0]]],[[["",0],["usize",0]],["result",4,[["vec",3],["vec",3]]]],[[["",0],["usize",0]],["vec",3]],[[["",0],["usize",0]],["vec",3]],[[["",0],["",0]]],[[["slicechooseiter",3,[["",26,[["index",8,[["usize",0]]],["sized",8]]]]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["indexvec",4]],["indexvec",4]],[[["indexvecintoiter",4]],["indexvecintoiter",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["indexvec",4],["indexvec",4]],["bool",0]],[[["indexvec",4],["formatter",3]],["result",6]],[[["indexveciter",4],["formatter",3]],["result",6]],[[["indexvecintoiter",4],["formatter",3]],["result",6]],[[["vec",3,[["u32",0]]]],["indexvec",4]],[[]],[[["vec",3,[["usize",0]]]],["indexvec",4]],[[]],[[]],[[["indexvec",4],["usize",0]],["usize",0]],[[]],[[]],[[]],[[["indexvec",4]],["indexvecintoiter",4]],[[]],[[]],[[["indexvec",4]],["vec",3,[["usize",0]]]],[[["indexvec",4]],["indexveciter",4]],[[["indexvec",4]],["usize",0]],[[["indexveciter",4]],["option",4,[["usize",0]]]],[[["indexvecintoiter",4]],["option",4]],[[["",0],["usize",0],["usize",0]],["indexvec",4]],[[["indexveciter",4]]],[[["indexvecintoiter",4]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[4,"ErrorKind"],[8,"SeedableRng"],[8,"AsByteSliceMut"],[3,"Error"],[8,"Rng"],[8,"RngCore"],[8,"FromEntropy"],[4,"WeightedError"],[3,"Uniform"],[3,"Bernoulli"],[3,"WeightedIndex"],[3,"UnitSphereSurface"],[3,"UnitCircle"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"Beta"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[3,"Pareto"],[3,"Poisson"],[3,"Binomial"],[3,"Cauchy"],[3,"Dirichlet"],[3,"Triangular"],[3,"Weibull"],[3,"OpenClosed01"],[3,"Open01"],[3,"Alphanumeric"],[3,"DistIter"],[3,"Standard"],[3,"Weighted"],[3,"WeightedChoice"],[8,"Distribution"],[8,"SampleUniform"],[8,"UniformSampler"],[8,"SampleBorrow"],[3,"UniformInt"],[3,"UniformFloat"],[3,"UniformDuration"],[4,"TimerError"],[3,"OsRng"],[3,"JitterRng"],[3,"EntropyRng"],[3,"SmallRng"],[3,"StdRng"],[3,"ThreadRng"],[3,"ReadRng"],[3,"ReseedingRng"],[3,"StepRng"],[8,"SliceRandom"],[3,"SliceChooseIter"],[8,"IteratorRandom"],[4,"IndexVec"],[4,"IndexVecIter"],[4,"IndexVecIntoIter"]]},\
"rand_chacha":{"doc":"The ChaCha random number generator.","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ChaChaCore","ChaChaRng","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fill_bytes","fmt","fmt","from","from","from","from_rng","from_seed","from_seed","generate","get_word_pos","into","into","next_u32","next_u64","set_stream","set_word_pos","to_owned","to_owned","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["rand_chacha","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The core of <code>ChaChaRng</code>, used with <code>BlockRng</code>.","A cryptographically secure random number generator that …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Get the offset from the start of the stream, in 32-bit …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Set the stream number.","Set the offset from the start of the stream, in 32-bit …","","","","","","","","",""],"i":[0,0,1,2,1,2,1,2,1,2,1,1,2,1,1,2,1,1,2,2,1,1,2,1,1,1,1,1,2,1,1,2,1,2,1,2],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["chacharng",3]],["chacharng",3]],[[["chachacore",3]],["chachacore",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["chacharng",3]]],[[["chacharng",3],["formatter",3]],["result",6]],[[["chachacore",3],["formatter",3]],["result",6]],[[["chachacore",3]],["chacharng",3]],[[]],[[]],[[["rngcore",8]],["result",4,[["chacharng",3],["error",3]]]],[[],["chacharng",3]],[[],["chachacore",3]],[[["chachacore",3]]],[[["chacharng",3]],["u128",0]],[[]],[[]],[[["chacharng",3]],["u32",0]],[[["chacharng",3]],["u64",0]],[[["chacharng",3],["u64",0]]],[[["chacharng",3],["u128",0]]],[[["",0]]],[[["",0]]],[[["chacharng",3]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"ChaChaRng"],[3,"ChaChaCore"]]},\
"rand_core":{"doc":"Random number generation traits","t":[8,3,4,13,8,16,8,13,13,13,0,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,0,11,11,12,0,12,11,10,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,3,3,8,16,16,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5],"n":["CryptoRng","Error","ErrorKind","NotReady","RngCore","Seed","SeedableRng","Transient","Unavailable","Unexpected","block","borrow","borrow","borrow_mut","borrow_mut","cause","clone","clone_into","description","description","eq","fill_bytes","fmt","fmt","fmt","from","from","from_rng","from_seed","impls","into","into","kind","le","msg","new","next_u32","next_u64","read","seed_from_u64","should_retry","should_wait","take_cause","to_owned","to_string","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","with_cause","BlockRng","BlockRng64","BlockRngCore","Item","Results","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","core","core","fill_bytes","fill_bytes","fmt","fmt","from","from","from_rng","from_rng","from_seed","from_seed","generate","generate_and_set","generate_and_set","index","index","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reset","reset","seed_from_u64","seed_from_u64","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","fill_bytes_via_next","fill_via_u32_chunks","fill_via_u64_chunks","next_u32_via_fill","next_u64_via_fill","next_u64_via_u32","read_u32_into","read_u64_into"],"q":["rand_core","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_core::block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_core::impls","","","","","","rand_core::le",""],"d":["A marker trait used to indicate that an <code>RngCore</code> or …","Error type of random number generators","Error kind which can be matched over.","Not ready yet: recommended to try again a little later.","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","A transient failure which likely can be resolved or worked …","Feature is not available; not recoverable.","General failure; there may be a chance of recovery on …","The <code>BlockRngCore</code> trait and implementation helpers","","","","","","","","A description of this error kind","","","Fill <code>dest</code> with random data.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Helper functions for implementing <code>RngCore</code> functions.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The error kind","Little-Endian utilities","The error message","Create a new instance, with specified kind and a message.","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","","Create a new PRNG using a <code>u64</code> seed.","True if this kind of error may resolve itself on retry.","True if we should retry but wait before retrying","Take the cause, if any. This allows the embedded cause to …","","","Fill <code>dest</code> entirely with random data.","","","","","","","Create a new instance, with specified kind, message, and a …","A wrapper type implementing <code>RngCore</code> for some type …","A wrapper type implementing <code>RngCore</code> for some type …","A trait for RNGs which do not generate random numbers …","Results element type, e.g. <code>u32</code>.","Results type. This is the ‘block’ an RNG implementing …","","","","","","","","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Generate a new block of results.","Generate a new set of results immediately, setting the …","Generate a new set of results immediately, setting the …","Get the index into the result buffer.","Get the index into the result buffer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>BlockRng</code> from an existing RNG implementing …","Create a new <code>BlockRng</code> from an existing RNG implementing …","","","","","Reset the number of available results. This will force a …","Reset the number of available results. This will force a …","","","","","","","","","","","","","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>. Borrowed …","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>. Borrowed …"],"i":[0,0,0,1,0,2,0,1,1,1,0,1,3,1,3,3,1,1,1,3,1,4,1,3,3,1,3,2,2,0,1,3,3,0,3,3,4,4,4,2,1,1,3,1,3,4,1,3,1,3,1,3,3,0,0,0,5,5,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,5,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,6,7,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["error",3]],["option",4,[["stderror",8]]]],[[["errorkind",4]],["errorkind",4]],[[["",0],["",0]]],[[["errorkind",4]],["str",0]],[[["error",3]],["str",0]],[[["errorkind",4],["errorkind",4]],["bool",0]],[[["",0]]],[[["errorkind",4],["formatter",3]],["result",6]],[[["error",3],["formatter",3]],["result",6]],[[["error",3],["formatter",3]],["result",6]],[[]],[[]],[[["rngcore",8]],["result",4,[["error",3]]]],[[]],null,[[]],[[]],null,null,null,[[["errorkind",4],["str",0]],["error",3]],[[["",0]],["u32",0]],[[["",0]],["u64",0]],[[["rngcore",8]],["result",4,[["usize",0],["error",3]]]],[[["u64",0]]],[[["errorkind",4]],["bool",0]],[[["errorkind",4]],["bool",0]],[[["error",3]],["option",4,[["box",3,[["stderror",8]]]]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["errorkind",4],["str",0]],["error",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["blockrng",3,[["",26,[["clone",8],["blockrngcore",8],["sized",8]]]]]],["blockrng",3,[["",26,[["clone",8],["blockrngcore",8],["sized",8]]]]]],[[["blockrng64",3,[["",26,[["clone",8],["blockrngcore",8],["sized",8]]]]]],["blockrng64",3,[["",26,[["clone",8],["blockrngcore",8],["sized",8]]]]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,[[["blockrng",3,[["blockrngcore",8]]]]],[[["blockrng64",3,[["blockrngcore",8]]]]],[[["blockrng",3,[["",26,[["blockrngcore",8],["debug",8]]]]],["formatter",3]],["result",6]],[[["blockrng64",3,[["",26,[["blockrngcore",8],["debug",8]]]]],["formatter",3]],["result",6]],[[]],[[]],[[["rngcore",8]],["result",4,[["blockrng",3,[["",26,[["blockrngcore",8],["seedablerng",8]]]]],["error",3]]]],[[["rngcore",8]],["result",4,[["blockrng64",3,[["",26,[["blockrngcore",8],["seedablerng",8]]]]],["error",3]]]],[[],["blockrng",3,[["",26,[["blockrngcore",8],["seedablerng",8]]]]]],[[],["blockrng64",3,[["",26,[["blockrngcore",8],["seedablerng",8]]]]]],[[["",0]]],[[["blockrng",3,[["blockrngcore",8]]],["usize",0]]],[[["blockrng64",3,[["blockrngcore",8]]],["usize",0]]],[[["blockrng",3,[["blockrngcore",8]]]],["usize",0]],[[["blockrng64",3,[["blockrngcore",8]]]],["usize",0]],[[]],[[]],[[["blockrngcore",8]],["blockrng",3,[["blockrngcore",8]]]],[[["blockrngcore",8]],["blockrng64",3,[["blockrngcore",8]]]],[[["blockrng",3,[["blockrngcore",8]]]],["u32",0]],[[["blockrng64",3,[["blockrngcore",8]]]],["u32",0]],[[["blockrng",3,[["blockrngcore",8]]]],["u64",0]],[[["blockrng64",3,[["blockrngcore",8]]]],["u64",0]],[[["blockrng",3,[["blockrngcore",8]]]]],[[["blockrng64",3,[["blockrngcore",8]]]]],[[["u64",0]],["blockrng",3,[["",26,[["blockrngcore",8],["seedablerng",8]]]]]],[[["u64",0]],["blockrng64",3,[["",26,[["blockrngcore",8],["seedablerng",8]]]]]],[[["",0]]],[[["",0]]],[[["blockrng",3,[["blockrngcore",8]]]],["result",4,[["error",3]]]],[[["blockrng64",3,[["blockrngcore",8]]]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]]],[[]],[[]],[[["",0]],["u32",0]],[[["",0]],["u64",0]],[[["",0]],["u64",0]],[[]],[[]]],"p":[[4,"ErrorKind"],[8,"SeedableRng"],[3,"Error"],[8,"RngCore"],[8,"BlockRngCore"],[3,"BlockRng"],[3,"BlockRng64"]]},\
"rand_hc":{"doc":"The HC128 random number generator.","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Hc128Core","Hc128Rng","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fill_bytes","fmt","fmt","from","from","from_rng","from_seed","from_seed","generate","into","into","next_u32","next_u64","to_owned","to_owned","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["rand_hc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The core of <code>Hc128Rng</code>, used with <code>BlockRng</code>.","A cryptographically secure random number generator that …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Create an HC-128 random number generator with a seed. The …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,1,2,1,2,1,2,1,2,1,1,2,1,2,1,1,2,2,1,2,1,1,1,2,1,1,2,1,2,1,2],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["hc128rng",3]],["hc128rng",3]],[[["hc128core",3]],["hc128core",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["hc128rng",3]]],[[["hc128rng",3],["formatter",3]],["result",6]],[[["hc128core",3],["formatter",3]],["result",6]],[[]],[[]],[[["rngcore",8]],["result",4,[["hc128rng",3],["error",3]]]],[[],["hc128rng",3]],[[],["hc128core",3]],[[["hc128core",3]]],[[]],[[]],[[["hc128rng",3]],["u32",0]],[[["hc128rng",3]],["u64",0]],[[["",0]]],[[["",0]]],[[["hc128rng",3]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"Hc128Rng"],[3,"Hc128Core"]]},\
"rand_isaac":{"doc":"The ISAAC and ISAAC-64 random number generators.","t":[2,2,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Isaac64Rng","IsaacRng","isaac","isaac64","IsaacCore","IsaacRng","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fill_bytes","fmt","fmt","from","from","from_rng","from_rng","from_seed","from_seed","generate","into","into","new_from_u64","next_u32","next_u64","seed_from_u64","seed_from_u64","to_owned","to_owned","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","Isaac64Core","Isaac64Rng","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fill_bytes","fmt","fmt","from","from","from_rng","from_rng","from_seed","from_seed","generate","into","into","new_from_u64","new_from_u64","next_u32","next_u64","seed_from_u64","seed_from_u64","to_owned","to_owned","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["rand_isaac","","","","rand_isaac::isaac","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rand_isaac::isaac64","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","The ISAAC random number generator.","The ISAAC-64 random number generator.","The core of <code>IsaacRng</code>, used with <code>BlockRng</code>.","A random number generator that uses the ISAAC algorithm.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Refills the output buffer, <code>results</code>. See also the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create an ISAAC random number generator using an <code>u64</code> as …","","","Create an ISAAC random number generator using an <code>u64</code> as …","Create an ISAAC random number generator using an <code>u64</code> as …","","","","","","","","","","The core of <code>Isaac64Rng</code>, used with <code>BlockRng</code>.","A random number generator that uses ISAAC-64, the 64-bit …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Refills the output buffer, <code>results</code>. See also the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create an ISAAC-64 random number generator using an <code>u64</code> as …","Create an ISAAC-64 random number generator using an <code>u64</code> as …","","","Create an ISAAC random number generator using an <code>u64</code> as …","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,2,1,2,1,2,1,2,1,1,2,1,2,1,2,1,2,2,1,2,1,1,1,1,2,1,2,1,1,2,1,2,1,2,0,0,3,4,3,4,3,4,3,4,3,3,4,3,4,3,4,3,4,4,3,4,3,4,3,3,3,4,3,4,3,3,4,3,4,3,4],"f":[null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["isaacrng",3]],["isaacrng",3]],[[["isaaccore",3]],["isaaccore",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["isaacrng",3]]],[[["isaacrng",3],["formatter",3]],["result",6]],[[["isaaccore",3],["formatter",3]],["result",6]],[[]],[[]],[[["rngcore",8]],["result",4,[["isaacrng",3],["error",3]]]],[[["rngcore",8]],["result",4,[["isaaccore",3],["error",3]]]],[[],["isaacrng",3]],[[],["isaaccore",3]],[[["isaaccore",3],["isaacarray",3]]],[[]],[[]],[[["u64",0]],["isaacrng",3]],[[["isaacrng",3]],["u32",0]],[[["isaacrng",3]],["u64",0]],[[["u64",0]],["isaacrng",3]],[[["u64",0]],["isaaccore",3]],[[["",0]]],[[["",0]]],[[["isaacrng",3]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["isaac64rng",3]],["isaac64rng",3]],[[["isaac64core",3]],["isaac64core",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["isaac64rng",3]]],[[["isaac64rng",3],["formatter",3]],["result",6]],[[["isaac64core",3],["formatter",3]],["result",6]],[[]],[[]],[[["rngcore",8]],["result",4,[["isaac64rng",3],["error",3]]]],[[["rngcore",8]],["result",4,[["isaac64core",3],["error",3]]]],[[],["isaac64rng",3]],[[],["isaac64core",3]],[[["isaac64core",3],["isaacarray",3]]],[[]],[[]],[[["u64",0]],["isaac64rng",3]],[[["u64",0]],["isaac64core",3]],[[["isaac64rng",3]],["u32",0]],[[["isaac64rng",3]],["u64",0]],[[["u64",0]],["isaac64rng",3]],[[["u64",0]],["isaac64core",3]],[[["",0]]],[[["",0]]],[[["isaac64rng",3]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"IsaacRng"],[3,"IsaacCore"],[3,"Isaac64Rng"],[3,"Isaac64Core"]]},\
"rand_jitter":{"doc":"Non-physical true random number generator based on timing …","t":[13,3,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CoarseTimer","JitterRng","NoTimer","NotMonotonic","TimerError","TinyVariantions","TooManyStuck","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","description","eq","fill_bytes","fmt","fmt","fmt","from","from","into","into","new","new_with_timer","next_u32","next_u64","set_rounds","test_timer","timer_stats","to_owned","to_owned","to_string","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["rand_jitter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Timer too coarse to use as an entropy source.","A true random number generator based on jitter in the CPU …","No timer available.","Timer is not monotonically increasing.","An error that can occur when <code>JitterRng::test_timer</code> fails.","Variations of deltas of time too small.","Too many stuck results (indicating no added entropy).","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>JitterRng</code>. Makes use of <code>std::time</code> for a …","Create a new <code>JitterRng</code>. A custom timer can be supplied, …","","","Configures how many rounds are used to generate each …","Basic quality tests on the timer, by measuring CPU timing …","Statistical test: return the timer delta of one normal run …","","","","","","","","","",""],"i":[1,0,1,1,0,1,1,2,1,2,1,2,1,2,1,1,1,2,2,1,1,2,1,2,1,2,2,2,2,2,2,2,2,1,1,2,2,1,2,1,2,1],"f":[null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["jitterrng",3]],["jitterrng",3]],[[["timererror",4]],["timererror",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["timererror",4]],["str",0]],[[["timererror",4],["timererror",4]],["bool",0]],[[["jitterrng",3]]],[[["jitterrng",3],["formatter",3]],["result",6]],[[["timererror",4],["formatter",3]],["result",6]],[[["timererror",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["result",4,[["jitterrng",3],["timererror",4]]]],[[],["jitterrng",3]],[[["jitterrng",3]],["u32",0]],[[["jitterrng",3]],["u64",0]],[[["jitterrng",3],["u8",0]]],[[["jitterrng",3]],["result",4,[["u8",0],["timererror",4]]]],[[["jitterrng",3],["bool",0]],["i64",0]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["jitterrng",3]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[4,"TimerError"],[3,"JitterRng"]]},\
"rand_os":{"doc":"Interface to the random number generator of the operating …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["OsRng","borrow","borrow_mut","clone","clone_into","fill_bytes","fmt","from","into","new","next_u32","next_u64","to_owned","try_fill_bytes","try_from","try_into","type_id"],"q":["rand_os","","","","","","","","","","","","","","","",""],"d":["A random number generator that retrieves randomness …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new <code>OsRng</code>.","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[["",0]],["",0]],[[["",0]],["",0]],[[["osrng",3]],["osrng",3]],[[["",0],["",0]]],[[["osrng",3]]],[[["osrng",3],["formatter",3]],["result",6]],[[]],[[]],[[],["result",4,[["osrng",3],["error",3]]]],[[["osrng",3]],["u32",0]],[[["osrng",3]],["u64",0]],[[["",0]]],[[["osrng",3]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"OsRng"]]},\
"rand_pcg":{"doc":"The PCG random number generators.","t":[3,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Lcg64Xsh32","Mcg128Xsl64","Pcg32","Pcg64Mcg","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fill_bytes","fill_bytes","fmt","fmt","from","from","from_seed","from_seed","into","into","new","new","next_u32","next_u32","next_u64","next_u64","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["rand_pcg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A PCG random number generator (XSH RR 64/32 (LCG) variant).","A PCG random number generator (XSL 128/64 (MCG) variant).","<code>Lcg64Xsh32</code> is also officially known as <code>pcg32</code>.","A friendly name for <code>Mcg128Xsl64</code>.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Construct an instance compatible with PCG seed and stream.","Construct an instance compatible with PCG seed.","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2],"f":[null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["lcg64xsh32",3]],["lcg64xsh32",3]],[[["mcg128xsl64",3]],["mcg128xsl64",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["lcg64xsh32",3]]],[[["mcg128xsl64",3]]],[[["lcg64xsh32",3],["formatter",3]],["result",6]],[[["mcg128xsl64",3],["formatter",3]],["result",6]],[[]],[[]],[[],["lcg64xsh32",3]],[[],["mcg128xsl64",3]],[[]],[[]],[[["u64",0],["u64",0]],["lcg64xsh32",3]],[[["u128",0]],["mcg128xsl64",3]],[[["lcg64xsh32",3]],["u32",0]],[[["mcg128xsl64",3]],["u32",0]],[[["lcg64xsh32",3]],["u64",0]],[[["mcg128xsl64",3]],["u64",0]],[[["",0]]],[[["",0]]],[[["lcg64xsh32",3]],["result",4,[["error",3]]]],[[["mcg128xsl64",3]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"Lcg64Xsh32"],[3,"Mcg128Xsl64"]]},\
"rand_xorshift":{"doc":"The xorshift random number generator.","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["XorShiftRng","borrow","borrow_mut","clone","clone_into","fill_bytes","fmt","from","from_rng","from_seed","into","next_u32","next_u64","to_owned","try_fill_bytes","try_from","try_into","type_id"],"q":["rand_xorshift","","","","","","","","","","","","","","","","",""],"d":["An Xorshift random number generator.","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[["",0]],["",0]],[[["",0]],["",0]],[[["xorshiftrng",3]],["xorshiftrng",3]],[[["",0],["",0]]],[[["xorshiftrng",3]]],[[["xorshiftrng",3],["formatter",3]],["result",6]],[[]],[[["rngcore",8]],["result",4,[["xorshiftrng",3],["error",3]]]],[[],["xorshiftrng",3]],[[]],[[["xorshiftrng",3]],["u32",0]],[[["xorshiftrng",3]],["u64",0]],[[["",0]]],[[["xorshiftrng",3]],["result",4,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"XorShiftRng"]]},\
"rustc_demangle":{"doc":"Demangle Rust compiler symbol names.","t":[3,3,11,11,11,11,11,11,5,11,11,11,11,11,11,11,5,11,11,11,11,11,11],"n":["Demangle","TryDemangleError","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","demangle","fmt","fmt","fmt","from","from","into","into","try_demangle","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["rustc_demangle","","","","","","","","","","","","","","","","","","","","","",""],"d":["Representation of a demangled symbol name.","Error returned from the <code>try_demangle</code> function below when …","Returns the underlying string that’s being demangled.","","","","","","De-mangles a Rust symbol into a more readable version","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The same as <code>demangle</code>, except return an <code>Err</code> if the string …","","","","","",""],"i":[0,0,1,1,2,1,2,2,0,1,1,2,1,2,1,2,0,1,2,1,2,1,2],"f":[null,null,[[["demangle",3]],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["trydemangleerror",3]],["trydemangleerror",3]],[[["str",0]],["demangle",3]],[[["demangle",3],["formatter",3]],["result",6]],[[["demangle",3],["formatter",3]],["result",6]],[[["trydemangleerror",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["str",0]],["result",4,[["demangle",3],["trydemangleerror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"Demangle"],[3,"TryDemangleError"]]},\
"ryu":{"doc":"Pure Rust implementation of Ryū, an algorithm to quickly …","t":[3,8,11,11,11,11,11,11,11,11,0,11,11,11,5,5,5,5],"n":["Buffer","Float","borrow","borrow_mut","clone","default","format","from","into","new","raw","try_from","try_into","type_id","d2s_buffered_n","f2s_buffered_n","pretty_d2s_buffered_n","pretty_f2s_buffered_n"],"q":["ryu","","","","","","","","","","","","","","ryu::raw","","",""],"d":["Safe API for formatting floating point numbers to text.","A floating point number, f32 or f64, that can be written …","","","","","Print a floating point number into this buffer and return …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","This is a cheap operation; you don’t need to worry about …","Unsafe functions that exactly mirror the API of the C …","","","","Print f64 to the given buffer and return number of bytes …","Print f32 to the given buffer and return number of bytes …","Print f64 to the given buffer and return number of bytes …","Print f32 to the given buffer and return number of bytes …"],"i":[0,0,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["buffer",3]],["buffer",3]],[[],["buffer",3]],[[["buffer",3],["float",8]],["str",0]],[[]],[[]],[[],["buffer",3]],null,[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["f64",0],["u8",0]],["usize",0]],[[["f32",0],["u8",0]],["usize",0]],[[["f64",0],["u8",0]],["usize",0]],[[["f32",0],["u8",0]],["usize",0]]],"p":[[3,"Buffer"]]},\
"scopeguard":{"doc":"A scope guard will run a given closure when it goes out of …","t":[4,3,8,11,11,11,11,14,14,11,11,11,11,11,11,11,5,11,11,10,11,11,11,11,11,11,11,11],"n":["Always","ScopeGuard","Strategy","borrow","borrow","borrow_mut","borrow_mut","defer","defer_on_unwind","deref","deref_mut","drop","fmt","fmt","from","from","guard","into","into","should_run","should_run","try_from","try_from","try_into","try_into","type_id","type_id","with_strategy"],"q":["scopeguard","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Always run on scope exit.","<code>ScopeGuard</code> is a scope guard that may own a protected value.","","","","","","Macro to create a <code>ScopeGuard</code> (always run).","Macro to create a <code>ScopeGuard</code> (run on unwinding from panic).","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a new <code>ScopeGuard</code> owning <code>v</code> and with deferred closure …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return <code>true</code> if the guard’s associated code should run …","","","","","","","","Create a <code>ScopeGuard</code> that owns <code>v</code> (accessible through deref) …"],"i":[0,0,0,1,2,1,2,0,0,1,1,1,1,2,1,2,0,1,2,3,2,1,2,1,2,1,2,1],"f":[null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,null,[[["scopeguard",3,[["strategy",8]]]],["",0]],[[["scopeguard",3,[["strategy",8]]]],["",0]],[[["scopeguard",3,[["strategy",8]]]]],[[["scopeguard",3],["formatter",3]],["result",6]],[[["always",4],["formatter",3]],["result",6]],[[]],[[]],[[],["scopeguard",3,[["always",4]]]],[[]],[[]],[[],["bool",0]],[[],["bool",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["scopeguard",3]]],"p":[[3,"ScopeGuard"],[4,"Always"],[8,"Strategy"]]},\
"serde":{"doc":"Serde","t":[8,8,16,16,16,8,16,16,16,16,16,16,16,8,11,11,11,0,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,14,11,11,0,14,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,13,13,13,8,8,8,8,16,13,8,8,16,16,16,16,16,8,13,3,8,13,8,13,13,13,13,13,8,13,13,13,13,4,13,13,13,16,16,16,8,8,11,11,11,11,11,11,11,11,10,11,10,10,11,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,11,11,10,11,10,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,10,11,11,11,10,11,10,11,11,10,11,11,11,11,11,11,11,10,11,11,10,11,11,0,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,16,16,16,16,16,16,16,16,3,16,16,16,16,16,16,16,16,8,8,16,8,16,8,16,8,16,8,16,8,16,8,16,8,11,11,11,11,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,10,10,10,10,10,10,11,11,11,10,10,10,10,10,10,11,11,11,11,11,10,10,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,10,10,10,11,11,11,11,11,11],"n":["Deserialize","Deserializer","Error","Error","Ok","Serialize","SerializeMap","SerializeSeq","SerializeStruct","SerializeStructVariant","SerializeTuple","SerializeTupleStruct","SerializeTupleVariant","Serializer","collect_map","collect_seq","collect_str","de","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","forward_to_deserialize_any","is_human_readable","is_human_readable","ser","serde_if_integer128","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","Bool","Bytes","Char","Deserialize","DeserializeOwned","DeserializeSeed","Deserializer","Deserializer","Enum","EnumAccess","Error","Error","Error","Error","Error","Error","Expected","Float","IgnoredAny","IntoDeserializer","Map","MapAccess","NewtypeStruct","NewtypeVariant","Option","Other","Seq","SeqAccess","Signed","Str","StructVariant","TupleVariant","Unexpected","Unit","UnitVariant","Unsigned","Value","Value","Variant","VariantAccess","Visitor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","custom","default","deserialize","deserialize","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i128","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u128","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","duplicate_field","eq","expecting","expecting","fmt","fmt","fmt","fmt","fmt","fmt","from","from","into","into","into_deserializer","invalid_length","invalid_type","invalid_value","is_human_readable","missing_field","ne","newtype_variant","newtype_variant_seed","next_element","next_element_seed","next_entry","next_entry_seed","next_key","next_key_seed","next_value","next_value_seed","size_hint","size_hint","struct_variant","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","tuple_variant","type_id","type_id","unit_variant","unknown_field","unknown_variant","value","variant","variant_seed","visit_bool","visit_bool","visit_borrowed_bytes","visit_borrowed_str","visit_byte_buf","visit_bytes","visit_bytes","visit_char","visit_enum","visit_f32","visit_f64","visit_f64","visit_i128","visit_i16","visit_i32","visit_i64","visit_i64","visit_i8","visit_map","visit_map","visit_newtype_struct","visit_newtype_struct","visit_none","visit_none","visit_seq","visit_seq","visit_some","visit_some","visit_str","visit_str","visit_string","visit_u128","visit_u16","visit_u32","visit_u64","visit_u64","visit_u8","visit_unit","visit_unit","0","0","0","0","0","0","0","0","BoolDeserializer","BorrowedBytesDeserializer","BorrowedStrDeserializer","CharDeserializer","CowStrDeserializer","Error","F32Deserializer","F64Deserializer","I128Deserializer","I16Deserializer","I32Deserializer","I64Deserializer","I8Deserializer","IsizeDeserializer","MapAccessDeserializer","MapDeserializer","SeqAccessDeserializer","SeqDeserializer","StrDeserializer","StringDeserializer","U128Deserializer","U16Deserializer","U32Deserializer","U64Deserializer","U8Deserializer","UnitDeserializer","UsizeDeserializer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","custom","custom","description","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","end","end","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","ne","new","new","new","new","new","new","next_element_seed","next_element_seed","next_entry_seed","next_key_seed","next_value_seed","size_hint","size_hint","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variant_seed","variant_seed","variant_seed","variant_seed","variant_seed","Error","Error","Error","Error","Error","Error","Error","Error","Error","Impossible","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Ok","Serialize","SerializeMap","SerializeMap","SerializeSeq","SerializeSeq","SerializeStruct","SerializeStruct","SerializeStructVariant","SerializeStructVariant","SerializeTuple","SerializeTuple","SerializeTupleStruct","SerializeTupleStruct","SerializeTupleVariant","SerializeTupleVariant","Serializer","borrow","borrow_mut","collect_map","collect_seq","collect_str","custom","end","end","end","end","end","end","end","end","end","end","end","end","end","end","from","into","is_human_readable","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_element","serialize_element","serialize_entry","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","serialize_value","skip_field","skip_field","try_from","try_into","type_id"],"q":["serde","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde::deserde::de::Unexpected","","","","","","","","serde::de::valueserde::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A <strong>data structure</strong> that can be deserialized from any data …","A <strong>data format</strong> that can deserialize any data structure …","The error type that can be returned if some error occurs …","The error type when some error occurs during serialization.","The output type produced by this <code>Serializer</code> during …","A <strong>data structure</strong> that can be serialized into any data …","Type returned from <code>serialize_map</code> for serializing the …","Type returned from <code>serialize_seq</code> for serializing the …","Type returned from <code>serialize_struct</code> for serializing the …","Type returned from <code>serialize_struct_variant</code> for …","Type returned from <code>serialize_tuple</code> for serializing the …","Type returned from <code>serialize_tuple_struct</code> for serializing …","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Generic data structure deserialization framework.","Deserialize this value from the given Serde deserializer.","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Helper macro when implementing the <code>Deserializer</code> part of a …","Determine whether <code>Deserialize</code> implementations should …","Determine whether <code>Serialize</code> implementations should …","Generic data structure serialization framework.","Conditional compilation depending on whether Serde is …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","The input contained a boolean value that was not expected.","The input contained a <code>&amp;[u8]</code> or <code>Vec&lt;u8&gt;</code> that was not …","The input contained a <code>char</code> that was not expected.","A <strong>data structure</strong> that can be deserialized from any data …","A data structure that can be deserialized without …","<code>DeserializeSeed</code> is the stateful form of the <code>Deserialize</code> …","A <strong>data format</strong> that can deserialize any data structure …","The type of the deserializer being converted into.","The input contained an enum that was not expected.","Provides a <code>Visitor</code> access to the data of an enum in the …","The <code>Error</code> trait allows <code>Deserialize</code> implementations to …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","The error type that can be returned if some error occurs …","<code>Expected</code> represents an explanation of what data a <code>Visitor</code> …","The input contained a floating point <code>f32</code> or <code>f64</code> that was …","An efficient way of discarding data from a deserializer.","Converts an existing value into a <code>Deserializer</code> from which …","The input contained a map that was not expected.","Provides a <code>Visitor</code> access to each entry of a map in the …","The input contained a newtype struct that was not expected.","The input contained a newtype variant that was not …","The input contained an <code>Option&lt;T&gt;</code> that was not expected.","A message stating what uncategorized thing the input …","The input contained a sequence that was not expected.","Provides a <code>Visitor</code> access to each element of a sequence in …","The input contained a signed integer <code>i8</code>, <code>i16</code>, <code>i32</code> or <code>i64</code> …","The input contained a <code>&amp;str</code> or <code>String</code> that was not expected.","The input contained a struct variant that was not expected.","The input contained a tuple variant that was not expected.","<code>Unexpected</code> represents an unexpected invocation of any one …","The input contained a unit <code>()</code> that was not expected.","The input contained a unit variant that was not expected.","The input contained an unsigned integer <code>u8</code>, <code>u16</code>, <code>u32</code> or <code>u64</code>…","The type produced by using this seed.","The value produced by this visitor.","The <code>Visitor</code> that will be used to deserialize the content …","<code>VariantAccess</code> is a visitor that is created by the …","This trait represents a visitor that walks through a …","","","","","","","","","Raised when there is general error when deserializing a …","","Deserialize this value from the given Serde deserializer.","Equivalent to the more common <code>Deserialize::deserialize</code> …","","Require the <code>Deserializer</code> to figure out how to drive the …","Hint that the <code>Deserialize</code> type is expecting a <code>bool</code> value.","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a byte array …","Hint that the <code>Deserialize</code> type is expecting a <code>char</code> value.","Hint that the <code>Deserialize</code> type is expecting an enum value …","Hint that the <code>Deserialize</code> type is expecting a <code>f32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>f64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i128</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i16</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i32</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i64</code> value.","Hint that the <code>Deserialize</code> type is expecting an <code>i8</code> value.","Hint that the <code>Deserialize</code> type is expecting the name of a …","Hint that the <code>Deserialize</code> type needs to deserialize a …","Hint that the <code>Deserialize</code> type is expecting a map of …","Hint that the <code>Deserialize</code> type is expecting a newtype …","Hint that the <code>Deserialize</code> type is expecting an optional …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a string value …","Hint that the <code>Deserialize</code> type is expecting a struct with …","Hint that the <code>Deserialize</code> type is expecting a sequence of …","Hint that the <code>Deserialize</code> type is expecting a tuple struct …","Hint that the <code>Deserialize</code> type is expecting an <code>u128</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u16</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u32</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u64</code> value.","Hint that the <code>Deserialize</code> type is expecting a <code>u8</code> value.","Hint that the <code>Deserialize</code> type is expecting a unit value.","Hint that the <code>Deserialize</code> type is expecting a unit struct …","Raised when a <code>Deserialize</code> struct type received more than …","","Format a message stating what data this Visitor expects to …","","Format an explanation of what data was being expected. …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this value into a deserializer.","Raised when deserializing a sequence or map and the input …","Raised when a <code>Deserialize</code> receives a type different from …","Raised when a <code>Deserialize</code> receives a value of the right …","Determine whether <code>Deserialize</code> implementations should …","Raised when a <code>Deserialize</code> struct type expected to receive …","","Called when deserializing a variant with a single value.","Called when deserializing a variant with a single value.","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some(value))</code> for the next value in the …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some((key, value)))</code> for the next …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns <code>Ok(Some(key))</code> for the next key in the map, or …","This returns a <code>Ok(value)</code> for the next value in the map.","This returns a <code>Ok(value)</code> for the next value in the map.","Returns the number of elements remaining in the sequence, …","Returns the number of entries remaining in the map, if …","Called when deserializing a struct-like variant.","","","","","","","","Called when deserializing a tuple-like variant.","","","Called when deserializing a variant with no values.","Raised when a <code>Deserialize</code> struct type received a field …","Raised when a <code>Deserialize</code> enum type received a variant …","Building blocks for deserializing basic values using the …","<code>variant</code> is called to identify which variant to deserialize.","<code>variant</code> is called to identify which variant to deserialize.","The input contains a boolean.","","The input contains a byte array that lives at least as …","The input contains a string that lives at least as long as …","The input contains a byte array and ownership of the byte …","The input contains a byte array. The lifetime of the byte …","","The input contains a <code>char</code>.","The input contains an enum.","The input contains an <code>f32</code>.","The input contains an <code>f64</code>.","","The input contains a <code>i128</code>.","The input contains an <code>i16</code>.","The input contains an <code>i32</code>.","The input contains an <code>i64</code>.","","The input contains an <code>i8</code>.","The input contains a key-value map.","","The input contains a newtype struct.","","The input contains an optional that is absent.","","The input contains a sequence of elements.","","The input contains an optional that is present.","","The input contains a string. The lifetime of the string is …","","The input contains a string and ownership of the string is …","The input contains a <code>u128</code>.","The input contains a <code>u16</code>.","The input contains a <code>u32</code>.","The input contains a <code>u64</code>.","","The input contains a <code>u8</code>.","The input contains a unit <code>()</code>.","","","","","","","","","","A deserializer holding a <code>bool</code>.","A deserializer holding a <code>&amp;[u8]</code> with a lifetime tied to …","A deserializer holding a <code>&amp;str</code> with a lifetime tied to …","A deserializer holding a <code>char</code>.","A deserializer holding a <code>Cow&lt;str&gt;</code>.","A minimal representation of all possible errors that can …","A deserializer holding an <code>f32</code>.","A deserializer holding an <code>f64</code>.","A deserializer holding an <code>i128</code>.","A deserializer holding an <code>i16</code>.","A deserializer holding an <code>i32</code>.","A deserializer holding an <code>i64</code>.","A deserializer holding an <code>i8</code>.","A deserializer holding an <code>isize</code>.","A deserializer holding a <code>MapAccess</code>.","A deserializer that iterates over a map.","A deserializer holding a <code>SeqAccess</code>.","A deserializer that iterates over a sequence.","A deserializer holding a <code>&amp;str</code>.","A deserializer holding a <code>String</code>.","A deserializer holding a <code>u128</code>.","A deserializer holding a <code>u16</code>.","A deserializer holding a <code>u32</code>.","A deserializer holding a <code>u64</code>.","A deserializer holding a <code>u8</code>.","A deserializer holding a <code>()</code>.","A deserializer holding a <code>usize</codeheck for remaining elements after passing a …","Check for remaining elements after passing a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Construct a new <code>MapDeserializer&lt;I, E&gt;</code>.","Create a new borrowed deserializer from the given string.","Create a new borrowed deserializer from the given byte …","Construct a new <code>SeqDeserializer&lt;I, E&gt;</code>.","Construct a new <code>SeqAccessDeserializer&lt;A&gt;</code>.","Construct a new <code>MapAccessDeserializer&lt;A&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Trait used by <code>Serialize</code> implementations to generically …","The error type when some error occurs during serialization.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Must match the <code>Error</code> type of our <code>Serializer</code>.","Helper type for implementing a <code>Serializer</code> that does not …","The output type produced by this <code>Serializer</code> during …","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","Must match the <code>Ok</code> type of our <code>Serializer</code>.","A <strong>data structure</strong> that can be serialized into any data …","Returned from <code>Serializer::serialize_map</code>.","Type returned from <code>serialize_map</code> for serializing the …","Returned from <code>Serializer::serialize_seq</code>.","Type returned from <code>serialize_seq</code> for serializing the …","Returned from <code>Serializer::serialize_struct</code>.","Type returned from <code>serialize_struct</code> for serializing the …","Returned from <code>Serializer::serialize_struct_variant</code>.","Type returned from <code>serialize_struct_variant</code> for …","Returned from <code>Serializer::serialize_tuple</code>.","Type returned from <code>serialize_tuple</code> for serializing the …","Returned from <code>Serializer::serialize_tuple_struct</code>.","Type returned from <code>serialize_tuple_struct</code> for serializing …","Returned from <code>Serializer::serialize_tuple_variant</code>.","Type returned from <code>serialize_tuple_variant</code> for serializing …","A <strong>data format</strong> that can serialize any data structure …","","","Collect an iterator as a map.","Collect an iterator as a sequence.","Serialize a string produced by an implementation of <code>Display</code>…","Used when a <code>Serialize</code> implementation encounters any error …","Finish serializing a sequence.","Finish serializing a tuple.","Finish serializing a tuple struct.","Finish serializing a tuple variant.","Finish serializing a map.","Finish serializing a struct.","Finish serializing a struct variant.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Determine whether <code>Serialize</code> implementations should …","Serialize this value into the given Serde serializer.","Serialize a <code>bool</code> value.","Serialize a chunk of raw byte data.","Serialize a character.","Serialize a sequence element.","Serialize a tuple element.","","","Serialize a map entry consisting of a key and a value.","Serialize an <code>f32</code> value.","Serialize an <code>f64</code> value.","Serialize a tuple struct field.","Serialize a tuple variant field.","Serialize a struct field.","Serialize a struct variant field.","","","","","Serialize an <code>i128</code> value.","Serialize an <code>i16</code> value.","Serialize an <code>i32</code> value.","Serialize an <code>i64</code> value.","Serialize an <code>i8</code> value.","Serialize a map key.","","Begin to serialize a map. This call must be followed by …","Serialize a newtype struct like <code>struct Millimeters(u8)</code>.","Serialize a newtype variant like <code>E::N</code> in <code>enum E { N(u8) }</code>.","Serialize a <code>None</code> value.","Begin to serialize a variably sized sequence. This call …","Serialize a <code>Some(T)</code> value.","Serialize a <code>&amp;str</code>.","Begin to serialize a struct like …","Begin to serialize a struct variant like <code>E::S</code> in …","Begin to serialize a statically sized sequence whose …","Begin to serialize a tuple struct like …","Begin to serialize a tuple variant like <code>E::T</code> in …","Serialize a <code>u128</code> value.","Serialize a <code>u16</code> value.","Serialize a <code>u32</code> value.","Serialize a <code>u64</code> value.","Serialize a <code>u8</code> value.","Serialize a <code>()</code> value.","Serialize a unit struct like <code>struct Unit</code> or <code>PhantomData&lt;T&gt;</code>.","Serialize a unit variant like <code>E::A</code> in <code>enum E { A, B }</code>.","Serialize a map value.","","Indicate that a struct field has been skipped.","Indicate that a struct variant field has been skipped.","","",""],"i":[0,0,1,2,2,0,2,2,2,2,2,2,2,0,2,2,2,0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,2,0,0,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,5,5,0,0,0,0,6,5,0,0,1,7,8,9,10,0,5,0,0,5,0,5,5,5,5,5,0,5,5,5,5,0,5,5,5,11,12,9,0,0,13,5,13,5,13,5,13,5,14,13,3,11,13,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,5,12,13,15,15,13,13,5,5,13,5,13,5,6,14,14,14,1,14,5,10,10,7,7,8,8,8,8,8,8,7,8,10,13,5,5,13,5,13,5,10,13,5,10,14,14,0,9,9,12,13,12,12,12,12,13,12,12,12,12,13,12,12,12,12,13,12,12,13,12,13,12,13,12,13,12,13,12,13,12,12,12,12,12,13,12,12,13,16,17,18,19,20,21,22,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,25,25,25,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,48,25,24,25,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,25,24,44,47,48,49,50,24,48,24,24,24,24,24,48,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,25,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,42,43,44,45,46,0,2,51,52,53,54,55,56,57,0,2,51,52,53,54,55,56,57,0,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,58,58,2,2,2,59,51,52,53,54,55,56,57,58,58,58,58,58,58,58,58,58,2,4,2,2,2,51,52,58,58,55,2,2,53,54,56,57,58,58,58,58,2,2,2,2,2,55,58,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,55,58,56,57,58,58,58],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],[[],["result",4]],[[["",0]],["result",4]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],null,[[["",0]],["bool",0]],[[["",0]],["bool",0]],null,null,[[["",0]],["result",4]],[[["bool",0]],["result",4]],[[],["result",4]],[[["char",0]],["result",4]],[[["f32",0]],["result",4]],[[["f64",0]],["result",4]],[[["i128",0]],["result",4]],[[["i16",0]],["result",4]],[[["i32",0]],["result",4]],[[["i64",0]],["result",4]],[[["i8",0]],["result",4]],[[["option",4,[["usize",0]]]],["result",4]],[[["str",0],["",0]],["result",4]],[[["str",0],["u32",0],["str",0],["",0]],["result",4]],[[],["result",4]],[[["option",4,[["usize",0]]]],["result",4]],[[["",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["u32",0],["str",0],["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["u32",0],["str",0],["usize",0]],["result",4]],[[["u128",0]],["result",4]],[[["u16",0]],["result",4]],[[["u32",0]],["result",4]],[[["u64",0]],["result",4]],[[["u8",0]],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[["str",0],["u32",0],["str",0]],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["ignoredany",3]],["ignoredany",3]],[[["unexpected",4]],["unexpected",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[]],[[],["ignoredany",3]],[[],["result",4]],[[],["result",4]],[[],["result",4,[["ignoredany",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[["str",0]]],[[["unexpected",4],["unexpected",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["ignoredany",3],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["expected",8],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["ignoredany",3],["formatter",3]],["result",6]],[[["unexpected",4],["formatter",3]],["result",4,[["error",3]]]],[[["unexpected",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["usize",0],["expected",8]]],[[["unexpected",4],["expected",8]]],[[["unexpected",4],["expected",8]]],[[["",0]],["bool",0]],[[["str",0]]],[[["unexpected",4],["unexpected",4]],["bool",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["result",4,[["option",4]]]],[[["",0]],["result",4]],[[["",0]],["result",4]],[[["",0]],["option",4,[["usize",0]]]],[[["",0]],["option",4,[["usize",0]]]],[[],["result",4]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",0]],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",4]],[[["str",0]]],[[["str",0]]],null,[[],["result",4]],[[],["result",4]],[[["bool",0]],["result",4]],[[["ignoredany",3],["bool",0]],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[["vec",3,[["u8",0]]]],["result",4]],[[],["result",4]],[[["ignoredany",3]],["result",4]],[[["char",0]],["result",4]],[[],["result",4]],[[["f32",0]],["result",4]],[[["f64",0]],["result",4]],[[["ignoredany",3],["f64",0]],["result",4]],[[["i128",0]],["result",4]],[[["i16",0]],["result",4]],[[["i32",0]],["result",4]],[[["i64",0]],["result",4]],[[["ignoredany",3],["i64",0]],["result",4]],[[["i8",0]],["result",4]],[[],["result",4]],[[["ignoredany",3]],["result",4]],[[],["result",4]],[[["ignoredany",3]],["result",4]],[[],["result",4]],[[["ignoredany",3]],["result",4]],[[],["result",4]],[[["ignoredany",3]],["result",4]],[[],["result",4]],[[["ignoredany",3]],["result",4]],[[["str",0]],["result",4]],[[["ignoredany",3],["str",0]],["result",4]],[[["string",3]],["result",4]],[[["u128",0]],["result",4]],[[["u16",0]],["result",4]],[[["u32",0]],["result",4]],[[["u64",0]],["result",4]],[[["ignoredany",3],["u64",0]],["result",4]],[[["u8",0]],["result",4]],[[],["result",4]],[[["ignoredany",3]],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullmapdeserializer",3]],["mapdeserializer",3]],[[["error",3]],["error",3]],[[["unitdeserializer",3]],["unitdeserializer",3]],[[["booldeserializer",3]],["booldeserializer",3]],[[["i8deserializer",3]],["i8deserializer",3]],[[["i16deserializer",3]],["i16deserializer",3]],[[["i32deserializer",3]],["i32deserializer",3]],[[["i64deserializer",3]],["i64deserializer",3]],[[["isizedeserializer",3]],["isizedeserializer",3]],[[["u8deserializer",3]],["u8deserializer",3]],[[["u16deserializer",3]],["u16deserializer",3]],[[["u64deserializer",3]],["u64deserializer",3]],[[["usizedeserializer",3]],["usizedeserializer",3]],[[["f32deserializer",3]],["f32deserializer",3]],[[["f64deserializer",3]],["f64deserializer",3]],[[["chardeserializer",3]],["chardeserializer",3]],[[["i128deserializer",3]],["i128deserializer",3]],[[["u128deserializer",3]],["u128deserializer",3]],[[["u32deserializer",3]],["u32deserializer",3]],[[["strdeserializer",3]],["strdeserializer",3]],[[["borrowedstrdeserializer",3]],["borrowedstrdeserializer",3]],[[["stringdeserializer",3]],["stringdeserializer",3]],[[["cowstrdeserializer",3]],["cowstrdeserializer",3]],[[["borrowedbytesdeserializer",3]],["borrowedbytesdeserializer",3]],[[["seqdeserializer",3,[["clone",8],["clone",8]]]],["seqdeserializer",3,[["clone",8],["clone",8]]]],[[["seqaccessdeserializer",3,[["clone",8]]]],["seqaccessdeserializer",3,[["clone",8]]]],[[["mapaccessdeserializer",3,[["clone",8]]]],["mapaccessdeserializer",3,[["clone",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["error",3]],[[],["error",3]],[[["error",3]],["str",0]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3],["str",0]],["result",4]],[[["unitdeserializer",3],["str",0]],["result",4]],[[["booldeserializer",3],["str",0]],["result",4]],[[["i8deserializer",3],["str",0]],["result",4]],[[["i16deserializer",3],["str",0]],["result",4]],[[["i32deserializer",3],["str",0]],["result",4]],[[["i64deserializer",3],["str",0]],["result",4]],[[["isizedeserializer",3],["str",0]],["result",4]],[[["u8deserializer",3],["str",0]],["result",4]],[[["u16deserializer",3],["str",0]],["result",4]],[[["u64deserializer",3],["str",0]],["result",4]],[[["usizedeserializer",3],["str",0]],["result",4]],[[["f32deserializer",3],["str",0]],["result",4]],[[["f64deserializer",3],["str",0]],["result",4]],[[["chardeserializer",3],["str",0]],["result",4]],[[["i128deserializer",3],["str",0]],["result",4]],[[["u128deserializer",3],["str",0]],["result",4]],[[["u32deserializer",3],["str",0]],["result",4]],[[["strdeserializer",3],["str",0]],["result",4]],[[["borrowedstrdeserializer",3],["str",0]],["result",4]],[[["stringdeserializer",3],["str",0]],["result",4]],[[["cowstrdeserializer",3],["str",0]],["result",4]],[[["borrowedbytesdeserializer",3],["str",0]],["result",4]],[[["seqdeserializer",3],["str",0]],["result",4]],[[["seqaccessdeserializer",3],["str",0]],["result",4]],[[["mapaccessdeserializer",3],["str",0]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3],["str",0]],["result",4]],[[["unitdeserializer",3],["str",0]],["result",4]],[[["booldeserializer",3],["str",0]],["result",4]],[[["i8deserializer",3],["str",0]],["result",4]],[[["i16deserializer",3],["str",0]],["result",4]],[[["i32deserializer",3],["str",0]],["result",4]],[[["i64deserializer",3],["str",0]],["result",4]],[[["isizedeserializer",3],["str",0]],["result",4]],[[["u8deserializer",3],["str",0]],["result",4]],[[["u16deserializer",3],["str",0]],["result",4]],[[["u64deserializer",3],["str",0]],["result",4]],[[["usizedeserializer",3],["str",0]],["result",4]],[[["f32deserializer",3],["str",0]],["result",4]],[[["f64deserializer",3],["str",0]],["result",4]],[[["chardeserializer",3],["str",0]],["result",4]],[[["i128deserializer",3],["str",0]],["result",4]],[[["u128deserializer",3],["str",0]],["result",4]],[[["u32deserializer",3],["str",0]],["result",4]],[[["strdeserializer",3],["str",0]],["result",4]],[[["borrowedstrdeserializer",3],["str",0]],["result",4]],[[["stringdeserializer",3],["str",0]],["result",4]],[[["cowstrdeserializer",3],["str",0]],["result",4]],[[["borrowedbytesdeserializer",3],["str",0]],["result",4]],[[["seqdeserializer",3],["str",0]],["result",4]],[[["seqaccessdeserializer",3],["str",0]],["result",4]],[[["mapaccessdeserializer",3],["str",0]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3],["str",0]],["result",4]],[[["unitdeserializer",3],["str",0]],["result",4]],[[["booldeserializer",3],["str",0]],["result",4]],[[["i8deserializer",3],["str",0]],["result",4]],[[["i16deserializer",3],["str",0]],["result",4]],[[["i32deserializer",3],["str",0]],["result",4]],[[["i64deserializer",3],["str",0]],["result",4]],[[["isizedeserializer",3],["str",0]],["result",4]],[[["u8deserializer",3],["str",0]],["result",4]],[[["u16deserializer",3],["str",0]],["result",4]],[[["u64deserializer",3],["str",0]],["result",4]],[[["usizedeserializer",3],["str",0]],["result",4]],[[["f32deserializer",3],["str",0]],["result",4]],[[["f64deserializer",3],["str",0]],["result",4]],[[["chardeserializer",3],["str",0]],["result",4]],[[["i128deserializer",3],["str",0]],["result",4]],[[["u128deserializer",3],["str",0]],["result",4]],[[["u32deserializer",3],["str",0]],["result",4]],[[["strdeserializer",3],["str",0]],["result",4]],[[["borrowedstrdeserializer",3],["str",0]],["result",4]],[[["stringdeserializer",3],["str",0]],["result",4]],[[["cowstrdeserializer",3],["str",0]],["result",4]],[[["borrowedbytesdeserializer",3],["str",0]],["result",4]],[[["seqdeserializer",3],["str",0]],["result",4]],[[["seqaccessdeserializer",3],["str",0]],["result",4]],[[["mapaccessdeserializer",3],["str",0]],["result",4]],[[["mapdeserializer",3],["usize",0]],["result",4]],[[["unitdeserializer",3],["usize",0]],["result",4]],[[["booldeserializer",3],["usize",0]],["result",4]],[[["i8deserializer",3],["usize",0]],["result",4]],[[["i16deserializer",3],["usize",0]],["result",4]],[[["i32deserializer",3],["usize",0]],["result",4]],[[["i64deserializer",3],["usize",0]],["result",4]],[[["isizedeserializer",3],["usize",0]],["result",4]],[[["u8deserializer",3],["usize",0]],["result",4]],[[["u16deserializer",3],["usize",0]],["result",4]],[[["u64deserializer",3],["usize",0]],["result",4]],[[["usizedeserializer",3],["usize",0]],["result",4]],[[["f32deserializer",3],["usize",0]],["result",4]],[[["f64deserializer",3],["usize",0]],["result",4]],[[["chardeserializer",3],["usize",0]],["result",4]],[[["i128deserializer",3],["usize",0]],["result",4]],[[["u128deserializer",3],["usize",0]],["result",4]],[[["u32deserializer",3],["usize",0]],["result",4]],[[["strdeserializer",3],["usize",0]],["result",4]],[[["borrowedstrdeserializer",3],["usize",0]],["result",4]],[[["stringdeserializer",3],["usize",0]],["result",4]],[[["cowstrdeserializer",3],["usize",0]],["result",4]],[[["borrowedbytesdeserializer",3],["usize",0]],["result",4]],[[["seqdeserializer",3],["usize",0]],["result",4]],[[["seqaccessdeserializer",3],["usize",0]],["result",4]],[[["mapaccessdeserializer",3],["usize",0]],["result",4]],[[["mapdeserializer",3],["str",0],["usize",0]],["result",4]],[[["unitdeserializer",3],["str",0],["usize",0]],["result",4]],[[["booldeserializer",3],["str",0],["usize",0]],["result",4]],[[["i8deserializer",3],["str",0],["usize",0]],["result",4]],[[["i16deserializer",3],["str",0],["usize",0]],["result",4]],[[["i32deserializer",3],["str",0],["usize",0]],["result",4]],[[["i64deserializer",3],["str",0],["usize",0]],["result",4]],[[["isizedeserializer",3],["str",0],["usize",0]],["result",4]],[[["u8deserializer",3],["str",0],["usize",0]],["result",4]],[[["u16deserializer",3],["str",0],["usize",0]],["result",4]],[[["u64deserializer",3],["str",0],["usize",0]],["result",4]],[[["usizedeserializer",3],["str",0],["usize",0]],["result",4]],[[["f32deserializer",3],["str",0],["usize",0]],["result",4]],[[["f64deserializer",3],["str",0],["usize",0]],["result",4]],[[["chardeserializer",3],["str",0],["usize",0]],["result",4]],[[["i128deserializer",3],["str",0],["usize",0]],["result",4]],[[["u128deserializer",3],["str",0],["usize",0]],["result",4]],[[["u32deserializer",3],["str",0],["usize",0]],["result",4]],[[["strdeserializer",3],["str",0],["usize",0]],["result",4]],[[["borrowedstrdeserializer",3],["str",0],["usize",0]],["result",4]],[[["stringdeserializer",3],["str",0],["usize",0]],["result",4]],[[["cowstrdeserializer",3],["str",0],["usize",0]],["result",4]],[[["borrowedbytesdeserializer",3],["str",0],["usize",0]],["result",4]],[[["seqdeserializer",3],["str",0],["usize",0]],["result",4]],[[["seqaccessdeserializer",3],["str",0],["usize",0]],["result",4]],[[["mapaccessdeserializer",3],["str",0],["usize",0]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["unitdeserializer",3]],["result",4]],[[["booldeserializer",3]],["result",4]],[[["i8deserializer",3]],["result",4]],[[["i16deserializer",3]],["result",4]],[[["i32deserializer",3]],["result",4]],[[["i64deserializer",3]],["result",4]],[[["isizedeserializer",3]],["result",4]],[[["u8deserializer",3]],["result",4]],[[["u16deserializer",3]],["result",4]],[[["u64deserializer",3]],["result",4]],[[["usizedeserializer",3]],["result",4]],[[["f32deserializer",3]],["result",4]],[[["f64deserializer",3]],["result",4]],[[["chardeserializer",3]],["result",4]],[[["i128deserializer",3]],["result",4]],[[["u128deserializer",3]],["result",4]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],[[["borrowedbytesdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["seqaccessdeserializer",3]],["result",4]],[[["mapaccessdeserializer",3]],["result",4]],[[["mapdeserializer",3],["str",0]],["result",4]],[[["unitdeserializer",3],["str",0]],["result",4]],[[["booldeserializer",3],["str",0]],["result",4]],[[["i8deserializer",3],["str",0]],["result",4]],[[["i16deserializer",3],["str",0]],["result",4]],[[["i32deserializer",3],["str",0]],["result",4]],[[["i64deserializer",3],["str",0]],["result",4]],[[["isizedeserializer",3],["str",0]],["result",4]],[[["u8deserializer",3],["str",0]],["result",4]],[[["u16deserializer",3],["str",0]],["result",4]],[[["u64deserializer",3],["str",0]],["result",4]],[[["usizedeserializer",3],["str",0]],["result",4]],[[["f32deserializer",3],["str",0]],["result",4]],[[["f64deserializer",3],["str",0]],["result",4]],[[["chardeserializer",3],["str",0]],["result",4]],[[["i128deserializer",3],["str",0]],["result",4]],[[["u128deserializer",3],["str",0]],["result",4]],[[["u32deserializer",3],["str",0]],["result",4]],[[["strdeserializer",3],["str",0]],["result",4]],[[["borrowedstrdeserializer",3],["str",0]],["result",4]],[[["stringdeserializer",3],["str",0]],["result",4]],[[["cowstrdeserializer",3],["str",0]],["result",4]],[[["borrowedbytesdeserializer",3],["str",0]],["result",4]],[[["seqdeserializer",3],["str",0]],["result",4]],[[["seqaccessdeserializer",3],["str",0]],["result",4]],[[["mapaccessdeserializer",3],["str",0]],["result",4]],[[["mapdeserializer",3]],["result",4]],[[["seqdeserializer",3]],["result",4]],[[["error",3],["error",3]],["bool",0]],[[["mapdeserializer",3],["formatter",3]],["result",6]],[[["error",3],["formatter",3]],["result",4,[["error",3]]]],[[["error",3],["formatter",3]],["result",6]],[[["unitdeserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["booldeserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["i8deserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["i16deserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["i32deserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["i64deserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["isizedeserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["u8deserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["u16deserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["u64deserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["usizedeserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["f32deserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["f64deserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["chardeserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["i128deserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["u128deserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["u32deserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["strdeserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["borrowedstrdeserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["stringdeserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["cowstrdeserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["borrowedbytesdeserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["seqdeserializer",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["seqaccessdeserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[["mapaccessdeserializer",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",3],["error",3]],["bool",0]],[[],["mapdeserializer",3]],[[["str",0]],["borrowedstrdeserializer",3]],[[],["borrowedbytesdeserializer",3]],[[],["seqdeserializer",3]],[[],["seqaccessdeserializer",3]],[[],["mapaccessdeserializer",3]],[[["mapdeserializer",3]],["result",4,[["option",4]]]],[[["seqdeserializer",3]],["result",4,[["option",4]]]],[[["mapdeserializer",3]],["result",4,[["option",4]]]],[[["mapdeserializer",3]],["result",4,[["option",4]]]],[[["mapdeserializer",3]],["result",4]],[[["mapdeserializer",3]],["option",4,[["usize",0]]]],[[["mapdeserializer",3]],["option",4,[["usize",0]]]],[[["seqdeserializer",3]],["option",4,[["usize",0]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["u32deserializer",3]],["result",4]],[[["strdeserializer",3]],["result",4]],[[["borrowedstrdeserializer",3]],["result",4]],[[["stringdeserializer",3]],["result",4]],[[["cowstrdeserializer",3]],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["result",4]],[[],["result",4]],[[["",0]],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["impossible",3]],["result",4]],[[["impossible",3]],["result",4]],[[["impossible",3]],["result",4]],[[["impossible",3]],["result",4]],[[["impossible",3]],["result",4]],[[["impossible",3]],["result",4]],[[["impossible",3]],["result",4]],[[]],[[]],[[["",0]],["bool",0]],[[["",0]],["result",4]],[[["bool",0]],["result",4]],[[],["result",4]],[[["char",0]],["result",4]],[[["",0],["",0]],["result",4]],[[["",0],["",0]],["result",4]],[[["impossible",3],["",0]],["result",4]],[[["impossible",3],["",0]],["result",4]],[[["",0],["",0],["",0]],["result",4]],[[["f32",0]],["result",4]],[[["f64",0]],["result",4]],[[["",0],["",0]],["result",4]],[[["",0],["",0]],["result",4]],[[["",0],["str",0],["",0]],["result",4]],[[["",0],["str",0],["",0]],["result",4]],[[["impossible",3],["",0]],["result",4]],[[["impossible",3],["str",0],["",0]],["result",4]],[[["impossible",3],["",0]],["result",4]],[[["impossible",3],["str",0],["",0]],["result",4]],[[["i128",0]],["result",4]],[[["i16",0]],["result",4]],[[["i32",0]],["result",4]],[[["i64",0]],["result",4]],[[["i8",0]],["result",4]],[[["",0],["",0]],["result",4]],[[["impossible",3],["",0]],["result",4]],[[["option",4,[["usize",0]]]],["result",4]],[[["str",0],["",0]],["result",4]],[[["str",0],["u32",0],["str",0],["",0]],["result",4]],[[],["result",4]],[[["option",4,[["usize",0]]]],["result",4]],[[["",0]],["result",4]],[[["str",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["u32",0],["str",0],["usize",0]],["result",4]],[[["usize",0]],["result",4]],[[["str",0],["usize",0]],["result",4]],[[["str",0],["u32",0],["str",0],["usize",0]],["result",4]],[[["u128",0]],["result",4]],[[["u16",0]],["result",4]],[[["u32",0]],["result",4]],[[["u64",0]],["result",4]],[[["u8",0]],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[["str",0],["u32",0],["str",0]],["result",4]],[[["",0],["",0]],["result",4]],[[["impossible",3],["",0]],["result",4]],[[["",0],["str",0]],["result",4]],[[["",0],["str",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[8,"Deserializer"],[8,"Serializer"],[8,"Deserialize"],[8,"Serialize"],[4,"Unexpected"],[8,"IntoDeserializer"],[8,"SeqAccess"],[8,"MapAccess"],[8,"EnumAccess"],[8,"VariantAccess"],[8,"DeserializeSeed"],[8,"Visitor"],[3,"IgnoredAny"],[8,"Error"],[8,"Expected"],[13,"Bool"],[13,"Unsigned"],[13,"Signed"],[13,"Float"],[13,"Char"],[13,"Str"],[13,"Bytes"],[13,"Other"],[3,"MapDeserializer"],[3,"Error"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"I128Deserializer"],[3,"U128Deserializer"],[3,"U32Deserializer"],[3,"StrDeserializer"],[3,"BorrowedStrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"BorrowedBytesDeserializer"],[3,"SeqDeserializer"],[3,"SeqAccessDeserializer"],[3,"MapAccessDeserializer"],[8,"SerializeSeq"],[8,"SerializeTuple"],[8,"SerializeTupleStruct"],[8,"SerializeTupleVariant"],[8,"SerializeMap"],[8,"SerializeStruct"],[8,"SerializeStructVariant"],[3,"Impossible"],[8,"Error"]]},\
"serde_derive":{"doc":"This crate provides Serde’s two derive macros.","t":[24,24],"n":["Deserialize","Serialize"],"q":["serde_derive",""],"d":["",""],"i":[0,0],"f":[null,null],"p":[]},\
"serde_json":{"doc":"Serde JSON","tn":["Array","Bool","Deserializer","Error","Map","Null","Number","Number","Object","Result","Serializer","StreamDeserializer","String","Value","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone","clone_into","clone_into","collect_str","custom","custom","de","default","default","description","deserialize","deserialize","deserialize_any","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","deserialize_unit_struct","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_reader","from_slice","from_str","from_str","from_value","index","index","index_mut","index_mut","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","invalid_type","json","map","ne","next","ser","serialize","serialize","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i128","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u128","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","to_owned","to_owned","to_string","to_string","to_string","to_string_pretty","to_value","to_vec","to_vec_pretty","to_writer","to_writer_pretty","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value","0","0","0","0","0","Deserializer","IoRead","Read","SliceRead","StrRead","StreamDeserializer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte_offset","end","from","from","from","from_reader","from_reader","from_slice","from_slice","from_str","from_str","into","into","into","into_iter","new","new","new","new","new","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Category","Data","Eof","Error","Io","Result","Syntax","borrow","borrow_mut","classify","clone","clone_into","column","eq","fmt","from","into","is_data","is_eof","is_io","is_syntax","line","to_owned","try_from","try_into","type_id","Entry","IntoIter","Iter","IterMut","Keys","Map","Occupied","OccupiedEntry","Vacant","VacantEntry","Values","ValuesMut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","contains_key","entry","from","from","from","from","from","from","from","from","from","get","get","get_mut","get_mut","insert","insert","insert","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_mut","is_empty","iter","iter_mut","key","key","key","keys","len","len","len","len","len","len","len","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","or_insert","or_insert_with","remove","remove","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","values","values_mut","with_capacity","0","0","AsciiControl","Backspace","CarriageReturn","CharEscape","CompactFormatter","FormFeed","Formatter","LineFeed","PrettyFormatter","Quote","ReverseSolidus","Serializer","Solidus","Tab","begin_array","begin_array","begin_array_value","begin_array_value","begin_object","begin_object","begin_object_key","begin_object_key","begin_object_value","begin_object_value","begin_string","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","end_array","end_array","end_array_value","end_array_value","end_object","end_object","end_object_key","end_object_value","end_object_value","end_string","fmt","fmt","from","from","from","into","into","into","into_inner","new","new","pretty","to_owned","to_owned","to_string","to_string_pretty","to_vec","to_vec_pretty","to_writer","to_writer_pretty","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_formatter","with_indent","write_bool","write_char_escape","write_f32","write_f64","write_i16","write_i32","write_i64","write_i8","write_null","write_number_str","write_raw_fragment","write_string_fragment","write_u16","write_u32","write_u64","write_u8","0","Array","Bool","Index","Map","Null","Number","Number","Object","String","Value","as_array","as_array_mut","as_bool","as_f64","as_f64","as_i64","as_i64","as_null","as_object","as_object_mut","as_str","as_u64","as_u64","borrow","borrow_mut","clone","clone_into","deserialize","deserialize_any","deserialize_any","deserialize_bool","deserialize_bool","deserialize_byte_buf","deserialize_byte_buf","deserialize_bytes","deserialize_bytes","deserialize_char","deserialize_char","deserialize_enum","deserialize_enum","deserialize_f32","deserialize_f32","deserialize_f64","deserialize_f64","deserialize_i128","deserialize_i128","deserialize_i16","deserialize_i16","deserialize_i32","deserialize_i32","deserialize_i64","deserialize_i64","deserialize_i8","deserialize_i8","deserialize_identifier","deserialize_identifier","deserialize_ignored_any","deserialize_ignored_any","deserialize_map","deserialize_map","deserialize_newtype_struct","deserialize_newtype_struct","deserialize_option","deserialize_option","deserialize_seq","deserialize_seq","deserialize_str","deserialize_str","deserialize_string","deserialize_string","deserialize_struct","deserialize_struct","deserialize_tuple","deserialize_tuple","deserialize_tuple_struct","deserialize_tuple_struct","deserialize_u128","deserialize_u128","deserialize_u16","deserialize_u16","deserialize_u32","deserialize_u32","deserialize_u64","deserialize_u64","deserialize_u8","deserialize_u8","deserialize_unit","deserialize_unit","deserialize_unit_struct","deserialize_unit_struct","eq","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_f64","from_str","from_value","get","get_mut","into","is_array","is_boolean","is_f64","is_f64","is_i64","is_i64","is_null","is_number","is_object","is_string","is_u64","is_u64","ne","pointer","pointer_mut","serialize","take","to_owned","to_string","to_value","try_from","try_into","type_id","0","0","0","0","0"],"q":["serde_jsonserde_json::Value","","","","","serde_json::de","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::error","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::map::Entry","","serde_json::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::ser::CharEscape","serde_json::value","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_json::value::Value","","","",""],"d":["Represents a JSON array.","Represents a JSON boolean.","A structure that deserializes JSON into Rust values.","This type represents all possible errors that can occur …","Represents a JSON key/value type.","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","A structure for serializing Rust values into JSON.","Iterator that deserializes a stream into multiple JSON …","Represents a JSON string.","Represents any valid JSON value.","","","","","","","","","","","","","","","","","","","","","Deserialize JSON data to a Rust data structure.","","","","","","","","","","","","","","","Parses a JSON string as bytes. Note that this function …","","","","","","Parses an enum as an object like <code>{&quot;$KEY&quot;:$VALUE}</code>, where …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses a newtype struct as the underlying value.","","","Parses a <code>null</code> as a None, and any other values as a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","When serializing or deserializing JSON goes wrong.","","","","","Display a JSON value as a string.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert boolean to <code>Value</code>","","","","Convert a slice to <code>Value</code>","Convert a <code>Vec</code> to <code>Value</code>","Convert map (with string keys) to <code>Value</code>","Convert copy-on-write string to <code>Value</code>","Convert string slice to <code>Value</code>","Convert <code>String</code> to <code>Value</code>","","Convert 32-bit floating point number to <code>Value</code>","Returns the argument unchanged.","","","","","Convert 64-bit floating point number to <code>Value</code>","","","","Convert an iteratable type to a <code>Value</code>","Deserialize an instance of type <code>T</code> from an IO stream of …","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Deserialize an instance of type <code>T</code> from a string of JSON …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","","Index into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or","","Write into a <code>serde_json::Value</code> using the syntax …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Construct a <code>serde_json::Value</code> from a JSON literal.","A map of String to serde_json::Value.","","","Serialize a Rust data structure into JSON data.","","","","","","","","","","","","","","Serialize newtypes without an object wrapper.","","","","","","","","","","","","","","","","","","","","","Serialize the given data structure as a String of JSON.","","","Serialize the given data structure as a pretty-printed …","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as JSON into the IO …","Serialize the given data structure as pretty-printed JSON …","","","","","","","","","","","","","","","","","","","The Value enum, a loosely typed way of representing any …","","","","","","A structure that deserializes JSON into Rust values.","JSON input source that reads from a std::io input stream.","Trait used by the deserializer for iterating over input. …","JSON input source that reads from a slice of bytes.","JSON input source that reads from a UTF-8 string.","Iterator that deserializes a stream into multiple JSON …","","","","","","","Returns the number of bytes so far deserialized into a …","The <code>Deserializer::end</code> method should be called after a …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Deserialize an instance of type <code>T</code> from an IO stream of …","Creates a JSON deserializer from an <code>io::Read</code>.","Deserialize an instance of type <code>T</code> from bytes of JSON text.","Creates a JSON deserializer from a <code>&amp;[u8]</code>.","Deserialize an instance of type <code>T</code> from a string of JSON …","Creates a JSON deserializer from a <code>&amp;str</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Turn a JSON deserializer into an iterator over values of …","Create a JSON deserializer from one of the possible …","Create a JSON stream deserializer from one of the possible …","Create a JSON input source to read from a std::io input …","Create a JSON input source to read from a slice of bytes.","Create a JSON input source to read from a UTF-8 string.","","","","","","","","","","Categorizes the cause of a <code>serde_json::Error</code>.","The error was caused by input data that was semantically …","The error was caused by prematurely reaching the end of …","This type represents all possible errors that can occur …","The error was caused by a failure to read or write bytes …","Alias for a <code>Result</code> with the error type <code>serde_json::Error</code>.","The error was caused by input that was not syntactically …","","","Categorizes the cause of this error.","","","One-based column number at which the error was detected.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns true if this error was caused by input data that …","Returns true if this error was caused by prematurely …","Returns true if this error was caused by a failure to read …","Returns true if this error was caused by input that was not","One-based line number at which the error was detected.","","","","","A view into a single entry in a map, which may either be …","An owning iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s entries.","A mutable iterator over a serde_json::Map’s entries.","An iterator over a serde_json::Map’s keys.","Represents a JSON key/value type.","An occupied Entry.","An occupied Entry. It is part of the <code>Entry</code> enum.","A vacant Entry.","A vacant Entry. It is part of the <code>Entry</code> enum.","An iterator over a serde_json::Map’s values.","A mutable iterator over a serde_json::Map’s values.","","","","","","","","","","","","","","","","","","","Clears the map, removing all values.","Returns true if the map contains a value for the specified …","Gets the given key’s corresponding entry in the map for …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the value corresponding to the key.","Gets a reference to the value in the entry.","Returns a mutable reference to the value corresponding to …","Gets a mutable reference to the value in the entry.","Inserts a key-value pair into the map.","Sets the value of the entry with the VacantEntry’s key, …","Sets the value of the entry with the <code>OccupiedEntry</code>’s …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Converts the entry into a mutable reference to its value.","Returns true if the map contains no elements.","Gets an iterator over the entries of the map.","Gets a mutable iterator over the entries of the map.","Returns a reference to this entry’s key.","Gets a reference to the key that would be used when …","Gets a reference to the key in the entry.","Gets an iterator over the keys of the map.","Returns the number of elements in the map.","","","","","","","Makes a new empty Map.","","","","","","","","","","","","","Ensures a value is in the entry by inserting the default …","Ensures a value is in the entry by inserting the result of …","Removes a key from the map, returning the value at the key …","Takes the value of the entry out of the map, and returns …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets an iterator over the values of the map.","Gets an iterator over mutable values of the map.","Makes a new empty Map with the given initial capacity.","","","An escaped ASCII plane control character (usually escaped …","An escaped backspace character (usually escaped as <code>\\\\b</code>)","An escaped carriage return character (usually escaped as <code>\\\\r</code>…","Represents a character escape code in a type-safe manner.","This structure compacts a JSON value with no extra …","An escaped form feed character (usually escaped as <code>\\\\f</code>)","This trait abstracts away serializing the JSON control …","An escaped line feed character (usually escaped as <code>\\\\n</code>)","This structure pretty prints a JSON value to make it human …","An escaped quote <code>&quot;</code>","An escaped reverse solidus <code>\\\\</code>","A structure for serializing Rust values into JSON.","An escaped solidus <code>/</code>","An escaped tab character (usually escaped as <code>\\\\t</code>)","Called before every array.  Writes a <code>[</code> to the specified …","","Called before every array value.  Writes a <code>,</code> if needed to …","","Called before every object.  Writes a <code>{</code> to the specified …","","Called before every object key.","","Called before every object value.  A <code>:</code> should be written to","","Called before each series of <code>write_string_fragment</code> and …","","","","","","","","","","","","Called after every array.  Writes a <code>]</code> to the specified …","","Called after every array value.","","Called after every object.  Writes a <code>}</code> to the specified …","","Called after every object key.  A <code>:</code> should be written to …","Called after every object value.","","Called after each series of <code>write_string_fragment</code> and …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Unwrap the <code>Writer</code> from the <code>Serializer</code>.","Creates a new JSON serializer.","Construct a pretty printer formatter that defaults to …","Creates a new JSON pretty print serializer.","","","Serialize the given data structure as a String of JSON.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as a JSON byte vector.","Serialize the given data structure as a pretty-printed …","Serialize the given data structure as JSON into the IO …","Serialize the given data structure as pretty-printed JSON …","","","","","","","","","","Creates a new JSON visitor whose output will be written to …","Construct a pretty printer formatter that uses the <code>indent</code> …","Writes a <code>true</code> or <code>false</code> value to the specified writer.","Writes a character escape code to the specified writer.","Writes a floating point value like <code>-31.26e+12</code> to the …","Writes a floating point value like <code>-31.26e+12</code> to the …","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes an integer value like <code>-123</code> to the specified writer.","Writes a <code>null</code> value to the specified writer.","Writes a number that has already been rendered to a string.","Writes a raw JSON fragment that doesn’t need any …","Writes a string fragment that doesn’t need any escaping …","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","Writes an integer value like <code>123</code> to the specified writer.","","Represents a JSON array.","Represents a JSON boolean.","A type that can be used to index into a <code>serde_json::Value</code>.","","Represents a JSON null value.","Represents a JSON number, whether integer or floating …","Represents a JSON number, whether integer or floating …","Represents a JSON object.","Represents a JSON string.","Represents any valid JSON value.","If the <code>Value</code> is an Array, returns the associated vector. …","If the <code>Value</code> is an Array, returns the associated mutable …","If the <code>Value</code> is a Boolean, returns the associated bool. …","If the <code>Value</code> is a number, represent it as f64 if possible. …","Represents the number as f64 if possible. Returns None …","If the <code>Value</code> is an integer, represent it as i64 if …","If the <code>Number</code> is an integer, represent it as i64 if …","If the <code>Value</code> is a Null, returns (). Returns None otherwise.","If the <code>Value</code> is an Object, returns the associated Map. …","If the <code>Value</code> is an Object, returns the associated mutable …","If the <code>Value</code> is a String, returns the associated str. …","If the <code>Value</code> is an integer, represent it as u64 if …","If the <code>Number</code> is an integer, represent it as u64 if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Converts a finite <code>f64</code> to a <code>Number</code>. Infinite or NaN values …","","Interpret a <code>serde_json::Value</code> as an instance of type <code>T</code>.","Index into a JSON array or map. A string index can be used …","Mutably index into a JSON array or map. A string index can …","Calls <code>U::from(self)</code>.","Returns true if the <code>Value</code> is an Array. Returns false …","Returns true if the <code>Value</code> is a Boolean. Returns false …","Returns true if the <code>Value</code> is a number that can be …","Returns true if the <code>Number</code> can be represented by f64.","Returns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …","Returns true if the <code>Value</code> is a Null. Returns false …","Returns true if the <code>Value</code> is a Number. Returns false …","Returns true if the <code>Value</code> is an Object. Returns false …","Returns true if the <code>Value</code> is a String. Returns false …","Returns true if the <code>Value</code> is an integer between zero and …","Returns true if the <code>Number</code> is an integer between zero and …","","Looks up a value by a JSON Pointer.","Looks up a value by a JSON Pointer and returns a mutable …","","Takes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …","","","Convert a <code>T</code> into <code>serde_json::Value</code> which is an enum that …","","","","","","","",""],"i":[1,1,0,0,0,1,0,1,1,0,0,0,1,0,2,3,4,5,6,1,2,3,4,5,6,1,4,5,1,5,1,6,4,4,0,5,1,4,5,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,2,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,5,4,4,5,1,1,2,3,4,5,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,0,0,0,1,0,5,1,5,1,2,3,4,5,6,1,3,5,5,5,4,0,0,1,3,0,5,1,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,1,0,4,1,0,0,0,0,0,0,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,0,7,8,9,10,11,0,0,0,0,0,0,12,13,14,12,13,14,3,2,12,13,14,0,2,0,2,0,2,12,13,14,2,2,3,12,13,14,12,13,14,12,13,14,12,13,14,0,15,15,0,15,0,15,15,15,4,15,15,4,15,15,15,15,4,4,4,4,4,15,15,15,15,0,0,0,0,0,0,16,0,16,0,0,0,16,17,18,19,20,21,22,23,24,16,17,18,19,20,21,22,23,24,5,5,5,16,17,18,19,20,21,22,23,24,5,18,5,18,5,17,18,16,17,18,19,20,21,22,23,24,19,20,21,22,23,24,18,5,5,5,16,17,18,5,5,19,20,21,22,23,24,5,19,20,21,22,23,24,19,20,21,22,23,24,16,16,5,18,19,20,21,22,23,24,16,17,18,19,20,21,22,23,24,16,17,18,19,20,21,22,23,24,16,17,18,19,20,21,22,23,24,5,5,5,25,26,27,27,27,0,0,27,0,27,0,27,27,0,27,27,28,29,28,29,28,29,28,29,28,29,28,27,30,29,27,30,29,30,29,30,29,29,28,29,28,29,28,29,28,28,29,28,30,29,27,30,29,27,30,29,6,6,29,6,30,29,0,0,0,0,0,0,27,30,29,27,30,29,27,30,29,6,29,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,31,1,1,0,0,1,0,1,1,1,0,1,1,1,1,32,1,32,1,1,1,1,1,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,1,1,32,1,1,1,32,1,32,1,1,1,1,1,32,32,1,1,32,1,32,32,0,32,32,32,7,8,9,10,11],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["error",3]],["option",4,[["error",8]]]],[[["map",3,[["string",3],["value",4]]]],["map",3,[["string",3],["value",4]]]],[[["value",4]],["value",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["serializer",3],["",0]],["result",6]],[[["display",8]],["error",3]],[[["display",8]],["error",3]],null,[[],["map",3,[["string",3],["value",4]]]],[[],["value",4]],[[["error",3]],["str",0]],[[],["result",4,[["map",3,[["string",3],["value",4]]]]]],[[],["result",4,[["value",4]]]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4,[["error",3]]]],[[["value",4]],["result",4,[["error",3]]]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4]],[[["value",4]],["result",4]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4]],[[["value",4]],["result",4]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4]],[[["value",4]],["result",4]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4]],[[["value",4]],["result",4]],[[["deserializer",3],["str",0]],["result",6]],[[["value",4],["str",0]],["result",4,[["error",3]]]],[[["value",4],["str",0]],["result",4,[["error",3]]]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4,[["error",3]]]],[[["value",4]],["result",4,[["error",3]]]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4,[["error",3]]]],[[["value",4]],["result",4,[["error",3]]]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4,[["error",3]]]],[[["value",4]],["result",4,[["error",3]]]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4,[["error",3]]]],[[["value",4]],["result",4,[["error",3]]]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4,[["error",3]]]],[[["value",4]],["result",4,[["error",3]]]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4,[["error",3]]]],[[["value",4]],["result",4,[["error",3]]]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4,[["error",3]]]],[[["value",4]],["result",4,[["error",3]]]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4]],[[["value",4]],["result",4]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4]],[[["value",4]],["result",4]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4]],[[["value",4]],["result",4]],[[["deserializer",3],["str",0]],["result",6]],[[["value",4],["str",0]],["result",4]],[[["value",4],["str",0]],["result",4]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4,[["error",3]]]],[[["value",4]],["result",4,[["error",3]]]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4]],[[["value",4]],["result",4]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4]],[[["value",4]],["result",4]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4]],[[["value",4]],["result",4]],[[["deserializer",3],["str",0]],["result",6]],[[["value",4],["str",0]],["result",4]],[[["value",4],["str",0]],["result",4]],[[["deserializer",3],["usize",0]],["result",6]],[[["value",4],["usize",0]],["result",4]],[[["value",4],["usize",0]],["result",4]],[[["deserializer",3],["str",0],["usize",0]],["result",6]],[[["value",4],["str",0],["usize",0]],["result",4]],[[["value",4],["str",0],["usize",0]],["result",4]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4,[["error",3]]]],[[["value",4]],["result",4,[["error",3]]]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4,[["error",3]]]],[[["value",4]],["result",4,[["error",3]]]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4,[["error",3]]]],[[["value",4]],["result",4,[["error",3]]]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4,[["error",3]]]],[[["value",4]],["result",4,[["error",3]]]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4,[["error",3]]]],[[["value",4]],["result",4,[["error",3]]]],[[["deserializer",3]],["result",6]],[[["value",4]],["result",4]],[[["value",4]],["result",4]],[[["deserializer",3],["str",0]],["result",6]],[[["value",4],["str",0]],["result",4]],[[["value",4],["str",0]],["result",4]],[[["map",3,[["string",3],["value",4]]],["map",3,[["string",3],["value",4]]]],["bool",0]],[[["value",4],["i16",0]],["bool",0]],[[["value",4],["i8",0]],["bool",0]],[[["value",4],["f32",0]],["bool",0]],[[["value",4],["u16",0]],["bool",0]],[[["value",4],["f32",0]],["bool",0]],[[["value",4],["usize",0]],["bool",0]],[[["value",4],["usize",0]],["bool",0]],[[["value",4],["usize",0]],["bool",0]],[[["value",4],["u16",0]],["bool",0]],[[["value",4],["u16",0]],["bool",0]],[[["value",4],["u8",0]],["bool",0]],[[["value",4],["u64",0]],["bool",0]],[[["value",4],["u64",0]],["bool",0]],[[["value",4],["u64",0]],["bool",0]],[[["value",4],["u32",0]],["bool",0]],[[["value",4],["bool",0]],["bool",0]],[[["value",4],["u32",0]],["bool",0]],[[["value",4],["u8",0]],["bool",0]],[[["value",4],["f64",0]],["bool",0]],[[["value",4],["u8",0]],["bool",0]],[[["value",4],["bool",0]],["bool",0]],[[["value",4],["f64",0]],["bool",0]],[[["value",4],["value",4]],["bool",0]],[[["value",4],["str",0]],["bool",0]],[[["value",4],["str",0]],["bool",0]],[[["value",4],["string",3]],["bool",0]],[[["value",4],["isize",0]],["bool",0]],[[["value",4],["i8",0]],["bool",0]],[[["value",4],["f32",0]],["bool",0]],[[["value",4],["isize",0]],["bool",0]],[[["value",4],["i8",0]],["bool",0]],[[["value",4],["u32",0]],["bool",0]],[[["value",4],["i16",0]],["bool",0]],[[["value",4],["f64",0]],["bool",0]],[[["value",4],["isize",0]],["bool",0]],[[["value",4],["bool",0]],["bool",0]],[[["value",4],["i64",0]],["bool",0]],[[["value",4],["i16",0]],["bool",0]],[[["value",4],["i32",0]],["bool",0]],[[["value",4],["i32",0]],["bool",0]],[[["value",4],["i32",0]],["bool",0]],[[["value",4],["i64",0]],["bool",0]],[[["value",4],["i64",0]],["bool",0]],null,[[["map",3,[["string",3],["value",4]]]]],[[["error",3],["formatter",3]],["result",6]],[[["error",3],["formatter",3]],["result",6]],[[["map",3,[["string",3],["value",4]]],["formatter",3]],["result",4,[["error",3]]]],[[["value",4],["formatter",3]],["result",6]],[[["value",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["bool",0]],["value",4]],[[["u16",0]],["value",4]],[[["i8",0]],["value",4]],[[["i32",0]],["value",4]],[[],["value",4]],[[["vec",3,[["into",8,[["value",4]]]]]],["value",4]],[[["map",3,[["string",3],["value",4]]]],["value",4]],[[["cow",4,[["str",0]]]],["value",4]],[[["str",0]],["value",4]],[[["string",3]],["value",4]],[[["i16",0]],["value",4]],[[["f32",0]],["value",4]],[[]],[[["usize",0]],["value",4]],[[["u64",0]],["value",4]],[[["u32",0]],["value",4]],[[["i64",0]],["value",4]],[[["f64",0]],["value",4]],[[["u8",0]],["value",4]],[[["isize",0]],["value",4]],[[],["map",3,[["string",3],["value",4]]]],[[["intoiterator",8]],["value",4]],[[],["result",6]],[[],["result",6]],[[["str",0]],["result",6]],[[["str",0]],["result",4,[["value",4],["error",3]]]],[[["value",4]],["result",4,[["error",3]]]],[[["map",3,[["string",3],["value",4]]],["",0]],["value",4]],[[["value",4]],["value",4]],[[["map",3,[["string",3],["value",4]]],["",0]],["value",4]],[[["value",4]],["value",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["map",3]]],[[["map",3]]],[[["map",3,[["string",3],["value",4]]]]],[[["unexpected",4],["expected",8]],["error",3]],null,null,[[["value",4],["value",4]],["bool",0]],[[["streamdeserializer",3]],["option",4,[["result",6]]]],null,[[["map",3,[["string",3],["value",4]]]],["result",4]],[[["value",4]],["result",4]],[[["serializer",3],["bool",0]],["result",6]],[[["serializer",3]],["result",6]],[[["serializer",3],["char",0]],["result",6]],[[["serializer",3],["f32",0]],["result",6]],[[["serializer",3],["f64",0]],["result",6]],[[["serializer",3],["i128",0]],["result",6]],[[["serializer",3],["i16",0]],["result",6]],[[["serializer",3],["i32",0]],["result",6]],[[["serializer",3],["i64",0]],["result",6]],[[["serializer",3],["i8",0]],["result",6]],[[["serializer",3],["option",4,[["usize",0]]]],["result",6]],[[["serializer",3],["str",0],["",0]],["result",6]],[[["serializer",3],["str",0],["u32",0],["str",0],["",0]],["result",6]],[[["serializer",3]],["result",6]],[[["serializer",3],["option",4,[["usize",0]]]],["result",6]],[[["serializer",3],["",0]],["result",6]],[[["serializer",3],["str",0]],["result",6]],[[["serializer",3],["str",0],["usize",0]],["result",6]],[[["serializer",3],["str",0],["u32",0],["str",0],["usize",0]],["result",6]],[[["serializer",3],["usize",0]],["result",6]],[[["serializer",3],["str",0],["usize",0]],["result",6]],[[["serializer",3],["str",0],["u32",0],["str",0],["usize",0]],["result",6]],[[["serializer",3],["u128",0]],["result",6]],[[["serializer",3],["u16",0]],["result",6]],[[["serializer",3],["u32",0]],["result",6]],[[["serializer",3],["u64",0]],["result",6]],[[["serializer",3],["u8",0]],["result",6]],[[["serializer",3]],["result",6]],[[["serializer",3],["str",0]],["result",6]],[[["serializer",3],["str",0],["u32",0],["str",0]],["result",6]],[[["",0]]],[[["",0]]],[[["",0]],["result",6,[["string",3]]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["result",6,[["string",3]]]],[[],["result",4,[["value",4],["error",3]]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["streamdeserializer",3]],["usize",0]],[[["deserializer",3,[["read",8]]]],["result",6]],[[]],[[]],[[]],[[],["result",6]],[[],["deserializer",3,[["ioread",3]]]],[[],["result",6]],[[],["deserializer",3,[["sliceread",3]]]],[[["str",0]],["result",6]],[[["str",0]],["deserializer",3,[["strread",3]]]],[[]],[[]],[[]],[[["deserializer",3,[["read",8]]]],["streamdeserializer",3,[["read",8]]]],[[],["deserializer",3]],[[],["streamdeserializer",3]],[[],["ioread",3]],[[],["sliceread",3]],[[["str",0]],["strread",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["error",3]],["category",4]],[[["category",4]],["category",4]],[[["",0],["",0]]],[[["error",3]],["usize",0]],[[["category",4],["category",4]],["bool",0]],[[["category",4],["formatter",3]],["result",6]],[[]],[[]],[[["error",3]],["bool",0]],[[["error",3]],["bool",0]],[[["error",3]],["bool",0]],[[["error",3]],["bool",0]],[[["error",3]],["usize",0]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["map",3,[["string",3],["value",4]]]]],[[["map",3,[["string",3],["value",4]]],["",0]],["bool",0]],[[["map",3,[["string",3],["value",4]]]],["entry",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["map",3,[["string",3],["value",4]]],["",0]],["option",4,[["value",4]]]],[[["occupiedentry",3]],["value",4]],[[["map",3,[["string",3],["value",4]]],["",0]],["option",4,[["value",4]]]],[[["occupiedentry",3]],["value",4]],[[["map",3,[["string",3],["value",4]]],["string",3],["value",4]],["option",4,[["value",4]]]],[[["vacantentry",3],["value",4]],["value",4]],[[["occupiedentry",3],["value",4]],["value",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["occupiedentry",3]],["value",4]],[[["map",3,[["string",3],["value",4]]]],["bool",0]],[[["map",3,[["string",3],["value",4]]]],["iter",3]],[[["map",3,[["string",3],["value",4]]]],["itermut",3]],[[["entry",4]],["string",3]],[[["vacantentry",3]],["string",3]],[[["occupiedentry",3]],["string",3]],[[["map",3,[["string",3],["value",4]]]],["keys",3]],[[["map",3,[["string",3],["value",4]]]],["usize",0]],[[["iter",3]],["usize",0]],[[["itermut",3]],["usize",0]],[[["intoiter",3]],["usize",0]],[[["keys",3]],["usize",0]],[[["values",3]],["usize",0]],[[["valuesmut",3]],["usize",0]],[[],["map",3,[["string",3],["value",4]]]],[[["iter",3]],["option",4]],[[["itermut",3]],["option",4]],[[["intoiter",3]],["option",4]],[[["keys",3]],["option",4]],[[["values",3]],["option",4]],[[["valuesmut",3]],["option",4]],[[["iter",3]],["option",4]],[[["itermut",3]],["option",4]],[[["intoiter",3]],["option",4]],[[["keys",3]],["option",4]],[[["values",3]],["option",4]],[[["valuesmut",3]],["option",4]],[[["entry",4],["value",4]],["value",4]],[[["entry",4]],["value",4]],[[["map",3,[["string",3],["value",4]]],["",0]],["option",4,[["value",4]]]],[[["occupiedentry",3]],["value",4]],[[["iter",3]]],[[["itermut",3]]],[[["intoiter",3]]],[[["keys",3]]],[[["values",3]]],[[["valuesmut",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["map",3,[["string",3],["value",4]]]],["values",3]],[[["map",3,[["string",3],["value",4]]]],["valuesmut",3]],[[["usize",0]],["map",3,[["string",3],["value",4]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["",0]],["result",6]],[[["prettyformatter",3],["",0]],["result",6]],[[["",0],["",0],["bool",0]],["result",6]],[[["prettyformatter",3],["",0],["bool",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["prettyformatter",3],["",0]],["result",6]],[[["",0],["",0],["bool",0]],["result",6]],[[["prettyformatter",3],["",0],["bool",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["prettyformatter",3],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["compactformatter",3]],["compactformatter",3]],[[["prettyformatter",3]],["prettyformatter",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["prettyformatter",3]],[[["",0],["",0]],["result",6]],[[["prettyformatter",3],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["prettyformatter",3],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["prettyformatter",3],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["prettyformatter",3],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["compactformatter",3],["formatter",3]],["result",6]],[[["prettyformatter",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["serializer",3]]],[[],["serializer",3]],[[],["prettyformatter",3]],[[],["serializer",3,[["prettyformatter",3]]]],[[["",0]]],[[["",0]]],[[["",0]],["result",6,[["string",3]]]],[[["",0]],["result",6,[["string",3]]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["serializer",3]],[[],["prettyformatter",3]],[[["",0],["",0],["bool",0]],["result",6]],[[["",0],["",0],["charescape",4]],["result",6]],[[["",0],["",0],["f32",0]],["result",6]],[[["",0],["",0],["f64",0]],["result",6]],[[["",0],["",0],["i16",0]],["result",6]],[[["",0],["",0],["i32",0]],["result",6]],[[["",0],["",0],["i64",0]],["result",6]],[[["",0],["",0],["i8",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["",0],["",0],["str",0]],["result",6]],[[["",0],["",0],["str",0]],["result",6]],[[["",0],["",0],["str",0]],["result",6]],[[["",0],["",0],["u16",0]],["result",6]],[[["",0],["",0],["u32",0]],["result",6]],[[["",0],["",0],["u64",0]],["result",6]],[[["",0],["",0],["u8",0]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,[[["value",4]],["option",4,[["vec",3]]]],[[["value",4]],["option",4,[["vec",3]]]],[[["value",4]],["option",4,[["bool",0]]]],[[["value",4]],["option",4,[["f64",0]]]],[[["number",3]],["option",4,[["f64",0]]]],[[["value",4]],["option",4,[["i64",0]]]],[[["number",3]],["option",4,[["i64",0]]]],[[["value",4]],["option",4]],[[["value",4]],["option",4,[["map",3]]]],[[["value",4]],["option",4,[["map",3]]]],[[["value",4]],["option",4,[["str",0]]]],[[["value",4]],["option",4,[["u64",0]]]],[[["number",3]],["option",4,[["u64",0]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["number",3]],["number",3]],[[["",0],["",0]]],[[],["result",4,[["number",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4]],[[["number",3]],["result",4]],[[["number",3]],["result",4]],[[["number",3]],["result",4]],[[["number",3]],["result",4]],[[["number",3]],["result",4]],[[["number",3]],["result",4]],[[["number",3]],["result",4]],[[["number",3],["str",0]],["result",4]],[[["number",3],["str",0]],["result",4]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4]],[[["number",3]],["result",4]],[[["number",3]],["result",4]],[[["number",3]],["result",4]],[[["number",3]],["result",4]],[[["number",3]],["result",4]],[[["number",3],["str",0]],["result",4]],[[["number",3],["str",0]],["result",4]],[[["number",3]],["result",4]],[[["number",3]],["result",4]],[[["number",3]],["result",4]],[[["number",3]],["result",4]],[[["number",3]],["result",4]],[[["number",3]],["result",4]],[[["number",3]],["result",4]],[[["number",3]],["result",4]],[[["number",3],["str",0]],["result",4]],[[["number",3],["str",0]],["result",4]],[[["number",3],["usize",0]],["result",4]],[[["number",3],["usize",0]],["result",4]],[[["number",3],["str",0],["usize",0]],["result",4]],[[["number",3],["str",0],["usize",0]],["result",4]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4,[["error",3]]]],[[["number",3]],["result",4]],[[["number",3]],["result",4]],[[["number",3],["str",0]],["result",4]],[[["number",3],["str",0]],["result",4]],[[["number",3],["number",3]],["bool",0]],[[["number",3],["formatter",3]],["result",6]],[[["number",3],["formatter",3]],["result",6]],[[["u8",0]],["number",3]],[[["u64",0]],["number",3]],[[["u32",0]],["number",3]],[[["isize",0]],["number",3]],[[["i64",0]],["number",3]],[[]],[[["i32",0]],["number",3]],[[["i16",0]],["number",3]],[[["i8",0]],["number",3]],[[["u16",0]],["number",3]],[[["usize",0]],["number",3]],[[["f64",0]],["option",4,[["number",3]]]],[[["str",0]],["result",4,[["number",3]]]],[[["value",4]],["result",4,[["error",3]]]],[[["value",4],["index",8]],["option",4,[["value",4]]]],[[["value",4],["index",8]],["option",4,[["value",4]]]],[[]],[[["value",4]],["bool",0]],[[["value",4]],["bool",0]],[[["value",4]],["bool",0]],[[["number",3]],["bool",0]],[[["value",4]],["bool",0]],[[["number",3]],["bool",0]],[[["value",4]],["bool",0]],[[["value",4]],["bool",0]],[[["value",4]],["bool",0]],[[["value",4]],["bool",0]],[[["value",4]],["bool",0]],[[["number",3]],["bool",0]],[[["number",3],["number",3]],["bool",0]],[[["value",4],["str",0]],["option",4,[["value",4]]]],[[["value",4],["str",0]],["option",4,[["value",4]]]],[[["number",3]],["result",4]],[[["value",4]],["value",4]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4,[["value",4],["error",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null],"p":[[4,"Value"],[3,"Deserializer"],[3,"StreamDeserializer"],[3,"Error"],[3,"Map"],[3,"Serializer"],[13,"Bool"],[13,"Number"],[13,"String"],[13,"Array"],[13,"Object"],[3,"IoRead"],[3,"SliceRead"],[3,"StrRead"],[4,"Category"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"ValuesMut"],[13,"Vacant"],[13,"Occupied"],[4,"CharEscape"],[8,"Formatter"],[3,"PrettyFormatter"],[3,"CompactFormatter"],[13,"AsciiControl"],[3,"Number"]]},\
"serde_urlencoded":{"doc":"<code>x-www-form-urlencoded</code> meets Serde","t":[3,3,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,13,4,3,3,3,3,3,3,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12],"n":["Deserializer","Serializer","borrow","borrow","borrow_mut","borrow_mut","de","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","from","from","from_bytes","from_reader","from_str","into","into","ser","serialize_bool","serialize_bytes","serialize_char","serialize_f32","serialize_f64","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Deserializer","Error","borrow","borrow_mut","clone","clone_into","custom","custom","description","eq","fmt","fmt","from","from_bytes","from_reader","from_str","into","ne","new","to_owned","to_string","try_from","try_into","type_id","Custom","Error","MapSerializer","SeqSerializer","Serializer","StructSerializer","StructVariantSerializer","TupleSerializer","TupleStructSerializer","TupleVariantSerializer","Utf8","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","clone","clone_into","custom","description","end","end","end","end","end","end","end","eq","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","ne","new","serialize_element","serialize_element","serialize_entry","serialize_field","serialize_field","serialize_field","serialize_field","serialize_key","serialize_value","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0"],"q":["serde_urlencoded","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_urlencoded::de","","","","","","","","","","","","","","","","","","","","","","","","serde_urlencoded::ser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","serde_urlencoded::ser::Error",""],"d":["A deserializer for the <code>application/x-www-form-urlencoded</code> …","A serializer for the <code>application/x-www-form-urlencoded</code> …","","","","","Deserialization support for the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Deserializes a <code>application/x-wwww-url-encoded</code> value from a …","Convenience function that reads all bytes from <code>reader</code> and …","Deserializes a <code>application/x-wwww-url-encoded</code> value from a …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Serialization support for the …","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Serializes a map, given length is ignored.","Serializes the inner value, ignoring the newtype name.","Returns an error.","Returns <code>Ok</code>.","Serialize a sequence, given length (if any) is ignored.","Serializes the given value.","Returns an error.","Serializes a struct, given length is ignored.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Returns an error.","Serializes a value into a <code>application/x-wwww-url-encoded</code> …","","","","","","","A deserializer for the <code>application/x-www-form-urlencoded</code> …","A minimal representation of all possible errors that can …","","","","","","","","","","","Returns the argument unchanged.","Deserializes a <code>application/x-wwww-url-encoded</code> value from a …","Convenience function that reads all bytes from <code>reader</code> and …","Deserializes a <code>application/x-wwww-url-encoded</code> value from a …","Calls <code>U::from(self)</code>.","","Returns a new <code>Deserializer</code>.","","","","","","","Errors returned during serializing to …","Map serializer.","Sequence serializer.","A serializer for the <code>application/x-www-form-urlencoded</code> …","Struct serializer.","Struct variant serializer.","Tuple serializer.","Tuple struct serializer.","Tuple variant serializer.","","","","","","","","","","","","","","","","","","The lower-level cause of this error, in the case of a <code>Utf8</code> …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns a new <code>Serializer</code>.","","","","","","","","","","","Serializes a value into a <code>application/x-wwww-url-encoded</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,2,1,2,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,0,0,0,1,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,1,2,1,2,1,2,0,0,3,3,3,3,3,3,3,3,3,3,3,0,0,0,3,3,1,3,3,3,3,3,4,0,0,0,0,0,0,0,0,0,4,5,6,7,8,9,10,11,4,5,6,7,8,9,10,11,4,4,4,4,4,4,5,6,7,8,9,10,11,4,4,4,5,6,7,8,9,10,11,4,5,6,7,8,9,10,11,4,4,2,5,6,9,7,8,10,11,9,9,4,0,4,5,6,7,8,9,10,11,4,5,6,7,8,9,10,11,4,5,6,7,8,9,10,11,4,12,13],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["deserializer",3]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3],["str",0]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3],["str",0]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3],["str",0]],["result",4]],[[["deserializer",3],["usize",0]],["result",4]],[[["deserializer",3],["str",0],["usize",0]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3]],["result",4]],[[["deserializer",3],["str",0]],["result",4]],[[]],[[]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["str",0]],["result",4,[["error",3]]]],[[]],[[]],null,[[["serializer",3],["bool",0]],["result",4,[["error",4]]]],[[["serializer",3]],["result",4,[["error",4]]]],[[["serializer",3],["char",0]],["result",4,[["error",4]]]],[[["serializer",3],["f32",0]],["result",4,[["error",4]]]],[[["serializer",3],["f64",0]],["result",4,[["error",4]]]],[[["serializer",3],["i16",0]],["result",4,[["error",4]]]],[[["serializer",3],["i32",0]],["result",4,[["error",4]]]],[[["serializer",3],["i64",0]],["result",4,[["error",4]]]],[[["serializer",3],["i8",0]],["result",4,[["error",4]]]],[[["serializer",3],["option",4,[["usize",0]]]],["result",4,[["error",4]]]],[[["serializer",3],["str",0],["",0]],["result",4,[["error",4]]]],[[["serializer",3],["str",0],["u32",0],["str",0],["",0]],["result",4,[["error",4]]]],[[["serializer",3]],["result",4,[["error",4]]]],[[["serializer",3],["option",4,[["usize",0]]]],["result",4,[["error",4]]]],[[["serializer",3],["",0]],["result",4,[["error",4]]]],[[["serializer",3],["str",0]],["result",4,[["error",4]]]],[[["serializer",3],["str",0],["usize",0]],["result",4,[["error",4]]]],[[["serializer",3],["str",0],["u32",0],["str",0],["usize",0]],["result",4,[["error",4]]]],[[["serializer",3],["usize",0]],["result",4,[["error",4]]]],[[["serializer",3],["str",0],["usize",0]],["result",4,[["error",4]]]],[[["serializer",3],["str",0],["u32",0],["str",0],["usize",0]],["result",4,[["error",4]]]],[[["serializer",3],["u16",0]],["result",4,[["error",4]]]],[[["serializer",3],["u32",0]],["result",4,[["error",4]]]],[[["serializer",3],["u64",0]],["result",4,[["error",4]]]],[[["serializer",3],["u8",0]],["result",4,[["error",4]]]],[[["serializer",3]],["result",4,[["error",4]]]],[[["serializer",3],["str",0]],["result",4,[["error",4]]]],[[["serializer",3],["str",0],["u32",0],["str",0]],["result",4,[["error",4]]]],[[["serialize",8]],["result",4,[["string",3],["error",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["error",3]],["error",3]],[[["",0],["",0]]],[[],["error",3]],[[],["error",3]],[[["error",3]],["str",0]],[[["error",3],["error",3]],["bool",0]],[[["error",3],["formatter",3]],["result",4,[["error",3]]]],[[["error",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["str",0]],["result",4,[["error",3]]]],[[]],[[["error",3],["error",3]],["bool",0]],[[["urlencodedparse",3]],["deserializer",3]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["error",4]],["option",4,[["error",8]]]],[[["error",4]],["error",4]],[[["",0],["",0]]],[[["display",8]],["error",4]],[[["error",4]],["str",0]],[[["seqserializer",3]],["result",4,[["error",4]]]],[[["tupleserializer",3]],["result",4,[["error",4]]]],[[["tuplestructserializer",3]],["result",4,[["error",4]]]],[[["tuplevariantserializer",3]],["result",4,[["error",4]]]],[[["mapserializer",3]],["result",4,[["error",4]]]],[[["structserializer",3]],["result",4,[["error",4]]]],[[["structvariantserializer",3]],["result",4,[["error",4]]]],[[["error",4],["error",4]],["bool",0]],[[["error",4],["formatter",3]],["result",6]],[[["error",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",4],["error",4]],["bool",0]],[[["urlencodedserializer",3]],["serializer",3,[["urlencodedtarget",8]]]],[[["seqserializer",3],["",0]],["result",4,[["error",4]]]],[[["tupleserializer",3],["",0]],["result",4,[["error",4]]]],[[["mapserializer",3],["",0],["",0]],["result",4,[["error",4]]]],[[["tuplestructserializer",3],["",0]],["result",4,[["error",4]]]],[[["tuplevariantserializer",3],["",0]],["result",4,[["error",4]]]],[[["structserializer",3],["str",0],["",0]],["result",4,[["error",4]]]],[[["structvariantserializer",3],["str",0],["",0]],["result",4,[["error",4]]]],[[["mapserializer",3],["",0]],["result",4,[["error",4]]]],[[["mapserializer",3],["",0]],["result",4,[["error",4]]]],[[["",0]]],[[["serialize",8]],["result",4,[["string",3],["error",4]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null],"p":[[3,"Deserializer"],[3,"Serializer"],[3,"Error"],[4,"Error"],[3,"SeqSerializer"],[3,"TupleSerializer"],[3,"TupleStructSerializer"],[3,"TupleVariantSerializer"],[3,"MapSerializer"],[3,"StructSerializer"],[3,"StructVariantSerializer"],[13,"Custom"],[13,"Utf8"]]},\
"simple_logger":{"doc":"A logger that prints all messages with a readable output …","t":[5,5],"n":["init","init_with_level"],"q":["simple_logger",""],"d":["Initializes the global logger with a SimpleLogger instance …","Initializes the global logger with a SimpleLogger instance …"],"i":[0,0],"f":[[[],["result",4,[["setloggererror",3]]]],[[["level",4]],["result",4,[["setloggererror",3]]]]],"p":[]},\
"slab":{"doc":"Pre-allocated storage for a uniform data type.","t":[3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Drain","Iter","IterMut","Slab","VacantEntry","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone_into","contains","default","drain","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get","get_mut","get_unchecked","get_unchecked_mut","index","index_mut","insert","insert","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","iter_mut","key","len","new","next","next","next","remove","reserve","reserve_exact","retain","shrink_to_fit","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vacant_entry","with_capacity"],"q":["slab","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A draining iterator for <code>Slab</code>","An iterator over the values stored in the <code>Slab</code>","A mutable iterator over the values stored in the <code>Slab</code>","Pre-allocated storage for a uniform data type","A handle to a vacant entry in a <code>Slab</code>.","","","","","","","","","","","Return the number of values the slab can store without …","Clear the slab of all values.","","","Return <code>true</code> if a value is associated with the given key.","","Return a draining iterator that removes all elements from …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return a reference to the value associated with the given …","Return a mutable reference to the value associated with …","Return a reference to the value associated with the given …","Return a mutable reference to the value associated with …","","","Insert a value in the slab, returning key assigned to the …","Insert a value in the entry, returning a mutable reference …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Return <code>true</code> if there are no values stored in the slab.","Return an iterator over the slab.","Return an iterator that allows modifying each value.","Return the key associated with this entry.","Return the number of stored values.","Construct a new, empty <code>Slab</code>.","","","","Remove and return the value associated with the given key.","Reserve capacity for at least <code>additional</code> more values to be …","Reserve the minimum capacity required to store exactly …","Retain only the elements specified by the predicate.","Shrink the capacity of the slab as much as possible.","","","","","","","","","","","","","","","","","Return a handle to a vacant entry allowing for further …","Construct a new, empty <code>Slab</code> with the specified capacity."],"i":[0,0,0,0,0,1,2,3,4,5,1,2,3,4,5,4,4,4,4,4,4,4,1,2,3,4,5,1,2,3,4,5,4,4,4,4,4,4,4,5,1,2,3,4,5,1,2,3,4,4,4,4,4,5,4,4,1,2,3,4,4,4,4,4,4,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,4,4],"f":[null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["slab",3]],["usize",0]],[[["slab",3]]],[[["slab",3,[["clone",8]]]],["slab",3,[["clone",8]]]],[[["",0],["",0]]],[[["slab",3],["usize",0]],["bool",0]],[[],["slab",3]],[[["slab",3]],["drain",3]],[[["iter",3],["formatter",3]],["result",6]],[[["itermut",3],["formatter",3]],["result",6]],[[["drain",3],["formatter",3]],["result",6]],[[["slab",3],["formatter",3]],["result",6]],[[["vacantentry",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["slab",3],["usize",0]],["option",4]],[[["slab",3],["usize",0]],["option",4]],[[["slab",3],["usize",0]],["",0]],[[["slab",3],["usize",0]],["",0]],[[["slab",3],["usize",0]],["",0]],[[["slab",3],["usize",0]],["",0]],[[["slab",3]],["usize",0]],[[["vacantentry",3]],["",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["slab",3]],["itermut",3]],[[["slab",3]],["iter",3]],[[["slab",3]],["bool",0]],[[["slab",3]],["iter",3]],[[["slab",3]],["itermut",3]],[[["vacantentry",3]],["usize",0]],[[["slab",3]],["usize",0]],[[],["slab",3]],[[["iter",3]],["option",4]],[[["itermut",3]],["option",4]],[[["drain",3]],["option",4]],[[["slab",3],["usize",0]]],[[["slab",3],["usize",0]]],[[["slab",3],["usize",0]]],[[["slab",3]]],[[["slab",3]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["slab",3]],["vacantentry",3]],[[["usize",0]],["slab",3]]],"p":[[3,"Iter"],[3,"IterMut"],[3,"Drain"],[3,"Slab"],[3,"VacantEntry"]]},\
"smallvec":{"doc":"Small vectors in various sizes. These store a certain …","t":[8,3,8,3,16,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,10,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11],"n":["Array","Drain","ExtendFromSlice","IntoIter","Item","SmallVec","VecLike","as_mut","as_mut_slice","as_ref","as_slice","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","clone","clone_into","cmp","dedup","dedup_by","dedup_by_key","default","deref","deref_mut","drain","drop","drop","drop","eq","extend","extend_from_slice","extend_from_slice","extend_from_slice","flush","fmt","from","from","from","from","from","from","from","from_buf","from_buf_and_len","from_buf_and_len_unchecked","from_elem","from_iter","from_raw_parts","from_slice","from_vec","grow","hash","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","inline_size","insert","insert_from_slice","insert_many","into","into","into","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_vec","is_empty","len","ne","new","next","next","next_back","next_back","partial_cmp","pop","ptr","ptr_mut","push","push","push","remove","reserve","reserve_exact","resize","retain","set_len","shrink_to_fit","size","size_hint","size_hint","smallvec","spilled","swap_remove","to_owned","truncate","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unreachable","with_capacity","write","write_all"],"q":["smallvec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Types that can be used as the backing store for a SmallVec","An iterator that removes the items from a <code>SmallVec</code> and …","Trait to be implemented by a collection that can be …","An iterator that consumes a <code>SmallVec</code> and yields its items …","The type of the array’s elements.","A <code>Vec</code>-like container that can store a small number of …","Common operations implemented by both <code>Vec</code> and <code>SmallVec</code>.","","Extracts a mutable slice of the entire vector.","","Extracts a slice containing the entire vector.","","","","","","","","","The number of items the vector can hold without …","Remove all elements from the vector.","","","","Removes consecutive duplicate elements.","Removes consecutive duplicate elements using the given …","Removes consecutive elements that map to the same key.","","","","Empty the vector and return an iterator over its former …","","","","","","Extends a collection from a slice of its element type","","Copy elements from a slice and append them to the vector.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Constructs a new <code>SmallVec</code> on the stack from an <code>A</code> without …","Creates a <code>SmallVec</code> with <code>n</code> copies of <code>elem</code>.","","Creates a <code>SmallVec</code> directly from the raw components of …","Copy the elements from a slice into a new <code>SmallVec</code>.","Construct a new <code>SmallVec</code> from a <code>Vec&lt;A::Item&gt;</code>.","Re-allocate to set the capacity to …","","","","","","","","","","","","The maximum number of elements this vector can hold inline","Insert an element at position <code>index</code>, shifting all elements …","Copy elements from a slice into the vector at position …","Insert multiple elements at position <code>index</code>, shifting all …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert the SmallVec into an <code>A</code> if possible. Otherwise …","","","","","","Convert a SmallVec to a Vec, without reallocating if the …","Returns <code>true</code> if the vector is empty","The number of elements stored in the vector","","Construct an empty vector","","","","","","Remove an item from the end of the vector and return it, …","Returns a pointer to the first element of the array.","Returns a mutable pointer to the first element of the …","Append an element to the vector.","Append an item to the vector.","","Remove and return the element at position <code>index</code>, shifting …","Reserve capacity for <code>additional</code> more elements to be …","Reserve the minimum capacity for <code>additional</code> more elements …","Resizes the vector so that its length is equal to <code>len</code>.","Retains only the elements specified by the predicate.","Sets the length of a vector.","Shrink the capacity of the vector as much as possible.","Returns the number of items the array can hold.","","","Creates a <code>SmallVec</code> containing the arguments.","Returns <code>true</code> if the data has spilled into a separate …","Remove the element at position <code>index</code>, replacing it with …","","Shorten the vector, keeping the first <code>len</code> elements and …","","","","","","","","","","Hint to the optimizer that any code path which calls this …","Construct an empty vector with enough capacity …","",""],"i":[0,0,0,0,1,0,0,2,2,2,2,3,2,2,4,3,2,2,4,2,2,2,2,2,2,2,2,2,2,2,2,3,2,4,2,2,5,2,2,2,2,3,2,2,2,2,2,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,4,2,3,2,2,2,4,2,2,2,2,2,3,4,3,4,2,2,1,1,6,2,2,2,2,2,2,2,2,2,1,3,4,0,2,2,2,2,3,2,4,3,2,4,3,2,4,0,2,2,2],"f":[null,null,null,null,null,null,null,[[["smallvec",3,[["array",8]]]]],[[["smallvec",3,[["array",8]]]]],[[["smallvec",3,[["array",8]]]]],[[["smallvec",3,[["array",8]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["smallvec",3,[["array",8]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["smallvec",3,[["array",8]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["smallvec",3,[["array",8]]]],["usize",0]],[[["smallvec",3,[["array",8]]]]],[[["smallvec",3,[["array",8]]]],["smallvec",3,[["array",8]]]],[[["",0],["",0]]],[[["smallvec",3,[["array",8]]],["smallvec",3]],["ordering",4]],[[["smallvec",3,[["array",8]]]]],[[["smallvec",3,[["array",8]]]]],[[["smallvec",3,[["array",8]]]]],[[],["smallvec",3,[["array",8]]]],[[["smallvec",3,[["array",8]]]]],[[["smallvec",3,[["array",8]]]]],[[["smallvec",3,[["array",8]]]],["drain",3]],[[["drain",3]]],[[["smallvec",3,[["array",8]]]]],[[["intoiter",3,[["array",8]]]]],[[["smallvec",3,[["array",8]]],["smallvec",3]],["bool",0]],[[["smallvec",3,[["array",8]]],["intoiterator",8]]],[[["",0]]],[[["smallvec",3,[["array",8]]]]],[[["smallvec",3,[["array",8]]]]],[[["smallvec",3,[["array",8]]]],["result",6]],[[["smallvec",3,[["array",8]]],["formatter",3]],["result",6]],[[]],[[["array",8]],["smallvec",3,[["array",8]]]],[[["vec",3]],["smallvec",3,[["array",8]]]],[[],["smallvec",3,[["array",8]]]],[[["never",0]]],[[]],[[]],[[["array",8]],["smallvec",3,[["array",8]]]],[[["array",8],["usize",0]],["smallvec",3,[["array",8]]]],[[["array",8],["usize",0]],["smallvec",3,[["array",8]]]],[[["usize",0]],["smallvec",3,[["array",8]]]],[[["intoiterator",8]],["smallvec",3,[["array",8]]]],[[["usize",0],["usize",0]],["smallvec",3,[["array",8]]]],[[],["smallvec",3,[["array",8]]]],[[["vec",3]],["smallvec",3,[["array",8]]]],[[["smallvec",3,[["array",8]]],["usize",0]]],[[["smallvec",3,[["array",8]]],["",0]]],[[["smallvec",3,[["array",8]]],["range",3,[["usize",0]]]]],[[["smallvec",3,[["array",8]]],["rangefull",3]]],[[["smallvec",3,[["array",8]]],["usize",0]]],[[["smallvec",3,[["array",8]]],["rangeto",3,[["usize",0]]]]],[[["smallvec",3,[["array",8]]],["rangefrom",3,[["usize",0]]]]],[[["smallvec",3,[["array",8]]],["rangefull",3]]],[[["smallvec",3,[["array",8]]],["rangeto",3,[["usize",0]]]]],[[["smallvec",3,[["array",8]]],["rangefrom",3,[["usize",0]]]]],[[["smallvec",3,[["array",8]]],["range",3,[["usize",0]]]]],[[["smallvec",3,[["array",8]]],["usize",0]]],[[["smallvec",3,[["array",8]]]],["usize",0]],[[["smallvec",3,[["array",8]]],["usize",0]]],[[["smallvec",3,[["array",8]]],["usize",0]]],[[["smallvec",3,[["array",8]]],["usize",0],["intoiterator",8]]],[[]],[[]],[[]],[[["smallvec",3,[["array",8]]]],["result",4,[["array",8],["smallvec",3,[["array",8]]]]]],[[]],[[["smallvec",3]]],[[["smallvec",3,[["array",8]]]]],[[["smallvec",3]]],[[]],[[["smallvec",3,[["array",8]]]],["vec",3]],[[["smallvec",3,[["array",8]]]],["bool",0]],[[["smallvec",3,[["array",8]]]],["usize",0]],[[["smallvec",3,[["array",8]]],["smallvec",3]],["bool",0]],[[],["smallvec",3,[["array",8]]]],[[["drain",3]],["option",4]],[[["intoiter",3,[["array",8]]]],["option",4]],[[["drain",3]],["option",4]],[[["intoiter",3,[["array",8]]]],["option",4]],[[["smallvec",3,[["array",8]]],["smallvec",3]],["option",4,[["ordering",4]]]],[[["smallvec",3,[["array",8]]]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["smallvec",3,[["array",8]]]]],[[["smallvec",3,[["array",8]]]]],[[["smallvec",3,[["array",8]]],["usize",0]]],[[["smallvec",3,[["array",8]]],["usize",0]]],[[["smallvec",3,[["array",8]]],["usize",0]]],[[["smallvec",3,[["array",8]]],["usize",0]]],[[["smallvec",3,[["array",8]]],["fnmut",8]]],[[["smallvec",3,[["array",8]]],["usize",0]]],[[["smallvec",3,[["array",8]]]]],[[],["usize",0]],[[["drain",3]]],[[["intoiter",3,[["array",8]]]]],null,[[["smallvec",3,[["array",8]]]],["bool",0]],[[["smallvec",3,[["array",8]]],["usize",0]]],[[["",0]]],[[["smallvec",3,[["array",8]]],["usize",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["never",0]],[[["usize",0]],["smallvec",3,[["array",8]]]],[[["smallvec",3,[["array",8]]]],["result",6,[["usize",0]]]],[[["smallvec",3,[["array",8]]]],["result",6]]],"p":[[8,"Array"],[3,"SmallVec"],[3,"Drain"],[3,"IntoIter"],[8,"ExtendFromSlice"],[8,"VecLike"]]},\
"stable_deref_trait":{"doc":"This module defines an unsafe marker trait, StableDeref, …","t":[8,8],"n":["CloneStableDeref","StableDeref"],"q":["stable_deref_trait",""],"d":["An unsafe marker trait for types where clones deref to the …","An unsafe marker trait for types that deref to a stable …"],"i":[0,0],"f":[null,null],"p":[]},\
"string":{"doc":"A UTF-8 encoded string with configurable byte storage.","t":[16,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11],"n":["Error","String","TryFrom","borrow","borrow","borrow_mut","clone","clone_into","cmp","default","deref","deref_mut","eq","eq","fmt","fmt","from","from","from","from_str","from_utf8_unchecked","get_mut","get_ref","hash","into","into_inner","ne","new","partial_cmp","to_owned","to_string","try_from","try_from","try_from","try_into","type_id"],"q":["string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The type returned in the event of a conversion error.","A UTF-8 encoded string with configurable byte storage.","Attempt to construct <code>Self</code> via a conversion.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Creates a new <code>String</code> from a &amp;str.","Converts the provided value to a <code>String</code> without checking …","Get a mutable reference to the underlying byte storage.","Get a reference to the underlying byte storage.","","Calls <code>U::from(self)</code>.","Unwraps this <code>String</code>, returning the underlying byte storage.","","Creates a new empty <code>String</code>.","","","","Performs the conversion.","","","",""],"i":[1,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2],"f":[null,null,null,[[["string",3]],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["string",3,[["clone",8]]]],["string",3,[["clone",8]]]],[[["",0],["",0]]],[[["string",3,[["ord",8]]],["string",3]],["ordering",4]],[[],["string",3,[["default",8]]]],[[["string",3]],["str",0]],[[["string",3]],["str",0]],[[["string",3],["str",0]],["bool",0]],[[["string",3,[["partialeq",8]]],["string",3]],["bool",0]],[[["string",3,[["asref",8]]],["formatter",3]],["result",6]],[[["string",3,[["asref",8]]],["formatter",3]],["result",6]],[[["string",3]],["string",3,[["string",3]]]],[[]],[[["str",0]],["string",3,[["str",0]]]],[[["str",0]],["string",3]],[[],["string",3]],[[["string",3]],["",0]],[[["string",3]],["",0]],[[["string",3],["",0]]],[[]],[[["string",3]]],[[["string",3,[["partialeq",8]]],["string",3]],["bool",0]],[[],["string",3]],[[["string",3,[["partialord",8]]],["string",3]],["option",4,[["ordering",4]]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4,[["string",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[8,"TryFrom"],[3,"String"]]},\
"syn":{"doc":"Syn is a parsing library for parsing a stream of Rust …","tn":["Abi","Add","AddEq","And","AngleBracketed","AngleBracketedGenericArguments","Array","Array","Assign","AssignOp","Async","AttrStyle","Attribute","AttributeArgs","BareFn","BareFnArg","BareFnArgName","BinOp","Binary","Binding","Binding","BitAnd","BitAndEq","BitOr","BitOrEq","BitXor","BitXorEq","Block","Bool","BoundLifetimes","Box","Brace","Bracket","Break","Byte","ByteStr","Call","Cast","Char","Closure","Const","Const","ConstParam","Constraint","Constraint","Continue","Cooked","Crate","Data","DataEnum","DataStruct","DataUnion","Default","Deref","DeriveInput","Div","DivEq","Enum","Eq","Eq","Error","Expr","ExprArray","ExprAssign","ExprAssignOp","ExprAsync","ExprBinary","ExprBlock","ExprBox","ExprBreak","ExprCall","ExprCast","ExprClosure","ExprContinue","ExprField","ExprForLoop","ExprGroup","ExprIf","ExprInPlace","ExprIndex","ExprLet","ExprLit","ExprLoop","ExprMacro","ExprMatch","ExprMethodCall","ExprParen","ExprPath","ExprRange","ExprReference","ExprRepeat","ExprReturn","ExprStruct","ExprTry","ExprTryBlock","ExprTuple","ExprType","ExprUnary","ExprUnsafe","ExprVerbatim","ExprWhile","ExprYield","F32","F64","Field","Field","Fields","FieldsNamed","FieldsUnnamed","Float","FloatSuffix","ForLoop","Ge","GenericArgument","GenericParam","Generics","Group","Group","Gt","I128","I16","I32","I64","I8","Ident","If","ImplGenerics","ImplTrait","InPlace","Index","Index","Infer","Inherited","Inner","Int","IntSuffix","Isize","Le","Let","Lifetime","Lifetime","Lifetime","Lifetime","Lifetime","LifetimeDef","List","Lit","Lit","LitBool","LitByte","LitByteStr","LitChar","LitFloat","LitInt","LitStr","LitVerbatim","Literal","Loop","Lt","Macro","Macro","Macro","MacroDelimiter","Match","Maybe","Member","Meta","Meta","MetaList","MetaNameValue","MethodCall","Mul","MulEq","NameValue","Named","Named","Named","Ne","Neg","NestedMeta","Never","None","None","None","None","Not","Or","Outer","Paren","Paren","Paren","Parenthesized","ParenthesizedGenericArguments","Path","Path","Path","PathArguments","PathSegment","PredicateEq","PredicateLifetime","PredicateType","Ptr","Public","QSelf","Range","Raw","Reference","Reference","Rem","RemEq","Repeat","Restricted","Result","Return","ReturnType","Shl","ShlEq","Shr","ShrEq","Slice","Str","StrStyle","Struct","Struct","Sub","SubEq","Token","Trait","TraitBound","TraitBoundModifier","TraitObject","Try","TryBlock","Tuple","Tuple","Turbofish","Type","Type","Type","Type","Type","Type","TypeArray","TypeBareFn","TypeGenerics","TypeGroup","TypeImplTrait","TypeInfer","TypeMacro","TypeNever","TypeParam","TypeParamBound","TypeParen","TypePath","TypePtr","TypeReference","TypeSlice","TypeTraitObject","TypeTuple","TypeVerbatim","U128","U16","U32","U64","U8","UnOp","Unary","Union","Unit","Unnamed","Unnamed","Unsafe","Usize","Variant","Verbatim","Verbatim","Verbatim","VisCrate","VisPublic","VisRestricted","Visibility","WhereClause","WherePredicate","While","Wild","Word","Yield","abi","and_token","apostrophe","args","args","arguments","as_token","as_token","as_turbofish","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","attrs","bang_token","bang_token","base","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounded_ty","bounds","bounds","bounds","bounds","bounds","bounds","bounds","brace_token","brace_token","braced","bracket_token","bracket_token","bracket_token","bracket_token","bracketed","buffer","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","colon2_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","colon_token","const_params","const_params_mut","const_token","const_token","crate_token","custom_keyword","custom_punctuation","data","default","default","default","default","default","delimiter","discriminant","dot_token","dyn_token","elem","elem","elem","elem","elem","elem","elems","enum_token","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq_token","eq_token","eq_token","eq_token","eq_token","expr","expr","expr","expr","ext","extern_token","fields","fields","fields","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_token","for_token","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","func","generics","group_token","gt_token","gt_token","gt_token","gt_token","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","ident","impl_token","in_token","index","index","inputs","inputs","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","is_empty","is_ident","iter","iter_mut","leading_colon","left","len","lhs_ty","lifetime","lifetime","lifetime","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes","lifetimes_mut","lit","lit","lt_token","lt_token","lt_token","lt_token","mac","make_where_clause","member","modifier","mutability","mutability","name","name","name","named","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","nested","new","new","new","new","new","new","new","new","new","new","op","op","output","output","params","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","paren_token","parenthesized","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse2","parse_any","parse_inner","parse_macro_input","parse_meta","parse_mod_style","parse_named","parse_outer","parse_quote","parse_str","parse_unnamed","parse_with","partial_cmp","partial_cmp","path","path","path","path","path","path","position","pound_token","predicates","pub_token","pub_token","punctuated","qself","qself","rhs_ty","right","segments","semi_token","semi_token","set_span","set_span","set_span","set_span","set_span","set_span","set_span","set_span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spanned","split_for_impl","star_token","struct_token","style","suffix","suffix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","token","token","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tts","tts","tts","tts","ty","ty","ty","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_params","type_params_mut","underscore_token","union_token","unnamed","unraw","unsafety","value","value","value","value","value","value","value","variadic","variants","vis","vis","visit","where_clause","where_token","without_plus","without_plus","without_plusursor","TokenBuffer","begin","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","empty","eof","eq","from","from","group","ident","into","into","lifetime","literal","ne","new","new2","punct","span","to_owned","token_stream","token_tree","try_from","try_from","try_into","try_into","type_id","type_id","IdentExt","parse_any","peek_any","unraw","Error","Lookahead1","Output","Parse","ParseBuffer","ParseStream","Parser","Peek","Result","StepCursor","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","cursor","deref","description","drop","error","error","error","fmt","fmt","fmt","fmt","fork","from","from","from","from","from","into","into","into","into","is_empty","lookahead1","new","new_spanned","parse","parse","parse","parse2","parse_str","parse_terminated","peek","peek","peek2","peek3","span","step","to_compile_error","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","End","IntoIter","IntoPairs","Iter","IterMut","Pair","Pairs","PairsMut","Punctuated","Punctuated","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","empty_or_trailing","eq","extend","extend","first","fmt","from","from","from","from","from","from","from","from","from_iter","from_iter","hash","index","index_mut","insert","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_pairs","into_tuple","into_value","is_empty","iter","iter_mut","last","last_mut","len","len","len","len","len","len","len","ne","new","new","next","next","next","next","next","next","pairs","pairs_mut","parse_separated_nonempty","parse_separated_nonempty_with","parse_terminated","parse_terminated_with","pop","punct","push","push_punct","push_value","span","span","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","trailing_punct","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value_mut","0","0","1","Spanned","span","Abstract","Add","AddEq","And","AndAnd","AndEq","As","Async","At","Auto","Bang","Become","Box","Brace","Bracket","Break","Caret","CaretEq","Colon","Colon2","Comma","Const","Continue","Crate","Default","Div","DivEq","Do","Dollar","Dot","Dot2","Dot3","DotDotEq","Dyn","Else","Enum","Eq","EqEq","Existential","Extern","FatArrow","Final","Fn","For","Ge","Group","Gt","If","Impl","In","LArrow","Le","Let","Loop","Lt","Macro","Match","Mod","Move","MulEq","Mut","Ne","Or","OrEq","OrOr","Override","Paren","Pound","Priv","Pub","Question","RArrow","Ref","Rem","RemEq","Return","SelfType","SelfValue","Semi","Shl","ShlEq","Shr","ShrEq","Star","Static","Struct","Sub","SubEq","Super","Tilde","Token","Trait","Try","Type","Typeof","Underscore","Union","Unsafe","Unsized","Use","Virtual","Where","While","Yield","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","parse","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","span","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","spans","surround","surround","surround","surround","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Visit","visit_abi","visit_abi","visit_abi","visit_angle_bracketed_generic_arguments","visit_angle_bracketed_generic_arguments","visit_angle_bracketed_generic_arguments","visit_attr_style","visit_attr_style","visit_attr_style","visit_attribute","visit_attribute","visit_attribute","visit_bare_fn_arg","visit_bare_fn_arg","visit_bare_fn_arg","visit_bare_fn_arg_name","visit_bare_fn_arg_name","visit_bare_fn_arg_name","visit_bin_op","visit_bin_op","visit_bin_op","visit_binding","visit_binding","visit_binding","visit_bound_lifetimes","visit_bound_lifetimes","visit_bound_lifetimes","visit_const_param","visit_const_param","visit_const_param","visit_constraint","visit_constraint","visit_constraint","visit_data","visit_data","visit_data","visit_data_enum","visit_data_enum","visit_data_enum","visit_data_struct","visit_data_struct","visit_data_struct","visit_data_union","visit_data_union","visit_data_union","visit_derive_input","visit_derive_input","visit_derive_input","visit_expr","visit_expr","visit_expr","visit_expr_binary","visit_expr_binary","visit_expr_binary","visit_expr_call","visit_expr_call","visit_expr_call","visit_expr_cast","visit_expr_cast","visit_expr_cast","visit_expr_field","visit_expr_field","visit_expr_field","visit_expr_index","visit_expr_index","visit_expr_index","visit_expr_lit","visit_expr_lit","visit_expr_lit","visit_expr_paren","visit_expr_paren","visit_expr_paren","visit_expr_path","visit_expr_path","visit_expr_path","visit_expr_unary","visit_expr_unary","visit_expr_unary","visit_expr_verbatim","visit_expr_verbatim","visit_expr_verbatim","visit_field","visit_field","visit_field","visit_fields","visit_fields","visit_fields","visit_fields_named","visit_fields_named","visit_fields_named","visit_fields_unnamed","visit_fields_unnamed","visit_fields_unnamed","visit_generic_argument","visit_generic_argument","visit_generic_argument","visit_generic_param","visit_generic_param","visit_generic_param","visit_generics","visit_generics","visit_generics","visit_ident","visit_ident","visit_ident","visit_index","visit_index","visit_index","visit_lifetime","visit_lifetime","visit_lifetime","visit_lifetime_def","visit_lifetime_def","visit_lifetime_def","visit_lit","visit_lit","visit_lit","visit_lit_bool","visit_lit_bool","visit_lit_bool","visit_lit_byte","visit_lit_byte","visit_lit_byte","visit_lit_byte_str","visit_lit_byte_str","visit_lit_byte_str","visit_lit_char","visit_lit_char","visit_lit_char","visit_lit_float","visit_lit_float","visit_lit_float","visit_lit_int","visit_lit_int","visit_lit_int","visit_lit_str","visit_lit_str","visit_lit_str","visit_lit_verbatim","visit_lit_verbatim","visit_lit_verbatim","visit_macro","visit_macro","visit_macro","visit_macro_delimiter","visit_macro_delimiter","visit_macro_delimiter","visit_member","visit_member","visit_member","visit_meta","visit_meta","visit_meta","visit_meta_list","visit_meta_list","visit_meta_list","visit_meta_name_value","visit_meta_name_value","visit_meta_name_value","visit_nested_meta","visit_nested_meta","visit_nested_meta","visit_parenthesized_generic_arguments","visit_parenthesized_generic_arguments","visit_parenthesized_generic_arguments","visit_path","visit_path","visit_path","visit_path_arguments","visit_path_arguments","visit_path_arguments","visit_path_segment","visit_path_segment","visit_path_segment","visit_predicate_eq","visit_predicate_eq","visit_predicate_eq","visit_predicate_lifetime","visit_predicate_lifetime","visit_predicate_lifetime","visit_predicate_type","visit_predicate_type","visit_predicate_type","visit_qself","visit_qself","visit_qself","visit_return_type","visit_return_type","visit_return_type","visit_span","visit_span","visit_span","visit_trait_bound","visit_trait_bound","visit_trait_bound","visit_trait_bound_modifier","visit_trait_bound_modifier","visit_trait_bound_modifier","visit_type","visit_type","visit_type","visit_type_array","visit_type_array","visit_type_array","visit_type_bare_fn","visit_type_bare_fn","visit_type_bare_fn","visit_type_group","visit_type_group","visit_type_group","visit_type_impl_trait","visit_type_impl_trait","visit_type_impl_trait","visit_type_infer","visit_type_infer","visit_type_infer","visit_type_macro","visit_type_macro","visit_type_macro","visit_type_never","visit_type_never","visit_type_never","visit_type_param","visit_type_param","visit_type_param","visit_type_param_bound","visit_type_param_bound","visit_type_param_bound","visit_type_paren","visit_type_paren","visit_type_paren","visit_type_path","visit_type_path","visit_type_path","visit_type_ptr","visit_type_ptr","visit_type_ptr","visit_type_reference","visit_type_reference","visit_type_reference","visit_type_slice","visit_type_slice","visit_type_slice","visit_type_trait_object","visit_type_trait_object","visit_type_trait_object","visit_type_tuple","visit_type_tuple","visit_type_tuple","visit_type_verbatim","visit_type_verbatim","visit_type_verbatim","visit_un_op","visit_un_op","visit_un_op","visit_variant","visit_variant","visit_variant","visit_vis_crate","visit_vis_crate","visit_vis_crate","visit_vis_public","visit_vis_public","visit_vis_public","visit_vis_restricted","visit_vis_restricted","visit_vis_restricted","visit_visibility","visit_visibility","visit_visibility","visit_where_clause","visit_where_clause","visit_where_clause","visit_where_predicate","visit_where_predicate","visit_where_predicate"],"q":["synsyn::AttrStyle","syn::BareFnArgName","","syn::BinOp","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::Data","","","syn::Expr","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::Fields","","syn::GenericArgument","","","","","syn::GenericParam","","","syn::Lit","","","","","","","","syn::MacroDelimiter","","","syn::Member","","syn::Meta","","","syn::NestedMeta","","syn::PathArguments","","syn::ReturnType","","syn::StrStyle","syn::TraitBoundModifier","syn::Type","","","","","","","","","","","","","","","syn::TypeParamBound","","syn::UnOp","","","syn::Visibility","","","syn::WherePredicate","","","syn::buffer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::ext","","","","syn::parse","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::punctuated","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::punctuated::Pair","","","syn::spanned","","syn::token","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","syn::visitd":["The binary interface of a function: <code>extern &quot;C&quot;</code>.","The <code>+</code> operator (addition)","The <code>+=</code> operator","The <code>&amp;&amp;</code> operator (logical and)","The <code>&lt;&#39;a, T&gt;</code> in <code>std::slice::iter&lt;&#39;a, T&gt;</code>.","Angle bracketed arguments of a path segment: the <code>&lt;K, V&gt;</code> in …","A slice literal expression: <code>[a, b, c, d]</code>.","A fixed size array type: <code>[T; n]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","Distinguishes between attributes that decorate an item and …","An attribute like <code>#[repr(transparent)]</code>.","Conventional argument type associated with an invocation …","A bare function type: <code>fn(usize) -&gt; bool</code>.","An argument in a function type: the <code>usize</code> in …","Name of an argument in a function type: the <code>n</code> in …","A binary operator: <code>+</code>, <code>+=</code>, <code>&amp;</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A binding (equality constraint) on an associated type: …","A binding (equality constraint) on an associated type: the …","The <code>&amp;</code> operator (bitwise and)","The <code>&amp;=</code> operator","The <code>|</code> operator (bitwise or)","The <code>|=</code> operator","The <code>^</code> operator (bitwise xor)","The <code>^=</code> operator","A blocked scope: <code>{ ... }</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A set of bound lifetimes: <code>for&lt;&#39;a, &#39;b, &#39;c&gt;</code>.","A box expression: <code>box f</code>.","","","A <code>break</code>, with an optional label to break and an optional …","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A character literal: <code>&#39;a&#39;</code>.","A closure expression: <code>|a, b| a + b</code>.","A const generic parameter: <code>const LENGTH: usize</code>.","A const expression. Must be inside of a block.","A const generic parameter: <code>const LENGTH: usize</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","An associated type bound: <code>Iterator&lt;Item: Display&gt;</code>.","A <code>continue</code>, with an optional label.","An ordinary string like <code>&quot;data&quot;</code>.","A crate-level visibility: <code>crate</code>.","The storage of a struct, enum or union data structure.","An enum input to a <code>proc_macro_derive</code> macro.","A struct input to a <code>proc_macro_derive</code> macro.","A tagged union input to a <code>proc_macro_derive</code> macro.","Return type is not specified.","The <code>*</code> operator for dereferencing","Data structure sent to a <code>proc_macro_derive</code> macro.","The <code>/</code> operator (division)","The <code>/=</code> operator","An enum input to a <code>proc_macro_derive</code> macro.","An equality predicate in a <code>where</code> clause (unsupported).","The <code>==</code> operator (equality)","Error returned when a Syn parser cannot parse the input …","A Rust expression.","A slice literal expression: <code>[a, b, c, d]</code>.","An assignment expression: <code>a = compute()</code>.","A compound assignment expression: <code>counter += 1</code>.","An async block: <code>async { ... }</code>.","A binary operation: <code>a + b</code>, <code>a * b</code>.","A blocked scope: <code>{ ... }</code>.","A box expression: <code>box f</code>.","A <code>break</code>, with an optional label to break and an optional …","A function call expression: <code>invoke(a, b)</code>.","A cast expression: <code>foo as f64</code>.","A closure expression: <code>|a, b| a + b</code>.","A <code>continue</code>, with an optional label.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","A for loop: <code>for pat in expr { ... }</code>.","An expression contained within invisible delimiters.","An <code>if</code> expression with an optional <code>else</code> block: …","A placement expression: <code>place &lt;- value</code>.","A square bracketed indexing expression: <code>vector[2]</code>.","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","Conditionless loop: <code>loop { ... }</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","A parenthesized expression: <code>(a + b)</code>.","A path like <code>std::mem::replace</code> possibly containing generic …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","An array literal constructed from one repeated element: …","A <code>return</code>, with an optional value to be returned.","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A type ascription expression: <code>foo: f64</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","An unsafe block: <code>unsafe { ... }</code>.","Tokens in expression position not interpreted by Syn.","A while loop: <code>while expr { ... }</code>.","A yield expression: <code>yield expr</code>.","","","A field of a struct or enum variant.","Access of a named struct field (<code>obj.k</code>) or unnamed tuple …","Data stored within an enum variant or struct.","Named fields of a struct or struct variant such as …","Unnamed fields of a tuple struct or tuple variant such as …","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","The suffix on a floating point literal if any, like the <code>f32</code>…","A for loop: <code>for pat in expr { ... }</code>.","The <code>&gt;=</code> operator (greater than or equal to)","An individual generic argument, like <code>&#39;a</code>, <code>T</code>, or <code>Item = T</code>.","A generic type parameter, lifetime, or const generic: …","Lifetimes and type parameters attached to a declaration of …","An expression contained within invisible delimiters.","A type contained within invisible delimiters.","The <code>&gt;</code> operator (greater than)","","","","","","A word of Rust code, which may be a keyword or legal …","An <code>if</code> expression with an optional <code>else</code> block: …","Returned by <code>Generics::split_for_impl</code>.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","A placement expression: <code>place &lt;- value</code>.","The index of an unnamed tuple struct field.","A square bracketed indexing expression: <code>vector[2]</code>.","Indication that a type should be inferred by the compiler: …","An inherited visibility, which usually means private.","","An integer literal: <code>1</code> or <code>1u16</code>.","The suffix on an integer literal if any, like the <code>u8</code> in …","","The <code>&lt;=</code> operator (less than or equal to)","A <code>let</code> guard: <code>let Some(x) = opt</code>.","A Rust lifetime: <code>&#39;a</code>.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A lifetime argument.","A lifetime definition: <code>&#39;a: &#39;b + &#39;c + &#39;d</code>.","A structured list within an attribute, like …","A Rust literal such as a string or integer or boolean.","A literal in place of an expression: <code>1</code>, <code>&quot;foo&quot;</code>.","A boolean literal: <code>true</code> or <code>false</code>.","A byte literal: <code>b&#39;f&#39;</code>.","A byte string literal: <code>b&quot;foo&quot;</code>.","A character literal: <code>&#39;a&#39;</code>.","A floating point literal: <code>1f64</code> or <code>1.0e10f64</code>.","An integer literal: <code>1</code> or <code>1u16</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","A raw token literal not interpreted by Syn, possibly …","A Rust literal, like the <code>&quot;new_name&quot;</code> in …","Conditionless loop: <code>loop { ... }</code>.","The <code>&lt;</code> operator (less than)","A macro invocation: <code>println!(&quot;{}&quot;, mac)</code>.","A macro invocation expression: <code>format!(&quot;{}&quot;, q)</code>.","A macro in the type position.","A grouping token that surrounds a macro body: <code>m!(...)</code> or …","A <code>match</code> expression: <code>match n { Some(n) =&gt; {}, None =&gt; {} }</code>.","","A struct or tuple struct field accessed in a struct …","Content of a compile-time structured attribute.","A structured meta item, like the <code>Copy</code> in <code>#[derive(Copy)]</code> …","A structured list within an attribute, like …","A name-value pair within an attribute, like …","A method call expression: <code>x.foo::&lt;T&gt;(a, b)</code>.","The <code>*</code> operator (multiplication)","The <code>*=</code> operator","A name-value pair within an attribute, like …","Named fields of a struct or struct variant such as …","A named field like <code>self.x</code>.","Argument given a name.","The <code>!=</code> operator (not equal to)","The <code>-</code> operator for negation","Element of a compile-time attribute list.","The never type: <code>!</code>.","","","","","The <code>!</code> operator for logical inversion","The <code>||</code> operator (logical or)","","A parenthesized expression: <code>(a + b)</code>.","","A parenthesized type equivalent to the inner type.","The <code>(A, B) -&gt; C</code> in <code>Fn(A, B) -&gt; C</code>.","Arguments of a function path segment: the <code>(A, B) -&gt; C</code> in …","A path at which a named item is exported: …","A path like <code>std::mem::replace</code> possibly containing generic …","A path like <code>std::slice::Iter</code>, optionally qualified with a …","Angle bracketed or parenthesized arguments of a path …","A segment of a path together with any path arguments on …","An equality predicate in a <code>where</code> clause (unsupported).","A lifetime predicate in a <code>where</code> clause: <code>&#39;a: &#39;b + &#39;c</code>.","A type predicate in a <code>where</code> clause: …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A public visibility level: <code>pub</code>.","The explicit Self type in a qualified path: the <code>T</code> in …","A range expression: <code>1..2</code>, <code>1..</code>, <code>..2</code>, <code>1..=2</code>, <code>..=2</code>.","A raw string like <code>r##&quot;data&quot;##</code>.","A referencing operation: <code>&amp;a</code> or <code>&amp;mut a</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","The <code>%</code> operator (modulus)","The <code>%=</code> operator","An array literal constructed from one repeated element: …","A visibility level restricted to some path: <code>pub(self)</code> or …","The result of a Syn parser.","A <code>return</code>, with an optional value to be returned.","Return type of a function signature.","The <code>&lt;&lt;</code> operator (shift left)","The <code>&lt;&lt;=</code> operator","The <code>&gt;&gt;</code> operator (shift right)","The <code>&gt;&gt;=</code> operator","A dynamically sized slice type: <code>[T]</code>.","A UTF-8 string literal: <code>&quot;foo&quot;</code>.","The style of a string literal, either plain quoted or a …","A struct literal expression: <code>Point { x: 1, y: 1 }</code>.","A struct input to a <code>proc_macro_derive</code> macro.","The <code>-</code> operator (subtraction)","The <code>-=</code> operator","A type-macro that expands to the name of the Rust type …","","A trait used as a bound on a type parameter.","A modifier on a trait bound, currently only used for the <code>?</code> …","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …","A try-expression: <code>expr?</code>.","A try block: <code>try { ... }</code>.","A tuple expression: <code>(a, b, c, d)</code>.","A tuple type: <code>(A, B, C, String)</code>.","Returned by <code>TypeGenerics::as_turbofish</code>.","The possible types that a Rust value could have.","A type ascription expression: <code>foo: f64</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A type predicate in a <code>where</code> clause: …","A particular type is returned.","A type argument.","A fixed size array type: <code>[T; n]</code>.","A bare function type: <code>fn(usize) -&gt; bool</code>.","Returned by <code>Generics::split_for_impl</code>.","A type contained within invisible delimiters.","An <code>impl Bound1 + Bound2 + Bound3</code> type where <code>Bound</code> is a …","Indication that a type should be inferred by the compiler: …","A macro in the type position.","The never type: <code>!</code>.","A generic type parameter: <code>T: Into&lt;String&gt;</code>.","A trait or lifetime used as a bound on a type parameter.","A parenthesized type equivalent to the inner type.","A path like <code>std::slice::Iter</code>, optionally qualified with a …","A raw pointer type: <code>*const T</code> or <code>*mut T</code>.","A reference type: <code>&amp;&#39;a T</code> or <code>&amp;&#39;a mut T</code>.","A dynamically sized slice type: <code>[T]</code>.","A trait object type <code>Bound1 + Bound2 + Bound3</code> where <code>Bound</code> …","A tuple type: <code>(A, B, C, String)</code>.","Tokens in type position not interpreted by Syn.","","","","","","A unary operator: <code>*</code>, <code>!</code>, <code>-</code>.","A unary operation: <code>!x</code>, <code>*x</code>.","A tagged union input to a <code>proc_macro_derive</code> macro.","Unit struct or unit variant such as <code>None</code>.","Unnamed fields of a tuple struct or tuple variant such as …","An unnamed field like <code>self.0</code>.","An unsafe block: <code>unsafe { ... }</code>.","","An enum variant.","Tokens in expression position not interpreted by Syn.","A raw token literal not interpreted by Syn, possibly …","Tokens in type position not interpreted by Syn.","A crate-level visibility: <code>crate</code>.","A public visibility level: <code>pub</code>.","A visibility level restricted to some path: <code>pub(self)</code> or …","The visibility level of an item: inherited or <code>pub</code> or …","A <code>where</code> clause in a definition: …","A single predicate in a <code>where</code> clause: <code>T: Deserialize&lt;&#39;de&gt;</code>.","A while loop: <code>while expr { ... }</code>.","Argument not given a name, matched with <code>_</code>.","","A yield expression: <code>yield expr</code>.","","","","","","","","","Turn a type’s generics like <code>&lt;X, Y&gt;</code> into a turbofish like …","Attributes tagged on the variant.","Attributes tagged on the field.","","","","","","","","","","","","","Attributes tagged on the whole struct or enumhe type being bounded","","","Trait and lifetime bounds (<code>Clone+Send+&#39;static</code>)","","","","","","","Parse a set of curly braces and expose their content to …","","","","","Parse a set of square brackets and expose their content to …","A stably addressed token buffer supporting efficient …eturns an Iterator&lt;Item = &amp;ConstParam&gt; over the constant …","Returns an Iterator&lt;Item = &amp;mut ConstParam&gt; over the …","","","","Define a type that supports parsing and printing a given …","Define a type that supports parsing and printing a …","Data within the struct or enum.","","","","","","","Explicit discriminant: <code>Variant = 1</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extension traits to provide parsing methods on foreign …","","Content stored in the variant.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Generics required to complete the definition.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Name of the variant.","Name of the field, if any.","","","","Name of the struct or enum.","","","","","","","","","<code>(A, B)</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Determines whether this is a path of length 1 equal to the …","Get an iterator over the borrowed <code>Field</code> items in this …","Get an iterator over the mutably borrowed <code>Field</code> items in …","","","","","","","","Returns an Iterator&lt;Item = &amp;LifetimeDef&gt; over the lifetime …","","The <code>for&lt;&#39;a&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","Any lifetimes from a <code>for</code> binding","","Returns an Iterator&lt;Item = &amp;mut LifetimeDef&gt; over the …","","","","","","","","Initializes an empty <code>where</code>-clause if there is not one …","","","","","Returns the identifier that begins this structured meta …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new <code>Ident</code> with the given <code>string</code> as well as the …","","Panics","Interpret a Syn literal from a proc-macro2 literal.","","","","","","","","","","<code>C</code>","","","","","","","","","","","","Parse a set of parentheses and expose their content to …","Parsing interface for parsing a token stream into a syntax …","Parse tokens of source code into the chosen syntax tree …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a syntax tree node from the content of this string …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parse a proc-macro2 token stream into the chosen syntax …","","Parses zero or more inner attributes from the stream.","Parse the input TokenStream of a macro, triggering a …","Parses the content of the attribute, consisting of the …","Parse a <code>Path</code> containing no path arguments on any of its …","Parses a named (braced struct) field.","Parses zero or more outer attributes from the stream.","Quasi-quotation macro that accepts input like the <code>quote!</code> …","Parse a string of Rust code into the chosen syntax tree …","Parses an unnamed (tuple struct) field.","Invoke parser on the content of this string literal.","","","","","","The <code>Foo&lt;&amp;&#39;a T&gt;</code> in <code>for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;</code>","","","","","","","","A punctuated sequence of syntax tree nodes separated by …","","","","","","","","Configures the span of this <code>Ident</code>, possibly changing its …","","","","","","","","Returns the span of this <code>Ident</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A trait that can provide the <code>Span</code> of the complete contents …","Split a type’s generics into the pieces required for impl…okens representing Rust punctuation, keywords, and …ype of the field.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns an Iterator&lt;Item = &amp;TypeParam&gt; over the type …","Returns an Iterator&lt;Item = &amp;mut TypeParam&gt; over the type …","","","","","","","","","","","","","","","Visibility of the field.","Visibility of the struct or enum.","Syntax tree traversal to walk a shared borrow of a syntax …","","","In some positions, types may not contain the <code>+</code> character, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A cheaply copyable cursor into a <code>TokenBuffer</code>.","A buffer that can be efficiently traversed multiple times, …","Creates a cursor referencing the first token in the buffer …","","","","","","","Creates a cursor referencing a static empty TokenStream.","Checks whether the cursor is currently pointing at the end …","","Returns the argument unchanged.","Returns the argument unchanged.","If the cursor is pointing at a <code>Group</code> with the given …","If the cursor is pointing at a <code>Ident</code>, returns it along …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If the cursor is pointing at a <code>Lifetime</code>, returns it along …","If the cursor is pointing at a <code>Literal</code>, return it along …","","Creates a <code>TokenBuffer</code> containing all the tokens from the …","Creates a <code>TokenBuffer</code> containing all the tokens from the …","If the cursor is pointing at an <code>Punct</code>, returns it along …","Returns the <code>Span</code> of the current token, or <code>Span::call_site()</code>…","","Copies all remaining tokens visible from this cursor into a","If the cursor is pointing at a <code>TokenTree</code>, returns it along …","","","","","","","Additional methods for <code>Ident</code> not provided by proc-macro2 …","Parses any identifier including keywords.","Peeks any identifier including keywords. Usage: …","Strips the raw marker <code>r#</code>, if any, from the beginning of an …","Error returned when a Syn parser cannot parse the input …","Support for checking the next token in a stream to decide …","","Parsing interface implemented by all types that can be …","Cursor position within a buffered token stream.","Input to a Syn parser function.","Parser that can parse Rust tokens into a particular syntax …","Types that can be parsed by looking at just one token.","The result of a Syn parser.","Cursor state associated with speculative parsing.","","","","","","","","","Calls the given parser function to parse a syntax tree …","","","","","Provides low-level access to the token representation …","","","","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","Triggers an error at the current position of the parse …","","","","","Forks a parse stream so that parsing tokens out of either …","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether there are tokens remaining in this stream.","Constructs a helper for peeking at the next token in this …","Usually the <code>ParseStream::error</code> method will be used …","Creates an error with the specified message spanning the …","","Parses a syntax tree node of type <code>T</code>, advancing the …","Parse tokens of source code into the chosen syntax tree …","Parse a proc-macro2 token stream into the chosen syntax …","Parse a string of Rust code into the chosen syntax tree …","Parses zero or more occurrences of <code>T</code> separated by …","Looks at the next token in the parse stream to determine …","Looks at the next token in the parse stream to determine …","Looks at the second-next token in the parse stream.","Looks at the third-next token in the parse stream.","The source location of the error.","Speculatively parses tokens from this parse stream, …","Render the error as an invocation of <code>compile_error!</code>.","","","","","","","","","","","","","","","","","","An iterator over owned values of type <code>T</code>.","An iterator over owned pairs of type <code>Pair&lt;T, P&gt;</code>.","An iterator over borrowed values of type <code>&amp;T</code>.","An iterator over mutably borrowed values of type <code>&amp;mut T</code>.","A single syntax tree node of type <code>T</code> followed by its …","An iterator over borrowed pairs of type <code>Pair&lt;&amp;T, &amp;P&gt;</code>.","An iterator over mutably borrowed pairs of type …","A punctuated sequence of syntax tree nodes of type <code>T</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns true if either this <code>Punctuated</code> is empty, or it has …","","","","Borrows the first punctuated pair in this sequence.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Inserts an element at position <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Returns an iterator over the contents of this sequence as …","Produces this punctuated pair as a tuple of syntax tree …","Extracts the syntax tree node from this punctuated pair, …","Determines whether this punctuated sequence is empty, …","Returns an iterator over borrowed syntax tree nodes of …","Returns an iterator over mutably borrowed syntax tree …","Borrows the last punctuated pair in this sequence.","Mutably borrows the last punctuated pair in this sequence.","","","","","Returns the number of syntax tree nodes in this punctuated …","","","","Creates an empty punctuated sequence.","Creates a punctuated pair out of a syntax tree node and an …","","","","","","","Returns an iterator over the contents of this sequence as …","Returns an iterator over the contents of this sequence as …","Parses one or more occurrences of <code>T</code> separated by …","Parses one or more occurrences of <code>T</code> using the given parse …","Parses zero or more occurrences of <code>T</code> separated by …","Parses zero or more occurrences of <code>T</code> using the given parse …","Removes the last punctuated pair from this sequence, or …","Borrows the punctuation from this punctuated pair, unless …","Appends a syntax tree node onto the end of this punctuated …","Appends a trailing punctuation onto the end of this …","Appends a syntax tree node onto the end of this punctuated …","","","","","","","","","","","Determines whether this punctuated sequence ends with a …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows the syntax tree node from this punctuated pair.","Mutably borrows the syntax tree node from this punctuated …","","","","A trait that can provide the <code>Span</code> of the complete contents …","Returns a <code>Span</code> covering the complete contents of this …","<code>abstract</code>","<code>+</code>","<code>+=</code>","<code>&amp;</code>","<code>&amp;&amp;</code>","<code>&amp;=</code>","<code>as</code>","<code>async</code>","<code>@</code>","<code>auto</code>","<code>!</code>","<code>become</code>","<code>box</code>","<code>{...}</code>","<code>[...]</code>","<code>break</code>","<code>^</code>","<code>^=</code>","<code>:</code>","<code>::</code>","<code>,</code>","<code>const</code>","<code>continue</code>","<code>crate</code>","<code>default</code>","<code>/</code>","<code>/=</code>","<code>do</code>","<code>$</code>","<code>.</code>","<code>..</code>","<code>...</code>","<code>..=</code>","<code>dyn</code>","<code>else</code>","<code>enum</code>","<code>=</code>","<code>==</code>","<code>existential</code>","<code>extern</code>","<code>=&gt;</code>","<code>final</code>","<code>fn</code>","<code>for</code>","<code>&gt;=</code>","None-delimited group","<code>&gt;</code>","<code>if</code>","<code>impl</code>","<code>in</code>","<code>&lt;-</code>","<code>&lt;=</code>","<code>let</code>","<code>loop</code>","<code>&lt;</code>","<code>macro</code>","<code>match</code>","<code>mod</code>","<code>move</code>","<code>*=</code>","<code>mut</code>","<code>!=</code>","<code>|</code>","<code>|=</code>","<code>||</code>","<code>override</code>","<code>(...)</code>","<code>#</code>","<code>priv</code>","<code>pub</code>","<code>?</code>","<code>-&gt;</code>","<code>ref</code>","<code>%</code>","<code>%=</code>","<code>return</code>","<code>Self</code>","<code>self</code>","<code>;</code>","<code>&lt;&lt;</code>","<code>&lt;&lt;=</code>","<code>&gt;&gt;</code>","<code>&gt;&gt;=</code>","<code>*</code>","<code>static</code>","<code>struct</code>","<code>-</code>","<code>-=</code>","<code>super</code>","<code>~</code>","Marker trait for types that represent single tokens.","<code>trait</code>","<code>try</code>","<code>type</code>","<code>typeof</code>","<code>_</code>","<code>union</code>","<code>unsafe</code>","<code>unsized</code>","<code>use</code>","<code>virtual</code>","<code>where</code>","<code>while</code>","<code>yield</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeyntax tree traversal to walk a shared borrow of a syntax …i":[0,1,1,1,2,0,3,4,3,3,3,0,0,0,4,0,0,0,3,0,5,1,1,1,1,1,1,3,6,0,3,7,7,3,6,6,3,3,6,3,8,5,0,0,5,3,9,10,0,0,0,0,11,12,0,1,1,13,14,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,0,3,0,0,0,6,0,3,1,0,0,0,3,4,1,16,16,16,16,16,0,3,0,4,3,0,3,4,10,17,6,0,16,1,3,0,8,18,14,5,0,19,0,3,0,0,0,0,0,0,0,0,20,3,1,0,3,4,0,3,21,0,0,20,0,0,3,1,1,19,22,23,24,1,12,0,4,21,16,15,2,12,1,17,3,7,4,2,0,0,3,4,0,0,0,0,0,4,10,0,3,9,3,4,1,1,3,10,0,3,0,1,1,1,1,4,6,0,3,13,1,1,0,18,0,0,4,3,3,3,4,0,0,3,8,14,11,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,0,3,13,22,22,23,3,16,0,3,6,4,0,0,0,0,0,0,3,24,19,3,25,26,27,28,29,30,31,32,33,34,35,28,36,37,38,31,39,40,41,42,43,44,45,46,47,48,39,49,50,17,19,51,52,20,34,22,53,54,35,10,55,56,57,3,58,59,60,28,61,62,36,37,38,31,63,64,65,66,67,68,69,70,71,72,73,74,39,40,75,41,76,77,78,79,80,81,82,42,83,84,85,86,87,88,23,89,90,8,43,44,45,91,33,92,93,18,94,21,95,14,96,97,98,27,6,99,100,101,102,103,104,105,106,9,16,15,47,7,46,13,107,108,109,1,12,4,110,111,112,26,25,48,113,114,115,116,117,118,119,120,121,122,123,24,11,124,30,2,5,29,125,126,127,32,49,50,17,19,51,52,20,34,22,53,54,35,10,55,56,57,3,58,59,60,28,61,62,36,37,38,31,63,64,65,66,67,68,69,70,71,72,73,74,39,40,75,41,76,77,78,79,80,81,82,42,83,84,85,86,87,88,23,89,90,8,43,44,45,91,33,92,93,18,94,21,95,14,96,97,98,27,6,99,100,101,102,103,104,105,106,9,16,15,47,7,46,13,107,108,109,1,12,4,110,111,112,26,25,48,113,114,115,116,117,118,119,120,121,122,123,24,11,124,30,2,5,29,125,126,127,32,96,43,44,96,97,115,116,126,53,108,0,50,40,110,111,0,0,49,50,17,19,51,52,20,34,22,53,54,35,10,55,56,57,3,58,59,60,28,61,62,36,37,38,31,63,64,65,66,67,68,69,70,71,72,73,74,39,40,75,41,76,77,78,79,80,81,82,42,83,84,85,86,87,88,23,89,90,8,43,44,45,91,33,92,93,18,94,21,95,14,96,97,98,27,6,99,100,101,102,103,104,105,106,9,16,15,47,7,46,13,107,108,109,1,12,4,110,111,112,26,25,48,113,114,115,116,117,118,119,120,121,122,123,24,11,124,30,2,5,29,125,126,127,32,49,50,17,19,51,52,20,34,22,53,54,35,10,55,56,57,3,58,59,60,28,61,62,36,37,38,31,63,64,65,66,67,68,69,70,71,72,73,74,39,40,75,41,76,77,78,79,80,81,82,42,83,84,85,86,87,88,23,89,90,8,43,44,45,91,33,92,93,18,94,21,95,14,96,97,98,27,6,99,100,101,102,103,104,105,106,9,16,15,47,7,46,13,107,108,109,1,12,4,110,111,112,26,25,48,113,114,115,116,117,118,119,120,121,122,123,24,11,124,30,2,5,29,125,126,127,32,49,27,29,35,43,44,45,96,97,126,90,90,45,112,56,0,0,46,90,93,2,43,45,47,34,39,115,110,111,112,26,117,118,113,108,49,49,50,17,19,51,52,20,34,22,53,54,35,10,55,56,57,3,58,59,60,28,61,62,36,37,38,31,63,64,65,66,67,68,69,70,71,72,73,74,39,40,75,41,76,77,78,79,80,81,82,42,83,84,85,86,87,88,23,89,90,8,43,44,45,91,33,92,93,18,94,21,95,14,96,97,98,27,6,99,100,101,102,103,104,105,106,9,16,15,47,7,46,13,107,108,109,1,12,4,110,111,112,26,25,48,113,114,115,116,117,118,119,120,121,122,123,24,11,124,30,2,5,29,125,126,127,32,52,43,45,98,125,37,31,40,42,0,122,34,107,109,49,49,50,17,19,51,52,20,34,22,53,54,35,10,55,56,57,3,58,59,60,28,61,62,36,37,38,31,63,64,65,66,67,68,69,70,71,72,73,74,39,40,75,41,76,77,78,79,80,81,82,42,83,84,85,86,87,88,23,89,90,8,43,44,45,91,33,92,93,18,94,21,95,14,96,97,98,27,27,6,99,100,101,102,103,104,105,106,9,16,15,47,7,46,13,107,108,109,1,12,4,110,111,112,26,25,48,113,114,115,116,117,118,119,120,121,122,123,24,11,124,30,2,5,29,125,126,127,32,25,93,49,49,49,49,49,49,49,50,17,19,19,19,19,51,52,20,20,20,34,22,22,22,53,54,35,10,10,10,10,55,56,57,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,58,59,60,28,61,62,36,37,38,31,63,64,65,66,67,68,69,70,71,72,73,74,39,40,75,41,76,77,78,79,80,81,82,42,83,84,85,86,87,88,23,89,89,90,8,8,8,8,43,43,44,45,91,33,92,93,18,18,18,94,21,95,14,14,14,14,96,97,98,27,6,6,6,6,6,6,6,6,6,99,100,101,102,103,104,105,106,9,16,15,47,7,46,13,13,13,13,107,108,109,1,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,110,111,112,26,25,48,113,114,115,116,117,118,119,120,121,122,123,24,11,124,124,30,30,2,5,29,125,126,127,32,28,46,118,90,93,29,32,49,50,17,19,51,52,20,34,22,53,54,35,10,55,56,57,3,58,59,60,28,61,62,36,37,38,31,63,64,65,66,67,68,69,70,71,72,73,74,39,40,75,41,76,77,78,79,80,81,82,42,83,84,85,86,87,88,23,89,90,8,43,44,45,91,33,92,93,18,94,21,95,14,96,97,98,27,6,99,100,101,102,103,104,105,106,9,16,15,47,7,46,13,107,108,109,1,12,4,110,111,112,26,25,48,113,114,115,116,117,118,119,120,121,122,123,24,11,124,30,2,5,29,125,126,127,32,51,52,34,35,43,45,27,46,30,125,126,116,57,40,89,25,127,49,50,17,19,51,52,20,34,22,53,54,35,10,55,56,57,3,58,59,60,28,61,62,36,37,38,31,63,64,65,66,67,68,69,70,71,72,73,74,39,40,75,41,76,77,78,79,80,81,82,42,83,84,85,86,87,88,23,89,90,8,43,44,45,91,33,92,93,18,94,21,95,14,96,97,98,27,6,99,100,101,102,103,104,105,106,9,16,15,47,7,46,13,107,108,109,1,12,4,110,111,112,26,25,48,113,114,115,116,117,118,119,120,121,122,123,24,11,124,30,2,5,29,125,126,127,32,22,22,2,124,22,22,124,36,111,98,44,97,26,90,93,94,96,25,90,52,38,90,93,29,32,120,90,39,94,112,26,19,122,123,53,17,19,51,52,20,34,22,53,54,35,10,55,56,57,3,58,59,60,28,61,62,36,37,38,31,63,64,65,66,67,68,69,70,71,72,73,74,39,40,75,41,76,77,78,79,80,81,82,42,83,84,85,86,87,23,90,8,43,44,45,91,33,92,93,18,94,21,95,14,96,97,98,6,9,7,46,13,107,108,109,1,12,4,110,111,112,26,25,48,113,114,115,116,117,118,119,120,122,123,24,11,124,30,2,5,29,125,126,127,32,51,49,44,27,6,99,100,101,102,103,104,36,37,25,127,90,51,54,57,28,42,94,25,113,117,127,0,0,0,49,19,51,52,20,34,53,54,10,3,38,41,23,89,90,8,43,44,45,93,18,94,21,95,14,27,6,99,99,100,101,102,103,104,105,47,46,1,12,4,110,111,112,26,25,48,113,114,115,115,116,117,118,119,120,122,123,24,11,11,124,30,5,29,125,127,0,49,50,0,50,124,35,50,0,0,35,99,49,27,50,57,41,94,47,114,32,50,95,55,57,0,41,114,98,36,124,107,111,49,99,100,101,102,103,104,106,49,49,50,19,51,52,20,34,22,53,54,35,10,55,56,57,3,28,36,37,38,31,39,40,41,42,88,23,89,90,8,43,44,45,91,33,92,93,18,94,21,95,14,96,97,98,27,6,99,99,100,100,101,101,102,102,103,103,104,104,105,106,106,47,46,1,12,4,110,111,112,26,25,48,113,114,115,116,117,118,119,120,121,122,123,24,11,124,30,2,5,29,125,126,127,89,105,0,90,112,107,50,103,104,49,50,17,19,51,52,20,34,22,53,54,35,10,55,56,57,3,58,59,60,28,61,62,36,37,38,31,63,64,65,66,67,68,69,70,71,72,73,74,39,40,75,41,76,77,78,79,80,81,82,42,83,84,85,86,87,88,23,89,90,8,43,44,45,91,33,92,93,18,94,21,95,14,96,97,98,27,6,99,100,101,102,103,104,105,106,9,16,15,47,7,46,13,107,108,109,1,12,4,110,111,112,26,25,48,113,114,115,116,117,118,119,120,121,122,123,24,11,124,30,2,5,29,125,126,127,32,49,27,49,50,19,51,52,20,34,22,53,54,35,10,55,56,57,3,28,36,37,38,31,39,40,41,42,88,23,89,90,8,43,44,45,91,33,92,93,18,94,21,95,14,96,97,98,27,6,99,100,101,102,103,104,105,106,47,46,1,12,4,110,111,112,26,25,48,113,114,115,116,117,118,119,120,121,122,123,24,11,124,30,2,5,29,125,126,127,0,106,49,50,17,19,51,52,20,34,22,53,54,35,10,55,56,57,3,58,59,60,28,61,62,36,37,38,31,63,64,65,66,67,68,69,70,71,72,73,74,39,40,75,41,76,77,78,79,80,81,82,42,83,84,85,86,87,88,23,89,90,8,43,44,45,91,33,92,93,18,94,21,95,14,96,97,98,27,6,99,100,101,102,103,104,105,106,9,16,15,47,7,46,13,107,108,109,1,12,4,110,111,112,26,25,48,113,114,115,116,117,118,119,120,121,122,123,24,11,124,30,2,5,29,125,126,127,32,49,50,17,19,51,52,20,34,22,53,54,35,10,55,56,57,3,58,59,60,28,61,62,36,37,38,31,63,64,65,66,67,68,69,70,71,72,73,74,39,40,75,41,76,77,78,79,80,81,82,42,83,84,85,86,87,88,23,89,90,8,43,44,45,91,33,92,93,18,94,21,95,14,96,97,98,27,6,99,100,101,102,103,104,105,106,9,16,15,47,7,46,13,107,108,109,1,12,4,110,111,112,26,25,48,113,114,115,116,117,118,119,120,121,122,123,24,11,124,30,2,5,29,125,126,127,32,50,88,47,121,35,31,45,123,125,32,49,50,17,19,51,52,20,34,22,53,54,35,10,55,56,57,3,58,59,60,28,61,62,36,37,38,31,63,64,65,66,67,68,69,70,71,72,73,74,39,40,75,41,76,77,78,79,80,81,82,42,83,84,85,86,87,88,23,89,90,8,43,44,45,91,33,92,93,18,94,21,95,14,96,97,98,27,6,99,100,101,102,103,104,105,106,9,16,15,47,7,46,13,107,108,109,1,12,4,110,111,112,26,25,48,113,114,115,116,117,118,119,120,121,122,123,24,11,124,30,2,5,29,125,126,127,32,90,90,119,109,54,49,25,99,100,101,102,103,104,105,25,108,35,46,0,90,95,4,115,11,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,0,0,261,261,262,261,262,262,262,262,262,262,261,262,262,262,261,262,262,262,262,261,261,262,262,262,262,262,261,262,261,262,261,262,0,263,263,263,0,0,264,0,0,0,0,0,0,0,265,266,267,268,265,266,267,268,266,267,268,267,268,266,268,267,266,265,266,268,266,266,267,267,266,265,266,267,267,268,265,266,267,268,266,266,267,267,269,266,264,264,264,266,265,266,266,266,267,266,267,267,268,266,267,265,266,267,268,265,266,267,268,265,266,267,268,270,0,0,0,0,0,0,0,0,270,271,272,273,274,275,276,277,270,271,272,273,274,275,276,277,270,271,273,275,276,277,270,271,273,275,276,277,270,275,275,275,275,275,275,275,271,272,273,274,275,276,277,270,275,275,275,275,275,275,271,272,273,274,275,276,277,270,271,272,273,274,275,275,275,276,277,275,270,270,275,275,275,275,275,271,272,273,274,275,276,277,275,275,270,271,272,273,274,276,277,275,275,275,275,275,275,275,270,275,275,275,275,270,271,273,275,276,277,270,275,270,275,271,272,273,274,275,276,277,270,271,272,273,274,275,276,277,270,271,272,273,274,275,276,277,270,270,270,278,279,278,0,280,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,281,334,336,339,340,341,343,345,346,348,349,353,356,358,361,364,365,368,371,376,377,379,281,334,336,339,340,341,343,345,346,348,349,353,356,358,361,364,365,368,371,376,377,379,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,380,381,382,383,281,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,0,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384,0,384,384],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["typegenerics",3]],["turbofish",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullnull,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["ident",3]],["ident",3]],[[["attribute",3]],["attribute",3]],[[["attrstyle",4]],["attrstyle",4]],[[["meta",4]],["meta",4]],[[["metalist",3]],["metalist",3]],[[["metanamevalue",3]],["metanamevalue",3]],[[["nestedmeta",4]],["nestedmeta",4]],[[["variant",3]],["variant",3]],[[["fields",4]],["fields",4]],[[["fieldsnamed",3]],["fieldsnamed",3]],[[["fieldsunnamed",3]],["fieldsunnamed",3]],[[["field",3]],["field",3]],[[["visibility",4]],["visibility",4]],[[["vispublic",3]],["vispublic",3]],[[["viscrate",3]],["viscrate",3]],[[["visrestricted",3]],["visrestricted",3]],[[["expr",4]],["expr",4]],[[["exprbox",3]],["exprbox",3]],[[["exprinplace",3]],["exprinplace",3]],[[["exprarray",3]],["exprarray",3]],[[["exprcall",3]],["exprcall",3]],[[["exprmethodcall",3]],["exprmethodcall",3]],[[["exprtuple",3]],["exprtuple",3]],[[["exprbinary",3]],["exprbinary",3]],[[["exprunary",3]],["exprunary",3]],[[["exprlit",3]],["exprlit",3]],[[["exprcast",3]],["exprcast",3]],[[["exprtype",3]],["exprtype",3]],[[["exprlet",3]],["exprlet",3]],[[["exprif",3]],["exprif",3]],[[["exprwhile",3]],["exprwhile",3]],[[["exprforloop",3]],["exprforloop",3]],[[["exprloop",3]],["exprloop",3]],[[["exprmatch",3]],["exprmatch",3]],[[["exprclosure",3]],["exprclosure",3]],[[["exprunsafe",3]],["exprunsafe",3]],[[["exprblock",3]],["exprblock",3]],[[["exprassign",3]],["exprassign",3]],[[["exprassignop",3]],["exprassignop",3]],[[["exprfield",3]],["exprfield",3]],[[["exprindex",3]],["exprindex",3]],[[["exprrange",3]],["exprrange",3]],[[["exprpath",3]],["exprpath",3]],[[["exprreference",3]],["exprreference",3]],[[["exprbreak",3]],["exprbreak",3]],[[["exprcontinue",3]],["exprcontinue",3]],[[["exprreturn",3]],["exprreturn",3]],[[["exprmacro",3]],["exprmacro",3]],[[["exprstruct",3]],["exprstruct",3]],[[["exprrepeat",3]],["exprrepeat",3]],[[["exprparen",3]],["exprparen",3]],[[["exprgroup",3]],["exprgroup",3]],[[["exprtry",3]],["exprtry",3]],[[["exprasync",3]],["exprasync",3]],[[["exprtryblock",3]],["exprtryblock",3]],[[["expryield",3]],["expryield",3]],[[["exprverbatim",3]],["exprverbatim",3]],[[["member",4]],["member",4]],[[["index",3]],["index",3]],[[["generics",3]],["generics",3]],[[["genericparam",4]],["genericparam",4]],[[["typeparam",3]],["typeparam",3]],[[["lifetimedef",3]],["lifetimedef",3]],[[["constparam",3]],["constparam",3]],[[["implgenerics",3]],["implgenerics",3]],[[["typegenerics",3]],["typegenerics",3]],[[["turbofish",3]],["turbofish",3]],[[["boundlifetimes",3]],["boundlifetimes",3]],[[["typeparambound",4]],["typeparambound",4]],[[["traitbound",3]],["traitbound",3]],[[["traitboundmodifier",4]],["traitboundmodifier",4]],[[["whereclause",3]],["whereclause",3]],[[["wherepredicate",4]],["wherepredicate",4]],[[["predicatetype",3]],["predicatetype",3]],[[["predicatelifetime",3]],["predicatelifetime",3]],[[["predicateeq",3]],["predicateeq",3]],[[["lifetime",3]],["lifetime",3]],[[["lit",4]],["lit",4]],[[["litstr",3]],["litstr",3]],[[["litbytestr",3]],["litbytestr",3]],[[["litbyte",3]],["litbyte",3]],[[["litchar",3]],["litchar",3]],[[["litint",3]],["litint",3]],[[["litfloat",3]],["litfloat",3]],[[["litbool",3]],["litbool",3]],[[["litverbatim",3]],["litverbatim",3]],[[["strstyle",4]],["strstyle",4]],[[["intsuffix",4]],["intsuffix",4]],[[["floatsuffix",4]],["floatsuffix",4]],[[["macro",3]],["macro",3]],[[["macrodelimiter",4]],["macrodelimiter",4]],[[["deriveinput",3]],["deriveinput",3]],[[["data",4]],["data",4]],[[["datastruct",3]],["datastruct",3]],[[["dataenum",3]],["dataenum",3]],[[["dataunion",3]],["dataunion",3]],[[["binop",4]],["binop",4]],[[["unop",4]],["unop",4]],[[["type",4]],["type",4]],[[["typeslice",3]],["typeslice",3]],[[["typearray",3]],["typearray",3]],[[["typeptr",3]],["typeptr",3]],[[["typereference",3]],["typereference",3]],[[["typebarefn",3]],["typebarefn",3]],[[["typenever",3]],["typenever",3]],[[["typetuple",3]],["typetuple",3]],[[["typepath",3]],["typepath",3]],[[["typetraitobject",3]],["typetraitobject",3]],[[["typeimpltrait",3]],["typeimpltrait",3]],[[["typeparen",3]],["typeparen",3]],[[["typegroup",3]],["typegroup",3]],[[["typeinfer",3]],["typeinfer",3]],[[["typemacro",3]],["typemacro",3]],[[["typeverbatim",3]],["typeverbatim",3]],[[["abi",3]],["abi",3]],[[["barefnarg",3]],["barefnarg",3]],[[["barefnargname",4]],["barefnargname",4]],[[["returntype",4]],["returntype",4]],[[["path",3]],["path",3]],[[["pathsegment",3]],["pathsegment",3]],[[["patharguments",4]],["patharguments",4]],[[["genericargument",4]],["genericargument",4]],[[["anglebracketedgenericarguments",3]],["anglebracketedgenericarguments",3]],[[["binding",3]],["binding",3]],[[["constraint",3]],["constraint",3]],[[["parenthesizedgenericarguments",3]],["parenthesizedgenericarguments",3]],[[["qself",3]],["qselfident",3],["ident",3]],["ordering",4]],[[["lifetime",3],["lifetime",3]],["ordering",4]],null,null,null,null,null,null,null,null,[[["generics",3]],["constparams",3]],[[["generics",3]],["constparamsmut",3]],null,null,null,null,null,null,[[],["generics",3]],[[],["boundlifetimes",3]],[[],["patharguments",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["ident",3],["ident",3]],["bool",0]],[[["ident",3],["",0]],["bool",0]],[[["attribute",3],["attribute",3]],["bool",0]],[[["attrstyle",4],["attrstyle",4]],["bool",0]],[[["meta",4],["meta",4]],["bool",0]],[[["metalist",3],["metalist",3]],["bool",0]],[[["metanamevalue",3],["metanamevalue",3]],["bool",0]],[[["nestedmeta",4],["nestedmeta",4]],["bool",0]],[[["variant",3],["variant",3]],["bool",0]],[[["fields",4],["fields",4]],["bool",0]],[[["fieldsnamed",3],["fieldsnamed",3]],["bool",0]],[[["fieldsunnamed",3],["fieldsunnamed",3]],["bool",0]],[[["field",3],["field",3]],["bool",0]],[[["visibility",4],["visibility",4]],["bool",0]],[[["vispublic",3],["vispublic",3]],["bool",0]],[[["viscrate",3],["viscrate",3]],["bool",0]],[[["visrestricted",3],["visrestricted",3]],["bool",0]],[[["expr",4],["expr",4]],["bool",0]],[[["exprbox",3],["exprbox",3]],["bool",0]],[[["exprinplace",3],["exprinplace",3]],["bool",0]],[[["exprarray",3],["exprarray",3]],["bool",0]],[[["exprcall",3],["exprcall",3]],["bool",0]],[[["exprmethodcall",3],["exprmethodcall",3]],["bool",0]],[[["exprtuple",3],["exprtuple",3]],["bool",0]],[[["exprbinary",3],["exprbinary",3]],["bool",0]],[[["exprunary",3],["exprunary",3]],["bool",0]],[[["exprlit",3],["exprlit",3]],["bool",0]],[[["exprcast",3],["exprcast",3]],["bool",0]],[[["exprtype",3],["exprtype",3]],["bool",0]],[[["exprlet",3],["exprlet",3]],["bool",0]],[[["exprif",3],["exprif",3]],["bool",0]],[[["exprwhile",3],["exprwhile",3]],["bool",0]],[[["exprforloop",3],["exprforloop",3]],["bool",0]],[[["exprloop",3],["exprloop",3]],["bool",0]],[[["exprmatch",3],["exprmatch",3]],["bool",0]],[[["exprclosure",3],["exprclosure",3]],["bool",0]],[[["exprunsafe",3],["exprunsafe",3]],["bool",0]],[[["exprblock",3],["exprblock",3]],["bool",0]],[[["exprassign",3],["exprassign",3]],["bool",0]],[[["exprassignop",3],["exprassignop",3]],["bool",0]],[[["exprfield",3],["exprfield",3]],["bool",0]],[[["exprindex",3],["exprindex",3]],["bool",0]],[[["exprrange",3],["exprrange",3]],["bool",0]],[[["exprpath",3],["exprpath",3]],["bool",0]],[[["exprreference",3],["exprreference",3]],["bool",0]],[[["exprbreak",3],["exprbreak",3]],["bool",0]],[[["exprcontinue",3],["exprcontinue",3]],["bool",0]],[[["exprreturn",3],["exprreturn",3]],["bool",0]],[[["exprmacro",3],["exprmacro",3]],["bool",0]],[[["exprstruct",3],["exprstruct",3]],["bool",0]],[[["exprrepeat",3],["exprrepeat",3]],["bool",0]],[[["exprparen",3],["exprparen",3]],["bool",0]],[[["exprgroup",3],["exprgroup",3]],["bool",0]],[[["exprtry",3],["exprtry",3]],["bool",0]],[[["exprasync",3],["exprasync",3]],["bool",0]],[[["exprtryblock",3],["exprtryblock",3]],["bool",0]],[[["expryield",3],["expryield",3]],["bool",0]],[[["exprverbatim",3],["exprverbatim",3]],["bool",0]],[[["member",4],["member",4]],["bool",0]],[[["index",3],["index",3]],["bool",0]],[[["generics",3],["generics",3]],["bool",0]],[[["genericparam",4],["genericparam",4]],["bool",0]],[[["typeparam",3],["typeparam",3]],["bool",0]],[[["lifetimedef",3],["lifetimedef",3]],["bool",0]],[[["constparam",3],["constparam",3]],["bool",0]],[[["implgenerics",3],["implgenerics",3]],["bool",0]],[[["typegenerics",3],["typegenerics",3]],["bool",0]],[[["turbofish",3],["turbofish",3]],["bool",0]],[[["boundlifetimes",3],["boundlifetimes",3]],["bool",0]],[[["typeparambound",4],["typeparambound",4]],["bool",0]],[[["traitbound",3],["traitbound",3]],["bool",0]],[[["traitboundmodifier",4],["traitboundmodifier",4]],["bool",0]],[[["whereclause",3],["whereclause",3]],["bool",0]],[[["wherepredicate",4],["wherepredicate",4]],["bool",0]],[[["predicatetype",3],["predicatetype",3]],["bool",0]],[[["predicatelifetime",3],["predicatelifetime",3]],["bool",0]],[[["predicateeq",3],["predicateeq",3]],["bool",0]],[[["lifetime",3],["lifetime",3]],["bool",0]],[[["lit",4],["lit",4]],["bool",0]],[[["litstr",3],["litstr",3]],["bool",0]],[[["litbytestr",3],["litbytestr",3]],["bool",0]],[[["litbyte",3],["litbyte",3]],["bool",0]],[[["litchar",3],["litchar",3]],["bool",0]],[[["litint",3],["litint",3]],["bool",0]],[[["litfloat",3],["litfloat",3]],["bool",0]],[[["litbool",3],["litbool",3]],["bool",0]],[[["litverbatim",3],["litverbatim",3]],["bool",0]],[[["strstyle",4],["strstyle",4]],["bool",0]],[[["intsuffix",4],["intsuffix",4]],["bool",0]],[[["floatsuffix",4],["floatsuffix",4]],["bool",0]],[[["macro",3],["macro",3]],["bool",0]],[[["macrodelimiter",4],["macrodelimiter",4]],["bool",0]],[[["deriveinput",3],["deriveinput",3]],["bool",0]],[[["data",4],["data",4]],["bool",0]],[[["datastruct",3],["datastruct",3]],["bool",0]],[[["dataenum",3],["dataenum",3]],["bool",0]],[[["dataunion",3],["dataunion",3]],["bool",0]],[[["binop",4],["binop",4]],["bool",0]],[[["unop",4],["unop",4]],["bool",0]],[[["type",4],["type",4]],["bool",0]],[[["typeslice",3],["typeslice",3]],["bool",0]],[[["typearray",3],["typearray",3]],["bool",0]],[[["typeptr",3],["typeptr",3]],["bool",0]],[[["typereference",3],["typereference",3]],["bool",0]],[[["typebarefn",3],["typebarefn",3]],["bool",0]],[[["typenever",3],["typenever",3]],["bool",0]],[[["typetuple",3],["typetuple",3]],["bool",0]],[[["typepath",3],["typepath",3]],["bool",0]],[[["typetraitobject",3],["typetraitobject",3]],["bool",0]],[[["typeimpltrait",3],["typeimpltrait",3]],["bool",0]],[[["typeparen",3],["typeparen",3]],["bool",0]],[[["typegroup",3],["typegroup",3]],["bool",0]],[[["typeinfer",3],["typeinfer",3]],["bool",0]],[[["typemacro",3],["typemacro",3]],["bool",0]],[[["typeverbatim",3],["typeverbatim",3]],["bool",0]],[[["abi",3],["abi",3]],["bool",0]],[[["barefnarg",3],["barefnarg",3]],["bool",0]],[[["barefnargname",4],["barefnargname",4]],["bool",0]],[[["returntype",4],["returntype",4]],["bool",0]],[[["path",3],["path",3]],["bool",0]],[[["pathsegment",3],["pathsegment",3]],["bool",0]],[[["patharguments",4],["patharguments",4]],["bool",0]],[[["genericargument",4],["genericargument",4]],["bool",0]],[[["anglebracketedgenericarguments",3],["anglebracketedgenericarguments",3]],["bool",0]],[[["binding",3],["binding",3]],["bool",0]],[[["constraint",3],["constraint",3]],["bool",0]],[[["parenthesizedgenericarguments",3],["parenthesizedgenericarguments",3]],["bool",0]],[[["qself",3],["qself",3]],["bool",0]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["ident",3],["formatter",3]],["result",4,[["error",3]]]],[[["ident",3],["formatter",3]],["result",4,[["error",3]]]],[[["attribute",3],["formatter",3]],["result",6]],[[["attrstyle",4],["formatter",3]],["result",6]],[[["meta",4],["formatter",3]],["result",6]],[[["metalist",3],["formatter",3]],["result",6]],[[["metanamevalue",3],["formatter",3]],["result",6]],[[["nestedmeta",4],["formatter",3]],["result",6]],[[["variant",3],["formatter",3]],["result",6]],[[["fields",4],["formatter",3]],["result",6]],[[["fieldsnamed",3],["formatter",3]],["result",6]],[[["fieldsunnamed",3],["formatter",3]],["result",6]],[[["field",3],["formatter",3]],["result",6]],[[["visibility",4],["formatter",3]],["result",6]],[[["vispublic",3],["formatter",3]],["result",6]],[[["viscrate",3],["formatter",3]],["result",6]],[[["visrestricted",3],["formatter",3]],["result",6]],[[["expr",4],["formatter",3]],["result",6]],[[["exprbox",3],["formatter",3]],["result",6]],[[["exprinplace",3],["formatter",3]],["result",6]],[[["exprarray",3],["formatter",3]],["result",6]],[[["exprcall",3],["formatter",3]],["result",6]],[[["exprmethodcall",3],["formatter",3]],["result",6]],[[["exprtuple",3],["formatter",3]],["result",6]],[[["exprbinary",3],["formatter",3]],["result",6]],[[["exprunary",3],["formatter",3]],["result",6]],[[["exprlit",3],["formatter",3]],["result",6]],[[["exprcast",3],["formatter",3]],["result",6]],[[["exprtype",3],["formatter",3]],["result",6]],[[["exprlet",3],["formatter",3]],["result",6]],[[["exprif",3],["formatter",3]],["result",6]],[[["exprwhile",3],["formatter",3]],["result",6]],[[["exprforloop",3],["formatter",3]],["result",6]],[[["exprloop",3],["formatter",3]],["result",6]],[[["exprmatch",3],["formatter",3]],["result",6]],[[["exprclosure",3],["formatter",3]],["result",6]],[[["exprunsafe",3],["formatter",3]],["result",6]],[[["exprblock",3],["formatter",3]],["result",6]],[[["exprassign",3],["formatter",3]],["result",6]],[[["exprassignop",3],["formatter",3]],["result",6]],[[["exprfield",3],["formatter",3]],["result",6]],[[["exprindex",3],["formatter",3]],["result",6]],[[["exprrange",3],["formatter",3]],["result",6]],[[["exprpath",3],["formatter",3]],["result",6]],[[["exprreference",3],["formatter",3]],["result",6]],[[["exprbreak",3],["formatter",3]],["result",6]],[[["exprcontinue",3],["formatter",3]],["result",6]],[[["exprreturn",3],["formatter",3]],["result",6]],[[["exprmacro",3],["formatter",3]],["result",6]],[[["exprstruct",3],["formatter",3]],["result",6]],[[["exprrepeat",3],["formatter",3]],["result",6]],[[["exprparen",3],["formatter",3]],["result",6]],[[["exprgroup",3],["formatter",3]],["result",6]],[[["exprtry",3],["formatter",3]],["result",6]],[[["exprasync",3],["formatter",3]],["result",6]],[[["exprtryblock",3],["formatter",3]],["result",6]],[[["expryield",3],["formatter",3]],["result",6]],[[["exprverbatim",3],["formatter",3]],["result",6]],[[["member",4],["formatter",3]],["result",6]],[[["index",3],["formatter",3]],["result",6]],[[["generics",3],["formatter",3]],["result",6]],[[["genericparam",4],["formatter",3]],["result",6]],[[["typeparam",3],["formatter",3]],["result",6]],[[["lifetimedef",3],["formatter",3]],["result",6]],[[["constparam",3],["formatter",3]],["result",6]],[[["implgenerics",3],["formatter",3]],["result",6]],[[["typegenerics",3],["formatter",3]],["result",6]],[[["turbofish",3],["formatter",3]],["result",6]],[[["boundlifetimes",3],["formatter",3]],["result",6]],[[["typeparambound",4],["formatter",3]],["result",6]],[[["traitbound",3],["formatter",3]],["result",6]],[[["traitboundmodifier",4],["formatter",3]],["result",6]],[[["whereclause",3],["formatter",3]],["result",6]],[[["wherepredicate",4],["formatter",3]],["result",6]],[[["predicatetype",3],["formatter",3]],["result",6]],[[["predicatelifetime",3],["formatter",3]],["result",6]],[[["predicateeq",3],["formatter",3]],["result",6]],[[["lifetime",3],["formatter",3]],["result",6]],[[["lifetime",3],["formatter",3]],["result",6]],[[["lit",4],["formatter",3]],["result",6]],[[["litstr",3],["formatter",3]],["result",6]],[[["litbytestr",3],["formatter",3]],["result",6]],[[["litbyte",3],["formatter",3]],["result",6]],[[["litchar",3],["formatter",3]],["result",6]],[[["litint",3],["formatter",3]],["result",6]],[[["litfloat",3],["formatter",3]],["result",6]],[[["litbool",3],["formatter",3]],["result",6]],[[["litverbatim",3],["formatter",3]],["result",6]],[[["strstyle",4],["formatter",3]],["result",6]],[[["intsuffix",4],["formatter",3]],["result",6]],[[["floatsuffix",4],["formatter",3]],["result",6]],[[["macro",3],["formatter",3]],["result",6]],[[["macrodelimiter",4],["formatter",3]],["result",6]],[[["deriveinput",3],["formatter",3]],["result",6]],[[["data",4],["formatter",3]],["result",6]],[[["datastruct",3],["formatter",3]],["result",6]],[[["dataenum",3],["formatter",3]],["result",6]],[[["dataunion",3],["formatter",3]],["result",6]],[[["binop",4],["formatter",3]],["result",6]],[[["unop",4],["formatter",3]],["result",6]],[[["type",4],["formatter",3]],["result",6]],[[["typeslice",3],["formatter",3]],["result",6]],[[["typearray",3],["formatter",3]],["result",6]],[[["typeptr",3],["formatter",3]],["result",6]],[[["typereference",3],["formatter",3]],["result",6]],[[["typebarefn",3],["formatter",3]],["result",6]],[[["typenever",3],["formatter",3]],["result",6]],[[["typetuple",3],["formatter",3]],["result",6]],[[["typepath",3],["formatter",3]],["result",6]],[[["typetraitobject",3],["formatter",3]],["result",6]],[[["typeimpltrait",3],["formatter",3]],["result",6]],[[["typeparen",3],["formatter",3]],["result",6]],[[["typegroup",3],["formatter",3]],["result",6]],[[["typeinfer",3],["formatter",3]],["result",6]],[[["typemacro",3],["formatter",3]],["result",6]],[[["typeverbatim",3],["formatter",3]],["result",6]],[[["abi",3],["formatter",3]],["result",6]],[[["barefnarg",3],["formatter",3]],["result",6]],[[["barefnargname",4],["formatter",3]],["result",6]],[[["returntype",4],["formatter",3]],["result",6]],[[["path",3],["formatter",3]],["result",6]],[[["pathsegment",3],["formatter",3]],["result",6]],[[["patharguments",4],["formatter",3]],["result",6]],[[["genericargument",4],["formatter",3]],["result",6]],[[["anglebracketedgenericarguments",3],["formatter",3]],["result",6]],[[["binding",3],["formatter",3]],["result",6]],[[["constraint",3],["formatter",3]],["result",6]],[[["parenthesizedgenericarguments",3],["formatter",3]],["result",6]],[[["qself",3],["formatter",3]],["result",6]],null,null,[[["underscore",3]],["ident",3]],[[["selftype",3]],["ident",3]],[[["super",3]],["ident",3]],[[]],[[["extern",3]],["ident",3]],[[["crate",3]],["ident",3]],[[["selfvalue",3]],["ident",3]],[[]],[[]],[[]],[[["metalist",3]],["meta",4]],[[["metanamevalue",3]],["meta",4]],[[["ident",3]],["meta",4]],[[]],[[]],[[["meta",4]],["nestedmeta",4]],[[]],[[["lit",4]],["nestedmeta",4]],[[]],[[]],[[["fieldsunnamed",3]],["fields",4]],[[["fieldsnamed",3]],["fields",4]],[[]],[[]],[[]],[[["viscrate",3]],["visibility",4]],[[["visrestricted",3]],["visibility",4]],[[]],[[["vispublic",3]],["visibility",4]],[[]],[[]],[[]],[[["exprmatch",3]],["expr",4]],[[["exprtype",3]],["expr",4]],[[["exprassign",3]],["expr",4]],[[["exprrepeat",3]],["expr",4]],[[]],[[["exprparen",3]],["expr",4]],[[["exprrange",3]],["expr",4]],[[["exprgroup",3]],["expr",4]],[[["exprarray",3]],["expr",4]],[[["exprcall",3]],["expr",4]],[[["exprtry",3]],["expr",4]],[[["exprasync",3]],["expr",4]],[[["exprfield",3]],["expr",4]],[[["exprmethodcall",3]],["expr",4]],[[["exprtuple",3]],["expr",4]],[[["exprtryblock",3]],["expr",4]],[[["exprblock",3]],["expr",4]],[[["exprmacro",3]],["expr",4]],[[["exprassignop",3]],["expr",4]],[[["exprindex",3]],["expr",4]],[[["expryield",3]],["expr",4]],[[["exprbinary",3]],["expr",4]],[[["exprpath",3]],["expr",4]],[[["exprunary",3]],["expr",4]],[[["exprbox",3]],["expr",4]],[[["exprreturn",3]],["expr",4]],[[["exprlit",3]],["expr",4]],[[["exprverbatim",3]],["expr",4]],[[["exprcast",3]],["expr",4]],[[["exprinplace",3]],["expr",4]],[[["exprlet",3]],["expr",4]],[[["exprstruct",3]],["expr",4]],[[["exprreference",3]],["expr",4]],[[["exprif",3]],["expr",4]],[[["exprwhile",3]],["expr",4]],[[["exprcontinue",3]],["expr",4]],[[["exprforloop",3]],["expr",4]],[[["exprunsafe",3]],["expr",4]],[[["exprclosure",3]],["expr",4]],[[["exprloop",3]],["expr",4]],[[["exprbreak",3]],["expr",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",0]],["index",3]],[[]],[[]],[[["constparam",3]],["genericparam",4]],[[]],[[["lifetimedef",3]],["genericparam",4]],[[["typeparam",3]],["genericparam",4]],[[["ident",3]],["typeparam",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["traitbound",3]],["typeparambound",4]],[[["lifetime",3]],["typeparambound",4]],[[]],[[]],[[]],[[]],[[["predicatetype",3]],["wherepredicate",4]],[[]],[[["predicatelifetime",3]],["wherepredicate",4]],[[["predicateeq",3]],["wherepredicate",4]],[[]],[[]],[[]],[[]],[[["litint",3]],["lit",4]],[[["litbyte",3]],["lit",4]],[[["litstr",3]],["lit",4]],[[["litverbatim",3]],["lit",4]],[[["litbool",3]],["lit",4]],[[["litfloat",3]],["lit",4]],[[]],[[["litchar",3]],["lit",4]],[[["litbytestr",3]],["lit",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["dataunion",3]],["data",4]],[[["dataenum",3]],["data",4]],[[["datastruct",3]],["data",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["typetraitobject",3]],["type",4]],[[["typeverbatim",3]],["type",4]],[[["typemacro",3]],["type",4]],[[["typegroup",3]],["type",4]],[[["typeslice",3]],["type",4]],[[["typearray",3]],["type",4]],[[["typenever",3]],["type",4]],[[["typeinfer",3]],["type",4]],[[]],[[["typeptr",3]],["type",4]],[[["typepath",3]],["type",4]],[[["typebarefn",3]],["type",4]],[[["typereference",3]],["type",4]],[[["typeimpltrait",3]],["type",4]],[[["typeparen",3]],["type",4]],[[["typetuple",3]],["type",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["path",3]],[[]],[[],["pathsegment",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,[[["ident",3],["",0]]],[[["attribute",3],["",0]]],[[["attrstyle",4],["",0]]],[[["meta",4],["",0]]],[[["metalist",3],["",0]]],[[["metanamevalue",3],["",0]]],[[["nestedmeta",4],["",0]]],[[["variant",3],["",0]]],[[["fields",4],["",0]]],[[["fieldsnamed",3],["",0]]],[[["fieldsunnamed",3],["",0]]],[[["field",3],["",0]]],[[["visibility",4],["",0]]],[[["vispublic",3],["",0]]],[[["viscrate",3],["",0]]],[[["visrestricted",3],["",0]]],[[["expr",4],["",0]]],[[["exprbox",3],["",0]]],[[["exprinplace",3],["",0]]],[[["exprarray",3],["",0]]],[[["exprcall",3],["",0]]],[[["exprmethodcall",3],["",0]]],[[["exprtuple",3],["",0]]],[[["exprbinary",3],["",0]]],[[["exprunary",3],["",0]]],[[["exprlit",3],["",0]]],[[["exprcast",3],["",0]]],[[["exprtype",3],["",0]]],[[["exprlet",3],["",0]]],[[["exprif",3],["",0]]],[[["exprwhile",3],["",0]]],[[["exprforloop",3],["",0]]],[[["exprloop",3],["",0]]],[[["exprmatch",3],["",0]]],[[["exprclosure",3],["",0]]],[[["exprunsafe",3],["",0]]],[[["exprblock",3],["",0]]],[[["exprassign",3],["",0]]],[[["exprassignop",3],["",0]]],[[["exprfield",3],["",0]]],[[["exprindex",3],["",0]]],[[["exprrange",3],["",0]]],[[["exprpath",3],["",0]]],[[["exprreference",3],["",0]]],[[["exprbreak",3],["",0]]],[[["exprcontinue",3],["",0]]],[[["exprreturn",3],["",0]]],[[["exprmacro",3],["",0]]],[[["exprstruct",3],["",0]]],[[["exprrepeat",3],["",0]]],[[["exprparen",3],["",0]]],[[["exprgroup",3],["",0]]],[[["exprtry",3],["",0]]],[[["exprasync",3],["",0]]],[[["exprtryblock",3],["",0]]],[[["expryield",3],["",0]]],[[["exprverbatim",3],["",0]]],[[["member",4],["",0]]],[[["index",3],["",0]]],[[["generics",3],["",0]]],[[["genericparam",4],["",0]]],[[["typeparam",3],["",0]]],[[["lifetimedef",3],["",0]]],[[["constparam",3],["",0]]],[[["implgenerics",3],["",0]]],[[["typegenerics",3],["",0]]],[[["turbofish",3],["",0]]],[[["boundlifetimes",3],["",0]]],[[["typeparambound",4],["",0]]],[[["traitbound",3],["",0]]],[[["traitboundmodifier",4],["",0]]],[[["whereclause",3],["",0]]],[[["wherepredicate",4],["",0]]],[[["predicatetype",3],["",0]]],[[["predicatelifetime",3],["",0]]],[[["predicateeq",3],["",0]]],[[["lifetime",3],["",0]]],[[["lit",4],["",0]]],[[["litstr",3],["",0]]],[[["litbytestr",3],["",0]]],[[["litbyte",3],["",0]]],[[["litchar",3],["",0]]],[[["litint",3],["",0]]],[[["litfloat",3],["",0]]],[[["litbool",3],["",0]]],[[["litverbatim",3],["",0]]],[[["strstyle",4],["",0]]],[[["intsuffix",4],["",0]]],[[["floatsuffix",4],["",0]]],[[["macro",3],["",0]]],[[["macrodelimiter",4],["",0]]],[[["deriveinput",3],["",0]]],[[["data",4],["",0]]],[[["datastruct",3],["",0]]],[[["dataenum",3],["",0]]],[[["dataunion",3],["",0]]],[[["binop",4],["",0]]],[[["unop",4],["",0]]],[[["type",4],["",0]]],[[["typeslice",3],["",0]]],[[["typearray",3],["",0]]],[[["typeptr",3],["",0]]],[[["typereference",3],["",0]]],[[["typebarefn",3],["",0]]],[[["typenever",3],["",0]]],[[["typetuple",3],["",0]]],[[["typepath",3],["",0]]],[[["typetraitobject",3],["",0]]],[[["typeimpltrait",3],["",0]]],[[["typeparen",3],["",0]]],[[["typegroup",3],["",0]]],[[["typeinfer",3],["",0]]],[[["typemacro",3],["",0]]],[[["typeverbatim",3],["",0]]],[[["abi",3],["",0]]],[[["barefnarg",3],["",0]]],[[["barefnargname",4],["",0]]],[[["returntype",4],["",0]]],[[["path",3],["",0]]],[[["pathsegment",3],["",0]]],[[["patharguments",4],["",0]]],[[["genericargument",4],["",0]]],[[["anglebracketedgenericarguments",3],["",0]]],[[["binding",3],["",0]]],[[["constraint",3],["",0]]],[[["parenthesizedgenericarguments",3],["",0]]],[[["qself",3],["",0]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullfields",4]]],[[["fields",4]]],[[["patharguments",4]],["bool",0]],[[["path",3]],["bool",0]],[[["fields",4]],["iter",3,[["field",3]]]],[[["fields",4]],["itermut",3,[["field",3]]]],null,null,null,null,null,null,null,[[["generics",3]],["lifetimes",3]],null,null,null,null,[[["generics",3]],["lifetimesmut",3]],null,null,null,null,null,null,null,[[["generics",3]],["whereclause",3]],null,null,null,null,[[["meta",4]],["ident",3]],null,null,null,[[["attrstyle",4],["attrstyle",4]],["bool",0]],[[["meta",4],["meta",4]],["bool",0]],[[["metalist",3],["metalist",3]],["bool",0]],[[["metanamevalue",3],["metanamevalue",3]],["bool",0]],[[["nestedmeta",4],["nestedmeta",4]],["bool",0]],[[["variant",3],["variant",3]],["bool",0]],[[["fields",4],["fields",4]],["bool",0]],[[["fieldsnamed",3],["fieldsnamed",3]],["bool",0]],[[["fieldsunnamed",3],["fieldsunnamed",3]],["bool",0]],[[["field",3],["field",3]],["bool",0]],[[["visibility",4],["visibility",4]],["bool",0]],[[["vispublic",3],["vispublic",3]],["bool",0]],[[["viscrate",3],["viscrate",3]],["bool",0]],[[["visrestricted",3],["visrestricted",3]],["bool",0]],[[["expr",4],["expr",4]],["bool",0]],[[["exprbox",3],["exprbox",3]],["bool",0]],[[["exprinplace",3],["exprinplace",3]],["bool",0]],[[["exprarray",3],["exprarray",3]],["bool",0]],[[["exprcall",3],["exprcall",3]],["bool",0]],[[["exprmethodcall",3],["exprmethodcall",3]],["bool",0]],[[["exprtuple",3],["exprtuple",3]],["bool",0]],[[["exprbinary",3],["exprbinary",3]],["bool",0]],[[["exprunary",3],["exprunary",3]],["bool",0]],[[["exprlit",3],["exprlit",3]],["bool",0]],[[["exprcast",3],["exprcast",3]],["bool",0]],[[["exprtype",3],["exprtype",3]],["bool",0]],[[["exprlet",3],["exprlet",3]],["bool",0]],[[["exprif",3],["exprif",3]],["bool",0]],[[["exprwhile",3],["exprwhile",3]],["bool",0]],[[["exprforloop",3],["exprforloop",3]],["bool",0]],[[["exprloop",3],["exprloop",3]],["bool",0]],[[["exprmatch",3],["exprmatch",3]],["bool",0]],[[["exprclosure",3],["exprclosure",3]],["bool",0]],[[["exprunsafe",3],["exprunsafe",3]],["bool",0]],[[["exprblock",3],["exprblock",3]],["bool",0]],[[["exprassign",3],["exprassign",3]],["bool",0]],[[["exprassignop",3],["exprassignop",3]],["bool",0]],[[["exprfield",3],["exprfield",3]],["bool",0]],[[["exprindex",3],["exprindex",3]],["bool",0]],[[["exprrange",3],["exprrange",3]],["bool",0]],[[["exprpath",3],["exprpath",3]],["bool",0]],[[["exprreference",3],["exprreference",3]],["bool",0]],[[["exprbreak",3],["exprbreak",3]],["bool",0]],[[["exprcontinue",3],["exprcontinue",3]],["bool",0]],[[["exprreturn",3],["exprreturn",3]],["bool",0]],[[["exprmacro",3],["exprmacro",3]],["bool",0]],[[["exprstruct",3],["exprstruct",3]],["bool",0]],[[["exprrepeat",3],["exprrepeat",3]],["bool",0]],[[["exprparen",3],["exprparen",3]],["bool",0]],[[["exprgroup",3],["exprgroup",3]],["bool",0]],[[["exprtry",3],["exprtry",3]],["bool",0]],[[["exprasync",3],["exprasync",3]],["bool",0]],[[["exprtryblock",3],["exprtryblock",3]],["bool",0]],[[["expryield",3],["expryield",3]],["bool",0]],[[["member",4],["member",4]],["bool",0]],[[["generics",3],["generics",3]],["bool",0]],[[["genericparam",4],["genericparam",4]],["bool",0]],[[["typeparam",3],["typeparam",3]],["bool",0]],[[["lifetimedef",3],["lifetimedef",3]],["bool",0]],[[["constparam",3],["constparam",3]],["bool",0]],[[["implgenerics",3],["implgenerics",3]],["bool",0]],[[["typegenerics",3],["typegenerics",3]],["bool",0]],[[["turbofish",3],["turbofish",3]],["bool",0]],[[["boundlifetimes",3],["boundlifetimes",3]],["bool",0]],[[["typeparambound",4],["typeparambound",4]],["bool",0]],[[["traitbound",3],["traitbound",3]],["bool",0]],[[["traitboundmodifier",4],["traitboundmodifier",4]],["bool",0]],[[["whereclause",3],["whereclause",3]],["bool",0]],[[["wherepredicate",4],["wherepredicate",4]],["bool",0]],[[["predicatetype",3],["predicatetype",3]],["bool",0]],[[["predicatelifetime",3],["predicatelifetime",3]],["bool",0]],[[["predicateeq",3],["predicateeq",3]],["bool",0]],[[["lit",4],["lit",4]],["bool",0]],[[["strstyle",4],["strstyle",4]],["bool",0]],[[["macrodelimiter",4],["macrodelimiter",4]],["bool",0]],[[["deriveinput",3],["deriveinput",3]],["bool",0]],[[["data",4],["data",4]],["bool",0]],[[["datastruct",3],["datastruct",3]],["bool",0]],[[["dataenum",3],["dataenum",3]],["bool",0]],[[["dataunion",3],["dataunion",3]],["bool",0]],[[["binop",4],["binop",4]],["bool",0]],[[["unop",4],["unop",4]],["bool",0]],[[["type",4],["type",4]],["bool",0]],[[["typeslice",3],["typeslice",3]],["bool",0]],[[["typearray",3],["typearray",3]],["bool",0]],[[["typeptr",3],["typeptr",3]],["bool",0]],[[["typereference",3],["typereference",3]],["bool",0]],[[["typebarefn",3],["typebarefn",3]],["bool",0]],[[["typenever",3],["typenever",3]],["bool",0]],[[["typetuple",3],["typetuple",3]],["bool",0]],[[["typepath",3],["typepath",3]],["bool",0]],[[["typetraitobject",3],["typetraitobject",3]],["bool",0]],[[["typeimpltrait",3],["typeimpltrait",3]],["bool",0]],[[["typeparen",3],["typeparen",3]],["bool",0]],[[["typegroup",3],["typegroup",3]],["bool",0]],[[["typeinfer",3],["typeinfer",3]],["bool",0]],[[["typemacro",3],["typemacro",3]],["bool",0]],[[["abi",3],["abi",3]],["bool",0]],[[["barefnarg",3],["barefnarg",3]],["bool",0]],[[["barefnargname",4],["barefnargname",4]],["bool",0]],[[["returntype",4],["returntype",4]],["bool",0]],[[["path",3],["path",3]],["bool",0]],[[["pathsegment",3],["pathsegment",3]],["bool",0]],[[["patharguments",4],["patharguments",4]],["bool",0]],[[["genericargument",4],["genericargument",4]],["bool",0]],[[["anglebracketedgenericarguments",3],["anglebracketedgenericarguments",3]],["bool",0]],[[["binding",3],["binding",3]],["bool",0]],[[["constraint",3],["constraint",3]],["bool",0]],[[["parenthesizedgenericarguments",3],["parenthesizedgenericarguments",3]],["bool",0]],[[["qself",3],["qself",3]],["bool",0]],null,[[["str",0],["span",3]],["ident",3]],[[["lifetime",3]],["lifetimedef",3]],[[["str",0],["span",3]],["lifetime",3]],[[["literal",3]],["lit",4]],[[["str",0],["span",3]],["litstr",3]],[[["span",3]],["litbytestr",3]],[[["u8",0],["span",3]],["litbyte",3]],[[["char",0],["span",3]],["litchar",3]],[[["u64",0],["intsuffix",4],["span",3]],["litint",3]],[[["f64",0],["floatsuffix",4],["span",3]],["litfloat",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["tokenstream",3]],["result",6,[["parse",8]]]],[[["parsestream",6]],["result",6,[["ident",3]]]],[[["parsestream",6]],["result",6,[["meta",4]]]],[[["parsestream",6]],["result",6,[["metalist",3]]]],[[["parsestream",6]],["result",6,[["metanamevalue",3]]]],[[["parsestream",6]],["result",6,[["nestedmeta",4]]]],[[["parsestream",6]],["result",6,[["variant",3]]]],[[["parsestream",6]],["result",6,[["fieldsnamed",3]]]],[[["parsestream",6]],["result",6,[["fieldsunnamed",3]]]],[[["parsestream",6]],["result",6,[["visibility",4]]]],[[["parsestream",6]],["result",6,[["expr",4]]]],[[["parsestream",6]],["result",6,[["exprlit",3]]]],[[["parsestream",6]],["result",6,[["exprpath",3]]]],[[["parsestream",6]],["result",6,[["member",4]]]],[[["parsestream",6]],["result",6,[["index",3]]]],[[["parsestream",6]],["result",6,[["generics",3]]]],[[["parsestream",6]],["result",6,[["genericparam",4]]]],[[["parsestream",6]],["result",6,[["typeparam",3]]]],[[["parsestream",6]],["result",6,[["lifetimedef",3]]]],[[["parsestream",6]],["result",6,[["constparam",3]]]],[[["parsestream",6]],["result",6,[["boundlifetimes",3]]]],[[["parsestream",6]],["result",6,[["typeparambound",4]]]],[[["parsestream",6]],["result",6,[["traitbound",3]]]],[[["parsestream",6]],["result",6,[["traitboundmodifier",4]]]],[[["parsestream",6]],["result",6,[["whereclause",3]]]],[[["parsestream",6]],["result",6,[["wherepredicate",4]]]],[[["parsestream",6]],["result",6,[["lifetime",3]]]],[[["parsestream",6]],["result",6,[["lit",4]]]],[[["parsestream",6]],["result",6,[["litstr",3]]]],[[["litstr",3]],["result",6,[["parse",8]]]],[[["parsestream",6]],["result",6,[["litbytestr",3]]]],[[["parsestream",6]],["result",6,[["litbyte",3]]]],[[["parsestream",6]],["result",6,[["litchar",3]]]],[[["parsestream",6]],["result",6,[["litint",3]]]],[[["parsestream",6]],["result",6,[["litfloat",3]]]],[[["parsestream",6]],["result",6,[["litbool",3]]]],[[["parsestream",6]],["result",6,[["macro",3]]]],[[["parsestream",6]],["result",6,[["deriveinput",3]]]],[[["parsestream",6]],["result",6,[["binop",4]]]],[[["parsestream",6]],["result",6,[["unop",4]]]],[[["parsestream",6]],["result",6,[["type",4]]]],[[["parsestream",6]],["result",6,[["typeslice",3]]]],[[["parsestream",6]],["result",6,[["typearray",3]]]],[[["parsestream",6]],["result",6,[["typeptr",3]]]],[[["parsestream",6]],["result",6,[["typereference",3]]]],[[["parsestream",6]],["result",6,[["typebarefn",3]]]],[[["parsestream",6]],["result",6,[["typenever",3]]]],[[["parsestream",6]],["result",6,[["typetuple",3]]]],[[["parsestream",6]],["result",6,[["typepath",3]]]],[[["parsestream",6],["bool",0]],["result",6,[["typetraitobject",3]]]],[[["parsestream",6]],["result",6,[["typetraitobject",3]]]],[[["parsestream",6]],["result",6,[["typeimpltrait",3]]]],[[["parsestream",6]],["result",6,[["typeparen",3]]]],[[["parsestream",6]],["result",6,[["typegroup",3]]]],[[["parsestream",6]],["result",6,[["typeinfer",3]]]],[[["parsestream",6]],["result",6,[["typemacro",3]]]],[[["parsestream",6]],["result",6,[["abi",3]]]],[[["parsestream",6]],["result",6,[["barefnarg",3]]]],[[["parsestream",6]],["result",6,[["barefnargname",4]]]],[[["parsestream",6]],["result",6,[["returntype",4]]]],[[["parsestream",6],["bool",0]],["result",6,[["returntype",4]]]],[[["parsestream",6]],["result",6,[["path",3]]]],[[["parsestream",6]],["result",6,[["pathsegment",3]]]],[[["parsestream",6]],["result",6,[["genericargument",4]]]],[[["parsestream",6]],["result",6,[["anglebracketedgenericarguments",3]]]],[[["parsestream",6]],["result",6,[["binding",3]]]],[[["parsestream",6]],["result",6,[["parenthesizedgenericarguments",3]]]],[[["tokenstream",3]],["result",6,[["parse",8]]]],[[["parsestream",6]],["result",6,[["ident",3]]]],[[["parsestream",6]],["result",6,[["vec",3,[["attribute",3]]]]]],null,[[["attribute",3]],["result",6,[["meta",4]]]],[[["parsestream",6]],["result",6,[["path",3]]]],[[["parsestream",6]],["result",6,[["field",3]]]],[[["parsestream",6]],["result",6,[["vec",3,[["attribute",3]]]]]],null,[[["str",0]],["result",6,[["parse",8]]]],[[["parsestream",6]],["result",6,[["field",3]]]],[[["litstr",3],["parser",8]],["result",6]],[[["ident",3],["ident",3]],["option",4,[["ordering",4]]]],[[["lifetime",3],["lifetime",3]],["option",4,[["ordering",4]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["ident",3],["span",3]]],[[["litstr",3],["span",3]]],[[["litbytestr",3],["span",3]]],[[["litbyte",3],["span",3]]],[[["litchar",3],["span",3]]],[[["litint",3],["span",3]]],[[["litfloat",3],["span",3]]],[[["litverbatim",3],["span",3]]],[[["ident",3]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["litstr",3]],["span",3]],[[["",0]],["span",3]],[[["litbytestr",3]],["span",3]],[[["",0]],["span",3]],[[["litbyte",3]],["span",3]],[[["litchar",3]],["span",3]],[[["",0]],["span",3]],[[["litint",3]],["span",3]],[[["",0]],["span",3]],[[["litfloat",3]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["litverbatim",3]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],null,null,null,[[["generics",3]]],null,null,null,[[["litint",3]],["intsuffix",4]],[[["litfloat",3]],["floatsuffixstring",3]],[[["",0]],["string",3]],[[["ident",3],["tokenstream",3]]],[[["attribute",3],["tokenstream",3]]],[[["meta",4],["tokenstream",3]]],[[["metalist",3],["tokenstream",3]]],[[["metanamevalue",3],["tokenstream",3]]],[[["nestedmeta",4],["tokenstream",3]]],[[["variant",3],["tokenstream",3]]],[[["fields",4],["tokenstream",3]]],[[["fieldsnamed",3],["tokenstream",3]]],[[["fieldsunnamed",3],["tokenstream",3]]],[[["field",3],["tokenstream",3]]],[[["visibility",4],["tokenstream",3]]],[[["vispublic",3],["tokenstream",3]]],[[["viscrate",3],["tokenstream",3]]],[[["visrestricted",3],["tokenstream",3]]],[[["expr",4],["tokenstream",3]]],[[["exprcall",3],["tokenstream",3]]],[[["exprbinary",3],["tokenstream",3]]],[[["exprunary",3],["tokenstream",3]]],[[["exprlit",3],["tokenstream",3]]],[[["exprcast",3],["tokenstream",3]]],[[["exprfield",3],["tokenstream",3]]],[[["exprindex",3],["tokenstream",3]]],[[["exprpath",3],["tokenstream",3]]],[[["exprparen",3],["tokenstream",3]]],[[["exprverbatim",3],["tokenstream",3]]],[[["member",4],["tokenstream",3]]],[[["index",3],["tokenstream",3]]],[[["generics",3],["tokenstream",3]]],[[["genericparam",4],["tokenstream",3]]],[[["typeparam",3],["tokenstream",3]]],[[["lifetimedef",3],["tokenstream",3]]],[[["constparam",3],["tokenstream",3]]],[[["implgenerics",3],["tokenstream",3]]],[[["typegenerics",3],["tokenstream",3]]],[[["turbofish",3],["tokenstream",3]]],[[["boundlifetimes",3],["tokenstream",3]]],[[["typeparambound",4],["tokenstream",3]]],[[["traitbound",3],["tokenstream",3]]],[[["traitboundmodifier",4],["tokenstream",3]]],[[["whereclause",3],["tokenstream",3]]],[[["wherepredicate",4],["tokenstream",3]]],[[["predicatetype",3],["tokenstream",3]]],[[["predicatelifetime",3],["tokenstream",3]]],[[["predicateeq",3],["tokenstream",3]]],[[["lifetime",3],["tokenstream",3]]],[[["lit",4],["tokenstream",3]]],[[["litstr",3],["tokenstream",3]]],[[["litbytestr",3],["tokenstream",3]]],[[["litbyte",3],["tokenstream",3]]],[[["litchar",3],["tokenstream",3]]],[[["litint",3],["tokenstream",3]]],[[["litfloat",3],["tokenstream",3]]],[[["litbool",3],["tokenstream",3]]],[[["litverbatim",3],["tokenstream",3]]],[[["macro",3],["tokenstream",3]]],[[["deriveinput",3],["tokenstream",3]]],[[["binop",4],["tokenstream",3]]],[[["unop",4],["tokenstream",3]]],[[["type",4],["tokenstream",3]]],[[["typeslice",3],["tokenstream",3]]],[[["typearray",3],["tokenstream",3]]],[[["typeptr",3],["tokenstream",3]]],[[["typereference",3],["tokenstream",3]]],[[["typebarefn",3],["tokenstream",3]]],[[["typenever",3],["tokenstream",3]]],[[["typetuple",3],["tokenstream",3]]],[[["typepath",3],["tokenstream",3]]],[[["typetraitobject",3],["tokenstream",3]]],[[["typeimpltrait",3],["tokenstream",3]]],[[["typeparen",3],["tokenstream",3]]],[[["typegroup",3],["tokenstream",3]]],[[["typeinfer",3],["tokenstream",3]]],[[["typemacro",3],["tokenstream",3]]],[[["typeverbatim",3],["tokenstream",3]]],[[["abi",3],["tokenstream",3]]],[[["barefnarg",3],["tokenstream",3]]],[[["barefnargname",4],["tokenstream",3]]],[[["returntype",4],["tokenstream",3]]],[[["path",3],["tokenstream",3]]],[[["pathsegment",3],["tokenstream",3]]],[[["patharguments",4],["tokenstream",3]]],[[["genericargument",4],["tokenstream",3]]],[[["anglebracketedgenericarguments",3],["tokenstream",3]]],[[["binding",3],["tokenstream",3]]],[[["constraint",3],["tokenstream",3]]],[[["parenthesizedgenericarguments",3],["tokenstream",3]]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["generics",3]],["typeparams",3]],[[["generics",3]],["typeparamsmut",3]],null,null,null,[[["ident",3]],["ident",3]],null,[[["litstr",3]],["string",3]],[[["litbytestr",3]],["vec",3,[["u8",0]]]],[[["litbyte",3]],["u8",0]],[[["litchar",3]],["char",0]],[[["litint",3]],["u64",0]],[[["litfloat",3]],["f64",0]],null,null,null,null,null,null,null,null,[[["parsestream",6]],["result",6,[["type",4]]]],[[["parsestream",6]],["result",6,[["typetraitobject",3]]]],[[["parsestream",6]],["result",6,[["returntype",4]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["tokenbuffer",3]],["cursor",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["cursor",3]],["cursor",3]],[[["",0],["",0]]],[[],["cursor",3]],[[["cursor",3]],["bool",0]],[[["cursor",3],["cursor",3]],["bool",0]],[[]],[[]],[[["cursor",3],["delimiter",4]],["option",4]],[[["cursor",3]],["option",4]],[[]],[[]],[[["cursor",3]],["option",4]],[[["cursor",3]],["option",4]],[[["cursor",3],["cursor",3]],["bool",0]],[[["tokenstream",3]],["tokenbuffer",3]],[[["tokenstream",3]],["tokenbuffer",3]],[[["cursor",3]],["option",4]],[[["cursor",3]],["span",3]],[[["",0]]],[[["cursor",3]],["tokenstream",3]],[[["cursor",3]],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["parsestream",6]],["result",6]],null,[[["",0]],["ident",3]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["parsebuffer",3]],["result",6]],[[["error",3]],["error",3]],[[["stepcursor",3]],["stepcursor",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["parsebuffer",3]],["cursor",3]],[[["stepcursor",3]]],[[["error",3]],["str",0]],[[["parsebuffer",3]]],[[["lookahead1",3]],["error",3]],[[["parsebuffer",3],["display",8]],["error",3]],[[["stepcursor",3],["display",8]],["error",3]],[[["parsebuffer",3],["formatter",3]],["result",6]],[[["parsebuffer",3],["formatter",3]],["result",6]],[[["error",3],["formatter",3]],["result",6]],[[["error",3],["formatter",3]],["result",6]],[[["parsebuffer",3]],["parsebuffer",3]],[[]],[[]],[[["lexerror",3]],["error",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["parsebuffer",3]],["bool",0]],[[["parsebuffer",3]],["lookahead1",3]],[[["span",3],["display",8]],["error",3]],[[["totokens",8],["display",8]],["error",3]],[[["parsestream",6]],["result",6]],[[["parsebuffer",3]],["result",6,[["parse",8]]]],[[["tokenstream",3]],["result",6]],[[["tokenstream",3]],["result",6]],[[["str",0]],["result",6]],[[["parsebuffer",3]],["result",6,[["punctuated",3,[["parse",8]]]]]],[[["lookahead1",3],["peek",8]],["bool",0]],[[["parsebuffer",3],["peek",8]],["bool",0]],[[["parsebuffer",3],["peek",8]],["bool",0]],[[["parsebuffer",3],["peek",8]],["bool",0]],[[["error",3]],["span",3]],[[["parsebuffer",3]],["result",6]],[[["error",3]],["tokenstream",3]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["pairs",3]],["pairs",3]],[[["iter",3]],["iter",3]],[[["punctuated",3,[["clone",8],["clone",8]]]],["punctuated",3,[["clone",8],["clone",8]]]],[[["intopairs",3,[["clone",8],["clone",8]]]],["intopairs",3,[["clone",8],["clone",8]]]],[[["intoiter",3,[["clone",8],["clone",8]]]],["intoiter",3,[["clone",8],["clone",8]]]],[[["pair",4,[["clone",8],["clone",8]]]],["pair",4,[["clone",8],["clone",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["punctuated",3]],[[["punctuated",3]],["bool",0]],[[["punctuated",3,[["partialeq",8],["partialeq",8]]],["punctuated",3]],["bool",0]],[[["punctuated",3],["intoiterator",8]]],[[["punctuated",3],["intoiterator",8]]],[[["punctuated",3]],["option",4,[["pair",4]]]],[[["punctuated",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]],["punctuated",3]],[[["intoiterator",8]],["punctuated",3]],[[["punctuated",3,[["hash",8],["hash",8]]],["",0]]],[[["punctuated",3],["usize",0]]],[[["punctuated",3],["usize",0]]],[[["punctuated",3],["usize",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["punctuated",3]]],[[["punctuated",3]]],[[["punctuated",3]]],[[]],[[]],[[["punctuated",3]],["intopairs",3]],[[["pair",4]]],[[["pair",4]]],[[["punctuated",3]],["bool",0]],[[["punctuated",3]],["iter",3]],[[["punctuated",3]],["itermut",3]],[[["punctuated",3]],["option",4,[["pair",4]]]],[[["punctuated",3]],["option",4,[["pair",4]]]],[[["pairs",3]],["usize",0]],[[["pairsmut",3]],["usize",0]],[[["iter",3]],["usize",0]],[[["itermut",3]],["usize",0]],[[["punctuated",3]],["usize",0]],[[["intopairs",3]],["usize",0]],[[["intoiter",3]],["usize",0]],[[["punctuated",3,[["partialeq",8],["partialeq",8]]],["punctuated",3]],["bool",0]],[[],["punctuated",3]],[[["option",4]],["pair",4]],[[["pairs",3]],["option",4]],[[["pairsmut",3]],["option",4]],[[["iter",3]],["option",4]],[[["itermut",3]],["option",4]],[[["intopairs",3]],["option",4]],[[["intoiter",3]],["option",4]],[[["punctuated",3]],["pairs",3]],[[["punctuated",3]],["pairsmut",3]],[[["parsestream",6]],["result",6,[["punctuated",3]]]],[[["parsestream",6]],["result",6,[["punctuated",3]]]],[[["parsestream",6]],["result",6,[["punctuated",3]]]],[[["parsestream",6]],["result",6,[["punctuated",3]]]],[[["punctuated",3]],["option",4,[["pair",4]]]],[[["pair",4]],["option",4]],[[["punctuated",3]]],[[["punctuated",3]]],[[["punctuated",3]]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["punctuated",3],["tokenstream",3]]],[[["pair",4],["tokenstream",3]]],[[["punctuated",3]],["bool",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["pair",4]],["",0]],[[["pair",4]],["",0]],null,null,null,null,[[["",0]],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullunderscore",3]],["underscore",3]],[[["abstract",3]],["abstract",3]],[[["as",3]],["as",3]],[[["async",3]],["async",3]],[[["auto",3]],["auto",3]],[[["become",3]],["become",3]],[[["box",3]],["box",3]],[[["break",3]],["break",3]],[[["const",3]],["const",3]],[[["continue",3]],["continue",3]],[[["crate",3]],["crate",3]],[[["default",3]],["default",3]],[[["do",3]],["do",3]],[[["dyn",3]],["dyn",3]],[[["else",3]],["else",3]],[[["enum",3]],["enum",3]],[[["existential",3]],["existential",3]],[[["extern",3]],["extern",3]],[[["final",3]],["final",3]],[[["fn",3]],["fn",3]],[[["for",3]],["for",3]],[[["if",3]],["if",3]],[[["impl",3]],["impl",3]],[[["in",3]],["in",3]],[[["let",3]],["let",3]],[[["loop",3]],["loop",3]],[[["macro",3]],["macro",3]],[[["match",3]],["match",3]],[[["mod",3]],["mod",3]],[[["move",3]],["move",3]],[[["mut",3]],["mut",3]],[[["override",3]],["override",3]],[[["priv",3]],["priv",3]],[[["pub",3]],["pub",3]],[[["ref",3]],["ref",3]],[[["return",3]],["return",3]],[[["selftype",3]],["selftype",3]],[[["selfvalue",3]],["selfvalue",3]],[[["static",3]],["static",3]],[[["struct",3]],["struct",3]],[[["super",3]],["super",3]],[[["trait",3]],["trait",3]],[[["try",3]],["try",3]],[[["type",3]],["type",3]],[[["typeof",3]],["typeof",3]],[[["union",3]],["union",3]],[[["unsafe",3]],["unsafe",3]],[[["unsized",3]],["unsized",3]],[[["use",3]],["use",3]],[[["virtual",3]],["virtual",3]],[[["where",3]],["where",3]],[[["while",3]],["while",3]],[[["yield",3]],["yield",3]],[[["add",3]],["add",3]],[[["addeq",3]],["addeq",3]],[[["and",3]],["and",3]],[[["andand",3]],["andand",3]],[[["andeq",3]],["andeq",3]],[[["at",3]],["at",3]],[[["bang",3]],["bang",3]],[[["caret",3]],["caret",3]],[[["careteq",3]],["careteq",3]],[[["colon",3]],["colon",3]],[[["colon2",3]],["colon2",3]],[[["comma",3]],["comma",3]],[[["div",3]],["div",3]],[[["diveq",3]],["diveq",3]],[[["dollar",3]],["dollar",3]],[[["dot",3]],["dot",3]],[[["dot2",3]],["dot2",3]],[[["dot3",3]],["dot3",3]],[[["dotdoteq",3]],["dotdoteq",3]],[[["eq",3]],["eq",3]],[[["eqeq",3]],["eqeq",3]],[[["ge",3]],["ge",3]],[[["gt",3]],["gt",3]],[[["le",3]],["le",3]],[[["lt",3]],["lt",3]],[[["muleq",3]],["muleq",3]],[[["ne",3]],["ne",3]],[[["or",3]],["or",3]],[[["oreq",3]],["oreq",3]],[[["oror",3]],["oror",3]],[[["pound",3]],["pound",3]],[[["question",3]],["question",3]],[[["rarrow",3]],["rarrow",3]],[[["larrow",3]],["larrow",3]],[[["rem",3]],["rem",3]],[[["remeq",3]],["remeq",3]],[[["fatarrow",3]],["fatarrow",3]],[[["semi",3]],["semi",3]],[[["shl",3]],["shl",3]],[[["shleq",3]],["shleq",3]],[[["shr",3]],["shr",3]],[[["shreq",3]],["shreq",3]],[[["star",3]],["star",3]],[[["sub",3]],["sub",3]],[[["subeq",3]],["subeq",3]],[[["tilde",3]],["tilde",3]],[[["brace",3]],["brace",3]],[[["bracket",3]],["bracket",3]],[[["paren",3]],["paren",3]],[[["group",3]],["group",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["underscore",3]],[[],["abstract",3]],[[],["as",3]],[[],["async",3]],[[],["auto",3]],[[],["become",3]],[[],["box",3]],[[],["break",3]],[[],["const",3]],[[],["continue",3]],[[],["crate",3]],[[],["default",3]],[[],["do",3]],[[],["dyn",3]],[[],["else",3]],[[],["enum",3]],[[],["existential",3]],[[],["extern",3]],[[],["final",3]],[[],["fn",3]],[[],["for",3]],[[],["if",3]],[[],["impl",3]],[[],["in",3]],[[],["let",3]],[[],["loop",3]],[[],["macro",3]],[[],["match",3]],[[],["mod",3]],[[],["move",3]],[[],["mut",3]],[[],["override",3]],[[],["priv",3]],[[],["pub",3]],[[],["ref",3]],[[],["return",3]],[[],["selftype",3]],[[],["selfvalue",3]],[[],["static",3]],[[],["struct",3]],[[],["super",3]],[[],["trait",3]],[[],["try",3]],[[],["type",3]],[[],["typeof",3]],[[],["union",3]],[[],["unsafe",3]],[[],["unsized",3]],[[],["use",3]],[[],["virtual",3]],[[],["where",3]],[[],["while",3]],[[],["yield",3]],[[],["add",3]],[[],["addeq",3]],[[],["and",3]],[[],["andand",3]],[[],["andeq",3]],[[],["at",3]],[[],["bang",3]],[[],["caret",3]],[[],["careteq",3]],[[],["colon",3]],[[],["colon2",3]],[[],["comma",3]],[[],["div",3]],[[],["diveq",3]],[[],["dollar",3]],[[],["dot",3]],[[],["dot2",3]],[[],["dot3",3]],[[],["dotdoteq",3]],[[],["eq",3]],[[],["eqeq",3]],[[],["ge",3]],[[],["gt",3]],[[],["le",3]],[[],["lt",3]],[[],["muleq",3]],[[],["ne",3]],[[],["or",3]],[[],["oreq",3]],[[],["oror",3]],[[],["pound",3]],[[],["question",3]],[[],["rarrow",3]],[[],["larrow",3]],[[],["rem",3]],[[],["remeq",3]],[[],["fatarrow",3]],[[],["semi",3]],[[],["shl",3]],[[],["shleq",3]],[[],["shr",3]],[[],["shreq",3]],[[],["star",3]],[[],["sub",3]],[[],["subeq",3]],[[],["tilde",3]],[[],["brace",3]],[[],["bracket",3]],[[],["paren",3]],[[],["group",3]],[[["underscore",3]]],[[["add",3]]],[[["and",3]]],[[["at",3]]],[[["bang",3]]],[[["caret",3]]],[[["colon",3]]],[[["comma",3]]],[[["div",3]]],[[["dollar",3]]],[[["dot",3]]],[[["eq",3]]],[[["gt",3]]],[[["lt",3]]],[[["or",3]]],[[["pound",3]]],[[["question",3]]],[[["rem",3]]],[[["semi",3]]],[[["star",3]]],[[["sub",3]]],[[["tilde",3]]],[[["underscore",3]]],[[["add",3]]],[[["and",3]]],[[["at",3]]],[[["bang",3]]],[[["caret",3]]],[[["colon",3]]],[[["comma",3]]],[[["div",3]]],[[["dollar",3]]],[[["dot",3]]],[[["eq",3]]],[[["gt",3]]],[[["lt",3]]],[[["or",3]]],[[["pound",3]]],[[["question",3]]],[[["rem",3]]],[[["semi",3]]],[[["star",3]]],[[["sub",3]]],[[["tilde",3]]],[[["underscore",3],["underscore",3]],["bool",0]],[[["abstract",3],["abstract",3]],["bool",0]],[[["as",3],["as",3]],["bool",0]],[[["async",3],["async",3]],["bool",0]],[[["auto",3],["auto",3]],["bool",0]],[[["become",3],["become",3]],["bool",0]],[[["box",3],["box",3]],["bool",0]],[[["break",3],["break",3]],["bool",0]],[[["const",3],["const",3]],["bool",0]],[[["continue",3],["continue",3]],["bool",0]],[[["crate",3],["crate",3]],["bool",0]],[[["default",3],["default",3]],["bool",0]],[[["do",3],["do",3]],["bool",0]],[[["dyn",3],["dyn",3]],["bool",0]],[[["else",3],["else",3]],["bool",0]],[[["enum",3],["enum",3]],["bool",0]],[[["existential",3],["existential",3]],["bool",0]],[[["extern",3],["extern",3]],["bool",0]],[[["final",3],["final",3]],["bool",0]],[[["fn",3],["fn",3]],["bool",0]],[[["for",3],["for",3]],["bool",0]],[[["if",3],["if",3]],["bool",0]],[[["impl",3],["impl",3]],["bool",0]],[[["in",3],["in",3]],["bool",0]],[[["let",3],["let",3]],["bool",0]],[[["loop",3],["loop",3]],["bool",0]],[[["macro",3],["macro",3]],["bool",0]],[[["match",3],["match",3]],["bool",0]],[[["mod",3],["mod",3]],["bool",0]],[[["move",3],["move",3]],["bool",0]],[[["mut",3],["mut",3]],["bool",0]],[[["override",3],["override",3]],["bool",0]],[[["priv",3],["priv",3]],["bool",0]],[[["pub",3],["pub",3]],["bool",0]],[[["ref",3],["ref",3]],["bool",0]],[[["return",3],["return",3]],["bool",0]],[[["selftype",3],["selftype",3]],["bool",0]],[[["selfvalue",3],["selfvalue",3]],["bool",0]],[[["static",3],["static",3]],["bool",0]],[[["struct",3],["struct",3]],["bool",0]],[[["super",3],["super",3]],["bool",0]],[[["trait",3],["trait",3]],["bool",0]],[[["try",3],["try",3]],["bool",0]],[[["type",3],["type",3]],["bool",0]],[[["typeof",3],["typeof",3]],["bool",0]],[[["union",3],["union",3]],["bool",0]],[[["unsafe",3],["unsafe",3]],["bool",0]],[[["unsized",3],["unsized",3]],["bool",0]],[[["use",3],["use",3]],["bool",0]],[[["virtual",3],["virtual",3]],["bool",0]],[[["where",3],["where",3]],["bool",0]],[[["while",3],["while",3]],["bool",0]],[[["yield",3],["yield",3]],["bool",0]],[[["add",3],["add",3]],["bool",0]],[[["addeq",3],["addeq",3]],["bool",0]],[[["and",3],["and",3]],["bool",0]],[[["andand",3],["andand",3]],["bool",0]],[[["andeq",3],["andeq",3]],["bool",0]],[[["at",3],["at",3]],["bool",0]],[[["bang",3],["bang",3]],["bool",0]],[[["caret",3],["caret",3]],["bool",0]],[[["careteq",3],["careteq",3]],["bool",0]],[[["colon",3],["colon",3]],["bool",0]],[[["colon2",3],["colon2",3]],["bool",0]],[[["comma",3],["comma",3]],["bool",0]],[[["div",3],["div",3]],["bool",0]],[[["diveq",3],["diveq",3]],["bool",0]],[[["dollar",3],["dollar",3]],["bool",0]],[[["dot",3],["dot",3]],["bool",0]],[[["dot2",3],["dot2",3]],["bool",0]],[[["dot3",3],["dot3",3]],["bool",0]],[[["dotdoteq",3],["dotdoteq",3]],["bool",0]],[[["eq",3],["eq",3]],["bool",0]],[[["eqeq",3],["eqeq",3]],["bool",0]],[[["ge",3],["ge",3]],["bool",0]],[[["gt",3],["gt",3]],["bool",0]],[[["le",3],["le",3]],["bool",0]],[[["lt",3],["lt",3]],["bool",0]],[[["muleq",3],["muleq",3]],["bool",0]],[[["ne",3],["ne",3]],["bool",0]],[[["or",3],["or",3]],["bool",0]],[[["oreq",3],["oreq",3]],["bool",0]],[[["oror",3],["oror",3]],["bool",0]],[[["pound",3],["pound",3]],["bool",0]],[[["question",3],["question",3]],["bool",0]],[[["rarrow",3],["rarrow",3]],["bool",0]],[[["larrow",3],["larrow",3]],["bool",0]],[[["rem",3],["rem",3]],["bool",0]],[[["remeq",3],["remeq",3]],["bool",0]],[[["fatarrow",3],["fatarrow",3]],["bool",0]],[[["semi",3],["semi",3]],["bool",0]],[[["shl",3],["shl",3]],["bool",0]],[[["shleq",3],["shleq",3]],["bool",0]],[[["shr",3],["shr",3]],["bool",0]],[[["shreq",3],["shreq",3]],["bool",0]],[[["star",3],["star",3]],["bool",0]],[[["sub",3],["sub",3]],["bool",0]],[[["subeq",3],["subeq",3]],["bool",0]],[[["tilde",3],["tilde",3]],["bool",0]],[[["brace",3],["brace",3]],["bool",0]],[[["bracket",3],["bracket",3]],["bool",0]],[[["paren",3],["paren",3]],["bool",0]],[[["group",3],["group",3]],["bool",0]],[[["underscore",3],["formatter",3]],["result",6]],[[["abstract",3],["formatter",3]],["result",6]],[[["as",3],["formatter",3]],["result",6]],[[["async",3],["formatter",3]],["result",6]],[[["auto",3],["formatter",3]],["result",6]],[[["become",3],["formatter",3]],["result",6]],[[["box",3],["formatter",3]],["result",6]],[[["break",3],["formatter",3]],["result",6]],[[["const",3],["formatter",3]],["result",6]],[[["continue",3],["formatter",3]],["result",6]],[[["crate",3],["formatter",3]],["result",6]],[[["default",3],["formatter",3]],["result",6]],[[["do",3],["formatter",3]],["result",6]],[[["dyn",3],["formatter",3]],["result",6]],[[["else",3],["formatter",3]],["result",6]],[[["enum",3],["formatter",3]],["result",6]],[[["existential",3],["formatter",3]],["result",6]],[[["extern",3],["formatter",3]],["result",6]],[[["final",3],["formatter",3]],["result",6]],[[["fn",3],["formatter",3]],["result",6]],[[["for",3],["formatter",3]],["result",6]],[[["if",3],["formatter",3]],["result",6]],[[["impl",3],["formatter",3]],["result",6]],[[["in",3],["formatter",3]],["result",6]],[[["let",3],["formatter",3]],["result",6]],[[["loop",3],["formatter",3]],["result",6]],[[["macro",3],["formatter",3]],["result",6]],[[["match",3],["formatter",3]],["result",6]],[[["mod",3],["formatter",3]],["result",6]],[[["move",3],["formatter",3]],["result",6]],[[["mut",3],["formatter",3]],["result",6]],[[["override",3],["formatter",3]],["result",6]],[[["priv",3],["formatter",3]],["result",6]],[[["pub",3],["formatter",3]],["result",6]],[[["ref",3],["formatter",3]],["result",6]],[[["return",3],["formatter",3]],["result",6]],[[["selftype",3],["formatter",3]],["result",6]],[[["selfvalue",3],["formatter",3]],["result",6]],[[["static",3],["formatter",3]],["result",6]],[[["struct",3],["formatter",3]],["result",6]],[[["super",3],["formatter",3]],["result",6]],[[["trait",3],["formatter",3]],["result",6]],[[["try",3],["formatter",3]],["result",6]],[[["type",3],["formatter",3]],["result",6]],[[["typeof",3],["formatter",3]],["result",6]],[[["union",3],["formatter",3]],["result",6]],[[["unsafe",3],["formatter",3]],["result",6]],[[["unsized",3],["formatter",3]],["result",6]],[[["use",3],["formatter",3]],["result",6]],[[["virtual",3],["formatter",3]],["result",6]],[[["where",3],["formatter",3]],["result",6]],[[["while",3],["formatter",3]],["result",6]],[[["yield",3],["formatter",3]],["result",6]],[[["add",3],["formatter",3]],["result",6]],[[["addeq",3],["formatter",3]],["result",6]],[[["and",3],["formatter",3]],["result",6]],[[["andand",3],["formatter",3]],["result",6]],[[["andeq",3],["formatter",3]],["result",6]],[[["at",3],["formatter",3]],["result",6]],[[["bang",3],["formatter",3]],["result",6]],[[["caret",3],["formatter",3]],["result",6]],[[["careteq",3],["formatter",3]],["result",6]],[[["colon",3],["formatter",3]],["result",6]],[[["colon2",3],["formatter",3]],["result",6]],[[["comma",3],["formatter",3]],["result",6]],[[["div",3],["formatter",3]],["result",6]],[[["diveq",3],["formatter",3]],["result",6]],[[["dollar",3],["formatter",3]],["result",6]],[[["dot",3],["formatter",3]],["result",6]],[[["dot2",3],["formatter",3]],["result",6]],[[["dot3",3],["formatter",3]],["result",6]],[[["dotdoteq",3],["formatter",3]],["result",6]],[[["eq",3],["formatter",3]],["result",6]],[[["eqeq",3],["formatter",3]],["result",6]],[[["ge",3],["formatter",3]],["result",6]],[[["gt",3],["formatter",3]],["result",6]],[[["le",3],["formatter",3]],["result",6]],[[["lt",3],["formatter",3]],["result",6]],[[["muleq",3],["formatter",3]],["result",6]],[[["ne",3],["formatter",3]],["result",6]],[[["or",3],["formatter",3]],["result",6]],[[["oreq",3],["formatter",3]],["result",6]],[[["oror",3],["formatter",3]],["result",6]],[[["pound",3],["formatter",3]],["result",6]],[[["question",3],["formatter",3]],["result",6]],[[["rarrow",3],["formatter",3]],["result",6]],[[["larrow",3],["formatter",3]],["result",6]],[[["rem",3],["formatter",3]],["result",6]],[[["remeq",3],["formatter",3]],["result",6]],[[["fatarrow",3],["formatter",3]],["result",6]],[[["semi",3],["formatter",3]],["result",6]],[[["shl",3],["formatter",3]],["result",6]],[[["shleq",3],["formatter",3]],["result",6]],[[["shr",3],["formatter",3]],["result",6]],[[["shreq",3],["formatter",3]],["result",6]],[[["star",3],["formatter",3]],["result",6]],[[["sub",3],["formatter",3]],["result",6]],[[["subeq",3],["formatter",3]],["result",6]],[[["tilde",3],["formatter",3]],["result",6]],[[["brace",3],["formatter",3]],["result",6]],[[["bracket",3],["formatter",3]],["result",6]],[[["paren",3],["formatter",3]],["result",6]],[[["group",3],["formatter",3]],["resultunderscore",3],["",0]]],[[["abstract",3],["",0]]],[[["as",3],["",0]]],[[["async",3],["",0]]],[[["auto",3],["",0]]],[[["become",3],["",0]]],[[["box",3],["",0]]],[[["break",3],["",0]]],[[["const",3],["",0]]],[[["continue",3],["",0]]],[[["crate",3],["",0]]],[[["default",3],["",0]]],[[["do",3],["",0]]],[[["dyn",3],["",0]]],[[["else",3],["",0]]],[[["enum",3],["",0]]],[[["existential",3],["",0]]],[[["extern",3],["",0]]],[[["final",3],["",0]]],[[["fn",3],["",0]]],[[["for",3],["",0]]],[[["if",3],["",0]]],[[["impl",3],["",0]]],[[["in",3],["",0]]],[[["let",3],["",0]]],[[["loop",3],["",0]]],[[["macro",3],["",0]]],[[["match",3],["",0]]],[[["mod",3],["",0]]],[[["move",3],["",0]]],[[["mut",3],["",0]]],[[["override",3],["",0]]],[[["priv",3],["",0]]],[[["pub",3],["",0]]],[[["ref",3],["",0]]],[[["return",3],["",0]]],[[["selftype",3],["",0]]],[[["selfvalue",3],["",0]]],[[["static",3],["",0]]],[[["struct",3],["",0]]],[[["super",3],["",0]]],[[["trait",3],["",0]]],[[["try",3],["",0]]],[[["type",3],["",0]]],[[["typeof",3],["",0]]],[[["union",3],["",0]]],[[["unsafe",3],["",0]]],[[["unsized",3],["",0]]],[[["use",3],["",0]]],[[["virtual",3],["",0]]],[[["where",3],["",0]]],[[["while",3],["",0]]],[[["yield",3],["",0]]],[[["add",3],["",0]]],[[["addeq",3],["",0]]],[[["and",3],["",0]]],[[["andand",3],["",0]]],[[["andeq",3],["",0]]],[[["at",3],["",0]]],[[["bang",3],["",0]]],[[["caret",3],["",0]]],[[["careteq",3],["",0]]],[[["colon",3],["",0]]],[[["colon2",3],["",0]]],[[["comma",3],["",0]]],[[["div",3],["",0]]],[[["diveq",3],["",0]]],[[["dollar",3],["",0]]],[[["dot",3],["",0]]],[[["dot2",3],["",0]]],[[["dot3",3],["",0]]],[[["dotdoteq",3],["",0]]],[[["eq",3],["",0]]],[[["eqeq",3],["",0]]],[[["ge",3],["",0]]],[[["gt",3],["",0]]],[[["le",3],["",0]]],[[["lt",3],["",0]]],[[["muleq",3],["",0]]],[[["ne",3],["",0]]],[[["or",3],["",0]]],[[["oreq",3],["",0]]],[[["oror",3],["",0]]],[[["pound",3],["",0]]],[[["question",3],["",0]]],[[["rarrow",3],["",0]]],[[["larrow",3],["",0]]],[[["rem",3],["",0]]],[[["remeq",3],["",0]]],[[["fatarrow",3],["",0]]],[[["semi",3],["",0]]],[[["shl",3],["",0]]],[[["shleq",3],["",0]]],[[["shr",3],["",0]]],[[["shreq",3],["",0]]],[[["star",3],["",0]]],[[["sub",3],["",0]]],[[["subeq",3],["",0]]],[[["tilde",3],["",0]]],[[["brace",3],["",0]]],[[["bracket",3],["",0]]],[[["paren",3],["",0]]],[[["groupparsestream",6]],["result",6,[["underscore",3]]]],[[["parsestream",6]],["result",6,[["abstract",3]]]],[[["parsestream",6]],["result",6,[["as",3]]]],[[["parsestream",6]],["result",6,[["async",3]]]],[[["parsestream",6]],["result",6,[["auto",3]]]],[[["parsestream",6]],["result",6,[["become",3]]]],[[["parsestream",6]],["result",6,[["box",3]]]],[[["parsestream",6]],["result",6,[["break",3]]]],[[["parsestream",6]],["result",6,[["const",3]]]],[[["parsestream",6]],["result",6,[["continue",3]]]],[[["parsestream",6]],["result",6,[["crate",3]]]],[[["parsestream",6]],["result",6,[["default",3]]]],[[["parsestream",6]],["result",6,[["do",3]]]],[[["parsestream",6]],["result",6,[["dyn",3]]]],[[["parsestream",6]],["result",6,[["else",3]]]],[[["parsestream",6]],["result",6,[["enum",3]]]],[[["parsestream",6]],["result",6,[["existential",3]]]],[[["parsestream",6]],["result",6,[["extern",3]]]],[[["parsestream",6]],["result",6,[["final",3]]]],[[["parsestream",6]],["result",6,[["fn",3]]]],[[["parsestream",6]],["result",6,[["for",3]]]],[[["parsestream",6]],["result",6,[["if",3]]]],[[["parsestream",6]],["result",6,[["impl",3]]]],[[["parsestream",6]],["result",6,[["in",3]]]],[[["parsestream",6]],["result",6,[["let",3]]]],[[["parsestream",6]],["result",6,[["loop",3]]]],[[["parsestream",6]],["result",6,[["macro",3]]]],[[["parsestream",6]],["result",6,[["match",3]]]],[[["parsestream",6]],["result",6,[["mod",3]]]],[[["parsestream",6]],["result",6,[["move",3]]]],[[["parsestream",6]],["result",6,[["mut",3]]]],[[["parsestream",6]],["result",6,[["override",3]]]],[[["parsestream",6]],["result",6,[["priv",3]]]],[[["parsestream",6]],["result",6,[["pub",3]]]],[[["parsestream",6]],["result",6,[["ref",3]]]],[[["parsestream",6]],["result",6,[["return",3]]]],[[["parsestream",6]],["result",6,[["selftype",3]]]],[[["parsestream",6]],["result",6,[["selfvalue",3]]]],[[["parsestream",6]],["result",6,[["static",3]]]],[[["parsestream",6]],["result",6,[["struct",3]]]],[[["parsestream",6]],["result",6,[["super",3]]]],[[["parsestream",6]],["result",6,[["trait",3]]]],[[["parsestream",6]],["result",6,[["try",3]]]],[[["parsestream",6]],["result",6,[["type",3]]]],[[["parsestream",6]],["result",6,[["typeof",3]]]],[[["parsestream",6]],["result",6,[["union",3]]]],[[["parsestream",6]],["result",6,[["unsafe",3]]]],[[["parsestream",6]],["result",6,[["unsized",3]]]],[[["parsestream",6]],["result",6,[["use",3]]]],[[["parsestream",6]],["result",6,[["virtual",3]]]],[[["parsestream",6]],["result",6,[["where",3]]]],[[["parsestream",6]],["result",6,[["while",3]]]],[[["parsestream",6]],["result",6,[["yield",3]]]],[[["parsestream",6]],["result",6,[["add",3]]]],[[["parsestream",6]],["result",6,[["addeq",3]]]],[[["parsestream",6]],["result",6,[["and",3]]]],[[["parsestream",6]],["result",6,[["andand",3]]]],[[["parsestream",6]],["result",6,[["andeq",3]]]],[[["parsestream",6]],["result",6,[["at",3]]]],[[["parsestream",6]],["result",6,[["bang",3]]]],[[["parsestream",6]],["result",6,[["caret",3]]]],[[["parsestream",6]],["result",6,[["careteq",3]]]],[[["parsestream",6]],["result",6,[["colon",3]]]],[[["parsestream",6]],["result",6,[["colon2",3]]]],[[["parsestream",6]],["result",6,[["comma",3]]]],[[["parsestream",6]],["result",6,[["div",3]]]],[[["parsestream",6]],["result",6,[["diveq",3]]]],[[["parsestream",6]],["result",6,[["dollar",3]]]],[[["parsestream",6]],["result",6,[["dot",3]]]],[[["parsestream",6]],["result",6,[["dot2",3]]]],[[["parsestream",6]],["result",6,[["dot3",3]]]],[[["parsestream",6]],["result",6,[["dotdoteq",3]]]],[[["parsestream",6]],["result",6,[["eq",3]]]],[[["parsestream",6]],["result",6,[["eqeq",3]]]],[[["parsestream",6]],["result",6,[["ge",3]]]],[[["parsestream",6]],["result",6,[["gt",3]]]],[[["parsestream",6]],["result",6,[["le",3]]]],[[["parsestream",6]],["result",6,[["lt",3]]]],[[["parsestream",6]],["result",6,[["muleq",3]]]],[[["parsestream",6]],["result",6,[["ne",3]]]],[[["parsestream",6]],["result",6,[["or",3]]]],[[["parsestream",6]],["result",6,[["oreq",3]]]],[[["parsestream",6]],["result",6,[["oror",3]]]],[[["parsestream",6]],["result",6,[["pound",3]]]],[[["parsestream",6]],["result",6,[["question",3]]]],[[["parsestream",6]],["result",6,[["rarrow",3]]]],[[["parsestream",6]],["result",6,[["larrow",3]]]],[[["parsestream",6]],["result",6,[["rem",3]]]],[[["parsestream",6]],["result",6,[["remeq",3]]]],[[["parsestream",6]],["result",6,[["fatarrow",3]]]],[[["parsestream",6]],["result",6,[["semi",3]]]],[[["parsestream",6]],["result",6,[["shl",3]]]],[[["parsestream",6]],["result",6,[["shleq",3]]]],[[["parsestream",6]],["result",6,[["shr",3]]]],[[["parsestream",6]],["result",6,[["shreq",3]]]],[[["parsestream",6]],["result",6,[["star",3]]]],[[["parsestream",6]],["result",6,[["sub",3]]]],[[["parsestream",6]],["result",6,[["subeq",3]]]],[[["parsestream",6]],["result",6,[["tilde",3]]]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["brace",3],["tokenstream",3]]],[[["bracket",3],["tokenstream",3]]],[[["paren",3],["tokenstream",3]]],[[["group",3],["tokenstreamunderscore",3],["tokenstream",3]]],[[["abstract",3],["tokenstream",3]]],[[["as",3],["tokenstream",3]]],[[["async",3],["tokenstream",3]]],[[["auto",3],["tokenstream",3]]],[[["become",3],["tokenstream",3]]],[[["box",3],["tokenstream",3]]],[[["break",3],["tokenstream",3]]],[[["const",3],["tokenstream",3]]],[[["continue",3],["tokenstream",3]]],[[["crate",3],["tokenstream",3]]],[[["default",3],["tokenstream",3]]],[[["do",3],["tokenstream",3]]],[[["dyn",3],["tokenstream",3]]],[[["else",3],["tokenstream",3]]],[[["enum",3],["tokenstream",3]]],[[["existential",3],["tokenstream",3]]],[[["extern",3],["tokenstream",3]]],[[["final",3],["tokenstream",3]]],[[["fn",3],["tokenstream",3]]],[[["for",3],["tokenstream",3]]],[[["if",3],["tokenstream",3]]],[[["impl",3],["tokenstream",3]]],[[["in",3],["tokenstream",3]]],[[["let",3],["tokenstream",3]]],[[["loop",3],["tokenstream",3]]],[[["macro",3],["tokenstream",3]]],[[["match",3],["tokenstream",3]]],[[["mod",3],["tokenstream",3]]],[[["move",3],["tokenstream",3]]],[[["mut",3],["tokenstream",3]]],[[["override",3],["tokenstream",3]]],[[["priv",3],["tokenstream",3]]],[[["pub",3],["tokenstream",3]]],[[["ref",3],["tokenstream",3]]],[[["return",3],["tokenstream",3]]],[[["selftype",3],["tokenstream",3]]],[[["selfvalue",3],["tokenstream",3]]],[[["static",3],["tokenstream",3]]],[[["struct",3],["tokenstream",3]]],[[["super",3],["tokenstream",3]]],[[["trait",3],["tokenstream",3]]],[[["try",3],["tokenstream",3]]],[[["type",3],["tokenstream",3]]],[[["typeof",3],["tokenstream",3]]],[[["union",3],["tokenstream",3]]],[[["unsafe",3],["tokenstream",3]]],[[["unsized",3],["tokenstream",3]]],[[["use",3],["tokenstream",3]]],[[["virtual",3],["tokenstream",3]]],[[["where",3],["tokenstream",3]]],[[["while",3],["tokenstream",3]]],[[["yield",3],["tokenstream",3]]],[[["add",3],["tokenstream",3]]],[[["addeq",3],["tokenstream",3]]],[[["and",3],["tokenstream",3]]],[[["andand",3],["tokenstream",3]]],[[["andeq",3],["tokenstream",3]]],[[["at",3],["tokenstream",3]]],[[["bang",3],["tokenstream",3]]],[[["caret",3],["tokenstream",3]]],[[["careteq",3],["tokenstream",3]]],[[["colon",3],["tokenstream",3]]],[[["colon2",3],["tokenstream",3]]],[[["comma",3],["tokenstream",3]]],[[["div",3],["tokenstream",3]]],[[["diveq",3],["tokenstream",3]]],[[["dollar",3],["tokenstream",3]]],[[["dot",3],["tokenstream",3]]],[[["dot2",3],["tokenstream",3]]],[[["dot3",3],["tokenstream",3]]],[[["dotdoteq",3],["tokenstream",3]]],[[["eq",3],["tokenstream",3]]],[[["eqeq",3],["tokenstream",3]]],[[["ge",3],["tokenstream",3]]],[[["gt",3],["tokenstream",3]]],[[["le",3],["tokenstream",3]]],[[["lt",3],["tokenstream",3]]],[[["muleq",3],["tokenstream",3]]],[[["ne",3],["tokenstream",3]]],[[["or",3],["tokenstream",3]]],[[["oreq",3],["tokenstream",3]]],[[["oror",3],["tokenstream",3]]],[[["pound",3],["tokenstream",3]]],[[["question",3],["tokenstream",3]]],[[["rarrow",3],["tokenstream",3]]],[[["larrow",3],["tokenstream",3]]],[[["rem",3],["tokenstream",3]]],[[["remeq",3],["tokenstream",3]]],[[["fatarrow",3],["tokenstream",3]]],[[["semi",3],["tokenstream",3]]],[[["shl",3],["tokenstream",3]]],[[["shleq",3],["tokenstream",3]]],[[["shr",3],["tokenstream",3]]],[[["shreq",3],["tokenstream",3]]],[[["star",3],["tokenstream",3]]],[[["sub",3],["tokenstream",3]]],[[["subeq",3],["tokenstream",3]]],[[["tilde",3],["tokenstream",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0],["abi",3]]],[[["",0],["abi",3]]],[[["",0],["abi",3]]],[[["",0],["anglebracketedgenericarguments",3]]],[[["",0],["anglebracketedgenericarguments",3]]],[[["",0],["anglebracketedgenericarguments",3]]],[[["",0],["attrstyle",4]]],[[["",0],["attrstyle",4]]],[[["",0],["attrstyle",4]]],[[["",0],["attribute",3]]],[[["",0],["attribute",3]]],[[["",0],["attribute",3]]],[[["",0],["barefnarg",3]]],[[["",0],["barefnarg",3]]],[[["",0],["barefnarg",3]]],[[["",0],["barefnargname",4]]],[[["",0],["barefnargname",4]]],[[["",0],["barefnargname",4]]],[[["",0],["binop",4]]],[[["",0],["binop",4]]],[[["",0],["binop",4]]],[[["",0],["binding",3]]],[[["",0],["binding",3]]],[[["",0],["binding",3]]],[[["",0],["boundlifetimes",3]]],[[["",0],["boundlifetimes",3]]],[[["",0],["boundlifetimes",3]]],[[["",0],["constparam",3]]],[[["",0],["constparam",3]]],[[["",0],["constparam",3]]],[[["",0],["constraint",3]]],[[["",0],["constraint",3]]],[[["",0],["constraint",3]]],[[["",0],["data",4]]],[[["",0],["data",4]]],[[["",0],["data",4]]],[[["",0],["dataenum",3]]],[[["",0],["dataenum",3]]],[[["",0],["dataenum",3]]],[[["",0],["datastruct",3]]],[[["",0],["datastruct",3]]],[[["",0],["datastruct",3]]],[[["",0],["dataunion",3]]],[[["",0],["dataunion",3]]],[[["",0],["dataunion",3]]],[[["",0],["deriveinput",3]]],[[["",0],["deriveinput",3]]],[[["",0],["deriveinput",3]]],[[["",0],["expr",4]]],[[["",0],["expr",4]]],[[["",0],["expr",4]]],[[["",0],["exprbinary",3]]],[[["",0],["exprbinary",3]]],[[["",0],["exprbinary",3]]],[[["",0],["exprcall",3]]],[[["",0],["exprcall",3]]],[[["",0],["exprcall",3]]],[[["",0],["exprcast",3]]],[[["",0],["exprcast",3]]],[[["",0],["exprcast",3]]],[[["",0],["exprfield",3]]],[[["",0],["exprfield",3]]],[[["",0],["exprfield",3]]],[[["",0],["exprindex",3]]],[[["",0],["exprindex",3]]],[[["",0],["exprindex",3]]],[[["",0],["exprlit",3]]],[[["",0],["exprlit",3]]],[[["",0],["exprlit",3]]],[[["",0],["exprparen",3]]],[[["",0],["exprparen",3]]],[[["",0],["exprparen",3]]],[[["",0],["exprpath",3]]],[[["",0],["exprpath",3]]],[[["",0],["exprpath",3]]],[[["",0],["exprunary",3]]],[[["",0],["exprunary",3]]],[[["",0],["exprunary",3]]],[[["",0],["exprverbatim",3]]],[[["",0],["exprverbatim",3]]],[[["",0],["exprverbatim",3]]],[[["",0],["field",3]]],[[["",0],["field",3]]],[[["",0],["field",3]]],[[["",0],["fields",4]]],[[["",0],["fields",4]]],[[["",0],["fields",4]]],[[["",0],["fieldsnamed",3]]],[[["",0],["fieldsnamed",3]]],[[["",0],["fieldsnamed",3]]],[[["",0],["fieldsunnamed",3]]],[[["",0],["fieldsunnamed",3]]],[[["",0],["fieldsunnamed",3]]],[[["",0],["genericargument",4]]],[[["",0],["genericargument",4]]],[[["",0],["genericargument",4]]],[[["",0],["genericparam",4]]],[[["",0],["genericparam",4]]],[[["",0],["genericparam",4]]],[[["",0],["generics",3]]],[[["",0],["generics",3]]],[[["",0],["generics",3]]],[[["",0],["ident",3]]],[[["",0],["ident",3]]],[[["",0],["ident",3]]],[[["",0],["index",3]]],[[["",0],["index",3]]],[[["",0],["index",3]]],[[["",0],["lifetime",3]]],[[["",0],["lifetime",3]]],[[["",0],["lifetime",3]]],[[["",0],["lifetimedef",3]]],[[["",0],["lifetimedef",3]]],[[["",0],["lifetimedef",3]]],[[["",0],["lit",4]]],[[["",0],["lit",4]]],[[["",0],["lit",4]]],[[["",0],["litbool",3]]],[[["",0],["litbool",3]]],[[["",0],["litbool",3]]],[[["",0],["litbyte",3]]],[[["",0],["litbyte",3]]],[[["",0],["litbyte",3]]],[[["",0],["litbytestr",3]]],[[["",0],["litbytestr",3]]],[[["",0],["litbytestr",3]]],[[["",0],["litchar",3]]],[[["",0],["litchar",3]]],[[["",0],["litchar",3]]],[[["",0],["litfloat",3]]],[[["",0],["litfloat",3]]],[[["",0],["litfloat",3]]],[[["",0],["litint",3]]],[[["",0],["litint",3]]],[[["",0],["litint",3]]],[[["",0],["litstr",3]]],[[["",0],["litstr",3]]],[[["",0],["litstr",3]]],[[["",0],["litverbatim",3]]],[[["",0],["litverbatim",3]]],[[["",0],["litverbatim",3]]],[[["",0],["macro",3]]],[[["",0],["macro",3]]],[[["",0],["macro",3]]],[[["",0],["macrodelimiter",4]]],[[["",0],["macrodelimiter",4]]],[[["",0],["macrodelimiter",4]]],[[["",0],["member",4]]],[[["",0],["member",4]]],[[["",0],["member",4]]],[[["",0],["meta",4]]],[[["",0],["meta",4]]],[[["",0],["meta",4]]],[[["",0],["metalist",3]]],[[["",0],["metalist",3]]],[[["",0],["metalist",3]]],[[["",0],["metanamevalue",3]]],[[["",0],["metanamevalue",3]]],[[["",0],["metanamevalue",3]]],[[["",0],["nestedmeta",4]]],[[["",0],["nestedmeta",4]]],[[["",0],["nestedmeta",4]]],[[["",0],["parenthesizedgenericarguments",3]]],[[["",0],["parenthesizedgenericarguments",3]]],[[["",0],["parenthesizedgenericarguments",3]]],[[["",0],["path",3]]],[[["",0],["path",3]]],[[["",0],["path",3]]],[[["",0],["patharguments",4]]],[[["",0],["patharguments",4]]],[[["",0],["patharguments",4]]],[[["",0],["pathsegment",3]]],[[["",0],["pathsegment",3]]],[[["",0],["pathsegment",3]]],[[["",0],["predicateeq",3]]],[[["",0],["predicateeq",3]]],[[["",0],["predicateeq",3]]],[[["",0],["predicatelifetime",3]]],[[["",0],["predicatelifetime",3]]],[[["",0],["predicatelifetime",3]]],[[["",0],["predicatetype",3]]],[[["",0],["predicatetype",3]]],[[["",0],["predicatetype",3]]],[[["",0],["qself",3]]],[[["",0],["qself",3]]],[[["",0],["qself",3]]],[[["",0],["returntype",4]]],[[["",0],["returntype",4]]],[[["",0],["returntype",4]]],[[["",0],["span",3]]],[[["",0],["span",3]]],[[["",0],["span",3]]],[[["",0],["traitbound",3]]],[[["",0],["traitbound",3]]],[[["",0],["traitbound",3]]],[[["",0],["traitboundmodifier",4]]],[[["",0],["traitboundmodifier",4]]],[[["",0],["traitboundmodifier",4]]],[[["",0],["type",4]]],[[["",0],["type",4]]],[[["",0],["type",4]]],[[["",0],["typearray",3]]],[[["",0],["typearray",3]]],[[["",0],["typearray",3]]],[[["",0],["typebarefn",3]]],[[["",0],["typebarefn",3]]],[[["",0],["typebarefn",3]]],[[["",0],["typegroup",3]]],[[["",0],["typegroup",3]]],[[["",0],["typegroup",3]]],[[["",0],["typeimpltrait",3]]],[[["",0],["typeimpltrait",3]]],[[["",0],["typeimpltrait",3]]],[[["",0],["typeinfer",3]]],[[["",0],["typeinfer",3]]],[[["",0],["typeinfer",3]]],[[["",0],["typemacro",3]]],[[["",0],["typemacro",3]]],[[["",0],["typemacro",3]]],[[["",0],["typenever",3]]],[[["",0],["typenever",3]]],[[["",0],["typenever",3]]],[[["",0],["typeparam",3]]],[[["",0],["typeparam",3]]],[[["",0],["typeparam",3]]],[[["",0],["typeparambound",4]]],[[["",0],["typeparambound",4]]],[[["",0],["typeparambound",4]]],[[["",0],["typeparen",3]]],[[["",0],["typeparen",3]]],[[["",0],["typeparen",3]]],[[["",0],["typepath",3]]],[[["",0],["typepath",3]]],[[["",0],["typepath",3]]],[[["",0],["typeptr",3]]],[[["",0],["typeptr",3]]],[[["",0],["typeptr",3]]],[[["",0],["typereference",3]]],[[["",0],["typereference",3]]],[[["",0],["typereference",3]]],[[["",0],["typeslice",3]]],[[["",0],["typeslice",3]]],[[["",0],["typeslice",3]]],[[["",0],["typetraitobject",3]]],[[["",0],["typetraitobject",3]]],[[["",0],["typetraitobject",3]]],[[["",0],["typetuple",3]]],[[["",0],["typetuple",3]]],[[["",0],["typetuple",3]]],[[["",0],["typeverbatim",3]]],[[["",0],["typeverbatim",3]]],[[["",0],["typeverbatim",3]]],[[["",0],["unop",4]]],[[["",0],["unop",4]]],[[["",0],["unop",4]]],[[["",0],["variant",3]]],[[["",0],["variant",3]]],[[["",0],["variant",3]]],[[["",0],["viscrate",3]]],[[["",0],["viscrate",3]]],[[["",0],["viscrate",3]]],[[["",0],["vispublic",3]]],[[["",0],["vispublic",3]]],[[["",0],["vispublic",3]]],[[["",0],["visrestricted",3]]],[[["",0],["visrestricted",3]]],[[["",0],["visrestricted",3]]],[[["",0],["visibility",4]]],[[["",0],["visibility",4]]],[[["",0],["visibility",4]]],[[["",0],["whereclause",3]]],[[["",0],["whereclause",3]]],[[["",0],["whereclause",3]]],[[["",0],["wherepredicate",4]]],[[["",0],["wherepredicate",4]]],[[["",0],["wherepredicate",4]]]],"p":[[4,"BinOp"],[4,"PathArguments"],[4,"Expr"],[4,"Type"],[4,"GenericArgument"],[4,"Lit"],[4,"MacroDelimiter"],[4,"GenericParam"],[4,"StrStyle"],[4,"Visibility"],[4,"ReturnType"],[4,"UnOp"],[4,"Data"],[4,"WherePredicate"],[4,"FloatSuffix"],[4,"IntSuffix"],[4,"AttrStyle"],[4,"TypeParamBound"],[4,"Meta"],[4,"NestedMeta"],[4,"TraitBoundModifier"],[4,"Fields"],[4,"Member"],[4,"BareFnArgName"],[3,"TypeBareFn"],[3,"TypeReference"],[3,"Lifetime"],[3,"ExprCall"],[3,"AngleBracketedGenericArguments"],[3,"PathSegment"],[3,"ExprCast"],[3,"QSelf"],[3,"TypeGenerics"],[3,"Variant"],[3,"Field"],[3,"ExprBinary"],[3,"ExprUnary"],[3,"ExprLit"],[3,"ExprField"],[3,"ExprIndex"],[3,"ExprPath"],[3,"ExprParen"],[3,"TypeParam"],[3,"LifetimeDef"],[3,"ConstParam"],[3,"DeriveInput"],[3,"Macro"],[3,"TypeNever"],[3,"Ident"],[3,"Attribute"],[3,"MetaList"],[3,"MetaNameValue"],[3,"FieldsNamed"],[3,"FieldsUnnamed"],[3,"VisPublic"],[3,"VisCrate"],[3,"VisRestricted"],[3,"ExprBox"],[3,"ExprInPlace"],[3,"ExprArray"],[3,"ExprMethodCall"],[3,"ExprTuple"],[3,"ExprType"],[3,"ExprLet"],[3,"ExprIf"],[3,"ExprWhile"],[3,"ExprForLoop"],[3,"ExprLoop"],[3,"ExprMatch"],[3,"ExprClosure"],[3,"ExprUnsafe"],[3,"ExprBlock"],[3,"ExprAssign"],[3,"ExprAssignOp"],[3,"ExprRange"],[3,"ExprReference"],[3,"ExprBreak"],[3,"ExprContinue"],[3,"ExprReturn"],[3,"ExprMacro"],[3,"ExprStruct"],[3,"ExprRepeat"],[3,"ExprGroup"],[3,"ExprTry"],[3,"ExprAsync"],[3,"ExprTryBlock"],[3,"ExprYield"],[3,"ExprVerbatim"],[3,"Index"],[3,"Generics"],[3,"ImplGenerics"],[3,"Turbofish"],[3,"BoundLifetimes"],[3,"TraitBound"],[3,"WhereClause"],[3,"PredicateType"],[3,"PredicateLifetime"],[3,"PredicateEq"],[3,"LitStr"],[3,"LitByteStr"],[3,"LitByte"],[3,"LitChar"],[3,"LitInt"],[3,"LitFloat"],[3,"LitBool"],[3,"LitVerbatim"],[3,"DataStruct"],[3,"DataEnum"],[3,"DataUnion"],[3,"TypeSlice"],[3,"TypeArray"],[3,"TypePtr"],[3,"TypeTuple"],[3,"TypePath"],[3,"TypeTraitObject"],[3,"TypeImplTrait"],[3,"TypeParen"],[3,"TypeGroup"],[3,"TypeInfer"],[3,"TypeMacro"],[3,"TypeVerbatim"],[3,"Abi"],[3,"BareFnArg"],[3,"Path"],[3,"Binding"],[3,"Constraint"],[3,"ParenthesizedGenericArguments"],[13,"Inner"],[13,"Named"],[13,"Wild"],[13,"Add"],[13,"Sub"],[13,"Mul"],[13,"Div"],[13,"Rem"],[13,"And"],[13,"Or"],[13,"BitXor"],[13,"BitAnd"],[13,"BitOr"],[13,"Shl"],[13,"Shr"],[13,"Eq"],[13,"Lt"],[13,"Le"],[13,"Ne"],[13,"Ge"],[13,"Gt"],[13,"AddEq"],[13,"SubEq"],[13,"MulEq"],[13,"DivEq"],[13,"RemEq"],[13,"BitXorEq"],[13,"BitAndEq"],[13,"BitOrEq"],[13,"ShlEq"],[13,"ShrEq"],[13,"Struct"],[13,"Enum"],[13,"Union"],[13,"Box"],[13,"InPlace"],[13,"Array"],[13,"Call"],[13,"MethodCall"],[13,"Tuple"],[13,"Binary"],[13,"Unary"],[13,"Lit"],[13,"Cast"],[13,"Type"],[13,"Let"],[13,"If"],[13,"While"],[13,"ForLoop"],[13,"Loop"],[13,"Match"],[13,"Closure"],[13,"Unsafe"],[13,"Block"],[13,"Assign"],[13,"AssignOp"],[13,"Field"],[13,"Index"],[13,"Range"],[13,"Path"],[13,"Reference"],[13,"Break"],[13,"Continue"],[13,"Return"],[13,"Macro"],[13,"Struct"],[13,"Repeat"],[13,"Paren"],[13,"Group"],[13,"Try"],[13,"Async"],[13,"TryBlock"],[13,"Yield"],[13,"Verbatim"],[13,"Named"],[13,"Unnamed"],[13,"Lifetime"],[13,"Type"],[13,"Binding"],[13,"Constraint"],[13,"Const"],[13,"Type"],[13,"Lifetime"],[13,"Const"],[13,"Str"],[13,"ByteStr"],[13,"Byte"],[13,"Char"],[13,"Int"],[13,"Float"],[13,"Bool"],[13,"Verbatim"],[13,"Paren"],[13,"Brace"],[13,"Bracket"],[13,"Named"],[13,"Unnamed"],[13,"Word"],[13,"List"],[13,"NameValue"],[13,"Meta"],[13,"Literal"],[13,"AngleBracketed"],[13,"Parenthesized"],[13,"Type"],[13,"Raw"],[13,"Maybe"],[13,"Slice"],[13,"Array"],[13,"Ptr"],[13,"Reference"],[13,"BareFn"],[13,"Never"],[13,"Tuple"],[13,"Path"],[13,"TraitObject"],[13,"ImplTrait"],[13,"Paren"],[13,"Group"],[13,"Infer"],[13,"Macro"],[13,"Verbatim"],[13,"Trait"],[13,"Lifetime"],[13,"Deref"],[13,"Not"],[13,"Neg"],[13,"Public"],[13,"Crate"],[13,"Restricted"],[13,"Type"],[13,"Lifetime"],[13,"Eq"],[3,"TokenBuffer"],[3,"Cursor"],[8,"IdentExt"],[8,"Parser"],[3,"Lookahead1"],[3,"ParseBuffer"],[3,"Error"],[3,"StepCursor"],[8,"Parse"],[4,"Pair"],[3,"Pairs"],[3,"PairsMut"],[3,"Iter"],[3,"IterMut"],[3,"Punctuated"],[3,"IntoPairs"],[3,"IntoIter"],[13,"Punctuated"],[13,"End"],[8,"Spanned"],[3,"Underscore"],[3,"Abstract"],[3,"As"],[3,"Async"],[3,"Auto"],[3,"Become"],[3,"Box"],[3,"Break"],[3,"Const"],[3,"Continue"],[3,"Crate"],[3,"Default"],[3,"Do"],[3,"Dyn"],[3,"Else"],[3,"Enum"],[3,"Existential"],[3,"Extern"],[3,"Final"],[3,"Fn"],[3,"For"],[3,"If"],[3,"Impl"],[3,"In"],[3,"Let"],[3,"Loop"],[3,"Macro"],[3,"Match"],[3,"Mod"],[3,"Move"],[3,"Mut"],[3,"Override"],[3,"Priv"],[3,"Pub"],[3,"Ref"],[3,"Return"],[3,"SelfType"],[3,"SelfValue"],[3,"Static"],[3,"Struct"],[3,"Super"],[3,"Trait"],[3,"Try"],[3,"Type"],[3,"Typeof"],[3,"Union"],[3,"Unsafe"],[3,"Unsized"],[3,"Use"],[3,"Virtual"],[3,"Where"],[3,"While"],[3,"Yield"],[3,"Add"],[3,"AddEq"],[3,"And"],[3,"AndAnd"],[3,"AndEq"],[3,"At"],[3,"Bang"],[3,"Caret"],[3,"CaretEq"],[3,"Colon"],[3,"Colon2"],[3,"Comma"],[3,"Div"],[3,"DivEq"],[3,"Dollar"],[3,"Dot"],[3,"Dot2"],[3,"Dot3"],[3,"DotDotEq"],[3,"Eq"],[3,"EqEq"],[3,"Ge"],[3,"Gt"],[3,"Le"],[3,"Lt"],[3,"MulEq"],[3,"Ne"],[3,"Or"],[3,"OrEq"],[3,"OrOr"],[3,"Pound"],[3,"Question"],[3,"RArrow"],[3,"LArrow"],[3,"Rem"],[3,"RemEq"],[3,"FatArrow"],[3,"Semi"],[3,"Shl"],[3,"ShlEq"],[3,"Shr"],[3,"ShrEq"],[3,"Star"],[3,"Sub"],[3,"SubEq"],[3,"Tilde"],[3,"Brace"],[3,"Bracket"],[3,"Paren"],[3,"Group"],[8,"Visit"]]},\
"synstructure":{"doc":"This crate provides helper types for matching against enum …","t":[4,4,3,13,13,13,13,13,13,13,13,3,3,3,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,12,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11],"n":["AddBounds","BindStyle","BindingInfo","Both","Fields","Generics","Move","MoveMut","None","Ref","RefMut","Structure","VariantAst","VariantInfo","add_bounds","add_impl_generic","add_trait_bounds","ast","ast","ast","attrs","bind_with","bind_with","binding","binding_name","binding_name","bindings","bindings_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bound_impl","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","construct","decl_derive","discriminant","each","each","each_variant","eq","eq","eq","eq","eq","eq","fields","filter","filter","filter_variants","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","from","from","from","from","from","from","gen_impl","hash","hash","hash","hash","hash","hash","ident","into","into","into","into","into","into","ne","ne","ne","ne","new","omitted_bindings","omitted_variants","pat","pat","prefix","referenced_ty_params","referenced_ty_params","referenced_ty_params","remove_binding","remove_variant","span","span","style","test_derive","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_tokens","to_tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unbound_impl","unpretty_print","unsafe_bound_impl","unsafe_unbound_impl","variants","variants_mut"],"q":["synstructure","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Changes how bounds are added","The type of binding to use when generating a pattern.","Information about a specific binding. This contains both …","Add for fields and generics","Fields only","Generics only","<code>x</code>","<code>mut x</code>","None","<code>ref x</code>","<code>ref mut x</code>","A wrapper around a <code>syn::DeriveInput</code> which provides …","This type is similar to <code>syn</code>’s <code>Variant</code> type, however each …","A wrapper around a <code>syn::DeriveInput</code>’s variant which …","Specify which bounds should be generated by …","Adds an <code>impl&lt;&gt;</code> generic parameter. This can be used when …","Add trait bounds for a trait with the given path for each …","Returns a reference to the underlying <code>syn</code> AST node which …","Returns a <code>VariantAst</code> object which contains references to …","Returns a reference to the underlying <code>syn</code> AST node which …","","Updates the <code>BindStyle</code> for each of the passed-in fields by …","Updates the <code>BindStyle</code> for each of the passed-in fields by …","The name which this BindingInfo will bind to.","Updates the binding name for each fo the passed-in fields …","Updates the binding name for each fo the passed-in fields …","Returns a slice of the bindings in this Variant.","Returns a mut slice of the bindings in this Variant.","","","","","","","","","","","","","NOTE: This methods’ features are superceded by …","","","","","","","","","","","","","Generates the token stream required to construct the …","The <code>decl_derive!</code> macro declares a custom derive wrapper. …","","Runs the passed-in function once for each bound field, …","Runs the passed-in function once for each bound field, …","Runs the passed-in function once for each variant, passing …","","","","","","","","Filter the bindings created by this <code>Variant</code> object. This …","Filter the bindings created by this <code>Structure</code> object. This …","Filter the variants matched by this <code>Structure</code> object. This …","","","","","","","Runs the passed-in function once for each bound field, …","Runs the passed-in function once for each bound field, …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Generate an impl block for the given struct. This impl …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Create a new <code>Structure</code> with the variants and fields from …","True if any bindings were omitted due to a <code>filter</code> call.","True if any variants were omitted due to a <code>filter_variants</code> …","Generates the pattern fragment for this field binding.","Generates the match-arm pattern which could be used to …","","Returns a list of the type parameters which are referenced …","Returns a list of the type parameters which are referenced …","Returns a list of the type parameters which are refrenced …","Remove the binding at the given index.","Remove the variant at the given index.","","","The type of binding which this BindingInfo will create.","Run a test on a custom derive. This macro expands both the …","","","","","","","","","","","","","","","","","","","","","","","","","","","NOTE: This methods’ features are superceded by …","Dumps an unpretty version of a tokenstream. Takes any type …","NOTE: This methods’ features are superceded by …","NOTE: This methods’ features are superceded by …","Returns a slice of the variants in this Structure.","Returns a mut slice of the variants in this Structure."],"i":[0,0,0,1,1,1,2,2,1,2,2,0,0,0,3,3,3,4,5,3,6,5,3,4,5,3,5,5,1,2,4,6,5,3,1,2,4,6,5,3,3,1,2,4,6,5,3,1,2,4,6,5,3,5,0,6,5,3,3,1,2,4,6,5,3,6,5,3,3,1,2,4,6,5,3,5,3,1,2,4,6,5,3,3,1,2,4,6,5,3,6,1,2,4,6,5,3,4,6,5,3,3,5,3,4,5,5,4,5,3,5,3,2,4,4,0,1,2,4,6,5,3,2,4,1,2,4,6,5,3,1,2,4,6,5,3,1,2,4,6,5,3,3,0,3,3,3,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["structure",3],["addbounds",4]],["structure",3]],[[["structure",3],["genericparam",4]],["structure",3]],[[["structure",3],["traitbound",3],["option",4],["addbounds",4]]],[[["bindinginfo",3]],["field",3]],[[["variantinfo",3]],["variantast",3]],[[["structure",3]],["deriveinput",3]],null,[[["variantinfo",3]],["variantinfo",3]],[[["structure",3]],["structure",3]],null,[[["variantinfo",3]],["variantinfo",3]],[[["structure",3]],["structure",3]],[[["variantinfo",3]]],[[["variantinfo",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["structure",3],["totokens",8],["totokens",8]],["tokenstream",3]],[[["addbounds",4]],["addbounds",4]],[[["bindstyle",4]],["bindstyle",4]],[[["bindinginfo",3]],["bindinginfo",3]],[[["variantast",3]],["variantast",3]],[[["variantinfo",3]],["variantinfo",3]],[[["structure",3]],["structure",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["variantinfo",3]],["tokenstream",3]],null,null,[[["variantinfo",3]],["tokenstream",3]],[[["structure",3]],["tokenstream",3]],[[["structure",3]],["tokenstream",3]],[[["addbounds",4],["addbounds",4]],["bool",0]],[[["bindstyle",4],["bindstyle",4]],["bool",0]],[[["bindinginfo",3],["bindinginfo",3]],["bool",0]],[[["variantast",3],["variantast",3]],["bool",0]],[[["variantinfo",3],["variantinfo",3]],["bool",0]],[[["structure",3],["structure",3]],["bool",0]],null,[[["variantinfo",3]],["variantinfo",3]],[[["structure",3]],["structure",3]],[[["structure",3]],["structure",3]],[[["addbounds",4],["formatter",3]],["result",6]],[[["bindstyle",4],["formatter",3]],["result",6]],[[["bindinginfo",3],["formatter",3]],["result",6]],[[["variantast",3],["formatter",3]],["result",6]],[[["variantinfo",3],["formatter",3]],["result",6]],[[["structure",3],["formatter",3]],["result",6]],[[["variantinfo",3]],["tokenstream",3]],[[["structure",3]],["tokenstream",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["structure",3],["tokenstream",3]],["tokenstream",3]],[[["addbounds",4],["",0]]],[[["bindstyle",4],["",0]]],[[["bindinginfo",3],["",0]]],[[["variantast",3],["",0]]],[[["variantinfo",3],["",0]]],[[["structure",3],["",0]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[["bindinginfo",3],["bindinginfo",3]],["bool",0]],[[["variantast",3],["variantast",3]],["bool",0]],[[["variantinfo",3],["variantinfo",3]],["bool",0]],[[["structure",3],["structure",3]],["bool",0]],[[["deriveinput",3]],["structure",3]],[[["variantinfo",3]],["bool",0]],[[["structure",3]],["bool",0]],[[["bindinginfo",3]],["tokenstream",3]],[[["variantinfo",3]],["tokenstream",3]],null,[[["bindinginfo",3]],["vec",3,[["ident",3]]]],[[["variantinfo",3]],["vec",3,[["ident",3]]]],[[["structure",3]],["vec",3,[["ident",3]]]],[[["variantinfo",3],["usize",0]],["variantinfo",3]],[[["structure",3],["usize",0]],["structure",3]],[[["",0]],["span",3]],[[["",0]],["span",3]],null,null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["bindstyle",4],["tokenstream",3]]],[[["bindinginfo",3],["tokenstream",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["structure",3],["totokens",8],["totokens",8]],["tokenstream",3]],[[["display",8]],["string",3]],[[["structure",3],["totokens",8],["totokens",8]],["tokenstream",3]],[[["structure",3],["totokens",8],["totokens",8]],["tokenstream",3]],[[["structure",3]]],[[["structure",3]]]],"p":[[4,"AddBounds"],[4,"BindStyle"],[3,"Structure"],[3,"BindingInfo"],[3,"VariantInfo"],[3,"VariantAst"]]},\
"time":{"doc":"Simple time handling.","t":[3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,4,3,3,3,3,3,13,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,12,11,11,5,11,5,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,12,12,12],"n":["Duration","InvalidDay","InvalidDayOfMonth","InvalidDayOfWeek","InvalidDayOfYear","InvalidFormatSpecifier","InvalidHour","InvalidMinute","InvalidMonth","InvalidSecond","InvalidSecondsSinceEpoch","InvalidTime","InvalidYear","InvalidZoneOffset","MissingFormatConverter","OutOfRangeError","ParseError","PreciseTime","SteadyTime","Timespec","Tm","TmFmt","UnexpectedCharacter","add","add","add","add","asctime","at","at_utc","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_sub","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","ctime","days","description","description","div","empty_tm","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_std","get_time","hash","hash","hash","hours","into","into","into","into","into","into","into","into","is_zero","max_value","microseconds","milliseconds","min_value","minutes","mul","nanoseconds","ne","ne","ne","ne","ne","ne","neg","new","now","now","now","now_utc","nsec","num_days","num_hours","num_microseconds","num_milliseconds","num_minutes","num_nanoseconds","num_seconds","num_weeks","partial_cmp","partial_cmp","partial_cmp","partial_cmp","precise_time_ns","precise_time_s","rfc3339","rfc822","rfc822z","sec","seconds","span","strftime","strftime","strptime","sub","sub","sub","sub","sub","sub","sub","tm_hour","tm_isdst","tm_mday","tm_min","tm_mon","tm_nsec","tm_sec","tm_utcoff","tm_wday","tm_yday","tm_year","to","to_local","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_std","to_string","to_string","to_string","to_string","to_string","to_timespec","to_utc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","tzset","weeks","zero","0","0","1"],"q":["timetime::ParseError","",""],"d":["ISO 8601 time duration with nanosecond precision. This …","","","","","","","","","","","","","","","Represents error when converting <code>Duration</code> to/from a …","","An opaque structure representing a moment in time.","A structure representing a moment in time.","A record specifying a time value in seconds and …","Holds a calendar date and time broken down into its …","A wrapper around a <code>Tm</code> and format string that implements …","","","","","The resulting Tm is in UTC.","Returns a TmFmt that outputs according to the <code>asctime</code> …","Returns the specified time in the local timezone","Returns the specified time in UTC","","","","","","","","","","","","","","","","","Add two durations, returning <code>None</code> if overflow occurred.","Subtract two durations, returning <code>None</code> if overflow …","","","","","","","","","","","","","","","","","","","Returns a TmFmt that outputs according to the <code>asctime</code> …","Makes a new <code>Duration</code> with given number of days. Equivalent …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>time::Duration</code> object from <code>std::time::Duration</code>","Returns the current time as a <code>timespec</code> containing the …","","","","Makes a new <code>Duration</code> with given number of hours. …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the duration equals <code>Duration::zero()</code>.","The maximum possible <code>Duration</code>: <code>i64::MAX</code> milliseconds.","Makes a new <code>Duration</code> with given number of microseconds.","Makes a new <code>Duration</code> with given number of milliseconds.","The minimum possible <code>Duration</code>: <code>i64::MIN</code> milliseconds.","Makes a new <code>Duration</code> with given number of minutes. …","","Makes a new <code>Duration</code> with given number of nanoseconds.","","","","","","","","","Returns the current time in the local timezone","Returns a <code>PreciseTime</code> representing the current moment in …","Returns a <code>SteadyTime</code> representing the current moment in …","Returns the current time in UTC","","Returns the total number of whole days in the duration.","Returns the total number of whole hours in the duration.","Returns the total number of whole microseconds in the …","Returns the total number of whole milliseconds in the …","Returns the total number of whole minutes in the duration.","Returns the total number of whole nanoseconds in the …","Returns the total number of whole seconds in the duration.","Returns the total number of whole weeks in the duration.","","","","","Returns the current value of a high-resolution performance …","Returns the current value of a high-resolution performance …","Returns a TmFmt that outputs according to RFC 3339. RFC …","Returns a TmFmt that outputs according to RFC 822.","Returns a TmFmt that outputs according to RFC 822 with …","","Makes a new <code>Duration</code> with given number of seconds. Panics …","Runs a closure, returning the duration of time it took to …","Formats the time according to the format string.","Formats the time according to the format string.","Parses the time from the string according to the format …","","","","","","","The resulting Tm is in UTC.","Hours after midnight - [0, 23]","Daylight Saving Time flag.","Day of the month - [1, 31]","Minutes after the hour - [0, 59]","Months since January - [0, 11]","Nanoseconds after the second - [0, 109 - 1]","Seconds after the minute - [0, 60]","Identifies the time zone that was used to compute this …","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, …, 6 …","Days since January 1 - [0, 365]","Years since 1900","Returns a <code>Duration</code> representing the span of time from the …","Convert time to the local timezone","","","","","","","","Creates a <code>std::time::Duration</code> object from <code>time::Duration</code>","","","","","","Convert time to the seconds from January 1, 1970","Convert time to the UTC","","","","","","","","","","","","","","","","","","","","","","","","","","Makes a new <code>Duration</code> with given number of weeks. …","A duration where the stored seconds and nanoseconds are …","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,2,3,4,5,5,0,0,2,6,3,7,4,5,1,8,2,6,3,7,4,5,1,8,2,2,2,6,3,7,4,5,1,2,6,3,7,4,5,1,2,3,4,5,5,2,6,1,2,0,2,6,3,4,5,1,2,2,6,6,3,4,4,5,1,1,8,8,2,6,3,7,4,5,1,8,2,0,2,3,5,2,2,6,3,7,4,5,1,8,2,2,2,2,2,2,2,2,2,6,3,4,5,1,2,3,0,7,4,0,3,2,2,2,2,2,2,2,2,2,3,4,5,0,0,5,5,5,3,2,2,0,5,0,2,3,3,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,7,5,2,6,3,7,4,5,1,2,2,6,4,1,8,5,5,2,6,3,7,4,5,1,8,2,6,3,7,4,5,1,8,2,6,3,7,4,5,1,8,0,2,2,9,10,10],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["duration",3],["duration",3]],["duration",3]],[[["timespec",3],["duration",3]],["timespec",3]],[[["steadytime",3],["duration",3]],["steadytime",3]],[[["tm",3],["duration",3]],["tm",3]],[[["tm",3]],["tmfmt",3]],[[["timespec",3]],["tm",3]],[[["timespec",3]],["tm",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["duration",3],["duration",3]],["option",4,[["duration",3]]]],[[["duration",3],["duration",3]],["option",4,[["duration",3]]]],[[["duration",3]],["duration",3]],[[["outofrangeerror",3]],["outofrangeerror",3]],[[["timespec",3]],["timespec",3]],[[["precisetime",3]],["precisetime",3]],[[["steadytime",3]],["steadytime",3]],[[["tm",3]],["tm",3]],[[["parseerror",4]],["parseerror",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["duration",3],["duration",3]],["ordering",4]],[[["timespec",3],["timespec",3]],["ordering",4]],[[["steadytime",3],["steadytime",3]],["ordering",4]],[[["tm",3],["tm",3]],["ordering",4]],[[["tm",3]],["tmfmt",3]],[[["i64",0]],["duration",3]],[[["outofrangeerror",3]],["str",0]],[[["parseerror",4]],["str",0]],[[["duration",3],["i32",0]],["duration",3]],[[],["tm",3]],[[["duration",3],["duration",3]],["bool",0]],[[["outofrangeerror",3],["outofrangeerror",3]],["bool",0]],[[["timespec",3],["timespec",3]],["bool",0]],[[["steadytime",3],["steadytime",3]],["bool",0]],[[["tm",3],["tm",3]],["bool",0]],[[["parseerror",4],["parseerror",4]],["bool",0]],[[["duration",3],["formatter",3]],["result",6]],[[["duration",3],["formatter",3]],["result",6]],[[["outofrangeerror",3],["formatter",3]],["result",6]],[[["outofrangeerror",3],["formatter",3]],["result",6]],[[["timespec",3],["formatter",3]],["result",6]],[[["steadytime",3],["formatter",3]],["result",6]],[[["steadytime",3],["formatter",3]],["result",6]],[[["tm",3],["formatter",3]],["result",6]],[[["parseerror",4],["formatter",3]],["result",6]],[[["parseerror",4],["formatter",3]],["result",6]],[[["tmfmt",3],["formatter",3]],["result",6]],[[["tmfmt",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["stdduration",3]],["result",4,[["duration",3],["outofrangeerror",3]]]],[[],["timespec",3]],[[["duration",3],["",0]]],[[["timespec",3],["",0]]],[[["tm",3],["",0]]],[[["i64",0]],["duration",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["duration",3]],["bool",0]],[[],["duration",3]],[[["i64",0]],["duration",3]],[[["i64",0]],["duration",3]],[[],["duration",3]],[[["i64",0]],["duration",3]],[[["duration",3],["i32",0]],["duration",3]],[[["i64",0]],["duration",3]],[[["duration",3],["duration",3]],["bool",0]],[[["outofrangeerror",3],["outofrangeerror",3]],["bool",0]],[[["timespec",3],["timespec",3]],["bool",0]],[[["steadytime",3],["steadytime",3]],["bool",0]],[[["tm",3],["tm",3]],["bool",0]],[[["parseerror",4],["parseerror",4]],["bool",0]],[[["duration",3]],["duration",3]],[[["i64",0],["i32",0]],["timespec",3]],[[],["tm",3]],[[],["precisetime",3]],[[],["steadytime",3]],[[],["tm",3]],null,[[["duration",3]],["i64",0]],[[["duration",3]],["i64",0]],[[["duration",3]],["option",4,[["i64",0]]]],[[["duration",3]],["i64",0]],[[["duration",3]],["i64",0]],[[["duration",3]],["option",4,[["i64",0]]]],[[["duration",3]],["i64",0]],[[["duration",3]],["i64",0]],[[["duration",3],["duration",3]],["option",4,[["ordering",4]]]],[[["timespec",3],["timespec",3]],["option",4,[["ordering",4]]]],[[["steadytime",3],["steadytime",3]],["option",4,[["ordering",4]]]],[[["tm",3],["tm",3]],["option",4,[["ordering",4]]]],[[],["u64",0]],[[],["f64",0]],[[["tm",3]],["tmfmt",3]],[[["tm",3]],["tmfmt",3]],[[["tm",3]],["tmfmt",3]],null,[[["i64",0]],["duration",3]],[[],["duration",3]],[[["str",0],["tm",3]],["result",4,[["string",3],["parseerror",4]]]],[[["tm",3],["str",0]],["result",4,[["tmfmt",3],["parseerror",4]]]],[[["str",0],["str",0]],["result",4,[["tm",3],["parseerror",4]]]],[[["duration",3],["duration",3]],["duration",3]],[[["timespec",3],["duration",3]],["timespec",3]],[[["timespec",3],["timespec",3]],["duration",3]],[[["steadytime",3],["duration",3]],["steadytime",3]],[[["steadytime",3],["steadytime",3]],["duration",3]],[[["tm",3],["tm",3]],["duration",3]],[[["tm",3],["duration",3]],["tm",3]],null,null,null,null,null,null,null,null,null,null,null,[[["precisetime",3],["precisetime",3]],["duration",3]],[[["tm",3]],["tm",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["duration",3]],["result",4,[["stdduration",3],["outofrangeerror",3]]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["tm",3]],["timespec",3]],[[["tm",3]],["tm",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[["i64",0]],["duration",3]],[[],["duration",3]],null,null,null],"p":[[4,"ParseError"],[3,"Duration"],[3,"Timespec"],[3,"SteadyTime"],[3,"Tm"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"TmFmt"],[13,"InvalidFormatSpecifier"],[13,"UnexpectedCharacter"]]},\
"tokio":{"doc":"A runtime for writing reliable, asynchronous, and slim …","t":[0,0,0,0,0,0,0,0,5,0,2,0,0,0,5,3,8,8,16,16,3,3,3,3,16,16,2,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,5,5,11,0,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,5,11,11,0,11,11,11,11,11,11,11,11,11,11,5,11,5,5,5,5,5,11,5,11,5,11,11,11,11,11,11,11,11,11,11,5,11,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,11,11,11,11,11,11,11,5,11,11,11,13,13,13,13,8,8,13,13,13,13,3,13,13,13,3,4,13,13,13,13,3,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,8,3,3,13,3,3,13,6,3,13,3,3,3,13,13,13,13,13,13,8,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,11,11,11,11,11,5,11,5,11,11,5,11,5,10,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,5,11,11,11,11,11,11,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,4,8,4,8,16,16,16,8,16,8,8,16,16,16,13,13,6,8,13,13,8,16,16,8,8,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,10,0,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,12,12,13,3,13,13,3,3,13,3,4,3,3,16,16,16,3,4,8,3,3,3,3,3,3,8,16,16,8,3,3,8,3,16,16,3,3,3,3,3,3,4,3,3,3,13,3,3,3,3,3,3,3,3,3,3,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,11,5,11,5,10,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,11,11,11,5,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,13,3,3,3,3,3,3,3,3,3,16,3,3,13,3,3,3,3,3,3,3,3,3,3,3,16,3,3,3,3,3,3,3,4,3,3,3,3,3,3,3,13,3,3,3,3,3,3,3,8,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,11,11,11,11,11,11,11,11,5,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,12,12,12,12,3,3,11,11,11,11,11,11,11,11,11,11,11,3,8,8,3,3,3,3,3,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,5,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,5,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,5,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,8],"n":["clock","codec","executor","fs","io","net","prelude","reactor","run","runtime","spawn","sync","timer","util","now","BytesCodec","Decoder","Encoder","Error","Error","Framed","FramedParts","FramedRead","FramedWrite","Item","Item","LengthDelimitedCodec","LinesCodec","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","close","close","close","cmp","cmp","codec","codec","codec_mut","decode","decode","decode","decode_eof","decode_eof","decoder","decoder_mut","encode","encode","encode","encoder","encoder_mut","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","framed","from","from","from","from","from","from","from_parts","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","hash","hash","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_parts","io","length_delimited","max_length","ne","ne","new","new","new","new","new","new","new_with_max_length","partial_cmp","partial_cmp","poll","poll","poll","poll_complete","poll_complete","poll_complete","read_buf","start_send","start_send","start_send","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","write_buf","Builder","FrameTooBig","LengthDelimitedCodec","big_endian","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","decode","description","encode","fmt","fmt","fmt","fmt","from","from","from","into","into","into","length_adjustment","length_field_length","length_field_offset","little_endian","max_frame_length","max_frame_length","native_endian","new","new","new_codec","new_framed","new_read","new_write","num_skip","set_max_frame_length","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","DefaultExecutor","Executor","Spawn","SpawnError","TypedExecutor","at_capacity","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","current","description","execute","fmt","fmt","fmt","fmt","from","from","from","into","into","into","into_future","is_at_capacity","is_shutdown","shutdown","spawn","spawn","spawn","spawn","spawn","status","status","status","status","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","File","OpenOptions","ReadFile","WriteFile","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","create","create_dir","create_dir_all","drop","file","flush","fmt","fmt","fmt","from","from","from","from_std","hard_link","into","into","into","into_future","into_future","into_std","metadata","metadata","open","os","poll","poll","poll_metadata","poll_seek","poll_set_len","poll_set_permissions","poll_sync_all","poll_sync_data","poll_try_clone","prepare_uninitialized_buffer","read","read","read_dir","read_link","remove_dir","remove_file","rename","seek","set_permissions","shutdown","symlink_metadata","try_clone","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write","CloneFuture","CreateFuture","File","MetadataFuture","OpenFuture","OpenOptions","SeekFuture","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create","create_new","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","into","into_future","into_future","into_future","into_future","into_future","new","open","poll","poll","poll","poll","poll","read","to_owned","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","write","unix","SymlinkFuture","borrow","borrow_mut","fmt","from","into","into_future","poll","symlink","try_from","try_into","type_id","AddrInUse","AddrNotAvailable","AlreadyExists","ArgumentListTooLong","AsyncRead","AsyncWrite","BrokenPipe","ConnectionAborted","ConnectionRefused","ConnectionReset","Copy","CrossesDevices","Deadlock","DirectoryNotEmpty","Error","ErrorKind","ExecutableFileBusy","FileTooLarge","FilesystemLoop","FilesystemQuotaExceeded","Flush","HostUnreachable","Interrupted","InvalidData","InvalidFilename","InvalidInput","IsADirectory","Lines","NetworkDown","NetworkUnreachable","NotADirectory","NotConnected","NotFound","NotSeekable","Other","OutOfMemory","PermissionDenied","Read","ReadExact","ReadHalf","ReadOnlyFilesystem","ReadToEnd","ReadUntil","ResourceBusy","Result","Shutdown","StaleNetworkFileHandle","Stderr","Stdin","Stdout","StorageFull","TimedOut","TooManyLinks","UnexpectedEof","Unsupported","WouldBlock","Write","WriteAll","WriteHalf","WriteZero","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","by_ref","by_ref","bytes","cause","chain","clone","clone_into","cmp","copy","description","eq","flush","flush","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","framed","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw_os_error","get_mut","get_ref","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_inner","into_inner","is_read_vectored","is_write_vectored","kind","last_os_error","lines","new","other","partial_cmp","poll","poll","poll","poll","poll","poll","poll","poll","poll_flush","poll_read","poll_write","prepare_uninitialized_buffer","prepare_uninitialized_buffer","raw_os_error","read","read","read","read","read_buf","read_buf","read_buf","read_buf_exact","read_exact","read_exact","read_to_end","read_to_end","read_to_string","read_until","read_vectored","shutdown","shutdown","shutdown","shutdown","shutdown","source","split","stderr","stdin","stdout","take","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsplit","unsplit","write","write","write","write","write_all","write_all","write_all_vectored","write_buf","write_buf","write_fmt","write_vectored","TcpListener","TcpStream","UdpFramed","UdpSocket","UnixDatagram","UnixDatagramFramed","UnixListener","UnixStream","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","as_raw_fd","bind","bind","bind","bind","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast","close","close","connect","connect","connect","connect","connect_std","flush","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_std","from_std","from_std","from_std","from_std","from_std","get_mut","get_mut","get_ref","get_ref","incoming","incoming","into","into","into","into","into","into","into","into","into_inner","join_multicast_v4","join_multicast_v6","keepalive","leave_multicast_v4","leave_multicast_v6","linger","local_addr","local_addr","local_addr","local_addr","local_addr","local_addr","multicast_loop_v4","multicast_loop_v6","multicast_ttl_v4","new","new","nodelay","pair","pair","peer_addr","peer_addr","peer_addr","peer_cred","poll","poll","poll_accept","poll_accept","poll_accept_std","poll_accept_std","poll_complete","poll_complete","poll_peek","poll_read_ready","poll_read_ready","poll_read_ready","poll_read_ready","poll_read_ready","poll_recv","poll_recv","poll_recv_from","poll_recv_from","poll_send","poll_send","poll_send_to","poll_send_to","poll_write_ready","poll_write_ready","poll_write_ready","poll_write_ready","prepare_uninitialized_buffer","prepare_uninitialized_buffer","prepare_uninitialized_buffer","prepare_uninitialized_buffer","read","read","read","read","read_buf","read_buf","read_buf","read_buf","recv_buffer_size","recv_dgram","recv_dgram","send_buffer_size","send_dgram","send_dgram","set_broadcast","set_keepalive","set_linger","set_multicast_loop_v4","set_multicast_loop_v6","set_multicast_ttl_v4","set_nodelay","set_recv_buffer_size","set_send_buffer_size","set_ttl","set_ttl","set_ttl","shutdown","shutdown","shutdown","shutdown","shutdown","shutdown","shutdown","start_send","start_send","take_error","take_error","take_error","tcp","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ttl","ttl","ttl","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","udp","unbound","unix","write","write","write","write","write_buf","write_buf","write_buf","write_buf","ConnectFuture","Incoming","TcpListener","TcpStream","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","into","into","into_future","poll","poll","try_from","try_from","try_into","try_into","type_id","type_id","RecvDgram","SendDgram","UdpFramed","UdpSocket","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","into","into","into_future","into_future","into_parts","poll","poll","try_from","try_from","try_into","try_into","type_id","type_id","ConnectFuture","Incoming","RecvDgram","SendDgram","UCred","UnixDatagram","UnixDatagramFramed","UnixListener","UnixStream","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","gid","hash","into","into","into","into","into","into_future","into_future","into_future","ne","poll","poll","poll","poll","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","uid","Async","AsyncRead","AsyncSink","AsyncWrite","Error","Error","Error","Future","Future","FutureExt","IntoFuture","Item","Item","Item","NotReady","NotReady","Poll","Read","Ready","Ready","Sink","SinkError","SinkItem","Stream","StreamExt","Write","and_then","and_then","borrow","borrow","borrow_mut","borrow_mut","buffer","buffer_unordered","buffered","by_ref","by_ref","by_ref","bytes","catch_unwind","catch_unwind","chain","chain","chunks","clone","clone","clone_into","clone_into","close","collect","concat","concat2","enumerate","enumerate","enumerate","eq","eq","fanout","filter","filter_map","flatten","flatten","flatten_stream","flush","flush","fmt","fmt","fold","for_each","forward","framed","from","from","from","from","from_err","from_err","fuse","fuse","future","inspect","inspect","inspect_err","into","into","into_future","into_future","into_stream","is_not_ready","is_not_ready","is_read_vectored","is_ready","is_ready","is_write_vectored","join","join3","join4","join5","map","map","map","map","map_err","map_err","merge","ne","ne","or_else","or_else","peekable","poll","poll","poll_complete","poll_flush","poll_read","poll_write","prepare_uninitialized_buffer","read","read_buf","read_buf","read_buf_exact","read_exact","read_to_end","read_to_string","read_vectored","select","select","select2","send","send_all","shared","shutdown","sink_from_err","sink_map_err","skip","skip_while","split","split","start_send","stream","take","take","take_while","task","then","then","throttle","throttle","throttle","timeout","timeout","timeout","timeout","timeout","timeout","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","wait","wait","wait","with","with_flat_map","write","write_all","write_all_vectored","write_buf","write_fmt","write_vectored","zip","0","0","A","AndThen","B","Break","CatchUnwind","Collect","Continue","Done","Either","Empty","Err","Error","Error","Error","ExecuteError","ExecuteErrorKind","Executor","Failed","Finished","Flatten","FlattenStream","FromErr","Fuse","Future","Future","Future","FutureFrom","FutureResult","Inspect","IntoFuture","IntoStream","Item","Item","Join","Join3","Join4","Join5","JoinAll","Lazy","Loop","LoopFn","Map","MapErr","NoCapacity","Ok","OrElse","PollFn","Select","Select2","SelectAll","SelectNext","SelectOk","Shared","SharedError","SharedItem","Shutdown","Then","and_then","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","catch_unwind","cause","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","collect","deref","deref","description","done","drop","empty","eq","err","execute","failed","finished","flatten","flatten_stream","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_err","fuse","future_from","inspect","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_stream","is_done","join","join3","join4","join5","join_all","kind","lazy","loop_fn","map","map_err","new","ok","or_else","peek","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll_fn","result","select","select2","select_all","select_ok","shared","split","then","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","wait","0","0","0","0","0","1","AndThen","Both","BufferUnordered","Buffered","CatchUnwind","Chain","Chunks","Collect","Concat","Concat2","Empty","Error","Filter","FilterMap","First","Flatten","Fold","ForEach","Forward","FromErr","Fuse","FutureSender","FuturesOrdered","FuturesUnordered","Inspect","InspectErr","Item","Iter","IterOk","IterResult","IterStream","Map","MapErr","Merge","MergedItem","Once","OrElse","Peekable","PollFn","Receiver","Repeat","ReuniteError","Second","Select","SendError","Sender","Skip","SkipWhile","SplitSink","SplitStream","Stream","StreamFuture","Take","TakeWhile","Then","Unfold","Wait","Zip","and_then","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer_unordered","buffered","by_ref","catch_unwind","chain","channel","chunks","close","close","close","close","close","close","close","close","close","close","close","close","close","close","close","close","close","close","close","close","close","collect","concat","concat2","default","default","description","description","drop","empty","filter","filter_map","flatten","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","for_each","forward","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_err","from_iter","from_iter","fuse","futures_ordered","futures_unordered","futures_unordered","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","get_ref","inspect","inspect_err","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_inner","into_iter","is_done","is_empty","is_empty","iter","iter_mut","iter_ok","iter_result","len","len","map","map_err","merge","new","new","next","once","or_else","peek","peekable","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_complete","poll_fn","push","push","repeat","reunite","reunite","select","send","sink_mut","sink_ref","skip","skip_while","split","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","start_send","stream_mut","stream_ref","take","take_while","then","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unfold","wait","zip","0","0","0","1","FuturesUnordered","IterMut","borrow","borrow_mut","fmt","from","into","into_iter","next","size_hint","try_from","try_into","type_id","AtomicTask","EventSet","Executor","LocalKey","Run","Spawn","Task","TaskRc","Unpark","UnparkEvent","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","close_notify","current","default","execute","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_mut","get_ref","init","insert","into","into","into","into","into","into","into","into_inner","is_current","new","new","new","notify","notify","poll_flush_notify","poll_fn_notify","poll_future_notify","poll_stream_notify","register","register_task","run","spawn","start_send_notify","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpark","wait_close","wait_flush","wait_future","wait_send","wait_stream","will_notify_current","with","with","with_unpark_event","Background","Handle","PollEvented2","Reactor","Registration","Turn","as_raw_fd","background","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_read_ready","clear_write_ready","clone","clone_into","default","deregister","drop","drop","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","forget","from","from","from","from","from","from","get_mut","get_ref","handle","handle","into","into","into","into","into","into","into_inner","is_idle","new","new","new","new_with_handle","park","park_timeout","poll_read_ready","poll_read_ready","poll_write_ready","poll_write_ready","read","read","register","register_with","set_fallback","shutdown","shutdown","shutdown_now","shutdown_on_idle","take_read_ready","take_write_ready","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","turn","type_id","type_id","type_id","type_id","type_id","type_id","unpark","unpark","write","write","Builder","Runtime","Shutdown","TaskExecutor","after_start","before_stop","block_on","block_on_all","blocking_threads","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clock","clone","clone_into","core_threads","current_thread","drop","execute","executor","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","into_future","keep_alive","name_prefix","new","new","poll","reactor","run","shutdown_now","shutdown_on_idle","spawn","spawn","spawn","spawn","stack_size","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Builder","Handle","Runtime","TaskExecutor","block_on","block_on_all","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clock","clone","clone","clone_into","clone_into","current","execute","execute","fmt","fmt","fmt","fmt","from","from","from","from","handle","into","into","into","into","new","new","run","run","spawn","spawn","spawn","spawn","spawn","spawn","spawn_local","status","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","lock","mpsc","oneshot","watch","Lock","LockGuard","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","fmt","fmt","fmt","from","from","from","from","into","into","new","poll_lock","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Receiver","Sender","UnboundedReceiver","UnboundedSender","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","clone","clone","clone_into","clone_into","close","close","close","close","error","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","poll","poll","poll_complete","poll_complete","poll_ready","start_send","start_send","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_send","try_send","type_id","type_id","type_id","type_id","unbounded_channel","RecvError","SendError","TrySendError","UnboundedRecvError","UnboundedSendError","UnboundedTrySendError","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","description","description","description","description","description","description","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into_inner","into_inner","is_closed","is_full","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Receiver","Sender","borrow","borrow","borrow_mut","borrow_mut","channel","close","drop","drop","error","fmt","fmt","from","from","into","into","into_future","is_closed","poll","poll_close","send","try_from","try_from","try_into","try_into","try_recv","type_id","type_id","RecvError","TryRecvError","borrow","borrow","borrow_mut","borrow_mut","description","description","fmt","fmt","fmt","fmt","from","from","into","into","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Receiver","Ref","Sender","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","broadcast","channel","clone","clone_into","deref","drop","drop","error","fmt","fmt","fmt","from","from","from","get_ref","into","into","into","poll","poll_close","poll_complete","poll_ref","start_send","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","RecvError","SendError","borrow","borrow","borrow_mut","borrow_mut","description","description","fmt","fmt","fmt","fmt","from","from","into","into","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Delay","DelayQueue","Error","Interval","Timeout","at_capacity","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","clear","deadline","delay_queue","description","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get_mut","get_ref","insert","insert_at","into","into","into","into","into","into_future","into_future","into_inner","is_at_capacity","is_elapsed","is_empty","is_shutdown","new","new","new","new","new_at","new_interval","poll","poll","poll","poll","poll","remove","reserve","reset","reset","reset_at","shutdown","timeout","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","with_capacity","with_capacity_and_handle","DelayQueue","Expired","Key","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","from","from","get_mut","get_ref","into","into","into_inner","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Error","Timeout","borrow","borrow_mut","description","elapsed","fmt","fmt","from","inner","into","into_inner","into_timer","is_elapsed","is_inner","is_timer","timer","to_string","try_from","try_into","type_id","FutureExt","StreamExt"],"q":["tokio","","","","","","","","","","","","","","tokio::clock","tokio::codec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio::codec::length_delimited","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio::executor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio::fs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio::fs::file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio::fs::os","tokio::fs::os::unix","","","","","","","","","","","","tokio::iotokio::nettokio::net::tcp","","","","","","","","","","","","","","","","","","","","","","","tokio::net::udp","","","","","","","","","","","","","","","","","","","","","","","","","tokio::net::unix","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio::preludetokio::prelude::Async","tokio::prelude::AsyncSink","tokio::prelude::futuretokio::prelude::future::Either","","tokio::prelude::future::Loop","","tokio::prelude::streamtokio::prelude::stream::MergedItem","","","","tokio::prelude::stream::futures_unordered","","","","","","","","","","","","","tokio::prelude::task","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio::reactor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio::runtime","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio::runtime::current_thread","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio::sync","","","","tokio::sync::lock","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio::sync::mpsc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio::sync::mpsc::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio::sync::oneshot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio::sync::oneshot::error","","","","","","","","","","","","","","","","","","","","","","","","tokio::sync::watch","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio::sync::watch::error","","","","","","","","","","","","","","","","","","","","","","","","tokio::timer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio::timer::delay_queue","","","","","","","","","","","","","","","","","","","","","","","","","tokio::timer::timeout","","","","","","","","","","","","","","","","","","","","","tokio::util",""],"d":["A configurable source of time.","Utilities for encoding and decoding frames.","Task execution utilities.","Asynchronous filesystem manipulation operations.","Asynchronous I/O.","TCP/UDP/Unix bindings for <code>tokio</code>.","A “prelude” for users of the <code>tokio</code> crate.","Event loop that drives Tokio I/O resources.","Start the Tokio runtime using the supplied future to …","A batteries included runtime for applications using Tokio.","","Future-aware synchronization","Utilities for tracking time.","Utilities for working with Tokio.","Returns an <code>Instant</code> corresponding to “now”.","A simple <code>Codec</code> implementation that just ships bytes around.","Decoding of frames via buffers.","Trait of helper objects to write out messages as bytes, …","The type of unrecoverable frame decoding errors.","The type of encoding errors.","A unified <code>Stream</code> and <code>Sink</code> interface to an underlying I/O …","<code>FramedParts</code> contains an export of the data of a Framed …","A <code>Stream</code> of messages decoded from an <code>AsyncRead</code>.","A <code>Sink</code> of frames encoded to an <code>AsyncWrite</code>.","The type of decoded frames.","The type of items consumed by the <code>Encoder</code>","","A simple <code>Codec</code> implementation that splits up data into …","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the underlying codec wrapped by …","The codec","Returns a mutable reference to the underlying codec …","Attempts to decode a frame from the provided buffer of …","","","A default method available to be called when there are no …","","Returns a reference to the underlying decoder.","Returns a mutable reference to the underlying decoder.","Encodes a frame into the buffer provided.","","","Returns a reference to the underlying decoder.","Returns a mutable reference to the underlying decoder.","","","","","","","","","Provides a <code>Stream</code> and <code>Sink</code> interface for reading and …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Provides a <code>Stream</code> and <code>Sink</code> interface for reading and …","Returns a mutable reference to the underlying I/O stream …","Returns a mutable reference to the underlying I/O stream …","Returns a mutable reference to the underlying I/O stream …","Returns a reference to the underlying I/O stream wrapped by","Returns a reference to the underlying I/O stream wrapped by","Returns a reference to the underlying I/O stream wrapped by","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>Frame</code>, returning its underlying I/O stream.","Consumes the <code>FramedRead</code>, returning its underlying I/O …","Consumes the <code>FramedWrite</code>, returning its underlying I/O …","Consumes the <code>Frame</code>, returning its underlying I/O stream, …","The inner transport used to read bytes to and write bytes …","Frame a stream of bytes based on a length prefix","Returns the maximum line length when decoding.","","","Creates a new <code>BytesCodec</code> for shipping around raw bytes.","Returns a <code>LinesCodec</code> for splitting up data into lines.","Provides a <code>Stream</code> and <code>Sink</code> interface for reading and …","Creates a new <code>FramedRead</code> with the given <code>decoder</code>.","Creates a new <code>FramedWrite</code> with the given <code>encoder</code>.","Create a new, default, <code>FramedParts</code>","Returns a <code>LinesCodec</code> with a maximum line length limit.","","","","","","","","","The buffer with read but unprocessed data.","","","","","","","","","","","","","","","","","","","","","","","","A buffer with unprocessed data which are not written yet.","Configure length delimited <code>LengthDelimitedCodec</code>s.","An error when the number of bytes read is more than max …","A codec for frames delimited by a frame head specifying …","Read the length field as a big endian integer","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Delta between the payload length specified in the header …","Sets the number of bytes used to represent the length field","Sets the number of bytes in the header before the length …","Read the length field as a little endian integer","Sets the max frame length","Returns the current max frame setting","Read the length field as a native endian integer","Creates a new length delimited codec builder with default …","Creates a new <code>LengthDelimitedCodec</code> with the default …","Create a configured length delimited <code>LengthDelimitedCodec</code>","Create a configured length delimited <code>Framed</code>","Create a configured length delimited <code>FramedRead</code>","Create a configured length delimited <code>FramedWrite</code>","Sets the number of bytes to skip before reading the payload","Updates the max frame setting.","","","","","","","","","","","","Executes futures on the default executor for the current …","A value that executes futures.","Return value from the <code>spawn</code> function.","Errors returned by <code>Executor::spawn</code>.","A value that spawns futures of a specific type.","Return a new <code>SpawnError</code> reflecting an executor at capacity …","","","","","","","","","Returns a handle to the default executor for the current …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the error reflects an executor at capacity …","Returns <code>true</code> if the error reflects a shutdown executor …","Return a new <code>SpawnError</code> reflecting a shutdown executor …","Spawns a future on the default executor.","Spawns a future object to run on this executor.","Spawns a future to run on this executor.","","","Provides a best effort <strong>hint</strong> to whether or not <code>spawn</code> will …","Provides a best effort <strong>hint</strong> to whether or not <code>spawn</code> will …","","","","","","","","","","","","","","A reference to an open file on the filesystem.","Options and flags which can be used to configure how a …","A future used to open a file and read its entire contents …","A future used to open a file for writing and write the …","","","","","","","Opens a file in write-only mode.","Creates a new, empty directory at the provided path","Recursively create a directory and all of its parent …","","Types for working with <code>File</code>.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert a <code>std::fs::File</code> to a <code>tokio_fs::File</code>.","Creates a new hard link on the filesystem.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Destructures the <code>tokio_fs::File</code> into a <code>std::fs::File</code>.","Queries the file system metadata for a path.","Queries metadata about the underlying file.","Attempts to open a file in read-only mode.","OS-specific functionality.","","","Queries metadata about the underlying file.","Seek to an offset, in bytes, in a stream.","Truncates or extends the underlying file, updating the …","Changes the permissions on the underlying file.","Attempts to sync all OS-internal metadata to disk.","This function is similar to <code>poll_sync_all</code>, except that it …","Create a new <code>File</code> instance that shares the same underlying …","","Creates a future which will open a file for reading and …","","Returns a stream over the entries within a directory.","Reads a symbolic link, returning the file that the link …","Removes an existing, empty directory.","Removes a file from the filesystem.","Rename a file or directory to a new name, replacing the …","Seek to an offset, in bytes, in a stream.","Changes the permissions found on a file or a directory.","","Queries the file system metadata for a path.","Create a new <code>File</code> instance that shares the same underlying …","","","","","","","","","","Creates a future that will open a file for writing and …","","Future returned by <code>File::try_clone</code>.","Future returned by <code>File::create</code> and resolves to a <code>File</code> …","A reference to an open file on the filesystem.","Future returned by <code>File::metadata</code> and resolves to a …","Future returned by <code>File::open</code> and resolves to a <code>File</code> …","Options and flags which can be used to configure how a …","Future returned by <code>File::seek</code>.","See the underlying <code>append</code> call for details.","","","","","","","","","","","","","","","See the underlying <code>create</code> call for details.","See the underlying <code>create_new</code> call for details.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Creates a blank new set of options ready for configuration.","Opens a file at <code>path</code> with the options specified by <code>self</code>.","","","","","","See the underlying <code>read</code> call for details.","","See the underlying <code>truncate</code> call for details.","","","","","","","","","","","","","","","","","","","See the underlying <code>write</code> call for details.","Unix-specific extensions to primitives in the <code>tokio_fs</code> …","Future returned by <code>symlink</code>.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Creates a new symbolic link on the filesystem.","","","","A socket address could not be bound because the address is …","A nonexistent interface was requested or the requested …","An entity already exists, often a file.","Program argument list too long.","Read bytes asynchronously.","Writes bytes asynchronously.","The operation failed because a pipe was closed.","The connection was aborted (terminated) by the remote …","The connection was refused by the remote server.","The connection was reset by the remote server.","A future which will copy all data from a reader into a …","Cross-device or cross-filesystem (hard) link or rename.","Deadlock (avoided).","A non-empty directory was specified where an empty …","The error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…","A list specifying general categories of I/O error.","Executable file is busy.","File larger than allowed or supported.","Loop in the filesystem or IO subsystem; often, too many …","Filesystem quota was exceeded.","A future used to fully flush an I/O object.","The remote host is not reachable.","This operation was interrupted.","Data not valid for the operation were encountered.","A filename was invalid.","A parameter was incorrect.","The filesystem object is, unexpectedly, a directory.","Combinator created by the top-level <code>lines</code> method which is …","The system’s networking is down.","The network containing the remote host is not reachable.","A filesystem object is, unexpectedly, not a directory.","The network operation failed because it was not connected …","An entity was not found, often a file.","Seek on unseekable file.","A custom error that does not fall under any other I/O …","An operation could not be completed, because it failed to …","The operation lacked the necessary privileges to complete.","The <code>Read</code> trait allows for reading bytes from a source.","A future which can be used to easily read exactly enough …","The readable half of an object returned from …","The filesystem or storage medium is read-only, but a write …","A future which can be used to easily read the entire …","A future which can be used to easily read the contents of …","Resource is busy.","A specialized <code>Result</code> type for I/O operations.","A future used to fully shutdown an I/O object.","Stale network file handle.","A handle to the standard error stream of a process.","A handle to the standard input stream of a process.","A handle to the standard output stream of a process.","The underlying storage (typically, a filesystem) is full.","The I/O operation’s timeout expired, causing it to be …","Too many (hard) links to the same filesystem object.","An error returned when an operation could not be completed …","This operation is unsupported on this platform.","The operation needs to block to complete, but the blocking …","A trait for objects which are byte-oriented sinks.","A future used to write the entire contents of some data to …","The writable half of an object returned from …","An error returned when an operation could not be completed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","","Creates an adapter which will chain this stream with …","","","","Creates a future which represents copying all the bytes …","","","Creates a future which will entirely flush an I/O object …","Flush this output stream, ensuring that all intermediately …","","","","","","","","","","","","","","","","","","","Shows a human-readable description of the <code>ErrorKind</code>.","","Provides a <code>Stream</code> and <code>Sink</code> interface for reading and …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Converts an <code>ErrorKind</code> into an <code>Error</code>.","","Converts a [<code>alloc::ffi::NulError</code>] into a <code>io::Error</code>.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new instance of an <code>Error</code> from a particular OS …","Returns a mutable reference to the inner error wrapped by …","Returns a reference to the inner error wrapped by this …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Returns the underlying I/O object.","Consumes the <code>Error</code>, returning its inner error (if any).","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","Returns the corresponding <code>ErrorKind</code> for this error.","Returns an error representing the last OS error which …","Creates a new stream from the I/O object given …","Creates a new I/O error from a known kind of error as well …","Creates a new I/O error from an arbitrary error payload.","","","","","","","","","","Attempt to flush the object, ensuring that any buffered …","Attempt to read from the <code>AsyncRead</code> into <code>buf</code>.","Attempt to write bytes from <code>buf</code> into the object.","Prepares an uninitialized buffer to be safe to pass to <code>read</code>…","","Returns the OS error that this error represents (if any).","Tries to read some bytes directly into the given <code>buf</code> in …","Pull some bytes from this source into the specified …","","","Pull some bytes from this source into the specified <code>BufMut</code>…","","Pull some bytes from this source into the specified buffer.","Read the exact number of bytes required to fill <code>buf</code>.","Creates a future which will read exactly enough bytes to …","Read the exact number of bytes required to fill <code>buf</code>.","Creates a future which will read all the bytes associated …","Read all bytes until EOF in this source, placing them into …","Read all bytes until EOF in this source, appending them to …","Creates a future which will read all the bytes associated …","Like <code>read</code>, except that it reads into a slice of buffers.","Creates a future which will entirely shutdown an I/O …","Initiates or attempts to shut down this writer, returning …","","","","","Helper method for splitting this read/write object into …","Constructs a new handle to the standard error of the …","Constructs a new handle to the standard input of the …","Constructs a new handle to the standard output of the …","Creates an adapter which will read at most <code>limit</code> bytes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reunite with a previously split <code>WriteHalf</code>.","Reunite with a previously split <code>ReadHalf</code>.","Write a buffer into this writer, returning how many bytes …","","","","Creates a future that will write the entire contents of …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Write a <code>Buf</code> into this value, returning how many bytes were …","","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","An I/O object representing a TCP socket listening for …","An I/O object representing a TCP stream connected to a …","A unified <code>Stream</code> and <code>Sink</code> interface to an underlying …","An I/O object representing a UDP socket.","An I/O object representing a Unix datagram socket.","A unified <code>Stream</code> and <code>Sink</code> interface to an underlying …","A Unix socket which can accept connections from other Unix …","A structure representing a connected Unix socket.","","","","","","","Creates a new <code>UnixDatagram</code> bound to the specified path.","Create a new TCP listener associated with this event loop.","This function will create a new UDP socket and attempt to …","Creates a new <code>UnixListener</code> bound to the specified path.","","","","","","","","","","","","","","","","","Gets the value of the <code>SO_BROADCAST</code> option for this socket.","","","Connects the socket to the specified address.","Connects the UDP socket setting the default destination …","Create a new TCP stream connected to the specified address.","Connects to the socket named by <code>path</code>.","Creates a new <code>TcpStream</code> from the pending socket inside the …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Consumes a <code>UnixDatagram</code> in the standard library and …","Create a new TCP listener from the standard library’s …","Creates a new <code>UdpSocket</code> from the previously bound socket …","Create a new <code>TcpStream</code> from a <code>net::TcpStream</code>.","Consumes a <code>UnixListener</code> in the standard library and …","Consumes a <code>UnixStream</code> in the standard library and returns a","Returns a mutable reference to the underlying I/O stream …","Returns a mutable reference to the underlying I/O stream …","Returns a reference to the underlying I/O stream wrapped …","Returns a reference to the underlying I/O stream wrapped …","Consumes this listener, returning a stream of the sockets …","Consumes this listener, returning a stream of the sockets …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>Framed</code>, returning its underlying I/O stream.","Executes an operation of the <code>IP_ADD_MEMBERSHIP</code> type.","Executes an operation of the <code>IPV6_ADD_MEMBERSHIP</code> type.","Returns whether keepalive messages are enabled on this …","Executes an operation of the <code>IP_DROP_MEMBERSHIP</code> type.","Executes an operation of the <code>IPV6_DROP_MEMBERSHIP</code> type.","Reads the linger duration for this socket by getting the …","Returns the local address that this socket is bound to.","Returns the local address that this listener is bound to.","Returns the local address that this socket is bound to.","Returns the local address that this stream is bound to.","Returns the local socket address of this listener.","Returns the socket address of the local half of this …","Gets the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Gets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Gets the value of the <code>IP_MULTICAST_TTL</code> option for this …","Create a new <code>UdpFramed</code> backed by the given socket and …","Create a new <code>UnixDatagramFramed</code> backed by the given socket …","Gets the value of the <code>TCP_NODELAY</code> option on this socket.","Creates an unnamed pair of connected sockets.","Creates an unnamed pair of connected sockets.","Returns the address of this socket’s peer.","Returns the remote address that this stream is connected …","Returns the socket address of the remote half of this …","Returns effective credentials of the process which called …","","","Attempt to accept a connection and create a new connected …","Attempt to accept a connection and create a new connected …","Attempt to accept a connection and create a new connected …","Attempt to accept a connection and create a new connected …","","","Receives data on the socket from the remote address to …","Test whether this socket is ready to be read or not.","Check the UDP socket’s read readiness state.","Check the TCP stream’s read readiness state.","Test whether this socket is ready to be read or not.","Test whether this socket is ready to be read or not.","Receives data from the socket.","Receives a single datagram message on the socket from the …","Receives data from the socket.","Receives data from the socket. On success, returns the …","Sends data on the socket to the socket’s peer.","Sends data on the socket to the remote address to which it …","Sends data on the socket to the specified address.","Sends data on the socket to the given address. On success, …","Test whether this socket is ready to be written to or not.","Check the UDP socket’s write readiness state.","Check the TCP stream’s write readiness state.","Test whether this socket is ready to be written to or not.","","","","","","","","","","","","","Gets the value of the <code>SO_RCVBUF</code> option on this socket.","Returns a future for receiving a datagram. See the …","Creates a future that receive a datagram to be written to …","Gets the value of the <code>SO_SNDBUF</code> option on this socket.","Returns a future sending the data in buf to the socket at …","Creates a future that will write the entire contents of …","Sets the value of the <code>SO_BROADCAST</code> option for this socket.","Sets whether keepalive messages are enabled to be sent on …","Sets the linger duration of this socket by setting the …","Sets the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Sets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Sets the value of the <code>IP_MULTICAST_TTL</code> option for this …","Sets the value of the <code>TCP_NODELAY</code> option on this socket.","Sets the value of the <code>SO_RCVBUF</code> option on this socket.","Sets the value of the <code>SO_SNDBUF</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Shut down the read, write, or both halves of this …","Shuts down the read, write, or both halves of this …","","","","","Shuts down the read, write, or both halves of this …","","","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","TCP bindings for <code>tokio</code>.","","","","","","","","","","","","","","","","","Gets the value of the <code>IP_TTL</code> option for this socket.","Gets the value of the <code>IP_TTL</code> option for this socket.","Gets the value of the <code>IP_TTL</code> option for this socket.","","","","","","","","","UDP bindings for <code>tokio</code>.","Creates a new <code>UnixDatagram</code> which is not bound to any …","Unix domain socket bindings for <code>tokio</code> (only available on …","","","","","","","","","Future returned by <code>TcpStream::connect</code> which will resolve …","Stream returned by the <code>TcpListener::incoming</code> function …","An I/O object representing a TCP socket listening for …","An I/O object representing a TCP stream connected to a …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","A future used to receive a datagram from a UDP socket.","A future used to write the entire contents of some data to …","A unified <code>Stream</code> and <code>Sink</code> interface to an underlying …","An I/O object representing a UDP socket.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Consume the <code>RecvDgram</code>, returning the socket and buffer.","","","","","","","","","Future returned by <code>UnixStream::connect</code> which will resolve …","Stream of listeners","A future for receiving datagrams from a Unix datagram …","A future for writing a buffer to a Unix datagram socket.","Credentials of a process","An I/O object representing a Unix datagram socket.","A unified <code>Stream</code> and <code>Sink</code> interface to an underlying …","A Unix socket which can accept connections from other Unix …","A structure representing a connected Unix socket.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","GID (group ID) of the process","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","UID (user ID) of the process","Return type of future, indicating whether a value is ready …","Read bytes asynchronously.","The result of an asynchronous attempt to send a value to a …","Writes bytes asynchronously.","The type of error that this future will resolve with if it …","The error that the future may resolve with.","The type of error this stream may generate.","Trait for types which are a placeholder of a value that …","The future that this type can be converted into.","An extension trait for <code>Future</code> that provides a variety of …","Class of types which can be converted into a future.","The type of value that this future will resolved with if …","The item that the future may resolve with.","The type of item this stream will yield on success.","Represents that a value is not ready yet, but may be so …","The <code>start_send</code> attempt failed due to the sink being full. …","Return type of the <code>Future::poll</code> method, indicates whether …","The <code>Read</code> trait allows for reading bytes from a source.","Represents that a value is immediately ready.","The <code>start_send</code> attempt succeeded, so the sending process …","A <code>Sink</code> is a value into which other values can be sent, …","The type of value produced by the sink when an error …","The type of value that the sink accepts.","A stream of values, not all of which may have been …","An extension trait for <code>Stream</code> that provides a variety of …","A trait for objects which are byte-oriented sinks.","Execute another future after this one has resolved …","Chain on a computation for when a value is ready, passing …","","","","","Adds a fixed-size buffer to the current sink.","An adaptor for creating a buffered list of pending futures …","An adaptor for creating a buffered list of pending futures.","Borrows a stream, rather than consuming it.","Creates a “by reference” adaptor for this instance of …","Creates a “by reference” adapter for this instance of …","Transforms this <code>Read</code> instance to an <code>Iterator</code> over its …","Catches unwinding panics while polling the future.","Catches unwinding panics while polling the stream.","Adapter for chaining two stream.","Creates an adapter which will chain this stream with …","An adaptor for chunking up items of the stream inside a …","","","","","A method to indicate that no more values will ever be …","Collect all of the values of this stream into a vector, …","Concatenate all results of a stream into a single …","Concatenate all results of a stream into a single …","Creates a new stream which gives the current iteration …","Creates a new stream which gives the current iteration …","Creates a new stream which gives the current iteration …","","","Fanout items to multiple sinks.","Filters the values produced by this stream according to …","Filters the values produced by this stream while …","Flatten the execution of this future when the successful …","Flattens a stream of streams into just one continuous …","Flatten the execution of this future when the successful …","Flush this output stream, ensuring that all intermediately …","A future that completes when the sink has finished …","","","Execute an accumulating computation over a stream, …","Runs this stream to completion, executing the provided …","A future that completes after the given stream has been …","Provides a <code>Stream</code> and <code>Sink</code> interface for reading and …","Returns the argument unchanged.","","","Returns the argument unchanged.","Map this future’s error to any error implementing <code>From</code> …","Map this stream’s error to any error implementing <code>From</code> …","Fuse a future such that <code>poll</code> will never again be called …","Fuse a stream such that <code>poll</code> will never again be called …","Futures","Do something with the item of a future, passing it on.","Do something with each item of this stream, afterwards …","Do something with the error of this stream, afterwards …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this object and produces a future.","Converts this stream into a <code>Future</code>.","Convert this future into a single element stream.","Returns whether this is <code>Async::NotReady</code>","Returns whether this is <code>AsyncSink::NotReady</code>","Determines if this <code>Read</code>er has an efficient <code>read_vectored</code> …","Returns whether this is <code>Async::Ready</code>","Returns whether this is <code>AsyncSink::Ready</code>","Determines if this <code>Write</code>r has an efficient <code>write_vectored</code> …","Joins the result of two futures, waiting for them both to …","Same as <code>join</code>, but with more futures.","Same as <code>join</code>, but with more futures.","Same as <code>join</code>, but with more futures.","Map this future’s result to a different type, returning …","Converts a stream of type <code>T</code> to a stream of type <code>U</code>.","Change the success value of this <code>Async</code> with the closure …","Change the NotReady value of this <code>AsyncSink</code> with the …","Map this future’s error to a different error, returning …","Converts a stream of error type <code>T</code> to a stream of error …","An adapter for merging the output of two streams.","","","Execute another future if this one resolves with an error.","Chain on a computation for when an error happens, passing …","Creates a new stream which exposes a <code>peek</code> method.","Query this future to see if its value has become …","Attempt to pull out the next value of this stream, …","Flush all output from this sink, if necessary.","Attempt to flush the object, ensuring that any buffered …","Attempt to read from the <code>AsyncRead</code> into <code>buf</code>.","Attempt to write bytes from <code>buf</code> into the object.","Prepares an uninitialized buffer to be safe to pass to <code>read</code>…","Pull some bytes from this source into the specified …","Pull some bytes from this source into the specified <code>BufMut</code>…","Pull some bytes from this source into the specified buffer.","Read the exact number of bytes required to fill <code>buf</code>.","Read the exact number of bytes required to fill <code>buf</code>.","Read all bytes until EOF in this source, placing them into …","Read all bytes until EOF in this source, appending them to …","Like <code>read</code>, except that it reads into a slice of buffers.","Waits for either one of two futures to complete.","Creates a stream that selects the next element from either …","Waits for either one of two differently-typed futures to …","A future that completes after the given item has been …","A future that completes after the given stream has been …","Create a cloneable handle to this future where all handles …","Initiates or attempts to shut down this writer, returning …","Map this sink’s error to any error implementing <code>From</code> for …","Transforms the error returned by the sink.","Creates a new stream which skips <code>amt</code> items of the …","Skip elements on this stream while the predicate provided …","Helper method for splitting this read/write object into …","Splits this <code>Stream + Sink</code> object into separate <code>Stream</code> and …","Begin the process of sending a value to the sink.","Asynchronous streams","Creates a new stream of at most <code>amt</code> items of the …","Creates an adapter which will read at most <code>limit</code> bytes …","Take elements from this stream while the predicate …","Tasks used to drive a future computation","Chain on a computation for when a future finished, passing …","Chain on a computation for when a value is ready, passing …","Throttle down the stream by enforcing a fixed delay …","Throttle down the stream by enforcing a fixed delay …","Throttle down the stream by enforcing a fixed delay …","Creates a new future which allows <code>self</code> until <code>timeout</code>.","Creates a new future which allows <code>self</code> until <code>timeout</code>.","Creates a new future which allows <code>self</code> until <code>timeout</code>.","Creates a new stream which allows <code>self</code> until <code>timeout</code>.","Creates a new stream which allows <code>self</code> until <code>timeout</code>.","Creates a new stream which allows <code>self</code> until <code>timeout</code>.","","","","","","","","","Block the current thread until this future is resolved.","Creates an iterator which blocks the current thread until …","Creates a new object which will produce a synchronous sink.","Composes a function <em>in front of</em> the sink.","Composes a function <em>in front of</em> the sink.","Write a buffer into this writer, returning how many bytes …","Attempts to write an entire buffer into this writer.","Attempts to write multiple buffers into this writer.","Write a <code>Buf</code> into this value, returning how many bytes were …","Writes a formatted string into this writer, returning any …","Like <code>write</code>, except that it writes from a slice of buffers.","An adapter for zipping two streams together.","","","First branch of the type","Future for the <code>and_then</code> combinator, chaining a computation …","Second branch of the type","Indicates that the loop has completed with output <code>T</code>.","Future for the <code>catch_unwind</code> combinator.","A future which takes a list of futures and resolves with a …","Indicates that the loop function should be called again …","A future representing a value that is immediately ready.","Combines two different futures yielding the same item and …","A future which is never resolved.","A future representing a value that is immediately ready.","The type of error that this future will resolve with if it …","The error that the future may resolve with.","Possible errors during conversion.","Errors returned from the <code>Spawn::spawn</code> function.","Kinds of errors that can be returned from the …","A trait for types which can spawn fresh futures.","A future representing a value that is immediately ready.","A future representing a value that is immediately ready.","Future for the <code>flatten</code> combinator, flattening a …","Future for the <code>flatten_stream</code> combinator, flattening a …","Future for the <code>from_err</code> combinator, changing the error …","A future which “fuses” a future once it’s been …","Trait for types which are a placeholder of a value that …","The future that this type can be converted into.","The future for the conversion.","Asynchronous conversion from a type <code>T</code>.","A future representing a value that is immediately ready.","Do something with the item of a future, passing it on.","Class of types which can be converted into a future.","Future that forwards one element from the underlying future","The type of value that this future will resolved with if …","The item that the future may resolve with.","Future for the <code>join</code> combinator, waiting for two futures to …","Future for the <code>join3</code> combinator, waiting for three futures …","Future for the <code>join4</code> combinator, waiting for four futures …","Future for the <code>join5</code> combinator, waiting for five futures …","A future which takes a list of futures and resolves with a …","A future which defers creation of the actual future until …","The status of a <code>loop_fn</code> loop.","A future implementing a tail-recursive loop.","Future for the <code>map</code> combinator, changing the type of a …","Future for the <code>map_err</code> combinator, changing the error type …","This executor has no more capacity to run more futures. …","A future representing a value that is immediately ready.","Future for the <code>or_else</code> combinator, chaining a computation …","A future which adapts a function returning <code>Poll</code>.","Future for the <code>select</code> combinator, waiting for one of two …","Future for the <code>select2</code> combinator, waiting for one of two …","Future for the <code>select_all</code> combinator, waiting for one of …","Future yielded as the second result in a <code>Select</code> future.","Future for the <code>select_ok</code> combinator, waiting for one of …","A future that is cloneable and can be polled in multiple …","A wrapped error of the original future that is cloneable …","A wrapped item of the original future that is cloneable …","This executor has shut down and will no longer accept new …","Future for the <code>then</code> combinator, chaining computations on …","Execute another future after this one has resolved …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Catches unwinding panics while polling the future.","","","","","","","","","","","","Creates a future which represents a collection of the …","","","","Creates a new “leaf future” which will resolve with …","","Creates a future which never resolves, representing a …","","Creates a “leaf future” from an immediate value of a …","Spawns a future to run on this <code>Executor</code>, typically in the …","Creates a “leaf future” from an immediate value of a …","Creates a “leaf future” from an immediate value of a …","Flatten the execution of this future when the successful …","Flatten the execution of this future when the successful …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Map this future’s error to any error implementing <code>From</code> …","Fuse a future such that <code>poll</code> will never again be called …","Consume the given value, beginning the conversion.","Do something with the item of a future, passing it on.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this object and produces a future.","","Consumes self and returns the original future that was …","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert this future into a single element stream.","Returns whether the underlying future has finished or not.","Joins the result of two futures, waiting for them both to …","Same as <code>join</code>, but with more futures.","Same as <code>join</code>, but with more futures.","Same as <code>join</code>, but with more futures.","Creates a future which represents a collection of the …","Returns the associated reason for the error","Creates a new future which will eventually be the same as …","Creates a new future implementing a tail-recursive loop.","Map this future’s result to a different type, returning …","Map this future’s error to a different error, returning …","Create a new <code>ExecuteError</code>","Creates a “leaf future” from an immediate value of a …","Execute another future if this one resolves with an error.","If any clone of this <code>Shared</code> has completed execution, …","Query this future to see if its value has become …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new future wrapping around a function returning …","Creates a new “leaf future” which will resolve with …","Waits for either one of two futures to complete.","Waits for either one of two differently-typed futures to …","Creates a new future which will select over a list of …","Creates a new future which will select the first …","Create a cloneable handle to this future where all handles …","Splits out the homogeneous type from an either of tuples.","Chain on a computation for when a future finished, passing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Block the current thread until this future is resolved.","","","","","","","A stream combinator which chains a computation onto values …","Items from both streams","An adaptor for a stream of futures to execute the futures …","An adaptor for a stream of futures to execute the futures …","Stream for the <code>catch_unwind</code> combinator.","An adapter for chaining the output of two streams.","An adaptor that chunks up elements in a vector.","A future which collects all of the values of a stream into …","A stream combinator to concatenate the results of a stream …","A stream combinator to concatenate the results of a stream …","A stream which contains no elements.","The type of error this stream may generate.","A stream combinator used to filter the results of a stream …","A combinator used to filter the results of a stream and …","An item from the first stream","A combinator used to flatten a stream-of-streams into one …","A future used to collect all the results of a stream into …","A stream combinator which executes a unit closure over …","Future for the <code>Stream::forward</code> combinator, which sends a …","A stream combinator to change the error type of a stream.","A stream which “fuse“s a stream once it’s terminated.","Future returned by <code>Sender::send</code>.","An unbounded queue of futures.","An unbounded set of futures.","Do something with the items of a stream, passing it on.","Do something with the error of a stream, passing it on.","The type of item this stream will yield on success.","A stream which is just a shim over an underlying instance …","A stream which is just a shim over an underlying instance …","A stream which is just a shim over an underlying instance …","A stream which is just a shim over an underlying instance …","A stream combinator which will change the type of a stream …","A stream combinator which will change the error type of a …","An adapter for merging the output of two streams.","An item returned from a merge stream, which represents an …","A stream which emits single element and then EOF.","A stream combinator which chains a computation onto errors …","A <code>Stream</code> that implements a <code>peek</code> method.","A stream which adapts a function returning <code>Poll</code>.","The receiving end of a channel which implements the <code>Stream</code> …","Stream that produces the same element repeatedly.","Error indicating a <code>SplitSink&lt;S&gt;</code> and <code>SplitStream&lt;S&gt;</code> were …","An item from the second stream","An adapter for merging the output of two streams.","Error type for sending, used when the receiving end of the …","The transmission end of a channel which is used to send …","A stream combinator which skips a number of elements …","A stream combinator which skips elements of a stream while …","A <code>Sink</code> part of the split pair","A <code>Stream</code> part of the split pair","A stream of values, not all of which may have been …","A combinator used to temporarily convert a stream into a …","A stream combinator which returns a maximum number of …","A stream combinator which takes elements from a stream …","A stream combinator which chains a computation onto each …","A stream which creates futures, polls them and return …","A stream combinator which converts an asynchronous stream …","An adapter for merging the output of two streams.","Chain on a computation for when a value is ready, passing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An adaptor for creating a buffered list of pending futures …","An adaptor for creating a buffered list of pending futures.","Borrows a stream, rather than consuming it.","Catches unwinding panics while polling the stream.","Adapter for chaining two stream.","Creates an in-memory channel implementation of the <code>Stream</code> …","An adaptor for chunking up items of the stream inside a …","","","","","","","","","","","","","","","","","","","","","","Collect all of the values of this stream into a vector, …","Concatenate all results of a stream into a single …","Concatenate all results of a stream into a single …","","","","","","Creates a stream which contains no elements.","Filters the values produced by this stream according to …","Filters the values produced by this stream while …","Flattens a stream of streams into just one continuous …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Execute an accumulating computation over a stream, …","Runs this stream to completion, executing the provided …","A future that completes after the given stream has been …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Map this stream’s error to any error implementing <code>From</code> …","","","Fuse a stream such that <code>poll</code> will never again be called …","Converts a list of futures into a <code>Stream</code> of results from …","An unbounded set of futures.","Converts a list of futures into a <code>Stream</code> of results from …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a mutable reference to the underlying stream that …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Acquires a reference to the underlying stream that this …","Do something with each item of this stream, afterwards …","Do something with the error of this stream, afterwards …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Converts this stream into a <code>Future</code>.","","","","","","","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","Consumes this combinator, returning the underlying stream.","","Returns whether the underlying stream has finished or not.","Returns <code>true</code> if the set contains no futures","Returns <code>true</code> if the queue contains no futures","Converts an <code>Iterator</code> over <code>Result</code>s into a <code>Stream</code> which is …","Returns an iterator that allows modifying each future in …","Converts an <code>Iterator</code> into a <code>Stream</code> which is always ready …","Converts an <code>Iterator</code> over <code>Result</code>s into a <code>Stream</code> which is …","Returns the number of futures contained in the set.","Returns the number of futures contained in the queue.","Converts a stream of type <code>T</code> to a stream of type <code>U</code>.","Converts a stream of error type <code>T</code> to a stream of error …","An adapter for merging the output of two streams.","Constructs a new, empty <code>FuturesUnordered</code>","Constructs a new, empty <code>FuturesOrdered</code>","","Creates a stream of single element","Chain on a computation for when an error happens, passing …","Peek retrieves a reference to the next item in the stream.","Creates a new stream which exposes a <code>peek</code> method.","Attempt to pull out the next value of this stream, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new stream wrapping around a function returning …","Push a future into the set.","Push a future into the queue.","Create a stream which produces the same item repeatedly.","Attempts to put the two “halves” of a split …","Attempts to put the two “halves” of a split …","Creates a stream that selects the next element from either …","Sends a new value along this channel to the receiver.","Get a mutable reference to the inner sink. If this …","Get a shared reference to the inner sink. If this …","Creates a new stream which skips <code>amt</code> items of the …","Skip elements on this stream while the predicate provided …","Splits this <code>Stream + Sink</code> object into separate <code>Stream</code> and …","","","","","","","","","","","","","","","","","","","","","","Get a mutable reference to the inner stream. If this …","Get a shared reference to the inner stream. If this …","Creates a new stream of at most <code>amt</code> items of the …","Take elements from this stream while the predicate …","Chain on a computation for when a value is ready, passing …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Stream</code> from a seed and a closure returning a …","Creates an iterator which blocks the current thread until …","An adapter for zipping two streams together.","","","","","An unbounded set of futures.","Mutable iterator over all futures in the unordered set.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","A synchronization primitive for task notification.","A concurrent set which allows for the insertion of <code>usize</code> …","A trait representing requests to poll futures.","A key for task-local data stored in a future’s task.","Units of work submitted to an <code>Executor</code>, currently only …","Representation of a spawned future/stream.","A handle to a “task”, which represents a single …","A reference to a piece of data that’s accessible only …","A trait which represents a sink of notifications that a …","A set insertion to trigger upon <code>unpark</code>.","","","","","","","","","","","","","","","","","","","","","Invokes the underlying <code>close</code> method with this task in …","Returns a handle to the current task to call <code>notify</code> at a …","","Requests that <code>Run</code> is executed soon on the given executor.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a mutable reference to the object the Spawn is …","Get a shared reference to the object the Spawn is wrapping.","Initialize the <code>futures</code> task system.","Insert the given ID into the set","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume the Spawn, returning its inner object","Returns <code>true</code> when called from within the context of the …","Create an <code>AtomicTask</code> initialized with the given <code>Task</code>","Inserts a new piece of task-local data into this task, …","Construct an unpark event that will insert <code>id</code> into <code>set</code> when","Notifies the task that last called <code>register</code>.","Indicate that the task should attempt to poll its future …","Invokes the underlying <code>poll_complete</code> method with this task …","Calls the provided closure, scheduling notifications to be …","Polls the internal future, scheduling notifications to be …","Like <code>poll_future_notify</code>, except polls the underlying …","Registers the current task to be notified on calls to …","Registers the provided task to be notified on calls to …","Actually run the task (invoking <code>poll</code> on its future) on the …","Spawns a future or stream, returning it and the new task …","Invokes the underlying <code>start_send</code> method with this task in …","","","","","","","","","","","","","","","","","","","","","","","","","Indicates that an associated future and/or task are ready …","Blocks the current thread until it’s able to close this …","Blocks the current thread until it’s able to flush this …","Waits for the internal future to complete, blocking this …","Blocks the current thread until it’s able to send <code>value</code> …","Like <code>wait_future</code>, except only waits for the next element …","This function is intended as a performance optimization …","Access this task-local key, running the provided closure …","Operate with a reference to the underlying data.","For the duration of the given callback, add an “unpark …","Handle to the reactor running on a background thread.","A reference to a reactor.","Associates an I/O resource that implements the …","The core reactor, or event loop.","Associates an I/O resource with the reactor instance that …","Return value from the <code>turn</code> method on <code>Reactor</code>.","","Run this reactor on a background thread.","","","","","","","","","","","","","Clears the I/O resource’s read readiness state and …","Resets the I/O resource’s write readiness state and …","","","Returns a “default” handle, i.e., a handle that lazily …","Deregister the I/O resource from the reactor it is …","","","","","","","","","","","Run the reactor on its thread until the process terminates.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying I/O object …","Returns a shared reference to the underlying I/O object …","Returns a handle to this event loop which can be sent …","Returns a reference to the reactor handle.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes self, returning the inner I/O object","Returns true if the reactor is currently idle.","Creates a new <code>PollEvented</code> associated with the default …","Creates a new event loop, returning any error that …","Create a new <code>Registration</code>.","Creates a new <code>PollEvented</code> associated with the specified …","","","Check the I/O resource’s read readiness state.","Poll for events on the I/O resource’s read readiness …","Check the I/O resource’s write readiness state.","Poll for events on the I/O resource’s write readiness …","","","Register the I/O resource with the default reactor.","Register the I/O resource with the specified reactor.","Configures the fallback handle to be returned from …","","","Shutdown the reactor immediately","Shutdown the reactor on idle.","Consume any pending read readiness event.","Consume any pending write readiness event.","","","","","","","","","","","","","","Performs one iteration of the event loop, blocking on …","","","","","","","","","","","Builds Tokio Runtime with custom configuration values.","Handle to the Tokio runtime.","A future that resolves when the Tokio <code>Runtime</code> is shut down.","Executes futures on the runtime","Execute function <code>f</code> after each thread is started but before …","Execute function <code>f</code> before each thread stops.","Run a future to completion on the Tokio runtime.","Run a future to completion on the Tokio runtime, then wait …","Set the maximum number of concurrent blocking sections in …","","","","","","","","","Create the configured <code>Runtime</code>.","Set the <code>Clock</code> instance that will be used by the runtime.","","","Set the maximum number of worker threads for the <code>Runtime</code>’…","A runtime implementation that runs everything on the …","","","Return a handle to the runtime’s executor.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Set the worker thread keep alive duration for threads in …","Set name prefix of threads spawned by the <code>Runtime</code>’s …","Returns a new runtime builder initialized with default …","Create a new runtime instance with default configuration …","","Return a reference to the reactor handle for this runtime …","Start the Tokio runtime using the supplied future to …","Signals the runtime to shutdown immediately.","Signals the runtime to shutdown once it becomes idle.","","","Spawn a future onto the Tokio runtime.","Spawn a future onto the Tokio runtime.","Set the stack size (in bytes) for worker threads.","","","","","","","","","","","","","","Builds a Single-threaded runtime with custom configuration …","Handle to spawn a future on the corresponding <code>CurrentThread</code>…","Single-threaded runtime provides a way to start reactor …","Executes futures on the current thread.","Runs the provided future, blocking the current thread …","Run the provided future to completion using a runtime …","","","","","","","","","Create the configured <code>Runtime</code>.","Set the <code>Clock</code> instance that will be used by the runtime.","","","","","Returns an executor that executes futures on the current …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a new handle to spawn futures on the single-threaded …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a new runtime builder initialized with default …","Returns a new runtime initialized with default …","Start a current-thread runtime using the supplied future …","Run the executor to completion, blocking the thread until …","Executes a future on the current thread.","","","Spawn a future onto the single-threaded Tokio runtime.","Spawn a future onto the <code>CurrentThread</code> runtime instance …","","Spawn a future onto the current <code>CurrentThread</code> instance.","Provides a best effort <strong>hint</strong> to whether or not <code>spawn</code> will …","","","","","","","","","","","","","","","An asynchronous <code>Mutex</code>-like type.","A multi-producer, single-consumer queue for sending values …","A channel for sending a single message between …","A single-producer, multi-consumer channel that only …","An asynchronous mutual exclusion primitive useful for …","A handle to a held <code>Lock</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new lock in an unlocked state ready for use.","Try to acquire the lock.","","","","","","","","","Receive values from the associated <code>Sender</code>.","Send values to the associated <code>Receiver</code>.","Receive values from the associated <code>UnboundedSender</code>.","Send values to the associated <code>UnboundedReceiver</code>.","","","","","","","","","Create a bounded mpsc channel for communicating between …","","","","","","Closes the receiving half of a channel, without dropping …","","Closes the receiving half of a channel, without dropping …","Channel error types","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Check if the <code>Sender</code> is ready to handle a value.","","","","","","","","","","","","","Attempts to send a message on this <code>Sender</code>, returning the …","Attempts to send a message on this <code>UnboundedSender</code> without …","","","","","Create an unbounded mpsc channel for communicating between …","Error returned by <code>Receiver</code>.","Error returned by the <code>Sender</code>.","Error returned by <code>Sender::try_send</code>.","Error returned by <code>UnboundedReceiver</code>.","Error returned by the <code>UnboundedSender</code>.","Returned by <code>UnboundedSender::try_send</code> when the channel has …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the inner value.","Get the inner value.","Did the send fail because the channel has been closed?","Did the send fail because the channel was at capacity?","","","","","","","","","","","","","","","","","","","","","","","","","Receive a value from the associated <code>Sender</code>.","Sends a value to the associated <code>Receiver</code>.","","","","","Create a new one-shot channel for sending single values …","Prevent the associated <code>Sender</code> handle from sending a value.","","","Oneshot error types","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Check if the associated <code>Receiver</code> handle has been dropped.","","Check if the associated <code>Receiver</code> handle has been dropped.","Completes this oneshot with a successful result.","","","","","Attempts to receive a value outside of the context of a …","","","Error returned by the <code>Future</code> implementation for <code>Receiver</code>.","Error returned by the <code>try_recv</code> function on <code>Receiver</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Receives values from the associated <code>Sender</code>.","Returns a reference to the inner value","Sends values to the associated <code>Receiver</code>.","","","","","","","Broadcast a new value via the channel, notifying all …","Create a new watch channel, returning the “send” and …","","","","","","Watch error types","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the most recently sent value","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>Ready</code> when all receivers have dropped.","","Attempts to receive the latest value sent via the channel.","","","","","","","","","","","","Error produced when receiving a value fails.","Error produced when sending a value fails.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","A future that completes at a specified instant in time.","A queue of delayed elements.","Errors encountered by the timer implementation.","A stream representing notifications at fixed interval","Allows a <code>Future</code> or <code>Stream</code> to execute for a limited amount …","Create an error representing a timer at capacity.","","","","","","","","","","","Returns the number of elements the queue can hold without …","Clears the queue, removing all items.","Returns the instant at which the future will complete.","A queue of delayed elements.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets a mutable reference to the underlying value in this …","Gets a reference to the underlying value in this timeout.","Insert <code>value</code> into the queue set to expire after the …","Insert <code>value</code> into the queue set to expire at a specific …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Consumes this timeout, returning the underlying value.","Returns <code>true</code> if the error was caused by the timer being at …","Returns true if the <code>Delay</code> has elapsed","Returns <code>true</code> if there are no items in the queue.","Returns <code>true</code> if the error was caused by the timer being …","Create a new, empty, <code>DelayQueue</code>","Create a new <code>Timeout</code> that allows <code>value</code> to execute for a …","Create a new <code>Delay</code> instance that elapses at <code>deadline</code>.","Create a new <code>Interval</code> that starts at <code>at</code> and yields every …","Create a new <code>Timeout</code> that completes when <code>future</code> completes …","Creates new <code>Interval</code> that yields with interval of <code>duration</code>.","","","","","","Remove the item associated with <code>key</code> from the queue.","Reserve capacity for at least <code>additional</code> more items to be …","Sets the delay of the item associated with <code>key</code> to expire …","Reset the <code>Delay</code> instance to a new deadline.","Sets the delay of the item associated with <code>key</code> to expire …","Create an error representing a shutdown timer.","Allows a future or stream to execute for a maximum amount …","","","","","","","","","","","","","","","","","Create a new, empty, <code>DelayQueue</code> with the specified …","Create a new, empty, <code>DelayQueue</code> backed by the specified …","A queue of delayed elements.","An entry in <code>DelayQueue</code> that has expired and removed.","Token to a value stored in a <code>DelayQueue</code>.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the inner value.","Returns a reference to the inner value.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes <code>self</code> and returns the inner value.","","","","","","","","Error returned by <code>Timeout</code>.","Allows a <code>Future</code> or <code>Stream</code> to execute for a limited amount …","","","","Create a new <code>Error</code> representing the inner value not …","","","Returns the argument unchanged.","Create a new <code>Error</code> representing the inner value completing …","Calls <code>U::from(self)</code>.","Consumes <code>self</code>, returning the inner future error.","Consumes <code>self</code>, returning the error raised by the timer …","Returns <code>true</code> if the error was caused by the inner value …","Returns <code>true</code> if the error was caused by the inner value …","Returns <code>true</code> if the error was caused by the timer.","Creates a new <code>Error</code> representing an error encountered by …","","","","","An extension trait for <code>Future</code> that provides a variety of …","An extension trait for <code>Stream</code> that provides a variety of …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,0,0,1,2,0,0,3,4,5,6,7,8,3,4,5,6,7,8,3,4,3,4,5,6,7,3,4,5,8,5,1,3,4,1,4,6,6,2,3,4,7,7,3,4,3,4,5,6,7,8,1,3,4,5,6,7,8,5,5,6,7,5,6,7,3,4,3,4,5,6,7,8,5,6,7,5,8,0,4,3,4,3,4,5,6,7,8,4,3,4,5,6,7,5,6,7,8,5,6,7,3,4,3,4,5,6,7,8,3,4,5,6,7,8,3,4,5,6,7,8,8,0,0,0,9,10,9,11,10,9,11,9,9,11,10,11,10,10,9,11,10,9,11,10,9,11,9,9,9,9,9,11,9,9,11,9,9,9,9,9,11,9,10,10,9,11,10,9,11,10,9,11,0,0,0,0,0,12,12,13,14,12,13,14,13,13,13,12,13,12,12,13,14,12,13,14,12,13,14,14,12,12,12,0,15,16,13,13,15,16,13,13,13,12,12,13,14,12,13,14,12,13,14,0,0,0,0,17,18,19,17,18,19,17,0,0,17,0,17,17,18,19,17,18,19,17,0,17,18,19,18,19,17,0,17,17,0,18,19,17,17,17,17,17,17,17,17,0,17,0,0,0,0,0,17,0,17,0,17,17,18,19,17,18,19,17,18,19,0,17,0,0,0,0,0,0,0,20,21,22,23,24,20,25,21,22,23,24,20,25,20,20,20,20,21,22,23,24,20,25,21,22,23,24,20,20,25,21,22,23,24,20,25,21,22,23,24,25,20,20,21,22,23,24,25,20,20,20,21,22,23,24,20,25,21,22,23,24,20,25,21,22,23,24,20,25,20,0,0,26,26,26,26,26,26,26,0,26,26,26,27,27,27,27,0,0,27,27,27,27,0,27,27,27,0,0,27,27,27,27,0,27,27,27,27,27,27,0,27,27,27,27,27,27,27,27,27,0,0,0,27,0,0,27,0,0,27,0,0,0,27,27,27,27,27,27,0,0,0,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,27,42,43,42,41,42,27,27,27,0,41,27,0,43,28,30,40,28,29,30,31,32,33,34,35,36,37,38,39,40,41,41,27,27,44,28,29,30,31,32,33,34,35,36,37,38,39,40,41,41,41,41,41,27,41,41,41,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,27,31,32,33,34,35,36,37,38,41,42,43,41,41,0,41,41,27,31,32,33,34,35,36,37,38,45,44,45,44,29,41,0,42,29,39,44,39,42,42,0,42,0,42,42,0,42,0,45,28,30,40,41,44,0,0,0,42,27,41,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,27,39,40,43,28,30,40,0,43,43,45,40,43,43,0,0,0,0,0,0,0,0,46,47,48,49,50,51,46,47,48,50,46,47,48,49,52,50,51,53,46,47,48,49,52,50,51,53,48,52,53,46,48,49,51,49,49,49,51,51,46,47,48,49,52,50,51,53,46,47,48,49,52,50,51,53,46,47,48,49,50,51,52,53,52,53,47,50,46,47,48,49,52,50,51,53,52,48,48,49,48,48,49,46,47,48,49,50,51,48,48,48,52,53,49,46,51,46,49,51,51,52,53,47,50,47,50,52,53,49,46,48,49,50,51,46,48,46,48,46,48,46,48,46,48,49,51,49,49,51,51,49,49,51,51,49,49,51,51,49,46,48,49,46,48,48,49,49,48,48,48,49,49,49,47,48,49,46,49,49,49,51,51,51,52,53,46,50,51,0,46,47,48,49,52,50,51,53,46,47,48,49,52,50,51,53,47,48,49,46,47,48,49,52,50,51,53,0,46,0,49,49,51,51,49,49,51,51,0,0,0,0,54,55,54,55,54,55,54,55,54,55,55,54,55,54,55,54,55,54,55,0,0,0,0,56,57,56,57,56,57,56,57,56,57,56,57,57,56,57,56,57,56,57,56,57,0,0,0,0,0,0,0,0,0,58,59,60,61,62,58,59,60,61,62,62,62,62,58,59,60,61,62,58,59,60,61,62,62,62,58,59,60,61,62,59,60,61,62,58,59,60,61,62,58,59,60,61,62,58,59,60,61,62,58,59,60,61,62,62,0,0,0,0,63,64,65,0,64,0,0,63,64,65,66,67,0,0,66,67,0,68,68,0,0,0,63,65,66,67,66,67,68,65,65,65,42,43,42,63,65,65,42,65,66,67,66,67,68,65,65,65,69,69,69,66,67,68,65,65,63,65,63,43,68,66,67,65,65,65,44,66,66,66,67,63,65,63,65,0,63,65,65,66,67,64,65,63,66,67,42,66,67,43,63,63,63,63,63,65,66,67,63,65,65,66,67,63,65,65,63,65,68,45,44,45,44,42,44,42,42,42,42,42,42,63,65,63,68,68,63,45,68,68,65,65,44,65,68,0,65,42,65,0,63,65,69,69,69,70,70,70,69,69,69,66,67,66,67,66,67,66,67,63,65,68,68,68,43,43,43,45,43,43,65,71,72,73,0,73,74,0,0,74,0,0,0,0,63,64,75,0,0,0,0,0,0,0,0,0,0,64,75,0,0,0,0,0,63,64,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,76,0,63,77,78,79,80,81,82,83,74,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,73,100,101,102,103,104,105,106,107,76,77,78,79,80,81,82,83,74,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,73,100,101,102,103,104,105,106,107,76,63,107,83,102,106,107,76,83,102,106,107,76,0,106,107,107,0,102,0,76,0,108,0,0,63,63,77,78,79,80,81,82,83,74,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,73,100,101,102,103,104,105,106,107,107,76,77,78,79,80,81,82,83,83,74,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,73,100,101,102,103,104,105,106,107,76,63,63,75,63,77,78,79,80,81,82,83,74,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,73,100,101,102,103,104,105,106,107,76,64,77,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,99,73,100,101,102,103,104,105,63,86,63,63,63,63,0,79,0,0,63,63,79,0,63,102,63,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,73,100,101,102,103,104,105,0,0,63,63,0,0,63,73,63,83,102,106,107,76,107,77,78,79,80,81,82,83,74,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,73,100,101,102,103,104,105,106,107,76,77,78,79,80,81,82,83,74,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,73,100,101,102,103,104,105,106,107,76,77,78,79,80,81,82,83,74,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,73,100,101,102,103,104,105,106,107,76,63,109,110,111,112,113,113,0,114,0,0,0,0,0,0,0,0,0,65,0,0,114,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,114,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,113,153,154,155,156,157,158,159,160,161,162,163,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,114,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,113,153,154,155,156,157,158,159,160,161,162,163,65,65,65,65,65,0,65,121,124,125,126,129,130,132,133,134,135,138,139,142,143,144,145,146,150,151,156,163,65,65,65,153,154,152,113,153,0,65,65,65,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,114,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,152,113,113,153,154,155,156,157,158,159,160,161,162,163,65,65,65,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,114,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,113,153,154,155,156,157,158,159,160,161,162,163,65,153,154,65,0,0,0,121,124,125,126,129,130,131,132,133,134,135,142,143,144,145,150,151,156,158,121,124,125,126,129,130,131,132,133,134,135,142,143,144,145,150,151,156,158,65,65,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,114,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,113,153,154,155,156,157,158,159,160,161,162,163,115,116,65,127,128,131,149,157,161,121,124,125,126,129,130,131,132,133,134,135,142,143,144,145,150,151,156,158,158,130,153,154,0,153,0,0,153,154,65,65,65,153,154,158,0,65,139,65,65,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,154,155,156,157,160,161,162,121,124,125,126,129,130,132,133,134,135,138,139,142,143,144,145,146,150,151,156,163,0,153,154,0,162,163,65,159,149,149,65,65,65,121,124,125,126,129,130,132,133,134,135,138,139,142,143,144,145,146,150,151,156,163,149,149,65,65,65,152,113,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,114,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,113,153,154,155,156,157,158,159,160,161,162,163,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,114,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,113,153,154,155,156,157,158,159,160,161,162,163,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,114,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,113,153,154,155,156,157,158,159,160,161,162,163,0,65,65,164,165,166,166,0,0,167,167,167,167,167,167,167,167,167,167,167,0,0,0,0,0,0,0,0,0,0,168,169,170,171,172,173,174,168,169,170,171,172,173,174,172,173,174,172,173,174,170,0,168,175,168,169,170,171,172,173,174,168,169,170,171,172,173,174,170,170,0,176,168,169,170,171,172,173,174,170,174,168,172,173,168,174,170,170,170,170,168,168,169,0,170,172,173,174,168,169,170,171,172,173,174,168,169,170,171,172,173,174,168,169,170,171,172,173,174,177,170,170,170,170,170,174,171,172,0,0,0,0,0,0,0,178,178,179,178,180,181,182,183,179,178,180,181,182,183,179,179,182,182,182,181,179,180,179,179,179,178,180,181,182,183,180,179,178,180,181,182,183,179,179,178,180,179,178,180,181,182,183,179,178,179,178,181,179,178,178,179,181,179,181,179,179,181,181,178,179,179,180,180,181,181,182,179,178,180,181,182,183,179,178,180,181,182,183,178,179,178,180,181,182,183,178,182,179,179,0,0,0,0,184,184,185,185,184,186,184,187,185,186,184,187,185,184,184,187,187,184,0,185,187,185,186,184,187,185,186,184,187,185,186,184,187,185,186,184,184,184,185,186,185,0,185,185,187,187,187,185,184,187,186,184,187,185,186,184,187,185,186,184,187,185,0,0,0,0,188,0,189,190,188,191,189,190,188,191,190,190,189,191,189,191,189,189,191,189,190,188,191,189,190,188,191,188,189,190,188,191,190,188,0,188,0,189,189,188,191,191,189,191,189,191,189,190,188,191,189,190,188,191,189,190,188,191,0,0,0,0,0,0,192,193,192,193,192,192,192,193,193,193,192,193,193,192,192,192,193,192,193,192,192,192,193,192,193,192,193,192,193,0,0,0,0,194,195,196,197,194,195,196,197,0,194,196,194,196,194,195,196,197,0,194,195,196,197,194,195,196,197,194,195,196,197,195,197,194,196,194,194,196,194,196,194,195,196,197,194,195,196,197,194,196,194,195,196,197,0,0,0,0,0,0,0,198,199,200,201,202,203,198,199,200,201,202,203,198,199,200,201,202,203,198,198,199,199,200,200,201,201,202,202,203,203,198,199,199,200,201,202,202,203,198,199,200,201,202,203,199,202,199,199,198,199,200,201,202,203,198,199,200,201,202,203,198,199,200,201,202,203,198,199,200,201,202,203,0,0,204,205,204,205,0,205,204,205,0,204,205,204,205,204,205,205,204,205,204,204,204,205,204,205,205,204,205,0,0,206,207,206,207,206,207,206,206,207,207,206,207,206,207,206,207,206,207,206,207,206,207,0,0,0,208,209,210,208,209,210,209,0,208,208,210,208,209,0,208,209,210,208,209,210,208,208,209,210,208,209,209,208,209,208,208,209,210,208,209,210,208,209,210,0,0,211,212,211,212,211,212,211,211,212,212,211,212,211,212,211,212,211,212,211,212,211,212,0,0,0,0,0,213,214,215,216,213,217,214,215,216,213,217,214,214,216,0,213,214,215,216,213,213,217,214,215,216,213,217,215,215,214,214,214,215,216,213,217,215,216,215,213,216,214,213,214,215,216,217,215,217,214,215,215,216,217,214,214,214,216,214,213,0,213,214,215,216,213,217,214,215,216,213,217,214,215,216,213,217,214,214,0,0,0,218,219,218,219,219,219,218,219,218,219,218,218,218,219,218,219,218,219,218,219,218,219,0,0,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,0,0],"f":[null,null,null,null,null,null,null,null,[[]],null,null,null,null,null,[[],["instant",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["bytescodec",3]],["bytescodec",3]],[[["linescodec",3]],["linescodec",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["framed",3]],["result",4,[["async",4]]]],[[["framedread",3]],["result",4,[["async",4]]]],[[["framedwrite",3]],["result",4,[["async",4]]]],[[["bytescodec",3],["bytescodec",3]],["ordering",4]],[[["linescodec",3],["linescodec",3]],["ordering",4]],[[["framed",3]],["",0]],null,[[["framed",3]],["",0]],[[["",0],["bytesmut",3]],["result",4,[["option",4]]]],[[["bytescodec",3],["bytesmut",3]],["result",4,[["option",4,[["bytesmut",3]]],["error",3]]]],[[["linescodec",3],["bytesmut",3]],["result",4,[["option",4,[["string",3]]],["error",3]]]],[[["",0],["bytesmut",3]],["result",4,[["option",4]]]],[[["linescodec",3],["bytesmut",3]],["result",4,[["option",4,[["string",3]]],["error",3]]]],[[["framedread",3]],["",0]],[[["framedread",3]],["",0]],[[["",0],["bytesmut",3]],["result",4]],[[["bytescodec",3],["bytes",3],["bytesmut",3]],["result",4,[["error",3]]]],[[["linescodec",3],["string",3],["bytesmut",3]],["result",4,[["error",3]]]],[[["framedwrite",3]],["",0]],[[["framedwrite",3]],["",0]],[[["bytescodec",3],["bytescodec",3]],["bool",0]],[[["linescodec",3],["linescodec",3]],["bool",0]],[[["bytescodec",3],["formatter",3]],["result",4,[["error",3]]]],[[["linescodec",3],["formatter",3]],["result",4,[["error",3]]]],[[["framed",3],["formatter",3]],["result",4,[["error",3]]]],[[["framedread",3],["formatter",3]],["result",4,[["error",3]]]],[[["framedwrite",3],["formatter",3]],["result",4,[["error",3]]]],[[["framedparts",3],["formatter",3]],["result",4,[["error",3]]]],[[],["framed",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["framedparts",3]],["framed",3]],[[["framed",3]],["",0]],[[["framedread",3]],["",0]],[[["framedwrite",3]],["",0]],[[["framed",3]],["",0]],[[["framedread",3]],["",0]],[[["framedwrite",3]],["",0]],[[["bytescodec",3],["",0]]],[[["linescodec",3],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["framed",3]]],[[["framedread",3]]],[[["framedwrite",3]]],[[["framed",3]],["framedparts",3]],null,null,[[["linescodec",3]],["usize",0]],[[["bytescodec",3],["bytescodec",3]],["bool",0]],[[["linescodec",3],["linescodec",3]],["bool",0]],[[],["bytescodec",3]],[[],["linescodec",3]],[[],["framed",3]],[[],["framedread",3]],[[],["framedwrite",3]],[[],["framedparts",3]],[[["usize",0]],["linescodec",3]],[[["bytescodec",3],["bytescodec",3]],["option",4,[["ordering",4]]]],[[["linescodec",3],["linescodec",3]],["option",4,[["ordering",4]]]],[[["framed",3]],["result",4,[["async",4,[["option",4]]]]]],[[["framedread",3]],["result",4,[["async",4,[["option",4]]]]]],[[["framedwrite",3]],["result",4,[["async",4,[["option",4]]]]]],[[["framed",3]],["result",4,[["async",4]]]],[[["framedread",3]],["result",4,[["async",4]]]],[[["framedwrite",3]],["result",4,[["async",4]]]],null,[[["framed",3]],["result",4,[["asyncsink",4]]]],[[["framedread",3]],["result",4,[["asyncsink",4]]]],[[["framedwrite",3]],["result",4,[["asyncsink",4]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["builder",3]],["builder",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["builder",3]],["builder",3]],[[["",0],["",0]]],[[["lengthdelimitedcodec",3],["bytesmut",3]],["result",6,[["option",4,[["bytesmut",3]]]]]],[[["frametoobig",3]],["str",0]],[[["lengthdelimitedcodec",3],["bytes",3],["bytesmut",3]],["result",4,[["error",3]]]],[[["frametoobig",3],["formatter",3]],["result",6]],[[["frametoobig",3],["formatter",3]],["result",6]],[[["builder",3],["formatter",3]],["result",6]],[[["lengthdelimitedcodec",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["builder",3],["isize",0]],["builder",3]],[[["builder",3],["usize",0]],["builder",3]],[[["builder",3],["usize",0]],["builder",3]],[[["builder",3]],["builder",3]],[[["builder",3],["usize",0]],["builder",3]],[[["lengthdelimitedcodec",3]],["usize",0]],[[["builder",3]],["builder",3]],[[],["builder",3]],[[],["lengthdelimitedcodec",3]],[[["builder",3]],["lengthdelimitedcodec",3]],[[["builder",3]],["framed",3,[["lengthdelimitedcodec",3]]]],[[["builder",3]],["framedread",3,[["lengthdelimitedcodec",3]]]],[[["builder",3]],["framedwrite",3,[["lengthdelimitedcodec",3]]]],[[["builder",3],["usize",0]],["builder",3]],[[["lengthdelimitedcodec",3],["usize",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,[[],["spawnerror",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["defaultexecutor",3]],["defaultexecutor",3]],[[["",0],["",0]]],[[],["defaultexecutor",3]],[[["spawnerror",3]],["str",0]],[[["defaultexecutor",3]],["result",4,[["executeerror",3]]]],[[["spawnerror",3],["formatter",3]],["result",4,[["error",3]]]],[[["spawnerror",3],["formatter",3]],["result",4,[["error",3]]]],[[["defaultexecutor",3],["formatter",3]],["result",4,[["error",3]]]],[[["spawn",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["spawn",3]]],[[["spawnerror",3]],["bool",0]],[[["spawnerror",3]],["bool",0]],[[],["spawnerror",3]],[[],["spawn",3]],[[["",0],["box",3,[["future",8],["global",3]]]],["result",4,[["spawnerror",3]]]],[[["",0]],["result",4,[["spawnerror",3]]]],[[["defaultexecutor",3],["box",3,[["future",8],["global",3]]]],["result",4,[["spawnerror",3]]]],[[["defaultexecutor",3]],["result",4,[["spawnerror",3]]]],[[["",0]],["result",4,[["spawnerror",3]]]],[[["",0]],["result",4,[["spawnerror",3]]]],[[["defaultexecutor",3]],["result",4,[["spawnerror",3]]]],[[["defaultexecutor",3]],["result",4,[["spawnerror",3]]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["createfuture",3]],[[],["createdirfuture",3]],[[],["createdirallfuture",3]],[[["file",3]]],null,[[["file",3]],["result",4,[["error",3]]]],[[["file",3],["formatter",3]],["result",4,[["error",3]]]],[[["readfile",3],["formatter",3]],["result",4,[["error",3]]]],[[["writefile",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[["file",3]],["file",3]],[[],["hardlinkfuture",3]],[[]],[[]],[[]],[[]],[[]],[[["file",3]],["file",3]],[[],["metadatafuture",3]],[[["file",3]],["metadatafuture",3]],[[],["openfuture",3]],null,[[["readfile",3]],["result",4,[["async",4]]]],[[["writefile",3]],["result",4,[["async",4]]]],[[["file",3]],["result",4,[["async",4,[["metadata",3]]],["error",3]]]],[[["file",3],["seekfrom",4]],["result",4,[["async",4,[["u64",0]]],["error",3]]]],[[["file",3],["u64",0]],["result",4,[["async",4],["error",3]]]],[[["file",3],["permissions",3]],["result",4,[["async",4],["error",3]]]],[[["file",3]],["result",4,[["async",4],["error",3]]]],[[["file",3]],["result",4,[["async",4],["error",3]]]],[[["file",3]],["result",4,[["async",4,[["file",3]]],["error",3]]]],[[["file",3]],["bool",0]],[[],["readfile",3]],[[["file",3]],["result",4,[["usize",0],["error",3]]]],[[],["readdirfuture",3]],[[],["readlinkfuture",3]],[[],["removedirfuture",3]],[[],["removefilefuture",3]],[[],["renamefuture",3]],[[["file",3],["seekfrom",4]],["seekfuture",3]],[[["permissions",3]],["setpermissionsfuture",3]],[[["file",3]],["result",4,[["async",4],["error",3]]]],[[],["symlinkmetadatafuture",3]],[[["file",3]],["clonefuture",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["writefile",3]],[[["file",3]],["result",4,[["usize",0],["error",3]]]],null,null,null,null,null,null,null,[[["openoptions",3],["bool",0]],["openoptions",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["openoptions",3]],["openoptions",3]],[[["",0],["",0]]],[[["openoptions",3],["bool",0]],["openoptions",3]],[[["openoptions",3],["bool",0]],["openoptions",3]],[[["clonefuture",3],["formatter",3]],["result",4,[["error",3]]]],[[["createfuture",3],["formatter",3]],["result",4,[["error",3]]]],[[["metadatafuture",3],["formatter",3]],["result",4,[["error",3]]]],[[["openfuture",3],["formatter",3]],["result",4,[["error",3]]]],[[["openoptions",3],["formatter",3]],["result",4,[["error",3]]]],[[["seekfuture",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[["openoptions",3]],["openoptions",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["openoptions",3]],[[["openoptions",3]],["openfuture",3]],[[["clonefuture",3]],["result",4,[["async",4]]]],[[["createfuture",3]],["result",4,[["async",4]]]],[[["metadatafuture",3]],["result",4,[["async",4]]]],[[["openfuture",3]],["result",4,[["async",4]]]],[[["seekfuture",3]],["result",4,[["async",4]]]],[[["openoptions",3],["bool",0]],["openoptions",3]],[[["",0]]],[[["openoptions",3],["bool",0]],["openoptions",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["openoptions",3],["bool",0]],["openoptions",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["symlinkfuture",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[["symlinkfuture",3]],["result",4,[["async",4]]]],[[],["symlinkfuture",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullbytes",3]],[[["error",3]],["option",4,[["error",8]]]],[[],["chain",3]],[[["errorkind",4]],["errorkind",4]],[[["",0],["",0]]],[[["errorkind",4],["errorkind",4]],["ordering",4]],[[],["copy",3]],[[["error",3]],["str",0]],[[["errorkind",4],["errorkind",4]],["bool",0]],[[],["flush",3]],[[["",0]],["result",4,[["error",3]]]],[[["stderr",3]],["result",4,[["error",3]]]],[[["stdout",3]],["result",4,[["error",3]]]],[[["writehalf",3]],["result",4,[["error",3]]]],[[["stderr",3],["formatter",3]],["result",4,[["error",3]]]],[[["stdin",3],["formatter",3]],["result",4,[["error",3]]]],[[["stdout",3],["formatter",3]],["result",4,[["error",3]]]],[[["copy",3],["formatter",3]],["result",4,[["error",3]]]],[[["flush",3],["formatter",3]],["result",4,[["error",3]]]],[[["readexact",3],["formatter",3]],["result",4,[["error",3]]]],[[["readtoend",3],["formatter",3]],["result",4,[["error",3]]]],[[["readuntil",3],["formatter",3]],["result",4,[["error",3]]]],[[["shutdown",3],["formatter",3]],["result",4,[["error",3]]]],[[["writeall",3],["formatter",3]],["result",4,[["error",3]]]],[[["lines",3],["formatter",3]],["result",4,[["error",3]]]],[[["readhalf",3],["formatter",3]],["result",4,[["error",3]]]],[[["writehalf",3],["formatter",3]],["result",4,[["error",3]]]],[[["error",3],["formatter",3]],["result",4,[["error",3]]]],[[["error",3],["formatter",3]],["result",4,[["error",3]]]],[[["errorkind",4],["formatter",3]],["result",4,[["error",3]]]],[[["errorkind",4],["formatter",3]],["result",4,[["error",3]]]],[[],["framed",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["intoinnererror",3]],["error",3]],[[["errorkind",4]],["error",3]],[[["error",3]],["error",3]],[[["nulerror",3]],["error",3]],[[]],[[]],[[["i32",0]],["error",3]],[[["error",3]],["option",4,[["error",8]]]],[[["error",3]],["option",4,[["error",8]]]],[[["errorkind",4],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["lines",3]]],[[["error",3]],["option",4,[["box",3,[["error",8],["global",3]]]]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["error",3]],["errorkind",4]],[[],["error",3]],[[],["lines",3]],[[["errorkind",4]],["error",3]],[[],["error",3]],[[["errorkind",4],["errorkind",4]],["option",4,[["ordering",4]]]],[[["copy",3]],["result",4,[["async",4],["error",3]]]],[[["flush",3]],["result",4,[["async",4],["error",3]]]],[[["readexact",3]],["result",4,[["async",4],["error",3]]]],[[["readtoend",3]],["result",4,[["async",4],["error",3]]]],[[["readuntil",3]],["result",4,[["async",4],["error",3]]]],[[["shutdown",3]],["result",4,[["async",4],["error",3]]]],[[["writeall",3]],["result",4,[["async",4],["error",3]]]],[[["lines",3]],["result",4,[["async",4,[["option",4,[["string",3]]]]],["error",3]]]],[[["",0]],["result",4,[["async",4],["error",3]]]],[[["",0]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["",0]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["",0]],["bool",0]],[[["stdin",3]],["bool",0]],[[["error",3]],["option",4,[["i32",0]]]],[[],["read",3]],[[["",0]],["result",4,[["usize",0],["error",3]]]],[[["stdin",3]],["result",4,[["usize",0],["error",3]]]],[[["readhalf",3]],["result",4,[["usize",0],["error",3]]]],[[["",0],["",0]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["readhalf",3],["",0]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["",0],["readbuf",3]],["result",4,[["error",3]]]],[[["",0],["readbuf",3]],["result",4,[["error",3]]]],[[],["readexact",3]],[[["",0]],["result",4,[["error",3]]]],[[["vec",3,[["u8",0],["global",3]]]],["readtoend",3]],[[["",0],["vec",3]],["result",4,[["usize",0],["error",3]]]],[[["",0],["string",3]],["result",4,[["usize",0],["error",3]]]],[[["u8",0],["vec",3,[["u8",0],["global",3]]]],["readuntil",3]],[[["",0]],["result",4,[["usize",0],["error",3]]]],[[],["shutdown",3]],[[["",0]],["result",4,[["async",4],["error",3]]]],[[["stderr",3]],["result",4,[["async",4],["error",3]]]],[[["stdout",3]],["result",4,[["async",4],["error",3]]]],[[["writehalf",3]],["result",4,[["async",4],["error",3]]]],[[["error",3]],["option",4,[["error",8]]]],[[]],[[],["stderr",3]],[[],["stdin",3]],[[],["stdout",3]],[[["u64",0]],["take",3]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["readhalf",3],["writehalf",3]]],[[["writehalf",3],["readhalf",3]]],[[["",0]],["result",4,[["usize",0],["error",3]]]],[[["stderr",3]],["result",4,[["usize",0],["error",3]]]],[[["stdout",3]],["result",4,[["usize",0],["error",3]]]],[[["writehalf",3]],["result",4,[["usize",0],["error",3]]]],[[],["writeall",3]],[[["",0]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[["",0],["",0]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["writehalf",3],["",0]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["",0],["arguments",3]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["usize",0],["error",3]]]],null,null,null,null,null,null,null,null,[[["unixdatagram",3]],["i32",0]],[[["tcplistener",3]],["i32",0]],[[["udpsocket",3]],["i32",0]],[[["tcpstream",3]],["i32",0]],[[["unixlistener",3]],["i32",0]],[[["unixstream",3]],["i32",0]],[[],["result",4,[["unixdatagram",3],["error",3]]]],[[["socketaddr",4]],["result",4,[["tcplistener",3],["error",3]]]],[[["socketaddr",4]],["result",4,[["udpsocket",3],["error",3]]]],[[],["result",4,[["unixlistener",3],["error",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["udpsocket",3]],["result",4,[["bool",0],["error",3]]]],[[["udpframed",3]],["result",4,[["async",4]]]],[[["unixdatagramframed",3]],["result",4,[["async",4]]]],[[["unixdatagram",3]],["result",4,[["error",3]]]],[[["udpsocket",3],["socketaddr",4]],["result",4,[["error",3]]]],[[["socketaddr",4]],["connectfuture",3]],[[],["connectfuture",3]],[[["tcpstream",3],["socketaddr",4],["handle",3]],["connectfuture",3]],[[["tcpstream",3]],["result",4,[["error",3]]]],[[["tcpstream",3]],["result",4,[["error",3]]]],[[["unixstream",3]],["result",4,[["error",3]]]],[[["unixstream",3]],["result",4,[["error",3]]]],[[["unixdatagram",3],["formatter",3]],["result",4,[["error",3]]]],[[["tcplistener",3],["formatter",3]],["result",4,[["error",3]]]],[[["udpsocket",3],["formatter",3]],["result",4,[["error",3]]]],[[["tcpstream",3],["formatter",3]],["result",4,[["error",3]]]],[[["udpframed",3],["formatter",3]],["result",4,[["error",3]]]],[[["unixlistener",3],["formatter",3]],["result",4,[["error",3]]]],[[["unixstream",3],["formatter",3]],["result",4,[["error",3]]]],[[["unixdatagramframed",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["unixdatagram",3],["handle",3]],["result",4,[["unixdatagram",3],["error",3]]]],[[["tcplistener",3],["handle",3]],["result",4,[["tcplistener",3],["error",3]]]],[[["udpsocket",3],["handle",3]],["result",4,[["udpsocket",3],["error",3]]]],[[["tcpstream",3],["handle",3]],["result",4,[["tcpstream",3],["error",3]]]],[[["unixlistener",3],["handle",3]],["result",4,[["unixlistener",3],["error",3]]]],[[["unixstream",3],["handle",3]],["result",4,[["unixstream",3],["error",3]]]],[[["udpframed",3]],["udpsocket",3]],[[["unixdatagramframed",3]],["unixdatagram",3]],[[["udpframed",3]],["udpsocket",3]],[[["unixdatagramframed",3]],["unixdatagram",3]],[[["tcplistener",3]],["incoming",3]],[[["unixlistener",3]],["incoming",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["udpframed",3]],["udpsocket",3]],[[["udpsocket",3],["ipv4addr",3],["ipv4addr",3]],["result",4,[["error",3]]]],[[["udpsocket",3],["ipv6addr",3],["u32",0]],["result",4,[["error",3]]]],[[["tcpstream",3]],["result",4,[["option",4,[["duration",3]]],["error",3]]]],[[["udpsocket",3],["ipv4addr",3],["ipv4addr",3]],["result",4,[["error",3]]]],[[["udpsocket",3],["ipv6addr",3],["u32",0]],["result",4,[["error",3]]]],[[["tcpstream",3]],["result",4,[["option",4,[["duration",3]]],["error",3]]]],[[["unixdatagram",3]],["result",4,[["socketaddr",3],["error",3]]]],[[["tcplistener",3]],["result",4,[["socketaddr",4],["error",3]]]],[[["udpsocket",3]],["result",4,[["socketaddr",4],["error",3]]]],[[["tcpstream",3]],["result",4,[["socketaddr",4],["error",3]]]],[[["unixlistener",3]],["result",4,[["socketaddr",3],["error",3]]]],[[["unixstream",3]],["result",4,[["socketaddr",3],["error",3]]]],[[["udpsocket",3]],["result",4,[["bool",0],["error",3]]]],[[["udpsocket",3]],["result",4,[["bool",0],["error",3]]]],[[["udpsocket",3]],["result",4,[["u32",0],["error",3]]]],[[["udpsocket",3]],["udpframed",3]],[[["unixdatagram",3]],["unixdatagramframed",3]],[[["tcpstream",3]],["result",4,[["bool",0],["error",3]]]],[[],["result",4,[["error",3]]]],[[],["result",4,[["error",3]]]],[[["unixdatagram",3]],["result",4,[["socketaddr",3],["error",3]]]],[[["tcpstream",3]],["result",4,[["socketaddr",4],["error",3]]]],[[["unixstream",3]],["result",4,[["socketaddr",3],["error",3]]]],[[["unixstream",3]],["result",4,[["ucred",3],["error",3]]]],[[["udpframed",3]],["result",4,[["async",4,[["option",4]]]]]],[[["unixdatagramframed",3]],["result",4,[["async",4,[["option",4]]]]]],[[["tcplistener",3]],["result",4,[["async",4],["error",3]]]],[[["unixlistener",3]],["result",4,[["async",4],["error",3]]]],[[["tcplistener",3]],["result",4,[["async",4],["error",3]]]],[[["unixlistener",3]],["result",4,[["async",4],["error",3]]]],[[["udpframed",3]],["result",4,[["async",4]]]],[[["unixdatagramframed",3]],["result",4,[["async",4]]]],[[["tcpstream",3]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["unixdatagram",3],["ready",3]],["result",4,[["async",4,[["ready",3]]],["error",3]]]],[[["udpsocket",3],["ready",3]],["result",4,[["async",4,[["ready",3]]],["error",3]]]],[[["tcpstream",3],["ready",3]],["result",4,[["async",4,[["ready",3]]],["error",3]]]],[[["unixlistener",3],["ready",3]],["result",4,[["async",4,[["ready",3]]],["error",3]]]],[[["unixstream",3],["ready",3]],["result",4,[["async",4,[["ready",3]]],["error",3]]]],[[["unixdatagram",3]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["udpsocket",3]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["unixdatagram",3]],["result",4,[["async",4],["error",3]]]],[[["udpsocket",3]],["result",4,[["async",4],["error",3]]]],[[["unixdatagram",3]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["udpsocket",3]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["unixdatagram",3]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["udpsocket",3],["socketaddr",4]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["unixdatagram",3]],["result",4,[["async",4,[["ready",3]]],["error",3]]]],[[["udpsocket",3]],["result",4,[["async",4,[["ready",3]]],["error",3]]]],[[["tcpstream",3]],["result",4,[["async",4,[["ready",3]]],["error",3]]]],[[["unixstream",3]],["result",4,[["async",4,[["ready",3]]],["error",3]]]],[[["tcpstream",3]],["bool",0]],[[["tcpstream",3]],["bool",0]],[[["unixstream",3]],["bool",0]],[[["unixstream",3]],["bool",0]],[[["tcpstream",3]],["result",4,[["usize",0],["error",3]]]],[[["tcpstream",3]],["result",4,[["usize",0],["error",3]]]],[[["unixstream",3]],["result",4,[["usize",0],["error",3]]]],[[["unixstream",3]],["result",4,[["usize",0],["error",3]]]],[[["tcpstream",3],["",0]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["tcpstream",3],["",0]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["unixstream",3],["",0]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["unixstream",3],["",0]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["tcpstream",3]],["result",4,[["usize",0],["error",3]]]],[[["unixdatagram",3]],["recvdgram",3]],[[["udpsocket",3]],["recvdgram",3]],[[["tcpstream",3]],["result",4,[["usize",0],["error",3]]]],[[["unixdatagram",3]],["senddgram",3]],[[["udpsocket",3],["socketaddr",4]],["senddgram",3]],[[["udpsocket",3],["bool",0]],["result",4,[["error",3]]]],[[["tcpstream",3],["option",4,[["duration",3]]]],["result",4,[["error",3]]]],[[["tcpstream",3],["option",4,[["duration",3]]]],["result",4,[["error",3]]]],[[["udpsocket",3],["bool",0]],["result",4,[["error",3]]]],[[["udpsocket",3],["bool",0]],["result",4,[["error",3]]]],[[["udpsocket",3],["u32",0]],["result",4,[["error",3]]]],[[["tcpstream",3],["bool",0]],["result",4,[["error",3]]]],[[["tcpstream",3],["usize",0]],["result",4,[["error",3]]]],[[["tcpstream",3],["usize",0]],["result",4,[["error",3]]]],[[["tcplistener",3],["u32",0]],["result",4,[["error",3]]]],[[["udpsocket",3],["u32",0]],["result",4,[["error",3]]]],[[["tcpstream",3],["u32",0]],["result",4,[["error",3]]]],[[["unixdatagram",3],["shutdown",4]],["result",4,[["error",3]]]],[[["tcpstream",3],["shutdown",4]],["result",4,[["error",3]]]],[[["tcpstream",3]],["result",4,[["async",4],["error",3]]]],[[["tcpstream",3]],["result",4,[["async",4],["error",3]]]],[[["unixstream",3]],["result",4,[["async",4],["error",3]]]],[[["unixstream",3]],["result",4,[["async",4],["error",3]]]],[[["unixstream",3],["shutdown",4]],["result",4,[["error",3]]]],[[["udpframed",3]],["result",4,[["asyncsink",4]]]],[[["unixdatagramframed",3]],["result",4,[["asyncsink",4]]]],[[["unixdatagram",3]],["result",4,[["option",4,[["error",3]]],["error",3]]]],[[["unixlistener",3]],["result",4,[["option",4,[["error",3]]],["error",3]]]],[[["unixstream",3]],["result",4,[["option",4,[["error",3]]],["error",3]]]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["tcplistener",3]],["result",4,[["u32",0],["error",3]]]],[[["udpsocket",3]],["result",4,[["u32",0],["error",3]]]],[[["tcpstream",3]],["result",4,[["u32",0],["error",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[],["result",4,[["unixdatagram",3],["error",3]]]],null,[[["tcpstream",3]],["result",4,[["usize",0],["error",3]]]],[[["tcpstream",3]],["result",4,[["usize",0],["error",3]]]],[[["unixstream",3]],["result",4,[["usize",0],["error",3]]]],[[["unixstream",3]],["result",4,[["usize",0],["error",3]]]],[[["tcpstream",3],["",0]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["tcpstream",3],["",0]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["unixstream",3],["",0]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["unixstream",3],["",0]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["incoming",3],["formatter",3]],["result",4,[["error",3]]]],[[["connectfuture",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[["incoming",3]],["result",4,[["async",4,[["option",4]]],["error",3]]]],[[["connectfuture",3]],["result",4,[["async",4,[["tcpstream",3]]],["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["senddgram",3],["formatter",3]],["result",4,[["error",3]]]],[[["recvdgram",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["recvdgram",3]],["parts",3]],[[["senddgram",3]],["result",4,[["async",4],["error",3]]]],[[["recvdgram",3]],["result",4,[["async",4],["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["ucred",3]],["ucred",3]],[[["",0],["",0]]],[[["ucred",3],["ucred",3]],["bool",0]],[[["incoming",3],["formatter",3]],["result",4,[["error",3]]]],[[["recvdgram",3],["formatter",3]],["result",4,[["error",3]]]],[[["senddgram",3],["formatter",3]],["result",4,[["error",3]]]],[[["connectfuture",3],["formatter",3]],["result",4,[["error",3]]]],[[["ucred",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],null,[[["ucred",3],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["ucred",3],["ucred",3]],["bool",0]],[[["incoming",3]],["result",4,[["async",4,[["option",4]]],["error",3]]]],[[["recvdgram",3]],["result",4,[["async",4]]]],[[["senddgram",3]],["result",4,[["async",4]]]],[[["connectfuture",3]],["result",4,[["async",4,[["unixstream",3]]],["error",3]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["andthen",3]],[[],["andthen",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]],["buffer",3]],[[["usize",0]],["bufferunordered",3]],[[["usize",0]],["buffered",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["bytes",3]],[[],["catchunwind",3]],[[],["catchunwind",3]],[[],["chain",3]],[[],["chain",3]],[[["usize",0]],["chunks",3]],[[["async",4]],["async",4]],[[["asyncsink",4]],["asyncsink",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["result",4,[["async",4]]]],[[],["collect",3]],[[],["concat",3]],[[],["concat2",3]],[[],["enumerate",3]],[[],["enumerate",3]],[[],["enumerate",3]],[[["async",4],["async",4]],["bool",0]],[[["asyncsink",4],["asyncsink",4]],["bool",0]],[[],["fanout",3]],[[],["filter",3]],[[],["filtermap",3]],[[],["flatten",3]],[[],["flatten",3]],[[],["flattenstream",3]],[[["",0]],["result",4,[["error",3]]]],[[],["flush",3]],[[["async",4],["formatter",3]],["result",4,[["error",3]]]],[[["asyncsink",4],["formatter",3]],["result",4,[["error",3]]]],[[],["fold",3]],[[],["foreach",3]],[[],["forward",3]],[[],["framed",3]],[[]],[[["never",0]]],[[],["async",4]],[[]],[[],["fromerr",3]],[[],["fromerr",3]],[[],["fuse",3]],[[],["fuse",3]],null,[[],["inspect",3]],[[],["inspect",3]],[[],["inspecterr",3]],[[]],[[]],[[]],[[],["streamfuture",3]],[[],["intostream",3]],[[["async",4]],["bool",0]],[[["asyncsink",4]],["bool",0]],[[["",0]],["bool",0]],[[["async",4]],["bool",0]],[[["asyncsink",4]],["bool",0]],[[["",0]],["bool",0]],[[],["join",3]],[[],["join3",3]],[[],["join4",3]],[[],["join5",3]],[[],["map",3]],[[],["map",3]],[[["async",4]],["async",4]],[[["asyncsink",4]],["asyncsink",4]],[[],["maperr",3]],[[],["maperr",3]],[[],["merge",3]],[[["async",4],["async",4]],["bool",0]],[[["asyncsink",4],["asyncsink",4]],["bool",0]],[[],["orelse",3]],[[],["orelse",3]],[[],["peekable",3]],[[["",0]],["result",4,[["async",4]]]],[[["",0]],["result",4,[["async",4,[["option",4]]]]]],[[["",0]],["result",4,[["async",4]]]],[[["",0]],["result",4,[["async",4],["error",3]]]],[[["",0]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["",0]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["",0]],["bool",0]],[[["",0]],["result",4,[["usize",0],["error",3]]]],[[["",0],["",0]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["",0],["readbuf",3]],["result",4,[["error",3]]]],[[["",0],["readbuf",3]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[["",0],["vec",3]],["result",4,[["usize",0],["error",3]]]],[[["",0],["string",3]],["result",4,[["usize",0],["error",3]]]],[[["",0]],["result",4,[["usize",0],["error",3]]]],[[],["select",3]],[[],["select",3]],[[],["select2",3]],[[],["send",3]],[[],["sendall",3]],[[],["shared",3]],[[["",0]],["result",4,[["async",4],["error",3]]]],[[],["sinkfromerr",3]],[[],["sinkmaperr",3]],[[["u64",0]],["skip",3]],[[],["skipwhile",3]],[[]],[[]],[[["",0]],["result",4,[["asyncsink",4]]]],null,[[["u64",0]],["take",3]],[[["u64",0]],["take",3]],[[],["takewhile",3]],null,[[],["then",3]],[[],["then",3]],[[["duration",3]],["throttle",3]],[[["duration",3]],["throttle",3]],[[["duration",3]],["throttle",3]],[[["duration",3]],["timeout",3]],[[["duration",3]],["timeout",3]],[[["duration",3]],["timeout",3]],[[["duration",3]],["timeout",3]],[[["duration",3]],["timeout",3]],[[["duration",3]],["timeout",3]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",4]],[[],["wait",3]],[[],["wait",3]],[[],["with",3]],[[],["withflatmap",3]],[[["",0]],["result",4,[["usize",0],["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["error",3]]]],[[["",0],["",0]],["result",4,[["async",4,[["usize",0]]],["error",3]]]],[[["",0],["arguments",3]],["result",4,[["error",3]]]],[[["",0]],["result",4,[["usize",0],["error",3]]]],[[],["zip",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["andthen",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["catchunwind",3]],[[["sharederror",3]],["option",4,[["error",8]]]],[[["futureresult",3]],["futureresult",3]],[[["shared",3]],["shared",3]],[[["shareditem",3]],["shareditem",3]],[[["sharederror",3]],["sharederror",3]],[[["executeerrorkind",4]],["executeerrorkind",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["joinall",3]],[[["shareditem",3]],["",0]],[[["sharederror",3]],["",0]],[[["sharederror",3]],["str",0]],[[["result",4]],["futureresult",3]],[[["shared",3]]],[[],["empty",3]],[[["executeerrorkind",4],["executeerrorkind",4]],["bool",0]],[[],["futureresult",3]],[[["",0]],["result",4,[["executeerror",3]]]],[[],["futureresult",3]],[[],["futureresult",3]],[[],["flatten",3]],[[],["flattenstream",3]],[[["flatten",3],["formatter",3]],["result",4,[["error",3]]]],[[["flattenstream",3],["formatter",3]],["result",4,[["error",3]]]],[[["executeerror",3],["formatter",3]],["result",4,[["error",3]]]],[[["empty",3],["formatter",3]],["result",4,[["error",3]]]],[[["lazy",3],["formatter",3]],["result",4,[["error",3]]]],[[["pollfn",3],["formatter",3]],["result",4,[["error",3]]]],[[["futureresult",3],["formatter",3]],["result",4,[["error",3]]]],[[["loop",4],["formatter",3]],["result",4,[["error",3]]]],[[["loopfn",3],["formatter",3]],["result",4,[["error",3]]]],[[["andthen",3],["formatter",3]],["result",4,[["error",3]]]],[[["fuse",3],["formatter",3]],["result",4,[["error",3]]]],[[["intostream",3],["formatter",3]],["result",4,[["error",3]]]],[[["join",3],["formatter",3]],["result",4,[["error",3]]]],[[["join3",3],["formatter",3]],["result",4,[["error",3]]]],[[["join4",3],["formatter",3]],["result",4,[["error",3]]]],[[["join5",3],["formatter",3]],["result",4,[["error",3]]]],[[["map",3],["formatter",3]],["result",4,[["error",3]]]],[[["maperr",3],["formatter",3]],["result",4,[["error",3]]]],[[["fromerr",3],["formatter",3]],["result",4,[["error",3]]]],[[["orelse",3],["formatter",3]],["result",4,[["error",3]]]],[[["select",3],["formatter",3]],["result",4,[["error",3]]]],[[["selectnext",3],["formatter",3]],["result",4,[["error",3]]]],[[["select2",3],["formatter",3]],["result",4,[["error",3]]]],[[["then",3],["formatter",3]],["result",4,[["error",3]]]],[[["either",4],["formatter",3]],["result",4,[["error",3]]]],[[["inspect",3],["formatter",3]],["result",4,[["error",3]]]],[[["joinall",3],["formatter",3]],["result",4,[["error",3]]]],[[["shared",3],["formatter",3]],["result",4,[["error",3]]]],[[["catchunwind",3],["formatter",3]],["result",4,[["error",3]]]],[[["selectall",3],["formatter",3]],["result",4,[["error",3]]]],[[["selectok",3],["formatter",3]],["result",4,[["error",3]]]],[[["shareditem",3],["formatter",3]],["result",4,[["error",3]]]],[[["sharederror",3],["formatter",3]],["result",4,[["error",3]]]],[[["sharederror",3],["formatter",3]],["result",4,[["error",3]]]],[[["executeerrorkind",4],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["result",4]],["futureresult",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fromerr",3]],[[],["fuse",3]],[[]],[[],["inspect",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["executeerror",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intostream",3]],[[["fuse",3]],["bool",0]],[[],["join",3]],[[],["join3",3]],[[],["join4",3]],[[],["join5",3]],[[],["joinall",3]],[[["executeerror",3]],["executeerrorkind",4]],[[],["lazy",3]],[[],["loopfn",3]],[[],["map",3]],[[],["maperr",3]],[[["executeerrorkind",4]],["executeerror",3]],[[],["futureresult",3]],[[],["orelse",3]],[[["shared",3]],["option",4,[["result",4,[["shareditem",3],["sharederror",3]]]]]],[[["",0]],["result",4,[["async",4]]]],[[["flatten",3]],["result",4,[["async",4]]]],[[["flattenstream",3]],["result",4,[["async",4,[["option",4]]]]]],[[["empty",3]],["result",4,[["async",4]]]],[[["lazy",3]],["result",4,[["async",4]]]],[[["pollfn",3]],["result",4,[["async",4]]]],[[["futureresult",3]],["result",4,[["async",4]]]],[[["loopfn",3]],["result",4,[["async",4]]]],[[["andthen",3]],["result",4,[["async",4]]]],[[["fuse",3]],["result",4,[["async",4]]]],[[["intostream",3]],["result",4,[["async",4,[["option",4]]]]]],[[["join",3]],["result",4,[["async",4]]]],[[["join3",3]],["result",4,[["async",4]]]],[[["join4",3]],["result",4,[["async",4]]]],[[["join5",3]],["result",4,[["async",4]]]],[[["map",3]],["result",4,[["async",4]]]],[[["maperr",3]],["result",4,[["async",4]]]],[[["fromerr",3]],["result",4,[["async",4]]]],[[["orelse",3]],["result",4,[["async",4]]]],[[["select",3]],["result",4,[["async",4]]]],[[["selectnext",3]],["result",4,[["async",4]]]],[[["select2",3]],["result",4,[["async",4]]]],[[["then",3]],["result",4,[["async",4]]]],[[["either",4]],["result",4,[["async",4]]]],[[["inspect",3]],["result",4,[["async",4]]]],[[["joinall",3]],["result",4,[["async",4]]]],[[["shared",3]],["result",4,[["async",4]]]],[[["catchunwind",3]],["result",4,[["async",4]]]],[[["selectall",3]],["result",4,[["async",4]]]],[[["selectok",3]],["result",4,[["async",4]]]],[[],["pollfn",3]],[[["result",4]],["futureresult",3]],[[],["select",3]],[[],["select2",3]],[[],["selectall",3]],[[],["selectok",3]],[[],["shared",3]],[[["either",4]]],[[],["then",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["result",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["andthenusize",0]],["bufferunordered",3]],[[["usize",0]],["buffered",3]],[[["",0]],["",0]],[[],["catchunwind",3]],[[],["chain",3]],[[]],[[["usize",0]],["chunks",3]],[[["andthen",3]],["result",4,[["async",4]]]],[[["filter",3]],["result",4,[["async",4]]]],[[["filtermap",3]],["result",4,[["async",4]]]],[[["flatten",3]],["result",4,[["async",4]]]],[[["fromerr",3]],["result",4,[["async",4]]]],[[["fuse",3]],["result",4,[["async",4]]]],[[["inspect",3]],["result",4,[["async",4]]]],[[["inspecterr",3]],["result",4,[["async",4]]]],[[["map",3]],["result",4,[["async",4]]]],[[["maperr",3]],["result",4,[["async",4]]]],[[["orelse",3]],["result",4,[["async",4]]]],[[["peekable",3]],["result",4,[["async",4]]]],[[["skip",3]],["result",4,[["async",4]]]],[[["skipwhile",3]],["result",4,[["async",4]]]],[[["take",3]],["result",4,[["async",4]]]],[[["takewhile",3]],["result",4,[["async",4]]]],[[["then",3]],["result",4,[["async",4]]]],[[["buffered",3]],["result",4,[["async",4]]]],[[["bufferunordered",3]],["result",4,[["async",4]]]],[[["chunks",3]],["result",4,[["async",4]]]],[[["splitsink",3]],["result",4,[["async",4]]]],[[],["collect",3]],[[],["concat",3]],[[],["concat2",3]],[[],["futuresunordered",3]],[[],["futuresordered",3]],[[["senderror",3]],["str",0]],[[["reuniteerror",3]],["str",0]],[[["futuresunordered",3]]],[[],["empty",3]],[[],["filter",3]],[[],["filtermap",3]],[[],["flatten",3]],[[["concat2",3],["formatter",3]],["result",4,[["error",3]]]],[[["concat",3],["formatter",3]],["result",4,[["error",3]]]],[[["iter",3],["formatter",3]],["result",4,[["error",3]]]],[[["iterok",3],["formatter",3]],["result",4,[["error",3]]]],[[["iterresult",3],["formatter",3]],["result",4,[["error",3]]]],[[["repeat",3],["formatter",3]],["result",4,[["error",3]]]],[[["andthen",3],["formatter",3]],["result",4,[["error",3]]]],[[["chain",3],["formatter",3]],["result",4,[["error",3]]]],[[["empty",3],["formatter",3]],["result",4,[["error",3]]]],[[["filter",3],["formatter",3]],["result",4,[["error",3]]]],[[["filtermap",3],["formatter",3]],["result",4,[["error",3]]]],[[["flatten",3],["formatter",3]],["result",4,[["error",3]]]],[[["fold",3],["formatter",3]],["result",4,[["error",3]]]],[[["foreach",3],["formatter",3]],["result",4,[["error",3]]]],[[["fromerr",3],["formatter",3]],["result",4,[["error",3]]]],[[["fuse",3],["formatter",3]],["result",4,[["error",3]]]],[[["streamfuture",3],["formatter",3]],["result",4,[["error",3]]]],[[["inspect",3],["formatter",3]],["result",4,[["error",3]]]],[[["inspecterr",3],["formatter",3]],["result",4,[["error",3]]]],[[["map",3],["formatter",3]],["result",4,[["error",3]]]],[[["maperr",3],["formatter",3]],["result",4,[["error",3]]]],[[["merge",3],["formatter",3]],["result",4,[["error",3]]]],[[["mergeditem",4],["formatter",3]],["result",4,[["error",3]]]],[[["once",3],["formatter",3]],["result",4,[["error",3]]]],[[["orelse",3],["formatter",3]],["result",4,[["error",3]]]],[[["peekable",3],["formatter",3]],["result",4,[["error",3]]]],[[["pollfn",3],["formatter",3]],["result",4,[["error",3]]]],[[["select",3],["formatter",3]],["result",4,[["error",3]]]],[[["skip",3],["formatter",3]],["result",4,[["error",3]]]],[[["skipwhile",3],["formatter",3]],["result",4,[["error",3]]]],[[["take",3],["formatter",3]],["result",4,[["error",3]]]],[[["takewhile",3],["formatter",3]],["result",4,[["error",3]]]],[[["then",3],["formatter",3]],["result",4,[["error",3]]]],[[["unfold",3],["formatter",3]],["result",4,[["error",3]]]],[[["zip",3],["formatter",3]],["result",4,[["error",3]]]],[[["forward",3],["formatter",3]],["result",4,[["error",3]]]],[[["buffered",3],["formatter",3]],["result",4,[["error",3]]]],[[["bufferunordered",3],["formatter",3]],["result",4,[["error",3]]]],[[["senderror",3],["formatter",3]],["result",4,[["error",3]]]],[[["senderror",3],["formatter",3]],["result",4,[["error",3]]]],[[["reuniteerror",3],["formatter",3]],["result",4,[["error",3]]]],[[["reuniteerror",3],["formatter",3]],["result",4,[["error",3]]]],[[["futuresunordered",3],["formatter",3]],["result",4,[["error",3]]]],[[["futuresordered",3],["formatter",3]],["result",4,[["error",3]]]],[[["catchunwind",3],["formatter",3]],["result",4,[["error",3]]]],[[["chunks",3],["formatter",3]],["result",4,[["error",3]]]],[[["collect",3],["formatter",3]],["result",4,[["error",3]]]],[[["wait",3],["formatter",3]],["result",4,[["error",3]]]],[[["sender",3],["formatter",3]],["result",4,[["error",3]]]],[[["receiver",3],["formatter",3]],["result",4,[["error",3]]]],[[["futuresender",3],["formatter",3]],["result",4,[["error",3]]]],[[["splitstream",3],["formatter",3]],["result",4,[["error",3]]]],[[["splitsink",3],["formatter",3]],["result",4,[["error",3]]]],[[],["fold",3]],[[],["foreach",3]],[[],["forward",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fromerr",3]],[[],["futuresunordered",3]],[[],["futuresordered",3]],[[],["fuse",3]],[[],["futuresordered",3]],null,[[],["futuresunordered",3]],[[["andthen",3]],["",0]],[[["filter",3]],["",0]],[[["filtermap",3]],["",0]],[[["flatten",3]],["",0]],[[["fromerr",3]],["",0]],[[["fuse",3]],["",0]],[[["streamfuture",3]],["option",4]],[[["inspect",3]],["",0]],[[["inspecterr",3]],["",0]],[[["map",3]],["",0]],[[["maperr",3]],["",0]],[[["skip",3]],["",0]],[[["skipwhile",3]],["",0]],[[["take",3]],["",0]],[[["takewhile",3]],["",0]],[[["buffered",3]],["",0]],[[["bufferunordered",3]],["",0]],[[["chunks",3]],["",0]],[[["wait",3]],["",0]],[[["andthen",3]],["",0]],[[["filter",3]],["",0]],[[["filtermap",3]],["",0]],[[["flatten",3]],["",0]],[[["fromerr",3]],["",0]],[[["fuse",3]],["",0]],[[["streamfuture",3]],["option",4]],[[["inspect",3]],["",0]],[[["inspecterr",3]],["",0]],[[["map",3]],["",0]],[[["maperr",3]],["",0]],[[["skip",3]],["",0]],[[["skipwhile",3]],["",0]],[[["take",3]],["",0]],[[["takewhile",3]],["",0]],[[["buffered",3]],["",0]],[[["bufferunordered",3]],["",0]],[[["chunks",3]],["",0]],[[["wait",3]],["",0]],[[],["inspect",3]],[[],["inspecterr",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["streamfuture",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["andthen",3]]],[[["filter",3]]],[[["filtermap",3]]],[[["flatten",3]]],[[["fromerr",3]]],[[["fuse",3]]],[[["streamfuture",3]],["option",4]],[[["inspect",3]]],[[["inspecterr",3]]],[[["map",3]]],[[["maperr",3]]],[[["skip",3]]],[[["skipwhile",3]]],[[["take",3]]],[[["takewhile",3]]],[[["buffered",3]]],[[["bufferunordered",3]]],[[["chunks",3]]],[[["wait",3]]],[[]],[[["fuse",3]],["bool",0]],[[["futuresunordered",3]],["bool",0]],[[["futuresordered",3]],["bool",0]],[[],["iter",3]],[[["futuresunordered",3]],["itermut",3]],[[],["iterok",3]],[[],["iterresult",3]],[[["futuresunordered",3]],["usize",0]],[[["futuresordered",3]],["usize",0]],[[],["map",3]],[[],["maperr",3]],[[],["merge",3]],[[],["futuresunordered",3]],[[],["futuresordered",3]],[[["wait",3]],["option",4]],[[["result",4]],["once",3]],[[],["orelse",3]],[[["peekable",3]],["result",4,[["async",4,[["option",4]]]]]],[[],["peekable",3]],[[["",0]],["result",4,[["async",4,[["option",4]]]]]],[[["concat2",3]],["result",4,[["async",4]]]],[[["concat",3]],["result",4,[["async",4]]]],[[["iter",3]],["result",4,[["async",4,[["option",4]]]]]],[[["iterok",3]],["result",4,[["async",4,[["option",4]]]]]],[[["iterresult",3]],["result",4,[["async",4,[["option",4]]]]]],[[["repeat",3]],["result",4,[["async",4,[["option",4]]]]]],[[["andthen",3]],["result",4,[["async",4,[["option",4]]]]]],[[["chain",3]],["result",4,[["async",4,[["option",4]]]]]],[[["empty",3]],["result",4,[["async",4,[["option",4]]]]]],[[["filter",3]],["result",4,[["async",4,[["option",4]]]]]],[[["filtermap",3]],["result",4,[["async",4,[["option",4]]]]]],[[["flatten",3]],["result",4,[["async",4,[["option",4]]]]]],[[["fold",3]],["result",4,[["async",4]]]],[[["foreach",3]],["result",4,[["async",4]]]],[[["fromerr",3]],["result",4,[["async",4,[["option",4]]]]]],[[["fuse",3]],["result",4,[["async",4,[["option",4]]]]]],[[["streamfuture",3]],["result",4,[["async",4]]]],[[["inspect",3]],["result",4,[["async",4,[["option",4]]]]]],[[["inspecterr",3]],["result",4,[["async",4,[["option",4]]]]]],[[["map",3]],["result",4,[["async",4,[["option",4]]]]]],[[["maperr",3]],["result",4,[["async",4,[["option",4]]]]]],[[["merge",3]],["result",4,[["async",4,[["option",4]]]]]],[[["once",3]],["result",4,[["async",4,[["option",4]]]]]],[[["orelse",3]],["result",4,[["async",4,[["option",4]]]]]],[[["peekable",3]],["result",4,[["async",4,[["option",4]]]]]],[[["pollfn",3]],["result",4,[["async",4,[["option",4]]]]]],[[["select",3]],["result",4,[["async",4,[["option",4]]]]]],[[["skip",3]],["result",4,[["async",4,[["option",4]]]]]],[[["skipwhile",3]],["result",4,[["async",4,[["option",4]]]]]],[[["take",3]],["result",4,[["async",4,[["option",4]]]]]],[[["takewhile",3]],["result",4,[["async",4,[["option",4]]]]]],[[["then",3]],["result",4,[["async",4,[["option",4]]]]]],[[["unfold",3]],["result",4,[["async",4,[["option",4]]]]]],[[["zip",3]],["result",4,[["async",4,[["option",4]]]]]],[[["forward",3]],["result",4,[["async",4]]]],[[["buffered",3]],["result",4,[["async",4,[["option",4]]]]]],[[["bufferunordered",3]],["result",4,[["async",4,[["option",4]]]]]],[[["futuresunordered",3]],["result",4,[["async",4,[["option",4]]]]]],[[["futuresordered",3]],["result",4,[["async",4,[["option",4]]]]]],[[["catchunwind",3]],["result",4,[["async",4,[["option",4]]]]]],[[["chunks",3]],["result",4,[["async",4,[["option",4]]]]]],[[["collect",3]],["result",4,[["async",4,[["vec",3,[["global",3]]]]]]]],[[["receiver",3]],["result",4,[["async",4,[["option",4]]]]]],[[["futuresender",3]],["result",4,[["async",4]]]],[[["splitstream",3]],["result",4,[["async",4,[["option",4]]]]]],[[["andthen",3]],["result",4,[["async",4]]]],[[["filter",3]],["result",4,[["async",4]]]],[[["filtermap",3]],["result",4,[["async",4]]]],[[["flatten",3]],["result",4,[["async",4]]]],[[["fromerr",3]],["result",4,[["async",4]]]],[[["fuse",3]],["result",4,[["async",4]]]],[[["inspect",3]],["result",4,[["async",4]]]],[[["inspecterr",3]],["result",4,[["async",4]]]],[[["map",3]],["result",4,[["async",4]]]],[[["maperr",3]],["result",4,[["async",4]]]],[[["orelse",3]],["result",4,[["async",4]]]],[[["peekable",3]],["result",4,[["async",4]]]],[[["skip",3]],["result",4,[["async",4]]]],[[["skipwhile",3]],["result",4,[["async",4]]]],[[["take",3]],["result",4,[["async",4]]]],[[["takewhile",3]],["result",4,[["async",4]]]],[[["then",3]],["result",4,[["async",4]]]],[[["buffered",3]],["result",4,[["async",4]]]],[[["bufferunordered",3]],["result",4,[["async",4]]]],[[["chunks",3]],["result",4,[["async",4]]]],[[["splitsink",3]],["result",4,[["async",4]]]],[[],["pollfn",3]],[[["futuresunordered",3]]],[[["futuresordered",3]]],[[],["repeat",3]],[[["splitstream",3],["splitsink",3]],["result",4,[["reuniteerror",3]]]],[[["splitsink",3],["splitstream",3]],["result",4,[["reuniteerror",3]]]],[[],["select",3]],[[["sender",3],["result",4]],["futuresender",3]],[[["forward",3]],["option",4]],[[["forward",3]],["option",4]],[[["u64",0]],["skip",3]],[[],["skipwhile",3]],[[]],[[["andthen",3]],["result",4,[["asyncsink",4]]]],[[["filter",3]],["result",4,[["asyncsink",4]]]],[[["filtermap",3]],["result",4,[["asyncsink",4]]]],[[["flatten",3]],["result",4,[["asyncsink",4]]]],[[["fromerr",3]],["result",4,[["asyncsink",4]]]],[[["fuse",3]],["result",4,[["asyncsink",4]]]],[[["inspect",3]],["result",4,[["asyncsink",4]]]],[[["inspecterr",3]],["result",4,[["asyncsink",4]]]],[[["map",3]],["result",4,[["asyncsink",4]]]],[[["maperr",3]],["result",4,[["asyncsink",4]]]],[[["orelse",3]],["result",4,[["asyncsink",4]]]],[[["peekable",3]],["result",4,[["asyncsink",4]]]],[[["skip",3]],["result",4,[["asyncsink",4]]]],[[["skipwhile",3]],["result",4,[["asyncsink",4]]]],[[["take",3]],["result",4,[["asyncsink",4]]]],[[["takewhile",3]],["result",4,[["asyncsink",4]]]],[[["then",3]],["result",4,[["asyncsink",4]]]],[[["buffered",3]],["result",4,[["asyncsink",4]]]],[[["bufferunordered",3]],["result",4,[["asyncsink",4]]]],[[["chunks",3]],["result",4,[["asyncsink",4]]]],[[["splitsink",3]],["result",4,[["asyncsink",4]]]],[[["forward",3]],["option",4]],[[["forward",3]],["option",4]],[[["u64",0]],["take",3]],[[],["takewhile",3]],[[],["then",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["unfold",3]],[[],["wait",3]],[[],["zip",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["itermut",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[["itermut",3]],["option",4]],[[["itermut",3]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["taskrc",3]],["taskrc",3]],[[["unparkevent",3]],["unparkevent",3]],[[["task",3]],["task",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["spawn",3],["",0],["usize",0]],["result",4,[["async",4]]]],[[],["task",3]],[[],["atomictask",3]],[[["",0],["run",3]]],[[["atomictask",3],["formatter",3]],["result",4,[["error",3]]]],[[["run",3],["formatter",3]],["result",4,[["error",3]]]],[[["spawn",3],["formatter",3]],["result",4,[["error",3]]]],[[["localkey",3],["formatter",3]],["result",4,[["error",3]]]],[[["taskrc",3],["formatter",3]],["result",4,[["error",3]]]],[[["unparkevent",3],["formatter",3]],["result",4,[["error",3]]]],[[["task",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["spawn",3]],["",0]],[[["spawn",3]],["",0]],[[],["bool",0]],[[["",0],["usize",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["spawn",3]]],[[["task",3]],["bool",0]],[[],["atomictask",3]],[[],["taskrc",3]],[[["arc",3,[["eventset",8]]],["usize",0]],["unparkevent",3]],[[["atomictask",3]]],[[["task",3]]],[[["spawn",3],["",0],["usize",0]],["result",4,[["async",4]]]],[[["spawn",3],["",0],["usize",0]]],[[["spawn",3],["",0],["usize",0]],["result",4,[["async",4]]]],[[["spawn",3],["",0],["usize",0]],["result",4,[["async",4,[["option",4]]]]]],[[["atomictask",3]]],[[["atomictask",3],["task",3]]],[[["run",3]]],[[],["spawn",3]],[[["spawn",3],["",0],["usize",0]],["result",4,[["asyncsink",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]]],[[["spawn",3]],["result",4]],[[["spawn",3]],["result",4]],[[["spawn",3]],["result",4]],[[["spawn",3]],["result",4]],[[["spawn",3]],["option",4,[["result",4]]]],[[["task",3]],["bool",0]],[[["localkey",3]]],[[["taskrc",3]]],[[["unparkevent",3]]],null,null,null,null,null,null,[[["reactor",3]],["i32",0]],[[["reactor",3]],["result",4,[["background",3],["error",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["pollevented",3],["ready",3]],["result",4,[["error",3]]]],[[["pollevented",3]],["result",4,[["error",3]]]],[[["handle",3]],["handle",3]],[[["",0],["",0]]],[[],["handle",3]],[[["registration",3],["",0]],["result",4,[["error",3]]]],[[["pollevented",3]]],[[["background",3]]],[[["pollevented",3]],["result",4,[["error",3]]]],[[["pollevented",3]],["result",4,[["error",3]]]],[[["pollevented",3],["formatter",3]],["result",4,[["error",3]]]],[[["reactor",3],["formatter",3]],["result",4,[["error",3]]]],[[["background",3],["formatter",3]],["result",4,[["error",3]]]],[[["registration",3],["formatter",3]],["result",4,[["error",3]]]],[[["handle",3],["formatter",3]],["result",4,[["error",3]]]],[[["turn",3],["formatter",3]],["result",4,[["error",3]]]],[[["background",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pollevented",3]],["",0]],[[["pollevented",3]],["",0]],[[["reactor",3]],["handle",3]],[[["background",3]],["handle",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pollevented",3]],["result",4,[["error",3]]]],[[["reactor",3]],["bool",0]],[[],["pollevented",3]],[[],["result",4,[["reactor",3],["error",3]]]],[[],["registration",3]],[[["handle",3]],["result",4,[["pollevented",3],["error",3]]]],[[["reactor",3]],["result",4,[["error",3]]]],[[["reactor",3],["duration",3]],["result",4,[["error",3]]]],[[["pollevented",3],["ready",3]],["result",4,[["async",4,[["ready",3]]],["error",3]]]],[[["registration",3]],["result",4,[["async",4,[["ready",3]]],["error",3]]]],[[["pollevented",3]],["result",4,[["async",4,[["ready",3]]],["error",3]]]],[[["registration",3]],["result",4,[["async",4,[["ready",3]]],["error",3]]]],[[["pollevented",3]],["result",4,[["usize",0],["error",3]]]],[[["pollevented",3]],["result",4,[["usize",0],["error",3]]]],[[["registration",3],["",0]],["result",4,[["bool",0],["error",3]]]],[[["registration",3],["",0],["handle",3]],["result",4,[["bool",0],["error",3]]]],[[["reactor",3]],["result",4,[["setfallbackerror",3]]]],[[["pollevented",3]],["result",4,[["async",4],["error",3]]]],[[["pollevented",3]],["result",4,[["async",4],["error",3]]]],[[["background",3]],["shutdown",3]],[[["background",3]],["shutdown",3]],[[["registration",3]],["result",4,[["option",4,[["ready",3]]],["error",3]]]],[[["registration",3]],["result",4,[["option",4,[["ready",3]]],["error",3]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["reactor",3],["option",4,[["duration",3]]]],["result",4,[["turn",3],["error",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["reactor",3]]],[[["handle",3]]],[[["pollevented",3]],["result",4,[["usize",0],["error",3]]]],[[["pollevented",3]],["result",4,[["usize",0],["error",3]]]],null,null,null,null,[[["builder",3]],["builder",3]],[[["builder",3]],["builder",3]],[[["runtime",3]],["result",4]],[[["runtime",3]],["result",4]],[[["builder",3],["usize",0]],["builder",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["builder",3]],["result",6,[["runtime",3]]]],[[["builder",3],["clock",3]],["builder",3]],[[["taskexecutor",3]],["taskexecutor",3]],[[["",0],["",0]]],[[["builder",3],["usize",0]],["builder",3]],null,[[["runtime",3]]],[[["taskexecutor",3]],["result",4,[["executeerror",3]]]],[[["runtime",3]],["taskexecutor",3]],[[["shutdown",3],["formatter",3]],["result",6]],[[["builder",3],["formatter",3]],["result",6]],[[["taskexecutor",3],["formatter",3]],["result",6]],[[["runtime",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["builder",3],["option",4,[["duration",3]]]],["builder",3]],[[["builder",3],["into",8,[["string",3]]]],["builder",3]],[[],["builder",3]],[[],["result",6,[["runtime",3]]]],[[["shutdown",3]],["poll",6]],[[["runtime",3]],["handle",3]],[[]],[[["runtime",3]],["shutdown",3]],[[["runtime",3]],["shutdown",3]],[[["taskexecutor",3]],["result",4,[["spawnerror",3]]]],[[["taskexecutor",3],["box",3,[["future",8]]]],["result",4,[["spawnerror",3]]]],[[["taskexecutor",3]]],[[["runtime",3]],["runtime",3]],[[["builder",3],["usize",0]],["builder",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["runtime",3]],["result",4]],[[],["result",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["builder",3]],["result",6,[["runtime",3]]]],[[["builder",3],["clock",3]],["builder",3]],[[["taskexecutor",3]],["taskexecutor",3]],[[["handle",3]],["handle",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["taskexecutor",3]],[[["taskexecutor",3]],["result",4,[["executeerror",3]]]],[[["handle",3]],["result",4,[["executeerror",3]]]],[[["taskexecutor",3],["formatter",3]],["result",4,[["error",3]]]],[[["builder",3],["formatter",3]],["result",6]],[[["runtime",3],["formatter",3]],["result",6]],[[["handle",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["runtime",3]],["handle",3]],[[]],[[]],[[]],[[]],[[],["builder",3]],[[],["result",6,[["runtime",3]]]],[[]],[[["runtime",3]],["result",4,[["runerror",3]]]],[[]],[[["taskexecutor",3]],["result",4,[["spawnerror",3]]]],[[["taskexecutor",3],["box",3,[["future",8],["global",3]]]],["result",4,[["spawnerror",3]]]],[[["runtime",3]],["runtime",3]],[[["handle",3]],["result",4,[["spawnerror",3]]]],[[["handle",3]],["result",4,[["spawnerror",3]]]],[[["taskexecutor",3],["box",3,[["future",8],["global",3]]]],["result",4,[["spawnerror",3]]]],[[["handle",3]],["result",4,[["spawnerror",3]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["lock",3]],["lock",3]],[[["",0],["",0]]],[[],["lock",3]],[[["lockguard",3]]],[[["lockguard",3]]],[[["lockguard",3]]],[[["lock",3],["formatter",3]],["result",4,[["error",3]]]],[[["lockguard",3],["formatter",3]],["result",4,[["error",3]]]],[[["lockguard",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[],["lock",3]],[[["never",0]]],[[]],[[]],[[]],[[],["lock",3]],[[["lock",3]],["async",4,[["lockguard",3]]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]]],[[["sender",3]],["sender",3]],[[["unboundedsender",3]],["unboundedsender",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["sender",3]],["result",4,[["async",4]]]],[[["receiver",3]]],[[["unboundedsender",3]],["result",4,[["async",4]]]],[[["unboundedreceiver",3]]],null,[[["sender",3],["formatter",3]],["result",4,[["error",3]]]],[[["receiver",3],["formatter",3]],["result",4,[["error",3]]]],[[["unboundedsender",3],["formatter",3]],["result",4,[["error",3]]]],[[["unboundedreceiver",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["receiver",3]],["result",4,[["async",4,[["option",4]]]]]],[[["unboundedreceiver",3]],["result",4,[["async",4,[["option",4]]]]]],[[["sender",3]],["result",4,[["async",4]]]],[[["unboundedsender",3]],["result",4,[["async",4]]]],[[["sender",3]],["result",4,[["async",4],["senderror",3]]]],[[["sender",3]],["result",4,[["asyncsink",4]]]],[[["unboundedsender",3]],["result",4,[["asyncsink",4]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["sender",3]],["result",4,[["trysenderror",3]]]],[[["unboundedsender",3]],["result",4,[["unboundedtrysenderror",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["senderror",3]],["str",0]],[[["trysenderror",3]],["str",0]],[[["recverror",3]],["str",0]],[[["unboundedsenderror",3]],["str",0]],[[["unboundedtrysenderror",3]],["str",0]],[[["unboundedrecverror",3]],["str",0]],[[["senderror",3],["formatter",3]],["result",4,[["error",3]]]],[[["senderror",3],["formatter",3]],["result",4,[["error",3]]]],[[["trysenderror",3],["formatter",3]],["result",4,[["error",3]]]],[[["trysenderror",3],["formatter",3]],["result",4,[["error",3]]]],[[["recverror",3],["formatter",3]],["result",4,[["error",3]]]],[[["recverror",3],["formatter",3]],["result",4,[["error",3]]]],[[["unboundedsenderror",3],["formatter",3]],["result",4,[["error",3]]]],[[["unboundedsenderror",3],["formatter",3]],["result",4,[["error",3]]]],[[["unboundedtrysenderror",3],["formatter",3]],["result",4,[["error",3]]]],[[["unboundedtrysenderror",3],["formatter",3]],["result",4,[["error",3]]]],[[["unboundedrecverror",3],["formatter",3]],["result",4,[["error",3]]]],[[["unboundedrecverror",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[],["trysenderror",3]],[[]],[[]],[[],["unboundedtrysenderror",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["trysenderror",3]]],[[["unboundedtrysenderror",3]]],[[["trysenderror",3]],["bool",0]],[[["trysenderror",3]],["bool",0]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["receiver",3]]],[[["sender",3]]],[[["receiver",3]]],null,[[["sender",3],["formatter",3]],["result",4,[["error",3]]]],[[["receiver",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[["sender",3]],["bool",0]],[[["receiver",3]],["result",4,[["async",4],["recverror",3]]]],[[["sender",3]],["result",4,[["async",4]]]],[[["sender",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["receiver",3]],["result",4,[["tryrecverror",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["recverror",3]],["str",0]],[[["tryrecverror",3]],["str",0]],[[["recverror",3],["formatter",3]],["result",4,[["error",3]]]],[[["recverror",3],["formatter",3]],["result",4,[["error",3]]]],[[["tryrecverror",3],["formatter",3]],["result",4,[["error",3]]]],[[["tryrecverror",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["sender",3]],["result",4,[["senderror",3]]]],[[]],[[["receiver",3]],["receiver",3]],[[["",0],["",0]]],[[["ref",3]],["",0]],[[["receiver",3]]],[[["sender",3]]],null,[[["receiver",3],["formatter",3]],["result",4,[["error",3]]]],[[["sender",3],["formatter",3]],["result",4,[["error",3]]]],[[["ref",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[["receiver",3]],["ref",3]],[[]],[[]],[[]],[[["receiver",3]],["result",4,[["async",4,[["option",4]]],["recverror",3]]]],[[["sender",3]],["result",4,[["async",4]]]],[[["sender",3]],["result",4,[["async",4],["senderror",3]]]],[[["receiver",3]],["result",4,[["async",4,[["option",4,[["ref",3]]]]],["recverror",3]]]],[[["sender",3]],["result",4,[["asyncsink",4],["senderror",3]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["recverror",3]],["str",0]],[[["senderror",3]],["str",0]],[[["recverror",3],["formatter",3]],["result",4,[["error",3]]]],[[["recverror",3],["formatter",3]],["result",4,[["error",3]]]],[[["senderror",3],["formatter",3]],["result",4,[["error",3]]]],[[["senderror",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,[[],["error",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["delayqueue",3]],["usize",0]],[[["delayqueue",3]]],[[["delay",3]],["instant",3]],null,[[["error",3]],["str",0]],[[["delayqueue",3],["formatter",3]],["result",4,[["error",3]]]],[[["timeout",3],["formatter",3]],["result",4,[["error",3]]]],[[["delay",3],["formatter",3]],["result",4,[["error",3]]]],[[["error",3],["formatter",3]],["result",4,[["error",3]]]],[[["error",3],["formatter",3]],["result",4,[["error",3]]]],[[["interval",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[]],[[["timeout",3]],["",0]],[[["timeout",3]],["",0]],[[["delayqueue",3],["duration",3]],["key",3]],[[["delayqueue",3],["instant",3]],["key",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["timeout",3]]],[[["error",3]],["bool",0]],[[["delay",3]],["bool",0]],[[["delayqueue",3]],["bool",0]],[[["error",3]],["bool",0]],[[],["delayqueue",3]],[[["duration",3]],["timeout",3]],[[["instant",3]],["delay",3]],[[["instant",3],["duration",3]],["interval",3]],[[["instant",3]],["timeout",3]],[[["duration",3]],["interval",3]],[[["delayqueue",3]],["result",4,[["async",4,[["option",4]]],["error",3]]]],[[["timeout",3]],["result",4,[["async",4,[["option",4]]]]]],[[["timeout",3]],["result",4,[["async",4]]]],[[["delay",3]],["result",4,[["async",4]]]],[[["interval",3]],["result",4,[["async",4,[["option",4]]]]]],[[["delayqueue",3],["key",3]],["expired",3]],[[["delayqueue",3],["usize",0]]],[[["delayqueue",3],["key",3],["duration",3]]],[[["delay",3],["instant",3]]],[[["delayqueue",3],["key",3],["instant",3]]],[[],["error",3]],null,[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["usize",0]],["delayqueue",3]],[[["usize",0],["handle",3]],["delayqueue",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["key",3]],["key",3]],[[["",0],["",0]]],[[["expired",3],["formatter",3]],["result",4,[["error",3]]]],[[["key",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[["expired",3]],["",0]],[[["expired",3]],["",0]],[[]],[[]],[[["expired",3]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["error",3]],["str",0]],[[],["error",3]],[[["error",3],["formatter",3]],["result",4,[["error",3]]]],[[["error",3],["formatter",3]],["result",4,[["error",3]]]],[[]],[[],["error",3]],[[]],[[["error",3]],["option",4]],[[["error",3]],["option",4,[["error",3]]]],[[["error",3]],["bool",0]],[[["error",3]],["bool",0]],[[["error",3]],["bool",0]],[[["error",3]],["error",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null],"p":[[8,"Decoder"],[8,"Encoder"],[3,"BytesCodec"],[3,"LinesCodec"],[3,"Framed"],[3,"FramedRead"],[3,"FramedWrite"],[3,"FramedParts"],[3,"Builder"],[3,"FrameTooBig"],[3,"LengthDelimitedCodec"],[3,"SpawnError"],[3,"DefaultExecutor"],[3,"Spawn"],[8,"Executor"],[8,"TypedExecutor"],[3,"File"],[3,"ReadFile"],[3,"WriteFile"],[3,"OpenOptions"],[3,"CloneFuture"],[3,"CreateFuture"],[3,"MetadataFuture"],[3,"OpenFuture"],[3,"SeekFuture"],[3,"SymlinkFuture"],[4,"ErrorKind"],[3,"Stderr"],[3,"Stdin"],[3,"Stdout"],[3,"Copy"],[3,"Flush"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"ReadUntil"],[3,"Shutdown"],[3,"WriteAll"],[3,"Lines"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"Error"],[8,"Read"],[8,"Write"],[8,"AsyncRead"],[8,"AsyncWrite"],[3,"UnixDatagram"],[3,"TcpListener"],[3,"UdpSocket"],[3,"TcpStream"],[3,"UnixListener"],[3,"UnixStream"],[3,"UdpFramed"],[3,"UnixDatagramFramed"],[3,"Incoming"],[3,"ConnectFuture"],[3,"SendDgram"],[3,"RecvDgram"],[3,"Incoming"],[3,"RecvDgram"],[3,"SendDgram"],[3,"ConnectFuture"],[3,"UCred"],[8,"Future"],[8,"IntoFuture"],[8,"Stream"],[4,"Async"],[4,"AsyncSink"],[8,"Sink"],[8,"StreamExt"],[8,"FutureExt"],[13,"Ready"],[13,"NotReady"],[4,"Either"],[4,"Loop"],[8,"FutureFrom"],[4,"ExecuteErrorKind"],[3,"Flatten"],[3,"FlattenStream"],[3,"ExecuteError"],[3,"Empty"],[3,"Lazy"],[3,"PollFn"],[3,"Err"],[3,"LoopFn"],[3,"AndThen"],[3,"Fuse"],[3,"IntoStream"],[3,"Join"],[3,"Join3"],[3,"Join4"],[3,"Join5"],[3,"Map"],[3,"MapErr"],[3,"FromErr"],[3,"OrElse"],[3,"Select"],[3,"SelectNext"],[3,"Select2"],[3,"Then"],[3,"Inspect"],[3,"Collect"],[3,"Shared"],[3,"CatchUnwind"],[3,"SelectAll"],[3,"SelectOk"],[3,"SharedItem"],[3,"SharedError"],[8,"Executor"],[13,"A"],[13,"B"],[13,"Break"],[13,"Continue"],[3,"ReuniteError"],[4,"MergedItem"],[3,"Concat2"],[3,"Concat"],[3,"IterStream"],[3,"IterOk"],[3,"IterResult"],[3,"Repeat"],[3,"AndThen"],[3,"Chain"],[3,"Empty"],[3,"Filter"],[3,"FilterMap"],[3,"Flatten"],[3,"Fold"],[3,"ForEach"],[3,"FromErr"],[3,"Fuse"],[3,"StreamFuture"],[3,"Inspect"],[3,"InspectErr"],[3,"Map"],[3,"MapErr"],[3,"Merge"],[3,"Once"],[3,"OrElse"],[3,"Peekable"],[3,"PollFn"],[3,"Select"],[3,"Skip"],[3,"SkipWhile"],[3,"Take"],[3,"TakeWhile"],[3,"Then"],[3,"Unfold"],[3,"Zip"],[3,"Forward"],[3,"Buffered"],[3,"BufferUnordered"],[3,"SendError"],[3,"FuturesUnordered"],[3,"FuturesOrdered"],[3,"CatchUnwind"],[3,"Chunks"],[3,"Collect"],[3,"Wait"],[3,"Sender"],[3,"Receiver"],[3,"FutureSender"],[3,"SplitStream"],[3,"SplitSink"],[13,"First"],[13,"Second"],[13,"Both"],[3,"IterMut"],[3,"AtomicTask"],[3,"Run"],[3,"Spawn"],[3,"LocalKey"],[3,"TaskRc"],[3,"UnparkEvent"],[3,"Task"],[8,"Executor"],[8,"EventSet"],[8,"Unpark"],[3,"Reactor"],[3,"PollEvented2"],[3,"Background"],[3,"Registration"],[3,"Handle"],[3,"Turn"],[3,"Builder"],[3,"Runtime"],[3,"Shutdown"],[3,"TaskExecutor"],[3,"Runtime"],[3,"TaskExecutor"],[3,"Builder"],[3,"Handle"],[3,"Lock"],[3,"LockGuard"],[3,"Sender"],[3,"Receiver"],[3,"UnboundedSender"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"TrySendError"],[3,"RecvError"],[3,"UnboundedSendError"],[3,"UnboundedTrySendError"],[3,"UnboundedRecvError"],[3,"Sender"],[3,"Receiver"],[3,"RecvError"],[3,"TryRecvError"],[3,"Receiver"],[3,"Sender"],[3,"Ref"],[3,"RecvError"],[3,"SendError"],[3,"Error"],[3,"DelayQueue"],[3,"Timeout"],[3,"Delay"],[3,"Interval"],[3,"Expired"],[3,"Key"],[3,"Error"]]},\
"tokio_codec":{"doc":"Utilities for encoding and decoding frames.","t":[3,8,8,16,16,3,3,3,3,16,16,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["BytesCodec","Decoder","Encoder","Error","Error","Framed","FramedParts","FramedRead","FramedWrite","Item","Item","LinesCodec","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","close","close","close","cmp","cmp","codec","codec","codec_mut","decode","decode","decode","decode_eof","decode_eof","decoder","decoder_mut","encode","encode","encode","encoder","encoder_mut","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","framed","from","from","from","from","from","from","from_parts","get_mut","get_mut","get_mut","get_ref","get_ref","get_ref","hash","hash","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_parts","io","max_length","ne","ne","new","new","new","new","new","new","new_with_max_length","partial_cmp","partial_cmp","poll","poll","poll","poll_complete","poll_complete","poll_complete","read_buf","start_send","start_send","start_send","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","write_buf"],"q":["tokio_codec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A simple <code>Codec</code> implementation that just ships bytes around.","Decoding of frames via buffers.","Trait of helper objects to write out messages as bytes, …","The type of unrecoverable frame decoding errors.","The type of encoding errors.","A unified <code>Stream</code> and <code>Sink</code> interface to an underlying I/O …","<code>FramedParts</code> contains an export of the data of a Framed …","A <code>Stream</code> of messages decoded from an <code>AsyncRead</code>.","A <code>Sink</code> of frames encoded to an <code>AsyncWrite</code>.","The type of decoded frames.","The type of items consumed by the <code>Encoder</code>","A simple <code>Codec</code> implementation that splits up data into …","","","","","","","","","","","","","","","","","","","","","","Returns a reference to the underlying codec wrapped by …","The codec","Returns a mutable reference to the underlying codec …","Attempts to decode a frame from the provided buffer of …","","","A default method available to be called when there are no …","","Returns a reference to the underlying decoder.","Returns a mutable reference to the underlying decoder.","Encodes a frame into the buffer provided.","","","Returns a reference to the underlying decoder.","Returns a mutable reference to the underlying decoder.","","","","","","","","","Provides a <code>Stream</code> and <code>Sink</code> interface for reading and …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Provides a <code>Stream</code> and <code>Sink</code> interface for reading and …","Returns a mutable reference to the underlying I/O stream …","Returns a mutable reference to the underlying I/O stream …","Returns a mutable reference to the underlying I/O stream …","Returns a reference to the underlying I/O stream wrapped by","Returns a reference to the underlying I/O stream wrapped by","Returns a reference to the underlying I/O stream wrapped by","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the <code>Frame</code>, returning its underlying I/O stream.","Consumes the <code>FramedRead</code>, returning its underlying I/O …","Consumes the <code>FramedWrite</code>, returning its underlying I/O …","Consumes the <code>Frame</code>, returning its underlying I/O stream, …","The inner transport used to read bytes to and write bytes …","Returns the maximum line length when decoding.","","","Creates a new <code>BytesCodec</code> for shipping around raw bytes.","Returns a <code>LinesCodec</code> for splitting up data into lines.","Provides a <code>Stream</code> and <code>Sink</code> interface for reading and …","Creates a new <code>FramedRead</code> with the given <code>decoder</code>.","Creates a new <code>FramedWrite</code> with the given <code>encoder</code>.","Create a new, default, <code>FramedParts</code>","Returns a <code>LinesCodec</code> with a maximum line length limit.","","","","","","","","","The buffer with read but unprocessed data.","","","","","","","","","","","","","","","","","","","","","","","","A buffer with unprocessed data which are not written yet."],"i":[0,0,0,1,2,0,0,0,0,1,2,0,3,4,5,6,7,8,3,4,5,6,7,8,3,4,3,4,5,6,7,3,4,5,8,5,1,3,4,1,4,6,6,2,3,4,7,7,3,4,3,4,5,6,7,8,1,3,4,5,6,7,8,5,5,6,7,5,6,7,3,4,3,4,5,6,7,8,5,6,7,5,8,4,3,4,3,4,5,6,7,8,4,3,4,5,6,7,5,6,7,8,5,6,7,3,4,3,4,5,6,7,8,3,4,5,6,7,8,3,4,5,6,7,8,8],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["bytescodec",3]],["bytescodec",3]],[[["linescodec",3]],["linescodec",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["framed",3]],["result",4,[["async",4]]]],[[["framedread",3]],["result",4,[["async",4]]]],[[["framedwrite",3]],["result",4,[["async",4]]]],[[["bytescodec",3],["bytescodec",3]],["ordering",4]],[[["linescodec",3],["linescodec",3]],["ordering",4]],[[["framed",3]],["",0]],null,[[["framed",3]],["",0]],[[["",0],["bytesmut",3]],["result",4,[["option",4]]]],[[["bytescodec",3],["bytesmut",3]],["result",4,[["option",4,[["bytesmut",3]]],["error",3]]]],[[["linescodec",3],["bytesmut",3]],["result",4,[["option",4,[["string",3]]],["error",3]]]],[[["",0],["bytesmut",3]],["result",4,[["option",4]]]],[[["linescodec",3],["bytesmut",3]],["result",4,[["option",4,[["string",3]]],["error",3]]]],[[["framedread",3]],["",0]],[[["framedread",3]],["",0]],[[["",0],["bytesmut",3]],["result",4]],[[["bytescodec",3],["bytes",3],["bytesmut",3]],["result",4,[["error",3]]]],[[["linescodec",3],["string",3],["bytesmut",3]],["result",4,[["error",3]]]],[[["framedwrite",3]],["",0]],[[["framedwrite",3]],["",0]],[[["bytescodec",3],["bytescodec",3]],["bool",0]],[[["linescodec",3],["linescodec",3]],["bool",0]],[[["bytescodec",3],["formatter",3]],["result",6]],[[["linescodec",3],["formatter",3]],["result",6]],[[["framed",3],["formatter",3]],["result",4,[["error",3]]]],[[["framedread",3],["formatter",3]],["result",4,[["error",3]]]],[[["framedwrite",3],["formatter",3]],["result",4,[["error",3]]]],[[["framedparts",3],["formatter",3]],["result",4,[["error",3]]]],[[],["framed",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["framedparts",3]],["framed",3]],[[["framed",3]],["",0]],[[["framedread",3]],["",0]],[[["framedwrite",3]],["",0]],[[["framed",3]],["",0]],[[["framedread",3]],["",0]],[[["framedwrite",3]],["",0]],[[["bytescodec",3],["",0]]],[[["linescodec",3],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["framed",3]]],[[["framedread",3]]],[[["framedwrite",3]]],[[["framed",3]],["framedparts",3]],null,[[["linescodec",3]],["usize",0]],[[["bytescodec",3],["bytescodec",3]],["bool",0]],[[["linescodec",3],["linescodec",3]],["bool",0]],[[],["bytescodec",3]],[[],["linescodec",3]],[[],["framed",3]],[[],["framedread",3]],[[],["framedwrite",3]],[[],["framedparts",3]],[[["usize",0]],["linescodec",3]],[[["bytescodec",3],["bytescodec",3]],["option",4,[["ordering",4]]]],[[["linescodec",3],["linescodec",3]],["option",4,[["ordering",4]]]],[[["framed",3]],["result",4,[["async",4,[["option",4]]]]]],[[["framedread",3]],["result",4,[["async",4,[["option",4]]]]]],[[["framedwrite",3]],["result",4,[["async",4,[["option",4]]]]]],[[["framed",3]],["result",4,[["async",4]]]],[[["framedread",3]],["result",4,[["async",4]]]],[[["framedwrite",3]],["result",4,[["async",4]]]],null,[[["framed",3]],["result",4,[["asyncsink",4]]]],[[["framedread",3]],["result",4,[["asyncsink",4]]]],[[["framedwrite",3]],["result",4,[["asyncsink",4]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null],"p":[[8,"Decoder"],[8,"Encoder"],[3,"BytesCodec"],[3,"LinesCodec"],[3,"Framed"],[3,"FramedRead"],[3,"FramedWrite"],[3,"FramedParts"]]},\
"tokio_current_thread":{"doc":"A single-threaded executor which executes tasks on the …","t":[3,3,3,3,3,3,3,3,3,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BlockError","CurrentThread","Entered","Handle","RunError","RunTimeoutError","TaskExecutor","Turn","TurnError","block_on","block_on","block_on_all","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","current","description","description","description","description","drop","enter","execute","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","get_park","get_park","get_park_mut","get_park_mut","handle","has_polled","into","into","into","into","into","into","into","into","into","into_inner","is_idle","is_timeout","new","new_with_park","run","run","run_timeout","run_timeout","spawn","spawn","spawn","spawn","spawn","spawn","spawn","spawn","spawn_local","status","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","turn","turn","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["tokio_current_thread","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Error returned by the <code>block_on</code> function.","Executes tasks on the current thread","A <code>CurrentThread</code> instance bound to a supplied execution …","Handle to spawn a future on the corresponding <code>CurrentThread</code>…","Error returned by the <code>run</code> function.","Error returned by the <code>run_timeout</code> function.","Executes futures on the current thread.","Returned by the <code>turn</code> function.","Error returned by the <code>turn</code> function.","Synchronously waits for the provided <code>future</code> to complete.","Synchronously waits for the provided <code>future</code> to complete.","Run the executor bootstrapping the execution with the …","","","","","","","","","","","","","","","","","","","","","","","Returns an executor that executes futures on the current …","","","","","","Bind <code>CurrentThread</code> instance with an execution context.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the underlying <code>Park</code> instance.","Returns a reference to the underlying <code>Park</code> instance.","Returns a mutable reference to the underlying <code>Park</code> …","Returns a mutable reference to the underlying <code>Park</code> …","Get a new handle to spawn futures on the executor","<code>true</code> if any futures were polled at all and <code>false</code> otherwise.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the error yielded by the future being blocked on","Returns <code>true</code> if the executor is currently idle.","Returns <code>true</code> if the error was caused by the operation …","Create a new instance of <code>CurrentThread</code>.","Create a new instance of <code>CurrentThread</code> backed by the given …","Run the executor to completion, blocking the thread until …","Run the executor to completion, blocking the thread until …","Run the executor to completion, blocking the thread until …","Run the executor to completion, blocking the thread until …","Executes a future on the current thread.","","Spawn the future on the executor.","","Spawn the future on the executor.","","","Spawn a future onto the <code>CurrentThread</code> instance …","Spawn a future onto the current <code>CurrentThread</code> instance.","Provides a best effort <strong>hint</strong> to whether or not <code>spawn</code> will …","","","","","","","","","","","","","","","","","","","","","","","","","Perform a single iteration of the event loop.","Perform a single iteration of the event loop.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,2,0,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,3,9,3,9,3,5,6,7,8,1,1,3,1,2,3,4,5,5,6,6,7,7,8,8,9,1,2,3,4,5,6,6,7,8,8,9,1,2,1,2,1,4,1,2,3,4,5,6,7,8,9,8,1,6,1,1,1,2,1,2,0,1,1,1,2,3,3,9,3,9,3,9,5,6,7,8,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,1,2,3,4,5,6,7,8,9],"f":[null,null,null,null,null,null,null,null,null,[[["currentthread",3,[["park",8]]]],["result",4,[["blockerror",3]]]],[[["entered",3,[["park",8]]]],["result",4,[["blockerror",3]]]],[[],["result",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["taskexecutor",3]],["taskexecutor",3]],[[["handle",3]],["handle",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["taskexecutor",3]],[[["runerror",3]],["str",0]],[[["runtimeouterror",3]],["str",0]],[[["turnerror",3]],["str",0]],[[["blockerror",3,[["debug",8]]]],["str",0]],[[["currentthread",3,[["park",8]]]]],[[["currentthread",3,[["park",8]]],["enter",3]],["entered",3,[["park",8]]]],[[["taskexecutor",3]],["result",4,[["executeerror",3]]]],[[["currentthread",3,[["park",8]]],["formatter",3]],["result",6]],[[["entered",3,[["park",8]]],["formatter",3]],["result",6]],[[["taskexecutor",3],["formatter",3]],["result",6]],[[["turn",3],["formatter",3]],["result",6]],[[["runerror",3],["formatter",3]],["result",6]],[[["runerror",3],["formatter",3]],["result",6]],[[["runtimeouterror",3],["formatter",3]],["result",6]],[[["runtimeouterror",3],["formatter",3]],["result",6]],[[["turnerror",3],["formatter",3]],["result",6]],[[["turnerror",3],["formatter",3]],["result",6]],[[["blockerror",3],["formatter",3]],["result",6]],[[["blockerror",3,[["debug",8]]],["formatter",3]],["result",6]],[[["handle",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["entererror",3]],["runtimeouterror",3]],[[]],[[["entererror",3]],["blockerror",3]],[[]],[[]],[[["currentthread",3,[["park",8]]]],["",0]],[[["entered",3,[["park",8]]]],["",0]],[[["currentthread",3,[["park",8]]]],["",0]],[[["entered",3,[["park",8]]]],["",0]],[[["currentthread",3,[["park",8]]]],["handle",3]],[[["turn",3]],["bool",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["blockerror",3]],["option",4]],[[["currentthread",3,[["park",8]]]],["bool",0]],[[["runtimeouterror",3]],["bool",0]],[[],["currentthread",3,[["parkthread",3]]]],[[["park",8]],["currentthread",3,[["park",8]]]],[[["currentthread",3,[["park",8]]]],["result",4,[["runerror",3]]]],[[["entered",3,[["park",8]]]],["result",4,[["runerror",3]]]],[[["currentthread",3,[["park",8]]],["duration",3]],["result",4,[["runtimeouterror",3]]]],[[["entered",3,[["park",8]]],["duration",3]],["result",4,[["runtimeouterror",3]]]],[[]],[[["currentthread",3]],["result",4,[["spawnerror",3]]]],[[["currentthread",3,[["park",8]]]],["currentthread",3,[["park",8]]]],[[["currentthread",3],["box",3,[["future",8]]]],["result",4,[["spawnerror",3]]]],[[["entered",3,[["park",8]]]],["entered",3,[["park",8]]]],[[["taskexecutor",3],["box",3,[["future",8]]]],["result",4,[["spawnerror",3]]]],[[["taskexecutor",3]],["result",4,[["spawnerror",3]]]],[[["handle",3]],["result",4,[["spawnerror",3]]]],[[["taskexecutor",3],["box",3,[["future",8]]]],["result",4,[["spawnerror",3]]]],[[["handle",3]],["result",4,[["spawnerror",3]]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["currentthread",3,[["park",8]]],["option",4,[["duration",3]]]],["result",4,[["turn",3],["turnerror",3]]]],[[["entered",3,[["park",8]]],["option",4,[["duration",3]]]],["result",4,[["turn",3],["turnerror",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"CurrentThread"],[3,"Entered"],[3,"TaskExecutor"],[3,"Turn"],[3,"RunError"],[3,"RunTimeoutError"],[3,"TurnError"],[3,"BlockError"],[3,"Handle"]]},\
"tokio_executor":{"doc":"Task execution related traits and utilities.","t":[3,3,3,8,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,5,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,16,8,3,3,8,16,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11],"n":["DefaultExecutor","Enter","EnterError","Executor","SpawnError","TypedExecutor","at_capacity","block_on","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","current","description","description","drop","enter","execute","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","is_at_capacity","is_shutdown","make_permanent","on_exit","park","shutdown","spawn","spawn","spawn","spawn","spawn","status","status","status","status","status","status","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","with_default","Error","Park","ParkError","ParkThread","Unpark","Unpark","UnparkThread","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","fmt","from","from","from","into","into","into","new","park","park","park_timeout","park_timeout","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unpark","unpark","unpark","unpark"],"q":["tokio_executor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio_executor::park","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Executes futures on the default executor for the current …","Represents an executor context.","An error returned by <code>enter</code> if an execution scope has …","A value that executes futures.","Errors returned by <code>Executor::spawn</code>.","A value that spawns futures of a specific type.","Return a new <code>SpawnError</code> reflecting an executor at capacity …","Blocks the thread on the specified future, returning the …","","","","","","","","","","","Returns a handle to the default executor for the current …","","","","Marks the current thread as being within the dynamic …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the error reflects an executor at capacity …","Returns <code>true</code> if the error reflects a shutdown executor …","Treat the remainder of execution on this thread as part of …","Register a callback to be invoked if and when the thread …","Abstraction over blocking and unblocking the current …","Return a new <code>SpawnError</code> reflecting a shutdown executor …","Submits a future for execution on the default executor – …","Spawns a future object to run on this executor.","Spawns a future to run on this executor.","","","Provides a best effort <strong>hint</strong> to whether or not <code>spawn</code> will …","Provides a best effort <strong>hint</strong> to whether or not <code>spawn</code> will …","Provides a best effort <strong>hint</strong> to whether or not <code>spawn</code> will …","Provides a best effort <strong>hint</strong> to whether or not <code>spawn</code> will …","","","","","","","","","","","","","","","","","","Set the default executor for the duration of the closure","Error returned by <code>park</code>","Block the current thread.","Error returned by <code>ParkThread</code>","Blocks the current thread using a condition variable.","Unblock a thread blocked by the associated <code>Park</code> instance.","Unpark handle type for the <code>Park</code> implementation.","Unblocks a thread that was blocked by <code>ParkThread</code>.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ParkThread</code> handle for the current thread.","Block the current thread unless or until the token is …","","Park the current thread for at most <code>duration</code>.","","","","","","","","","","","","Get a new <code>Unpark</code> handle associated with this <code>Park</code> instance.","Unblock a thread that is blocked by the associated <code>Park</code> …","",""],"i":[0,0,0,0,0,0,1,2,2,3,1,4,2,3,1,4,4,4,4,3,1,2,0,4,2,3,3,1,1,4,2,3,1,4,2,3,1,4,1,1,2,2,0,1,0,5,6,4,4,5,5,6,6,4,4,4,3,1,2,3,1,4,2,3,1,4,2,3,1,4,0,7,0,0,0,0,7,0,8,9,10,8,9,10,10,10,8,9,10,8,9,10,8,9,10,8,7,8,7,8,10,8,9,10,8,9,10,8,9,10,7,11,8,10],"f":[null,null,null,null,null,null,[[],["spawnerror",3]],[[["enter",3],["future",8]],["result",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["defaultexecutor",3]],["defaultexecutor",3]],[[["",0],["",0]]],[[],["defaultexecutor",3]],[[["entererror",3]],["str",0]],[[["spawnerror",3]],["str",0]],[[["enter",3]]],[[],["result",4,[["enter",3],["entererror",3]]]],[[["defaultexecutor",3]],["result",4,[["executeerror",3]]]],[[["enter",3],["formatter",3]],["result",6]],[[["entererror",3],["formatter",3]],["result",6]],[[["entererror",3],["formatter",3]],["result",6]],[[["spawnerror",3],["formatter",3]],["result",6]],[[["spawnerror",3],["formatter",3]],["result",6]],[[["defaultexecutor",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["spawnerror",3]],["bool",0]],[[["spawnerror",3]],["bool",0]],[[["enter",3]]],[[["enter",3]]],null,[[],["spawnerror",3]],[[]],[[["",0],["box",3,[["future",8]]]],["result",4,[["spawnerror",3]]]],[[["",0]],["result",4,[["spawnerror",3]]]],[[["defaultexecutor",3],["box",3,[["future",8]]]],["result",4,[["spawnerror",3]]]],[[["defaultexecutor",3]],["result",4,[["spawnerror",3]]]],[[["",0]],["result",4,[["spawnerror",3]]]],[[["",0]],["result",4,[["spawnerror",3]]]],[[["",0]],["result",4,[["spawnerror",3]]]],[[["",0]],["result",4,[["spawnerror",3]]]],[[["defaultexecutor",3]],["result",4,[["spawnerror",3]]]],[[["defaultexecutor",3]],["result",4,[["spawnerror",3]]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["enter",3]]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["unparkthread",3]],["unparkthread",3]],[[["",0],["",0]]],[[["parkthread",3],["formatter",3]],["result",6]],[[["parkerror",3],["formatter",3]],["result",6]],[[["unparkthread",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["parkthread",3]],[[["",0]],["result",4]],[[["parkthread",3]],["result",4]],[[["",0],["duration",3]],["result",4]],[[["parkthread",3],["duration",3]],["result",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]]],[[["",0]]],[[["parkthread",3]]],[[["unparkthread",3]]]],"p":[[3,"SpawnError"],[3,"Enter"],[3,"EnterError"],[3,"DefaultExecutor"],[8,"Executor"],[8,"TypedExecutor"],[8,"Park"],[3,"ParkThread"],[3,"ParkError"],[3,"UnparkThread"],[8,"Unpark"]]},\
"tokio_fs":{"doc":"Asynchronous file and standard stream adaptation.","t":[3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,5,5,5,5,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,11,11,11,11,11,11,11,5,11,11,11],"n":["CreateDirAllFuture","CreateDirFuture","DirEntry","File","HardLinkFuture","MetadataFuture","OpenOptions","ReadDir","ReadDirFuture","ReadFile","ReadLinkFuture","RemoveDirFuture","RemoveFileFuture","RenameFuture","SetPermissionsFuture","Stderr","Stdin","Stdout","SymlinkMetadataFuture","WriteFile","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","create_dir","create_dir_all","file","file_name","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hard_link","ino","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_std","metadata","os","path","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll","poll_file_type","poll_metadata","prepare_uninitialized_buffer","read","read","read_dir","read_link","remove_dir","remove_file","rename","set_permissions","shutdown","shutdown","stderr","stdin","stdout","symlink_metadata","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","write","CloneFuture","CreateFuture","File","MetadataFuture","OpenFuture","OpenOptions","SeekFuture","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create","create","create_new","drop","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_std","into","into","into","into","into","into","into","into_future","into_future","into_future","into_future","into_future","into_std","metadata","new","open","open","poll","poll","poll","poll","poll","poll_metadata","poll_seek","poll_set_len","poll_set_permissions","poll_sync_all","poll_sync_data","poll_try_clone","prepare_uninitialized_buffer","read","read","seek","shutdown","to_owned","truncate","try_clone","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write","write","unix","SymlinkFuture","borrow","borrow_mut","fmt","from","into","into_future","poll","symlink","try_from","try_into","type_id"],"q":["tokio_fstokio_fs::file","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio_fs::os","tokio_fs::os::unix","","","","","","","","","","",""],"d":["Future returned by <code>create_dir_all</code>.","Future returned by <code>create_dir</code>.","Entries returned by the <code>ReadDir</code> stream.","","Future returned by <code>hard_link</code>.","Future returned by <code>metadata</code>.","Options and flags which can be used to configure how a …","Stream of the entries in a directory.","Future returned by <code>read_dir</code>.","A future used to open a file and read its entire contents …","Future returned by <code>read_link</code>.","Future returned by <code>remove_dir</code>.","Future returned by <code>remove_file</code>.","Future returned by <code>rename</code>.","Future returned by <code>set_permissions</code>.","A handle to the standard error stream of a process.","A handle to the standard input stream of a process.","A handle to the standard output stream of a process.","Future returned by <code>symlink_metadata</code>.","A future used to open a file for writing and write the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new, empty directory at the provided path","Recursively create a directory and all of its parent …","Types for working with <code>File</code>.","Returns the bare file name of this directory entry without …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new hard link on the filesystem.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Destructures the <code>tokio_fs::DirEntry</code> into a …","Queries the file system metadata for a path.","OS-specific functionality.","Returns the full path to the file that this entry …","","","","","","","","","","","","","","","Return the file type for the file that this entry points …","Return the metadata for the file that this entry points at.","","Creates a future which will open a file for reading and …","","Returns a stream over the entries within a directory.","Reads a symbolic link, returning the file that the link …","Removes an existing, empty directory.","Removes a file from the filesystem.","Rename a file or directory to a new name, replacing the …","Changes the permissions found on a file or a directory.","","","Constructs a new handle to the standard error of the …","Constructs a new handle to the standard input of the …","Constructs a new handle to the standard output of the …","Queries the file system metadata for a path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a future that will open a file for writing and …","","","Future returned by <code>File::try_clone</code>.","Future returned by <code>File::create</code> and resolves to a <code>File</code> …","A reference to an open file on the filesystem.","Future returned by <code>File::metadata</code> and resolves to a …","Future returned by <code>File::open</code> and resolves to a <code>File</code> …","Options and flags which can be used to configure how a …","Future returned by <code>File::seek</code>.","See the underlying <code>append</code> call for details.","","","","","","","","","","","","","","","","","See the underlying <code>create</code> call for details.","Opens a file in write-only mode.","See the underlying <code>create_new</code> call for details.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert a <code>std::fs::File</code> to a <code>tokio_fs::File</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Destructures the <code>tokio_fs::File</code> into a <code>std::fs::File</code>.","Queries metadata about the underlying file.","Creates a blank new set of options ready for configuration.","Opens a file at <code>path</code> with the options specified by <code>self</code>.","Attempts to open a file in read-only mode.","","","","","","Queries metadata about the underlying file.","Seek to an offset, in bytes, in a stream.","Truncates or extends the underlying file, updating the …","Changes the permissions on the underlying file.","Attempts to sync all OS-internal metadata to disk.","This function is similar to <code>poll_sync_all</code>, except that it …","Create a new <code>File</code> instance that shares the same underlying …","","See the underlying <code>read</code> call for details.","","Seek to an offset, in bytes, in a stream.","","","See the underlying <code>truncate</code> call for details.","Create a new <code>File</code> instance that shares the same underlying …","","","","","","","","","","","","","","","","","","","","","","See the underlying <code>write</code> call for details.","","Unix-specific extensions to primitives in the <code>tokio_fs</code> …","Future returned by <code>symlink</code>.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Creates a new symbolic link on the filesystem.","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,0,0,0,8,14,16,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,0,8,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,1,2,3,4,5,6,9,10,11,12,13,17,18,8,0,0,8,1,2,3,4,5,6,7,9,10,11,12,13,17,18,8,8,15,0,15,0,0,0,0,0,0,14,16,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,0,14,16,0,0,0,0,0,0,0,19,20,21,22,23,19,24,25,20,21,22,23,19,24,25,19,19,19,25,19,25,25,20,21,22,23,19,24,25,20,21,22,23,19,19,24,25,25,20,21,22,23,19,24,25,20,21,22,23,24,25,25,19,19,25,20,21,22,23,24,25,25,25,25,25,25,25,25,19,25,25,25,19,19,25,20,21,22,23,19,24,25,20,21,22,23,19,24,25,20,21,22,23,19,24,25,19,25,0,0,26,26,26,26,26,26,26,0,26,26,26],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullasref",8,[["path",3]]]],["createdirfuture",3,[["asref",8,[["path",3]]]]]],[[["asref",8,[["path",3]]]],["createdirallfuture",3,[["asref",8,[["path",3]]]]]],null,[[["direntry",3]],["osstring",3]],[[["stderr",3]],["result",6]],[[["stdout",3]],["result",6]],[[["createdirfuture",3,[["debug",8]]],["formatter",3]],["result",6]],[[["createdirallfuture",3,[["debug",8]]],["formatter",3]],["result",6]],[[["hardlinkfuture",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["metadatafuture",3,[["debug",8]]],["formatter",3]],["result",6]],[[["readfile",3,[["",26,[["debug",8],["asref",8,[["path",3]]],["send",8]]]]],["formatter",3]],["result",6]],[[["readdirfuture",3,[["debug",8]]],["formatter",3]],["result",6]],[[["readdir",3],["formatter",3]],["result",6]],[[["direntry",3],["formatter",3]],["result",6]],[[["readlinkfuture",3,[["debug",8]]],["formatter",3]],["result",6]],[[["removedirfuture",3,[["debug",8]]],["formatter",3]],["result",6]],[[["removefilefuture",3,[["debug",8]]],["formatter",3]],["result",6]],[[["renamefuture",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["setpermissionsfuture",3,[["debug",8]]],["formatter",3]],["result",6]],[[["stderr",3],["formatter",3]],["result",6]],[[["stdin",3],["formatter",3]],["result",6]],[[["stdout",3],["formatter",3]],["result",6]],[[["symlinkmetadatafuture",3,[["debug",8]]],["formatter",3]],["result",6]],[[["writefile",3,[["",26,[["debug",8],["asref",8,[["path",3]]],["send",8]]],["",26,[["debug",8],["asref",8]]]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["asref",8,[["path",3]]],["asref",8,[["path",3]]]],["hardlinkfuture",3,[["asref",8,[["path",3]]],["asref",8,[["path",3]]]]]],[[["direntry",3]],["u64",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["direntry",3]],["stddirentry",3]],[[],["metadatafuture",3]],null,[[["direntry",3]],["pathbuf",3]],[[["createdirfuture",3]],["poll",6]],[[["createdirallfuture",3]],["poll",6]],[[["hardlinkfuture",3]],["poll",6]],[[["metadatafuture",3]],["poll",6]],[[["readfile",3,[["",26,[["asref",8,[["path",3]]],["send",8]]]]]],["poll",6]],[[["readdirfuture",3]],["poll",6,[["error",3]]]],[[["readdir",3]],["poll",6,[["option",4]]]],[[["readlinkfuture",3]],["poll",6]],[[["removedirfuture",3]],["poll",6]],[[["removefilefuture",3]],["poll",6]],[[["renamefuture",3]],["poll",6]],[[["setpermissionsfuture",3]],["poll",6]],[[["symlinkmetadatafuture",3]],["poll",6]],[[["writefile",3,[["",26,[["asref",8,[["path",3]]],["send",8]]],["",26,[["asref",8],["debug",8]]]]]],["poll",6]],[[["direntry",3]],["poll",6,[["filetype",3],["error",3]]]],[[["direntry",3]],["poll",6,[["metadata",3],["error",3]]]],[[["stdin",3]],["bool",0]],[[],["readfile",3]],[[["stdin",3]],["result",6,[["usize",0]]]],[[],["readdirfuture",3]],[[["asref",8,[["path",3]]]],["readlinkfuture",3,[["asref",8,[["path",3]]]]]],[[["asref",8,[["path",3]]]],["removedirfuture",3,[["asref",8,[["path",3]]]]]],[[["asref",8,[["path",3]]]],["removefilefuture",3,[["asref",8,[["path",3]]]]]],[[["asref",8,[["path",3]]],["asref",8,[["path",3]]]],["renamefuture",3,[["asref",8,[["path",3]]],["asref",8,[["path",3]]]]]],[[["asref",8,[["path",3]]],["permissions",3]],["setpermissionsfuture",3,[["asref",8,[["path",3]]]]]],[[["stderr",3]],["poll",6,[["error",3]]]],[[["stdout",3]],["poll",6,[["error",3]]]],[[],["stderr",3]],[[],["stdin",3]],[[],["stdout",3]],[[],["symlinkmetadatafuture",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["asref",8]],["writefile",3,[["asref",8]]]],[[["stderr",3]],["result",6,[["usize",0]]]],[[["stdout",3]],["result",6,[["usize",0]]]],null,null,null,null,null,null,null,[[["openoptions",3],["bool",0]],["openoptions",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["openoptions",3]],["openoptions",3]],[[["",0],["",0]]],[[["openoptions",3],["bool",0]],["openoptions",3]],[[],["createfuture",3]],[[["openoptions",3],["bool",0]],["openoptions",3]],[[["file",3]]],[[["file",3]],["result",6]],[[["clonefuture",3],["formatter",3]],["result",6]],[[["createfuture",3,[["debug",8]]],["formatter",3]],["result",6]],[[["metadatafuture",3],["formatter",3]],["result",6]],[[["openfuture",3,[["debug",8]]],["formatter",3]],["result",6]],[[["openoptions",3],["formatter",3]],["result",6]],[[["seekfuture",3],["formatter",3]],["result",6]],[[["file",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["stdopenoptions",3]],["openoptions",3]],[[]],[[]],[[]],[[["stdfile",3]],["file",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["file",3]],["stdfile",3]],[[["file",3]],["metadatafuture",3]],[[],["openoptions",3]],[[["openoptions",3]],["openfuture",3]],[[],["openfuture",3]],[[["clonefuture",3]],["poll",6]],[[["createfuture",3]],["poll",6]],[[["metadatafuture",3]],["poll",6]],[[["openfuture",3]],["poll",6]],[[["seekfuture",3]],["poll",6]],[[["file",3]],["poll",6,[["metadata",3],["error",3]]]],[[["file",3],["seekfrom",4]],["poll",6,[["u64",0],["error",3]]]],[[["file",3],["u64",0]],["poll",6,[["error",3]]]],[[["file",3],["permissions",3]],["poll",6,[["error",3]]]],[[["file",3]],["poll",6,[["error",3]]]],[[["file",3]],["poll",6,[["error",3]]]],[[["file",3]],["poll",6,[["file",3],["error",3]]]],[[["file",3]],["bool",0]],[[["openoptions",3],["bool",0]],["openoptions",3]],[[["file",3]],["result",6,[["usize",0]]]],[[["file",3],["seekfrom",4]],["seekfuture",3]],[[["file",3]],["poll",6,[["error",3]]]],[[["",0]]],[[["openoptions",3],["bool",0]],["openoptions",3]],[[["file",3]],["clonefuture",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["openoptions",3],["bool",0]],["openoptions",3]],[[["file",3]],["result",6,[["usize",0]]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["symlinkfuture",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["symlinkfuture",3]],["poll",6]],[[["asref",8,[["path",3]]],["asref",8,[["path",3]]]],["symlinkfuture",3,[["asref",8,[["path",3]]],["asref",8,[["path",3]]]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"CreateDirFuture"],[3,"CreateDirAllFuture"],[3,"HardLinkFuture"],[3,"MetadataFuture"],[3,"ReadFile"],[3,"ReadDirFuture"],[3,"ReadDir"],[3,"DirEntry"],[3,"ReadLinkFuture"],[3,"RemoveDirFuture"],[3,"RemoveFileFuture"],[3,"RenameFuture"],[3,"SetPermissionsFuture"],[3,"Stderr"],[3,"Stdin"],[3,"Stdout"],[3,"SymlinkMetadataFuture"],[3,"WriteFile"],[3,"OpenOptions"],[3,"CloneFuture"],[3,"CreateFuture"],[3,"MetadataFuture"],[3,"OpenFuture"],[3,"SeekFuture"],[3,"File"],[3,"SymlinkFuture"]]},\
"tokio_io":{"doc":"Core I/O traits and combinators when working with Tokio.","t":[8,8,6,6,11,11,0,11,11,11,11,11,11,11,11,11,11,10,11,11,14,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,11,5,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11],"n":["AsyncRead","AsyncWrite","IoFuture","IoStream","framed","framed","io","poll_flush","poll_flush","poll_read","poll_read","poll_write","poll_write","prepare_uninitialized_buffer","prepare_uninitialized_buffer","read_buf","read_buf","shutdown","split","split","try_nb","write_buf","write_buf","AllowStdIo","Copy","Flush","Lines","Read","ReadExact","ReadHalf","ReadToEnd","ReadUntil","Shutdown","Window","WriteAll","WriteHalf","as_mut","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cmp","copy","end","eq","flush","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mut","get_mut","get_ref","get_ref","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_future","into_inner","into_inner","into_inner","lines","ne","new","new","partial_cmp","poll","poll","poll","poll","poll","poll","poll","poll","poll","read","read","read","read_buf","read_exact","read_exact","read_to_end","read_to_end","read_to_string","read_until","set_end","set_start","shutdown","shutdown","shutdown","start","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unsplit","unsplit","write","write","write_all","write_all","write_buf","write_fmt"],"q":["tokio_io","","","","","","","","","","","","","","","","","","","","","","","tokio_io::io","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Read bytes asynchronously.","Writes bytes asynchronously.","A convenience typedef around a <code>Future</code> whose error …","A convenience typedef around a <code>Stream</code> whose error …","Provides a <code>Stream</code> and <code>Sink</code> interface for reading and …","Provides a <code>Stream</code> and <code>Sink</code> interface for reading and …","I/O conveniences when working with primitives in <code>tokio-core</code>","Attempt to flush the object, ensuring that any buffered …","Attempt to flush the object, ensuring that any buffered …","Attempt to read from the <code>AsyncRead</code> into <code>buf</code>.","Attempt to read from the <code>AsyncRead</code> into <code>buf</code>.","Attempt to write bytes from <code>buf</code> into the object.","Attempt to write bytes from <code>buf</code> into the object.","Prepares an uninitialized buffer to be safe to pass to <code>read</code>…","Prepares an uninitialized buffer to be safe to pass to <code>read</code>…","Pull some bytes from this source into the specified <code>BufMut</code>…","Pull some bytes from this source into the specified <code>BufMut</code>…","Initiates or attempts to shut down this writer, returning …","Helper method for splitting this read/write object into …","Helper method for splitting this read/write object into …","A convenience macro for working with <code>io::Result&lt;T&gt;</code> from …","Write a <code>Buf</code> into this value, returning how many bytes were …","Write a <code>Buf</code> into this value, returning how many bytes were …","A simple wrapper type which allows types that only …","A future which will copy all data from a reader into a …","A future used to fully flush an I/O object.","Combinator created by the top-level <code>lines</code> method which is …","A future which can be used to easily read available number …","A future which can be used to easily read exactly enough …","The readable half of an object returned from …","A future which can be used to easily read the entire …","A future which can be used to easily read the contents of …","A future used to fully shutdown an I/O object.","A owned window around an underlying buffer.","A future used to write the entire contents of some data to …","The writable half of an object returned from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a future which represents copying all the bytes …","Returns the end index of this window into the underlying …","","Creates a future which will entirely flush an I/O object …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the contained IO object.","Gets a mutable reference to the underlying buffer inside …","Returns a reference to the contained IO object.","Gets a shared reference to the underlying buffer inside of …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Consumes self and returns the contained IO object.","Returns the underlying I/O object.","Consumes this <code>Window</code>, returning the underlying buffer.","Creates a new stream from the I/O object given …","","Creates a new <code>AllowStdIo</code> from an existing IO object.","Creates a new window around the buffer <code>t</code> defaulting to the …","","","","","","","","","","","Tries to read some bytes directly into the given <code>buf</code> in …","","","","Creates a future which will read exactly enough bytes to …","","Creates a future which will read all the bytes associated …","","","Creates a future which will read all the bytes associated …","Changes the end index of this window to the index …","Changes the starting index of this window to the index …","Creates a future which will entirely shutdown an I/O …","","","Returns the starting index of this window into the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reunite with a previously split <code>WriteHalf</code>.","Reunite with a previously split <code>ReadHalf</code>.","","","Creates a future that will write the entire contents of …","","",""],"i":[0,0,0,0,1,1,0,2,2,1,1,2,2,1,1,1,1,2,1,1,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,4,5,6,7,8,9,10,11,12,13,14,15,3,4,5,6,7,8,9,10,11,12,13,14,15,3,12,12,12,0,3,12,0,12,15,4,5,6,7,8,9,10,11,12,13,14,15,3,4,5,6,7,8,9,10,11,12,13,14,15,3,12,3,12,3,12,4,5,6,7,8,9,10,11,12,13,14,15,3,4,5,6,7,8,9,10,11,12,13,3,0,12,12,3,12,4,5,6,7,8,9,10,11,13,0,12,14,14,0,12,0,12,12,0,3,3,0,12,15,3,12,4,5,6,7,8,9,10,11,12,13,14,15,3,4,5,6,7,8,9,10,11,12,13,14,15,3,4,5,6,7,8,9,10,11,12,13,14,15,3,14,15,12,15,0,12,15,12],"f":[null,null,null,null,[[["",26,[["encoder",8],["decoder",8]]]],["framed",3,[["",26,[["encoder",8],["decoder",8]]]]]],[[["",26,[["encoder",8],["decoder",8]]]],["framed",3,[["",26,[["encoder",8],["decoder",8]]]]]],null,[[["",0]],["poll",6,[["error",3]]]],[[["",0]],["poll",6,[["error",3]]]],[[["",0]],["poll",6,[["usize",0],["error",3]]]],[[["",0]],["poll",6,[["usize",0],["error",3]]]],[[["",0]],["poll",6,[["usize",0],["error",3]]]],[[["",0]],["poll",6,[["usize",0],["error",3]]]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0],["",0]],["poll",6,[["usize",0],["error",3]]]],[[["",0],["",0]],["poll",6,[["usize",0],["error",3]]]],[[["",0]],["poll",6,[["error",3]]]],[[]],[[]],null,[[["",0],["",0]],["poll",6,[["usize",0],["error",3]]]],[[["",0],["",0]],["poll",6,[["usize",0],["error",3]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["window",3,[["asmut",8]]]]],[[["window",3,[["asref",8]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["allowstdio",3,[["clone",8]]]],["allowstdio",3,[["clone",8]]]],[[["",0],["",0]]],[[["allowstdio",3,[["ord",8]]],["allowstdio",3]],["ordering",4]],[[],["copy",3]],[[["window",3,[["asref",8]]]],["usize",0]],[[["allowstdio",3,[["partialeq",8]]],["allowstdio",3]],["bool",0]],[[],["flush",3]],[[["allowstdio",3]],["result",6]],[[["writehalf",3,[["asyncwrite",8]]]],["result",6]],[[["copy",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["flush",3,[["debug",8]]],["formatter",3]],["result",6]],[[["read",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["readexact",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["readtoend",3,[["debug",8]]],["formatter",3]],["result",6]],[[["readuntil",3,[["debug",8]]],["formatter",3]],["result",6]],[[["shutdown",3,[["debug",8]]],["formatter",3]],["result",6]],[[["writeall",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["allowstdio",3,[["debug",8]]],["formatter",3]],["result",6]],[[["lines",3,[["debug",8]]],["formatter",3]],["result",6]],[[["readhalf",3,[["debug",8]]],["formatter",3]],["result",6]],[[["writehalf",3,[["debug",8]]],["formatter",3]],["result",6]],[[["window",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["allowstdio",3]],["",0]],[[["window",3,[["asref",8]]]],["",0]],[[["allowstdio",3]],["",0]],[[["window",3,[["asref",8]]]],["",0]],[[["allowstdio",3,[["hash",8]]],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["allowstdio",3]]],[[["lines",3]]],[[["window",3,[["asref",8]]]],["asref",8]],[[],["lines",3]],[[["allowstdio",3,[["partialeq",8]]],["allowstdio",3]],["bool",0]],[[],["allowstdio",3]],[[["asref",8]],["window",3,[["asref",8]]]],[[["allowstdio",3,[["partialord",8]]],["allowstdio",3]],["option",4,[["ordering",4]]]],[[["copy",3]],["poll",6,[["error",3]]]],[[["flush",3]],["poll",6,[["error",3]]]],[[["read",3]],["poll",6,[["error",3]]]],[[["readexact",3]],["poll",6,[["error",3]]]],[[["readtoend",3]],["poll",6,[["error",3]]]],[[["readuntil",3]],["poll",6,[["error",3]]]],[[["shutdown",3]],["poll",6,[["error",3]]]],[[["writeall",3]],["poll",6,[["error",3]]]],[[["lines",3]],["poll",6,[["option",4,[["string",3]]],["error",3]]]],[[],["read",3]],[[["allowstdio",3]],["result",6,[["usize",0]]]],[[["readhalf",3,[["asyncread",8]]]],["result",6,[["usize",0]]]],[[["readhalf",3,[["asyncread",8]]],["",0]],["poll",6,[["usize",0],["error",3]]]],[[],["readexact",3]],[[["allowstdio",3]],["result",6]],[[["vec",3,[["u8",0]]]],["readtoend",3]],[[["allowstdio",3],["vec",3]],["result",6,[["usize",0]]]],[[["allowstdio",3],["string",3]],["result",6,[["usize",0]]]],[[["u8",0],["vec",3,[["u8",0]]]],["readuntil",3]],[[["window",3,[["asref",8]]],["usize",0]],["window",3]],[[["window",3,[["asref",8]]],["usize",0]],["window",3]],[[],["shutdown",3]],[[["allowstdio",3]],["poll",6,[["error",3]]]],[[["writehalf",3,[["asyncwrite",8]]]],["poll",6,[["error",3]]]],[[["window",3,[["asref",8]]]],["usize",0]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["readhalf",3,[["",26,[["asyncread",8],["asyncwrite",8]]]]],["writehalf",3,[["",26,[["asyncread",8],["asyncwrite",8]]]]]],["",26,[["asyncread",8],["asyncwrite",8]]]],[[["writehalf",3,[["",26,[["asyncread",8],["asyncwrite",8]]]]],["readhalf",3,[["",26,[["asyncread",8],["asyncwrite",8]]]]]],["",26,[["asyncread",8],["asyncwrite",8]]]],[[["allowstdio",3]],["result",6,[["usize",0]]]],[[["writehalf",3,[["asyncwrite",8]]]],["result",6,[["usize",0]]]],[[],["writeall",3]],[[["allowstdio",3]],["result",6]],[[["writehalf",3,[["asyncwrite",8]]],["",0]],["poll",6,[["usize",0],["error",3]]]],[[["allowstdio",3],["arguments",3]],["result",6]]],"p":[[8,"AsyncRead"],[8,"AsyncWrite"],[3,"Window"],[3,"Copy"],[3,"Flush"],[3,"Read"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"ReadUntil"],[3,"Shutdown"],[3,"WriteAll"],[3,"AllowStdIo"],[3,"Lines"],[3,"ReadHalf"],[3,"WriteHalf"]]},\
"tokio_reactor":{"doc":"Event loop that drives Tokio I/O resources.","t":[3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11],"n":["Background","Handle","PollEvented","Reactor","Registration","SetFallbackError","Shutdown","Turn","as_raw_fd","background","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear_read_ready","clear_write_ready","clone","clone","clone_into","clone_into","default","deregister","description","drop","drop","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forget","from","from","from","from","from","from","from","from","get_mut","get_ref","handle","handle","into","into","into","into","into","into","into","into","into_future","into_inner","is_idle","new","new","new","new_with_handle","park","park_timeout","poll","poll_read_ready","poll_read_ready","poll_write_ready","poll_write_ready","read","read","register","register_with","set_fallback","shutdown","shutdown","shutdown_now","shutdown_on_idle","take_read_ready","take_write_ready","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","turn","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpark","unpark","with_default","write","write"],"q":["tokio_reactor","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Handle to the reactor running on a background thread.","A reference to a reactor.","Associates an I/O resource that implements the …","The core reactor, or event loop.","Associates an I/O resource with the reactor instance that …","Error returned from <code>Handle::set_fallback</code>.","Future that resolves when the reactor thread has shutdown.","Return value from the <code>turn</code> method on <code>Reactor</code>.","","Run this reactor on a background thread.","","","","","","","","","","","","","","","","","Clears the I/O resource’s read readiness state and …","Resets the I/O resource’s write readiness state and …","","","","","Returns a “default” handle, i.e., a handle that lazily …","Deregister the I/O resource from the reactor it is …","","","","","","","","","","","","","","","Run the reactor on its thread until the process terminates.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the underlying I/O object …","Returns a shared reference to the underlying I/O object …","Returns a handle to this event loop which can be sent …","Returns a reference to the reactor handle.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Consumes self, returning the inner I/O object","Returns true if the reactor is currently idle.","Creates a new <code>PollEvented</code> associated with the default …","Creates a new event loop, returning any error that …","Create a new <code>Registration</code>.","Creates a new <code>PollEvented</code> associated with the specified …","","","","Check the I/O resource’s read readiness state.","Poll for events on the I/O resource’s read readiness …","Check the I/O resource’s write readiness state.","Poll for events on the I/O resource’s write readiness …","","","Register the I/O resource with the default reactor.","Register the I/O resource with the specified reactor.","Configures the fallback handle to be returned from …","","","Shutdown the reactor immediately","Shutdown the reactor on idle.","Consume any pending read readiness event.","Consume any pending write readiness event.","","","","","","","","","","","","","","","","","","","","Performs one iteration of the event loop, blocking on …","","","","","","","","","","","Set the default reactor for the duration of the closure","",""],"i":[0,0,0,0,0,0,0,0,1,1,2,1,3,4,5,6,7,8,2,1,3,4,5,6,7,8,2,2,6,8,6,8,6,5,8,2,3,2,2,2,1,3,4,5,6,7,8,8,3,2,1,3,4,5,6,7,8,2,2,1,3,2,1,3,4,5,6,7,8,4,2,1,2,1,5,2,1,1,4,2,5,2,5,2,2,5,5,1,2,2,3,3,5,5,6,8,8,2,1,3,4,5,6,7,8,2,1,3,4,5,6,7,8,1,2,1,3,4,5,6,7,8,1,6,0,2,2],"f":[null,null,null,null,null,null,null,null,[[["reactor",3]],["rawfd",6]],[[["reactor",3]],["result",6,[["background",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["pollevented",3],["ready",3]],["result",6]],[[["pollevented",3]],["result",6]],[[["handle",3]],["handle",3]],[[["setfallbackerror",3]],["setfallbackerror",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["handle",3]],[[["registration",3],["",0]],["result",6]],[[["setfallbackerror",3]],["str",0]],[[["pollevented",3,[["evented",8]]]]],[[["background",3]]],[[["pollevented",3]],["result",6]],[[["pollevented",3]],["result",6]],[[["pollevented",3,[["",26,[["evented",8],["debug",8]]]]],["formatter",3]],["result",6]],[[["reactor",3],["formatter",3]],["result",6]],[[["background",3],["formatter",3]],["result",6]],[[["shutdown",3],["formatter",3]],["result",6]],[[["registration",3],["formatter",3]],["result",6]],[[["handle",3],["formatter",3]],["result",6]],[[["turn",3],["formatter",3]],["result",6]],[[["setfallbackerror",3],["formatter",3]],["result",6]],[[["setfallbackerror",3],["formatter",3]],["result",6]],[[["background",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pollevented",3]],["",0]],[[["pollevented",3]],["",0]],[[["reactor",3]],["handle",3]],[[["background",3]],["handle",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["pollevented",3]],["result",6]],[[["reactor",3]],["bool",0]],[[],["pollevented",3]],[[],["result",6,[["reactor",3]]]],[[],["registration",3]],[[["handle",3]],["result",6,[["pollevented",3]]]],[[["reactor",3]],["result",6]],[[["reactor",3],["duration",3]],["result",6]],[[["shutdown",3]],["poll",6]],[[["pollevented",3],["ready",3]],["poll",6,[["ready",3],["error",3]]]],[[["registration",3]],["poll",6,[["ready",3],["error",3]]]],[[["pollevented",3]],["poll",6,[["ready",3],["error",3]]]],[[["registration",3]],["poll",6,[["ready",3],["error",3]]]],[[["pollevented",3]],["result",6,[["usize",0]]]],[[["pollevented",3]],["result",6,[["usize",0]]]],[[["registration",3],["",0]],["result",6,[["bool",0]]]],[[["registration",3],["",0],["handle",3]],["result",6,[["bool",0]]]],[[["reactor",3]],["result",4,[["setfallbackerror",3]]]],[[["pollevented",3]],["poll",6,[["error",3]]]],[[["pollevented",3]],["poll",6,[["error",3]]]],[[["background",3]],["shutdown",3]],[[["background",3]],["shutdown",3]],[[["registration",3]],["result",6,[["option",4,[["ready",3]]]]]],[[["registration",3]],["result",6,[["option",4,[["ready",3]]]]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["reactor",3],["option",4,[["duration",3]]]],["result",6,[["turn",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["reactor",3]]],[[["handle",3]]],[[["handle",3],["enter",3]]],[[["pollevented",3]],["result",6,[["usize",0]]]],[[["pollevented",3]],["result",6,[["usize",0]]]]],"p":[[3,"Reactor"],[3,"PollEvented"],[3,"Background"],[3,"Shutdown"],[3,"Registration"],[3,"Handle"],[3,"Turn"],[3,"SetFallbackError"]]},\
"tokio_sync":{"doc":"Asynchronous synchronization primitives.","t":[0,0,0,0,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,5,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,5,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["lock","mpsc","oneshot","semaphore","task","watch","Lock","LockGuard","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","fmt","fmt","fmt","from","from","from","from","into","into","new","poll_lock","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Receiver","Sender","UnboundedReceiver","UnboundedSender","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","channel","clone","clone","clone_into","clone_into","close","close","close","close","error","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","poll","poll","poll_complete","poll_complete","poll_ready","start_send","start_send","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_send","try_send","type_id","type_id","type_id","type_id","unbounded_channel","RecvError","SendError","TrySendError","UnboundedRecvError","UnboundedSendError","UnboundedTrySendError","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","description","description","description","description","description","description","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into_inner","into_inner","is_closed","is_full","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Receiver","Sender","borrow","borrow","borrow_mut","borrow_mut","channel","close","drop","drop","error","fmt","fmt","from","from","into","into","into_future","is_closed","poll","poll_close","send","try_from","try_from","try_into","try_into","try_recv","type_id","type_id","RecvError","TryRecvError","borrow","borrow","borrow_mut","borrow_mut","description","description","fmt","fmt","fmt","fmt","from","from","into","into","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","AcquireError","Permit","Semaphore","TryAcquireError","add_permits","available_permits","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","close","description","description","fmt","fmt","fmt","fmt","fmt","fmt","forget","from","from","from","from","into","into","into","into","is_acquired","is_closed","is_no_permits","new","new","poll_acquire","release","to_string","to_string","try_acquire","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","AtomicTask","borrow","borrow_mut","default","fmt","from","into","new","notify","register","register_task","take_task","try_from","try_into","type_id","Receiver","Ref","Sender","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","broadcast","channel","clone","clone_into","deref","drop","drop","error","fmt","fmt","fmt","from","from","from","get_ref","into","into","into","poll","poll_close","poll_complete","poll_ref","start_send","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","RecvError","SendError","borrow","borrow","borrow_mut","borrow_mut","description","description","fmt","fmt","fmt","fmt","from","from","into","into","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["tokio_sync","","","","","","tokio_sync::lock","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio_sync::mpsc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio_sync::mpsc::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio_sync::oneshot","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio_sync::oneshot::error","","","","","","","","","","","","","","","","","","","","","","","","tokio_sync::semaphore","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio_sync::task","","","","","","","","","","","","","","","tokio_sync::watch","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio_sync::watch::error","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An asynchronous <code>Mutex</code>-like type.","A multi-producer, single-consumer queue for sending values …","A channel for sending a single message between …","Thread-safe, asynchronous counting semaphore.","Thread-safe task notification primitives.","A single-producer, multi-consumer channel that only …","An asynchronous mutual exclusion primitive useful for …","A handle to a held <code>Lock</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new lock in an unlocked state ready for use.","Try to acquire the lock.","","","","","","","","","Receive values from the associated <code>Sender</code>.","Send values to the associated <code>Receiver</code>.","Receive values from the associated <code>UnboundedSender</code>.","Send values to the associated <code>UnboundedReceiver</code>.","","","","","","","","","Create a bounded mpsc channel for communicating between …","","","","","","Closes the receiving half of a channel, without dropping …","","Closes the receiving half of a channel, without dropping …","Channel error types","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Check if the <code>Sender</code> is ready to handle a value.","","","","","","","","","","","","","Attempts to send a message on this <code>Sender</code>, returning the …","Attempts to send a message on this <code>UnboundedSender</code> without …","","","","","Create an unbounded mpsc channel for communicating between …","Error returned by <code>Receiver</code>.","Error returned by the <code>Sender</code>.","Error returned by <code>Sender::try_send</code>.","Error returned by <code>UnboundedReceiver</code>.","Error returned by the <code>UnboundedSender</code>.","Returned by <code>UnboundedSender::try_send</code> when the channel has …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the inner value.","Get the inner value.","Did the send fail because the channel has been closed?","Did the send fail because the channel was at capacity?","","","","","","","","","","","","","","","","","","","","","","","","","Receive a value from the associated <code>Sender</code>.","Sends a value to the associated <code>Receiver</code>.","","","","","Create a new one-shot channel for sending single values …","Prevent the associated <code>Sender</code> handle from sending a value.","","","Oneshot error types","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Check if the associated <code>Receiver</code> handle has been dropped.","","Check if the associated <code>Receiver</code> handle has been dropped.","Completes this oneshot with a successful result.","","","","","Attempts to receive a value outside of the context of a …","","","Error returned by the <code>Future</code> implementation for <code>Receiver</code>.","Error returned by the <code>try_recv</code> function on <code>Receiver</code>.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Error returned by <code>Permit::poll_acquire</code>.","A semaphore permit","Futures-aware semaphore.","Error returned by <code>Permit::try_acquire</code>.","Add <code>n</code> new permits to the semaphore.","Returns the current number of available permits","","","","","","","","","Close the semaphore. This prevents the semaphore from …","","","","","","","","","Forget the permit <strong>without</strong> releasing it back to the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the permit has been acquired","Returns true if the error was caused by a closed semaphore.","Returns true if the error was caused by calling <code>try_acquire</code>…","Creates a new semaphore with the initial number of permits","Create a new <code>Permit</code>.","Try to acquire the permit. If no permits are available, …","Release a permit back to the semaphore","","","Try to acquire the permit.","","","","","","","","","","","","","A synchronization primitive for task notification.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create an <code>AtomicTask</code> initialized with the given <code>Task</code>","Notifies the task that last called <code>register</code>.","Registers the current task to be notified on calls to …","Registers the provided task to be notified on calls to …","Attempts to take the <code>Task</code> value out of the <code>AtomicTask</code> with …","","","","Receives values from the associated <code>Sender</code>.","Returns a reference to the inner value","Sends values to the associated <code>Receiver</code>.","","","","","","","Broadcast a new value via the channel, notifying all …","Create a new watch channel, returning the “send” and …","","","","","","Watch error types","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the most recently sent value","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>Ready</code> when all receivers have dropped.","","Attempts to receive the latest value sent via the channel.","","","","","","","","","","","","Error produced when receiving a value fails.","Error produced when sending a value fails.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,2,1,2,1,1,1,2,2,2,1,2,2,1,1,1,2,1,2,1,1,1,2,1,2,1,2,1,2,0,0,0,0,3,4,5,6,3,4,5,6,0,3,5,3,5,3,4,5,6,0,3,4,5,6,3,4,5,6,3,4,5,6,4,6,3,5,3,3,5,3,5,3,4,5,6,3,4,5,6,3,5,3,4,5,6,0,0,0,0,0,0,0,7,8,9,10,11,12,7,8,9,10,11,12,7,8,9,10,11,12,7,7,8,8,9,9,10,10,11,11,12,12,7,8,8,9,10,11,11,12,7,8,9,10,11,12,8,11,8,8,7,8,9,10,11,12,7,8,9,10,11,12,7,8,9,10,11,12,7,8,9,10,11,12,0,0,13,14,13,14,0,14,13,14,0,13,14,13,14,13,14,14,13,14,13,13,13,14,13,14,14,13,14,0,0,15,16,15,16,15,16,15,15,16,16,15,16,15,16,15,16,15,16,15,16,15,16,0,0,0,0,17,17,17,18,19,20,17,18,19,20,17,19,20,17,18,19,19,20,20,18,17,18,19,20,17,18,19,20,18,20,20,17,18,18,18,19,20,18,17,18,19,20,17,18,19,20,17,18,19,20,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,0,0,22,23,24,22,23,24,23,0,22,22,24,22,23,0,22,23,24,22,23,24,22,22,23,24,22,23,23,22,23,22,22,23,24,22,23,24,22,23,24,0,0,25,26,25,26,25,26,25,25,26,26,25,26,25,26,25,26,25,26,25,26,25,26],"f":[null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["lock",3]],["lock",3]],[[["",0],["",0]]],[[],["lock",3]],[[["lockguard",3]]],[[["lockguard",3]]],[[["lockguard",3]]],[[["lock",3,[["debug",8]]],["formatter",3]],["result",6]],[[["lockguard",3,[["display",8]]],["formatter",3]],["result",6]],[[["lockguard",3,[["debug",8]]],["formatter",3]],["result",6]],[[],["lock",3]],[[]],[[["never",0]]],[[]],[[]],[[]],[[],["lock",3]],[[["lock",3]],["async",4,[["lockguard",3]]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["usize",0]]],[[["sender",3]],["sender",3]],[[["unboundedsender",3]],["unboundedsender",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["sender",3]],["poll",6]],[[["receiver",3]]],[[["unboundedsender",3]],["poll",6]],[[["unboundedreceiver",3]]],null,[[["sender",3],["formatter",3]],["result",6]],[[["receiver",3],["formatter",3]],["result",6]],[[["unboundedsender",3],["formatter",3]],["result",6]],[[["unboundedreceiver",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["receiver",3]],["poll",6,[["option",4]]]],[[["unboundedreceiver",3]],["poll",6,[["option",4]]]],[[["sender",3]],["poll",6]],[[["unboundedsender",3]],["poll",6]],[[["sender",3]],["poll",6,[["senderror",3]]]],[[["sender",3]],["startsend",6]],[[["unboundedsender",3]],["startsend",6]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["sender",3]],["result",4,[["trysenderror",3]]]],[[["unboundedsender",3]],["result",4,[["unboundedtrysenderror",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["senderror",3]],["str",0]],[[["trysenderror",3,[["debug",8]]]],["str",0]],[[["recverror",3]],["str",0]],[[["unboundedsenderror",3]],["str",0]],[[["unboundedtrysenderror",3,[["debug",8]]]],["str",0]],[[["unboundedrecverror",3]],["str",0]],[[["senderror",3],["formatter",3]],["result",6]],[[["senderror",3],["formatter",3]],["result",6]],[[["trysenderror",3,[["debug",8]]],["formatter",3]],["result",6]],[[["trysenderror",3,[["debug",8]]],["formatter",3]],["result",6]],[[["recverror",3],["formatter",3]],["result",6]],[[["recverror",3],["formatter",3]],["result",6]],[[["unboundedsenderror",3],["formatter",3]],["result",6]],[[["unboundedsenderror",3],["formatter",3]],["result",6]],[[["unboundedtrysenderror",3,[["debug",8]]],["formatter",3]],["result",6]],[[["unboundedtrysenderror",3,[["debug",8]]],["formatter",3]],["result",6]],[[["unboundedrecverror",3],["formatter",3]],["result",6]],[[["unboundedrecverror",3],["formatter",3]],["result",6]],[[]],[[]],[[],["trysenderror",3]],[[]],[[]],[[],["unboundedtrysenderror",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["trysenderror",3]]],[[["unboundedtrysenderror",3]]],[[["trysenderror",3]],["bool",0]],[[["trysenderror",3]],["bool",0]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["receiver",3]]],[[["sender",3]]],[[["receiver",3]]],null,[[["sender",3,[["debug",8]]],["formatter",3]],["result",6]],[[["receiver",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[["sender",3]],["bool",0]],[[["receiver",3]],["poll",6,[["recverror",3]]]],[[["sender",3]],["poll",6]],[[["sender",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["receiver",3]],["result",4,[["tryrecverror",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["recverror",3]],["str",0]],[[["tryrecverror",3]],["str",0]],[[["recverror",3],["formatter",3]],["result",6]],[[["recverror",3],["formatter",3]],["result",6]],[[["tryrecverror",3],["formatter",3]],["result",6]],[[["tryrecverror",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,[[["semaphore",3],["usize",0]]],[[["semaphore",3]],["usize",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["semaphore",3]]],[[["acquireerror",3]],["str",0]],[[["tryacquireerror",3]],["str",0]],[[["semaphore",3],["formatter",3]],["result",6]],[[["permit",3],["formatter",3]],["result",6]],[[["acquireerror",3],["formatter",3]],["result",6]],[[["acquireerror",3],["formatter",3]],["result",6]],[[["tryacquireerror",3],["formatter",3]],["result",6]],[[["tryacquireerror",3],["formatter",3]],["result",6]],[[["permit",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["permit",3]],["bool",0]],[[["tryacquireerror",3]],["bool",0]],[[["tryacquireerror",3]],["bool",0]],[[["usize",0]],["semaphore",3]],[[],["permit",3]],[[["permit",3],["semaphore",3]],["poll",6,[["acquireerror",3]]]],[[["permit",3],["semaphore",3]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["permit",3],["semaphore",3]],["result",4,[["tryacquireerror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["atomictask",3]],[[["atomictask",3],["formatter",3]],["result",6]],[[]],[[]],[[],["atomictask",3]],[[["atomictask",3]]],[[["atomictask",3]]],[[["atomictask",3],["task",3]]],[[["atomictask",3]],["option",4,[["task",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["sender",3]],["result",4,[["senderror",3]]]],[[]],[[["receiver",3]],["receiver",3]],[[["",0],["",0]]],[[["ref",3]],["",0]],[[["receiver",3]]],[[["sender",3]]],null,[[["receiver",3,[["debug",8]]],["formatter",3]],["result",6]],[[["sender",3,[["debug",8]]],["formatter",3]],["result",6]],[[["ref",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["receiver",3]],["ref",3]],[[]],[[]],[[]],[[["receiver",3,[["clone",8]]]],["poll",6,[["option",4,[["clone",8]]],["recverror",3]]]],[[["sender",3]],["poll",6]],[[["sender",3]],["poll",6,[["senderror",3]]]],[[["receiver",3]],["poll",6,[["option",4,[["ref",3]]],["recverror",3]]]],[[["sender",3]],["startsend",6,[["senderror",3]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["recverror",3]],["str",0]],[[["senderror",3,[["debug",8]]]],["str",0]],[[["recverror",3],["formatter",3]],["result",6]],[[["recverror",3],["formatter",3]],["result",6]],[[["senderror",3,[["debug",8]]],["formatter",3]],["result",6]],[[["senderror",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"Lock"],[3,"LockGuard"],[3,"Sender"],[3,"Receiver"],[3,"UnboundedSender"],[3,"UnboundedReceiver"],[3,"SendError"],[3,"TrySendError"],[3,"RecvError"],[3,"UnboundedSendError"],[3,"UnboundedTrySendError"],[3,"UnboundedRecvError"],[3,"Sender"],[3,"Receiver"],[3,"RecvError"],[3,"TryRecvError"],[3,"Semaphore"],[3,"Permit"],[3,"AcquireError"],[3,"TryAcquireError"],[3,"AtomicTask"],[3,"Receiver"],[3,"Sender"],[3,"Ref"],[3,"RecvError"],[3,"SendError"]]},\
"tokio_tcp":{"doc":"TCP bindings for <code>tokio</code>.","t":[3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ConnectFuture","Incoming","TcpListener","TcpStream","as_raw_fd","as_raw_fd","bind","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","connect","connect_std","flush","flush","fmt","fmt","fmt","fmt","from","from","from","from","from_std","from_std","incoming","into","into","into","into","into_future","keepalive","linger","local_addr","local_addr","nodelay","peer_addr","poll","poll","poll_accept","poll_accept_std","poll_peek","poll_read_ready","poll_write_ready","prepare_uninitialized_buffer","prepare_uninitialized_buffer","read","read","read_buf","read_buf","recv_buffer_size","send_buffer_size","set_keepalive","set_linger","set_nodelay","set_recv_buffer_size","set_send_buffer_size","set_ttl","set_ttl","shutdown","shutdown","shutdown","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ttl","ttl","type_id","type_id","type_id","type_id","write","write","write_buf","write_buf"],"q":["tokio_tcp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Future returned by <code>TcpStream::connect</code> which will resolve …","Stream returned by the <code>TcpListener::incoming</code> function …","An I/O object representing a TCP socket listening for …","An I/O object representing a TCP stream connected to a …","","","Create a new TCP listener associated with this event loop.","","","","","","","","","Create a new TCP stream connected to the specified address.","Creates a new <code>TcpStream</code> from the pending socket inside the …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new TCP listener from the standard library’s …","Create a new <code>TcpStream</code> from a <code>net::TcpStream</code>.","Consumes this listener, returning a stream of the sockets …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns whether keepalive messages are enabled on this …","Reads the linger duration for this socket by getting the …","Returns the local address that this listener is bound to.","Returns the local address that this stream is bound to.","Gets the value of the <code>TCP_NODELAY</code> option on this socket.","Returns the remote address that this stream is connected …","","","Attempt to accept a connection and create a new connected …","Attempt to accept a connection and create a new connected …","Receives data on the socket from the remote address to …","Check the TCP stream’s read readiness state.","Check the TCP stream’s write readiness state.","","","","","","","Gets the value of the <code>SO_RCVBUF</code> option on this socket.","Gets the value of the <code>SO_SNDBUF</code> option on this socket.","Sets whether keepalive messages are enabled to be sent on …","Sets the linger duration of this socket by setting the …","Sets the value of the <code>TCP_NODELAY</code> option on this socket.","Sets the value of the <code>SO_RCVBUF</code> option on this socket.","Sets the value of the <code>SO_SNDBUF</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","Sets the value for the <code>IP_TTL</code> option on this socket.","","Shuts down the read, write, or both halves of this …","","","","","","","","","","Gets the value of the <code>IP_TTL</code> option for this socket.","Gets the value of the <code>IP_TTL</code> option for this socket.","","","","","","","",""],"i":[0,0,0,0,1,2,1,1,2,3,4,1,2,3,4,2,2,2,2,1,2,3,4,1,2,3,4,1,2,1,1,2,3,4,4,2,2,1,2,2,2,3,4,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,2,2,1,2,3,4,1,2,3,4,1,2,1,2,3,4,2,2,2,2],"f":[null,null,null,null,[[["tcplistener",3]],["rawfd",6]],[[["tcpstream",3]],["rawfd",6]],[[["socketaddr",4]],["result",6,[["tcplistener",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["socketaddr",4]],["connectfuture",3]],[[["tcpstream",3],["socketaddr",4],["handle",3]],["connectfuture",3]],[[["tcpstream",3]],["result",6]],[[["tcpstream",3]],["result",6]],[[["tcplistener",3],["formatter",3]],["result",6]],[[["tcpstream",3],["formatter",3]],["result",6]],[[["incoming",3],["formatter",3]],["result",6]],[[["connectfuture",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["tcplistener",3],["handle",3]],["result",6,[["tcplistener",3]]]],[[["tcpstream",3],["handle",3]],["result",6,[["tcpstream",3]]]],[[["tcplistener",3]],["incoming",3]],[[]],[[]],[[]],[[]],[[]],[[["tcpstream",3]],["result",6,[["option",4,[["duration",3]]]]]],[[["tcpstream",3]],["result",6,[["option",4,[["duration",3]]]]]],[[["tcplistener",3]],["result",6,[["socketaddr",4]]]],[[["tcpstream",3]],["result",6,[["socketaddr",4]]]],[[["tcpstream",3]],["result",6,[["bool",0]]]],[[["tcpstream",3]],["result",6,[["socketaddr",4]]]],[[["incoming",3]],["poll",6,[["option",4],["error",3]]]],[[["connectfuture",3]],["poll",6,[["tcpstream",3],["error",3]]]],[[["tcplistener",3]],["poll",6,[["error",3]]]],[[["tcplistener",3]],["poll",6,[["error",3]]]],[[["tcpstream",3]],["poll",6,[["usize",0],["error",3]]]],[[["tcpstream",3],["ready",3]],["poll",6,[["ready",3],["error",3]]]],[[["tcpstream",3]],["poll",6,[["ready",3],["error",3]]]],[[["tcpstream",3]],["bool",0]],[[["tcpstream",3]],["bool",0]],[[["tcpstream",3]],["result",6,[["usize",0]]]],[[["tcpstream",3]],["result",6,[["usize",0]]]],[[["tcpstream",3],["",0]],["poll",6,[["usize",0],["error",3]]]],[[["tcpstream",3],["",0]],["poll",6,[["usize",0],["error",3]]]],[[["tcpstream",3]],["result",6,[["usize",0]]]],[[["tcpstream",3]],["result",6,[["usize",0]]]],[[["tcpstream",3],["option",4,[["duration",3]]]],["result",6]],[[["tcpstream",3],["option",4,[["duration",3]]]],["result",6]],[[["tcpstream",3],["bool",0]],["result",6]],[[["tcpstream",3],["usize",0]],["result",6]],[[["tcpstream",3],["usize",0]],["result",6]],[[["tcplistener",3],["u32",0]],["result",6]],[[["tcpstream",3],["u32",0]],["result",6]],[[["tcpstream",3]],["poll",6,[["error",3]]]],[[["tcpstream",3],["shutdown",4]],["result",6]],[[["tcpstream",3]],["poll",6,[["error",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["tcplistener",3]],["result",6,[["u32",0]]]],[[["tcpstream",3]],["result",6,[["u32",0]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["tcpstream",3]],["result",6,[["usize",0]]]],[[["tcpstream",3]],["result",6,[["usize",0]]]],[[["tcpstream",3],["",0]],["poll",6,[["usize",0],["error",3]]]],[[["tcpstream",3],["",0]],["poll",6,[["usize",0],["error",3]]]]],"p":[[3,"TcpListener"],[3,"TcpStream"],[3,"Incoming"],[3,"ConnectFuture"]]},\
"tokio_threadpool":{"doc":"A work-stealing based thread pool for executing futures.","t":[3,3,3,3,3,3,3,3,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BlockingError","Builder","Sender","Shutdown","SpawnHandle","ThreadPool","Worker","WorkerId","after_start","around_worker","before_stop","blocking","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","custom_park","description","drop","drop","eq","execute","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","hash","id","into","into","into","into","into","into","into","into","into_future","into_future","keep_alive","max_blocking","name_prefix","ne","new","new","panic_handler","park","poll","poll","pool_size","run","sender","sender_mut","shutdown","shutdown_now","shutdown_on_idle","spawn","spawn","spawn","spawn","spawn","spawn_handle","stack_size","status","status","status","to_owned","to_owned","to_string","to_usize","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","DefaultPark","DefaultUnpark","ParkError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","description","fmt","fmt","fmt","fmt","from","from","from","into","into","into","new","park","park_timeout","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unpark","unpark"],"q":["tokio_threadpool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio_threadpool::park","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Error raised by <code>blocking</code>.","Builds a thread pool with custom configuration values.","Submit futures to the associated thread pool for execution.","Future that resolves when the thread pool is shutdown.","Handle returned from ThreadPool::spawn_handle.","Work-stealing based thread pool for executing futures.","Thread worker","Identifies a thread pool worker.","Execute function <code>f</code> after each thread is started but before …","Execute function <code>f</code> on each worker thread.","Execute function <code>f</code> before each thread stops.","Enter a blocking section of code.","","","","","","","","","","","","","","","","","Create the configured <code>ThreadPool</code>.","","","","","Customize the <code>park</code> instance used by each worker thread.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns a reference to the worker’s identifier.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Set the thread keep alive duration","Set the maximum number of concurrent blocking sections.","Set name prefix of threads spawned by the scheduler","","Returns a new thread pool builder initialized with default …","Create a new <code>ThreadPool</code> with default values.","Sets a callback to be triggered when a panic during a …","Thread parking utilities.","","","Set the maximum number of worker threads for the thread …","Run the worker","Return a reference to the sender handle","Return a mutable reference to the sender handle","Shutdown the pool","Shutdown the pool immediately","Shutdown the pool once it becomes idle.","","","Spawn a future onto the thread pool","","Spawn a future onto the thread pool.","Spawn a future on to the thread pool, return a future …","Set the stack size (in bytes) for worker threads.","","","","","","","Returns this identifier represented as an integer.","","","","","","","","","","","","","","","","","","","","","","","","","Parks the thread.","Unparks threads that were parked by <code>DefaultPark</code>.","Error returned by <code>ParkThread</code>","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new <code>DefaultPark</code> instance.","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,1,1,0,2,1,3,4,5,6,7,8,2,1,3,4,5,6,7,8,1,3,8,3,8,1,2,5,7,8,3,2,2,1,3,4,5,6,7,8,2,1,3,4,5,6,7,8,8,7,2,1,3,4,5,6,7,8,4,6,1,1,1,8,1,5,1,0,4,6,1,7,5,5,5,5,5,3,3,3,3,5,5,1,3,3,3,3,8,2,8,2,1,3,4,5,6,7,8,2,1,3,4,5,6,7,8,2,1,3,4,5,6,7,8,0,0,0,9,10,11,9,10,11,11,9,10,11,11,9,10,11,9,10,11,9,9,9,11,9,10,11,9,10,11,9,10,11,9,10],"f":[null,null,null,null,null,null,null,null,[[["builder",3]],["builder",3]],[[["builder",3]],["builder",3]],[[["builder",3]],["builder",3]],[[],["poll",6,[["blockingerror",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["builder",3]],["threadpool",3]],[[["sender",3]],["sender",3]],[[["workerid",3]],["workerid",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["builder",3]],["builder",3]],[[["blockingerror",3]],["str",0]],[[["threadpool",3]]],[[["worker",3]]],[[["workerid",3],["workerid",3]],["bool",0]],[[["sender",3]],["result",4,[["executeerror",3]]]],[[["blockingerror",3],["formatter",3]],["result",6]],[[["blockingerror",3],["formatter",3]],["result",6]],[[["builder",3],["formatter",3]],["result",6]],[[["sender",3],["formatter",3]],["result",6]],[[["shutdown",3],["formatter",3]],["result",6]],[[["threadpool",3],["formatter",3]],["result",6]],[[["spawnhandle",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["worker",3],["formatter",3]],["result",6]],[[["workerid",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["workerid",3],["",0]]],[[["worker",3]],["workerid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["builder",3],["option",4,[["duration",3]]]],["builder",3]],[[["builder",3],["usize",0]],["builder",3]],[[["builder",3],["into",8,[["string",3]]]],["builder",3]],[[["workerid",3],["workerid",3]],["bool",0]],[[],["builder",3]],[[],["threadpool",3]],[[["builder",3]],["builder",3]],null,[[["shutdown",3]],["poll",6]],[[["spawnhandle",3]],["poll",6]],[[["builder",3],["usize",0]],["builder",3]],[[["worker",3]]],[[["threadpool",3]],["sender",3]],[[["threadpool",3]],["sender",3]],[[["threadpool",3]],["shutdown",3]],[[["threadpool",3]],["shutdown",3]],[[["threadpool",3]],["shutdown",3]],[[["sender",3],["box",3,[["future",8]]]],["result",4,[["spawnerror",3]]]],[[["sender",3],["box",3,[["future",8]]]],["result",4,[["spawnerror",3]]]],[[["sender",3]],["result",4,[["spawnerror",3]]]],[[["sender",3]],["result",4,[["spawnerror",3]]]],[[["threadpool",3]]],[[["threadpool",3]],["spawnhandle",3]],[[["builder",3],["usize",0]],["builder",3]],[[["sender",3]],["result",4,[["spawnerror",3]]]],[[["sender",3]],["result",4,[["spawnerror",3]]]],[[["sender",3]],["result",4,[["spawnerror",3]]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["workerid",3]],["usize",0]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["parkerror",3]],["str",0]],[[["defaultpark",3],["formatter",3]],["result",6]],[[["defaultunpark",3],["formatter",3]],["result",6]],[[["parkerror",3],["formatter",3]],["result",6]],[[["parkerror",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["defaultpark",3]],[[["defaultpark",3]],["result",4]],[[["defaultpark",3],["duration",3]],["result",4]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["defaultpark",3]]],[[["defaultunpark",3]]]],"p":[[3,"Builder"],[3,"BlockingError"],[3,"Sender"],[3,"Shutdown"],[3,"ThreadPool"],[3,"SpawnHandle"],[3,"Worker"],[3,"WorkerId"],[3,"DefaultPark"],[3,"DefaultUnpark"],[3,"ParkError"]]},\
"tokio_timer":{"doc":"Utilities for tracking time.","t":[3,3,3,3,3,2,11,11,11,11,11,11,11,11,11,11,11,0,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,8,11,11,11,11,11,11,11,11,11,11,5,10,11,11,11,11,11,11,5,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5],"n":["Delay","DelayQueue","Error","Interval","Timeout","Timer","at_capacity","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clock","deadline","delay_queue","description","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","into_future","into_future","is_at_capacity","is_elapsed","is_shutdown","new","new","new_interval","poll","poll","poll","poll","poll","reset","shutdown","sleep","throttle","timeout","timer","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","with_default","Clock","Now","borrow","borrow_mut","clone","clone_into","default","fmt","from","into","new","new_with_now","now","now","now","system","to_owned","try_from","try_into","type_id","with_default","DelayQueue","Expired","Key","borrow","borrow","borrow_mut","borrow_mut","capacity","clear","clone","clone_into","fmt","fmt","from","from","get_mut","get_ref","insert","insert_at","into","into","into_inner","is_empty","new","remove","reserve","reset","reset_at","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_capacity","with_capacity_and_handle","Throttle","ThrottleError","borrow","borrow","borrow_mut","borrow_mut","cause","description","fmt","fmt","fmt","from","from","from_stream_err","from_timer_err","get_mut","get_ref","get_stream_error","get_timer_error","into","into","into_inner","into_stream_error","into_timer_error","is_stream_error","is_timer_error","new","poll","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Error","Timeout","borrow","borrow_mut","description","elapsed","fmt","fmt","from","get_mut","get_ref","inner","into","into_inner","into_inner","into_timer","is_elapsed","is_inner","is_timer","new","new_at","timer","to_string","try_from","try_into","type_id","Handle","SystemNow","Timer","Turn","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","current","deadline","default","default","delay","drop","fmt","fmt","fmt","from","from","from","get_park","get_park_mut","handle","interval","into","into","into","new","new_with_now","park","park_timeout","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","turn","type_id","type_id","type_id","unpark","with_default"],"q":["tokio_timer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio_timer::clock","","","","","","","","","","","","","","","","","","","","","tokio_timer::delay_queue","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio_timer::throttle","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio_timer::timeout","","","","","","","","","","","","","","","","","","","","","","","","","","tokio_timer::timer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A future that completes at a specified instant in time.","A queue of delayed elements.","Errors encountered by the timer implementation.","A stream representing notifications at fixed interval","Allows a <code>Future</code> or <code>Stream</code> to execute for a limited amount …","","Create an error representing a timer at capacity.","","","","","","","","","","","A configurable source of time.","Returns the instant at which the future will complete.","A queue of delayed elements.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if the error was caused by the timer being at …","Returns true if the <code>Delay</code> has elapsed","Returns <code>true</code> if the error was caused by the timer being …","Create a new <code>Delay</code> instance that elapses at <code>deadline</code>.","Create a new <code>Interval</code> that starts at <code>at</code> and yields every …","Creates new <code>Interval</code> that yields with interval of <code>duration</code>.","","","","","","Reset the <code>Delay</code> instance to a new deadline.","Create an error representing a shutdown timer.","Create a Future that completes in <code>duration</code> from now.","Slow down a stream by enforcing a delay between items.","Allows a future or stream to execute for a maximum amount …","Timer implementation.","","","","","","","","","","","","","","","","","Set the default timer for the duration of the closure.","A handle to a source of time.","Returns <code>Instant</code> values representing the current instant in …","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Return a new <code>Clock</code> instance that uses the current …","Return a new <code>Clock</code> instance that uses <code>now</code> as the source of …","Returns an <code>Instant</code> corresponding to “now”.","Returns an instant corresponding to “now”.","Returns an instant corresponding to “now” by using the …","Return a new <code>Clock</code> instance that uses <code>Instant::now</code> as the …","","","","","Set the default clock for the duration of the closure.","A queue of delayed elements.","An entry in <code>DelayQueue</code> that has expired and removed.","Token to a value stored in a <code>DelayQueue</code>.","","","","","Returns the number of elements the queue can hold without …","Clears the queue, removing all items.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a mutable reference to the inner value.","Returns a reference to the inner value.","Insert <code>value</code> into the queue set to expire after the …","Insert <code>value</code> into the queue set to expire at a specific …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes <code>self</code> and returns the inner value.","Returns <code>true</code> if there are no items in the queue.","Create a new, empty, <code>DelayQueue</code>","Remove the item associated with <code>key</code> from the queue.","Reserve capacity for at least <code>additional</code> more items to be …","Sets the delay of the item associated with <code>key</code> to expire …","Sets the delay of the item associated with <code>key</code> to expire …","","","","","","","","Create a new, empty, <code>DelayQueue</code> with the specified …","Create a new, empty, <code>DelayQueue</code> backed by the specified …","Slow down a stream by enforcing a delay between items.","Either the error of the underlying stream, or an error …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>ThrottleError</code> from the given stream error.","Creates a new <code>ThrottleError</code> from the given tokio timer …","Acquires a mutable reference to the underlying stream that …","Acquires a reference to the underlying stream that this …","Attempts to get the underlying stream error, if it is …","Attempts to get the underlying timer error, if it is …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes this combinator, returning the underlying stream.","Attempts to extract the underlying stream error, if it is …","Attempts to extract the underlying timer error, if it is …","Returns whether the throttle error has occured because of …","Returns whether the throttle error has occured because of …","Slow down a stream by enforcing a delay between items.","","","","","","","","","Error returned by <code>Timeout</code>.","Allows a <code>Future</code> or <code>Stream</code> to execute for a limited amount …","","","","Create a new <code>Error</code> representing the inner value not …","","","Returns the argument unchanged.","Gets a mutable reference to the underlying value in this …","Gets a reference to the underlying value in this timeout.","Create a new <code>Error</code> representing the inner value completing …","Calls <code>U::from(self)</code>.","Consumes this timeout, returning the underlying value.","Consumes <code>self</code>, returning the inner future error.","Consumes <code>self</code>, returning the error raised by the timer …","Returns <code>true</code> if the error was caused by the inner value …","Returns <code>true</code> if the error was caused by the inner value …","Returns <code>true</code> if the error was caused by the timer.","Create a new <code>Timeout</code> that allows <code>value</code> to execute for a …","Create a new <code>Timeout</code> that completes when <code>future</code> completes …","Creates a new <code>Error</code> representing an error encountered by …","","","","","Handle to timer instance.","A handle to a source of time.","Timer implementation that drives <code>Delay</code>, <code>Interval</code>, and …","Return value from the <code>turn</code> method on <code>Timer</code>.","","","","","","","","","Returns a handle to the current timer.","Create a <code>Deadline</code> driven by this handle’s associated …","","","Create a <code>Delay</code> driven by this handle’s associated <code>Timer</code>.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the underlying <code>Park</code> instance.","Returns a mutable reference to the underlying <code>Park</code> …","Returns a handle to the timer.","Create a new <code>Interval</code> that starts at <code>at</code> and yields every …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>Timer</code> instance that uses <code>park</code> to block the …","Create a new <code>Timer</code> instance that uses <code>park</code> to block the …","","","","","","","","","","Performs one iteration of the timer loop.","","","","","Set the default timer for the duration of the closure."],"i":[0,0,0,0,0,0,1,2,3,4,1,5,2,3,4,1,5,0,4,0,1,2,3,4,1,1,5,2,3,4,1,5,2,3,4,1,5,3,4,1,4,1,4,5,5,2,3,3,4,5,4,1,0,0,0,0,1,2,3,4,1,5,2,3,4,1,5,2,3,4,1,5,0,0,0,6,6,6,6,6,6,6,6,6,6,0,7,6,6,6,6,6,6,0,0,0,0,8,9,8,9,2,2,9,9,8,9,8,9,8,8,2,2,8,9,8,2,2,2,2,2,2,9,8,9,8,9,8,9,2,2,0,0,10,11,10,11,11,11,10,11,11,10,11,11,11,10,10,11,11,10,11,10,11,11,11,11,10,10,11,10,11,10,11,10,11,0,0,12,12,12,12,12,12,12,3,3,12,12,3,12,12,12,12,12,3,3,12,12,12,12,12,0,0,0,0,13,14,15,13,14,15,13,13,13,13,13,14,13,14,13,14,15,13,14,15,14,14,14,13,13,14,15,14,14,14,14,13,13,14,15,13,14,15,14,13,14,15,14,0],"f":[null,null,null,null,null,null,[[],["error",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["delay",3]],["instant",3]],null,[[["error",3]],["str",0]],[[["delayqueue",3,[["debug",8]]],["formatter",3]],["result",6]],[[["timeout",3,[["debug",8]]],["formatter",3]],["result",6]],[[["delay",3],["formatter",3]],["result",6]],[[["error",3],["formatter",3]],["result",6]],[[["error",3],["formatter",3]],["result",6]],[[["interval",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["error",3]],["bool",0]],[[["delay",3]],["bool",0]],[[["error",3]],["bool",0]],[[["instant",3]],["delay",3]],[[["instant",3],["duration",3]],["interval",3]],[[["duration",3]],["interval",3]],[[["delayqueue",3]],["poll",6,[["option",4],["error",3]]]],[[["timeout",3]],["poll",6,[["option",4]]]],[[["timeout",3]],["poll",6]],[[["delay",3]],["poll",6]],[[["interval",3]],["poll",6,[["option",4]]]],[[["delay",3],["instant",3]]],[[],["error",3]],[[["duration",3]],["delay",3]],null,null,null,[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["handle",3],["enter",3]]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["clock",3]],["clock",3]],[[["",0],["",0]]],[[],["clock",3]],[[["clock",3],["formatter",3]],["result",6]],[[]],[[]],[[],["clock",3]],[[["now",8]],["clock",3]],[[],["instant",3]],[[["",0]],["instant",3]],[[["clock",3]],["instant",3]],[[],["clock",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["clock",3],["enter",3]]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["delayqueue",3]],["usize",0]],[[["delayqueue",3]]],[[["key",3]],["key",3]],[[["",0],["",0]]],[[["expired",3,[["debug",8]]],["formatter",3]],["result",6]],[[["key",3],["formatter",3]],["result",6]],[[]],[[]],[[["expired",3]],["",0]],[[["expired",3]],["",0]],[[["delayqueue",3],["duration",3]],["key",3]],[[["delayqueue",3],["instant",3]],["key",3]],[[]],[[]],[[["expired",3]]],[[["delayqueue",3]],["bool",0]],[[],["delayqueue",3]],[[["delayqueue",3],["key",3]],["expired",3]],[[["delayqueue",3],["usize",0]]],[[["delayqueue",3],["key",3],["duration",3]]],[[["delayqueue",3],["key",3],["instant",3]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["usize",0]],["delayqueue",3]],[[["usize",0],["handle",3]],["delayqueue",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["throttleerror",3,[["stderror",8]]]],["option",4,[["stderror",8]]]],[[["throttleerror",3,[["stderror",8]]]],["str",0]],[[["throttle",3,[["debug",8]]],["formatter",3]],["result",6]],[[["throttleerror",3,[["stderror",8]]],["formatter",3]],["fmtresult",6]],[[["throttleerror",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[],["throttleerror",3]],[[["error",3]],["throttleerror",3]],[[["throttle",3]],["",0]],[[["throttle",3]],["",0]],[[["throttleerror",3]],["option",4]],[[["throttleerror",3]],["option",4,[["error",3]]]],[[]],[[]],[[["throttle",3]]],[[["throttleerror",3]],["option",4]],[[["throttleerror",3]],["option",4,[["error",3]]]],[[["throttleerror",3]],["bool",0]],[[["throttleerror",3]],["bool",0]],[[["duration",3]],["throttle",3]],[[["throttle",3,[["stream",8]]]],["poll",6,[["option",4]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["error",3,[["error",8]]]],["str",0]],[[],["error",3]],[[["error",3,[["debug",8]]],["formatter",3]],["result",6]],[[["error",3,[["display",8]]],["formatter",3]],["result",6]],[[]],[[["timeout",3]],["",0]],[[["timeout",3]],["",0]],[[],["error",3]],[[]],[[["timeout",3]]],[[["error",3]],["option",4]],[[["error",3]],["option",4,[["error",3]]]],[[["error",3]],["bool",0]],[[["error",3]],["bool",0]],[[["error",3]],["bool",0]],[[["duration",3]],["timeout",3]],[[["future",8],["instant",3]],["timeout",3,[["future",8]]]],[[["error",3]],["error",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["handle",3]],["handle",3]],[[["",0],["",0]]],[[],["handle",3]],[[["handle",3],["instant",3]],["deadline",3]],[[],["handle",3]],[[],["timer",3,[["parkthread",3],["systemnow",3]]]],[[["handle",3],["instant",3]],["delay",3]],[[["timer",3]]],[[["handle",3],["formatter",3]],["result",6]],[[["timer",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["turn",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["timer",3]],["",0]],[[["timer",3]],["",0]],[[["timer",3]],["handle",3]],[[["handle",3],["instant",3],["duration",3]],["interval",3]],[[]],[[]],[[]],[[],["timer",3]],[[],["timer",3]],[[["timer",3]],["result",4]],[[["timer",3],["duration",3]],["result",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["timer",3],["option",4,[["duration",3]]]],["result",4,[["turn",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["timer",3]]],[[["handle",3],["enter",3]]]],"p":[[3,"Error"],[3,"DelayQueue"],[3,"Timeout"],[3,"Delay"],[3,"Interval"],[3,"Clock"],[8,"Now"],[3,"Expired"],[3,"Key"],[3,"Throttle"],[3,"ThrottleError"],[3,"Error"],[3,"Handle"],[3,"Timer"],[3,"Turn"]]},\
"tokio_trace_core":{"doc":"Core primitives for <code>tokio-trace</code>.","t":[2,2,2,2,2,2,2,2,0,0,0,0,14,0,14,0,0,8,3,10,11,11,10,11,11,11,11,11,11,11,10,5,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,5,3,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,8,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,18,3,3,18,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,8,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,11],"n":["Callsite","Dispatch","Event","Field","Interest","Level","Metadata","Subscriber","callsite","dispatcher","event","field","identify_callsite","metadata","metadata","span","subscriber","Callsite","Identifier","add_interest","borrow","borrow_mut","clear_interest","clone","clone_into","eq","fmt","from","hash","into","metadata","register","to_owned","try_from","try_into","type_id","Dispatch","borrow","borrow_mut","clone","clone_into","clone_span","drop_span","enabled","enter","event","exit","fmt","from","from","get_default","into","new","new_span","none","record","record_follows_from","register_callsite","to_owned","try_from","try_into","type_id","with_default","Event","borrow","borrow_mut","dispatch","fields","fmt","from","into","metadata","record","try_from","try_into","type_id","DebugValue","DisplayValue","Field","FieldSet","Iter","Value","ValueSet","Visit","as_ref","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","callsite","callsite","clone","clone","clone","clone_into","clone_into","clone_into","contains","debug","display","eq","field","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","into","into","into","into","into","into","into_iter","into_iter","iter","len","name","next","record","record","record","record_bool","record_debug","record_i64","record_str","record_u64","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","DEBUG","ERROR","INFO","Level","Metadata","TRACE","WARN","borrow","borrow","borrow_mut","borrow_mut","callsite","clone","clone_into","cmp","eq","fields","file","fmt","fmt","from","from","into","into","level","line","module_path","name","ne","new","partial_cmp","target","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Attributes","Id","Record","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","child_of","clone","clone_into","contains","contains","eq","fmt","fmt","fmt","from","from","from","from_u64","hash","into","into","into","into_u64","is_contextual","is_empty","is_empty","is_root","metadata","ne","new","new","new_root","parent","record","record","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","values","Interest","Subscriber","always","borrow","borrow_mut","clone","clone_into","clone_span","drop_span","enabled","enter","event","exit","fmt","from","into","is_always","is_never","is_sometimes","never","new_span","record","record_follows_from","register_callsite","sometimes","to_owned","try_from","try_into","type_id"],"q":["tokio_trace_core","","","","","","","","","","","","","","","","","tokio_trace_core::callsite","","","","","","","","","","","","","","","","","","","tokio_trace_core::dispatcher","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio_trace_core::event","","","","","","","","","","","","","tokio_trace_core::field","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio_trace_core::metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio_trace_core::span","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tokio_trace_core::subscriber","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","Callsites represent the source locations from which spans …","Dispatches trace events to <code>Subscriber</code>s.","Events represent single points in time during the …","Span and <code>Event</code> key-value data.","Statically constructs an <code>Identifier</code> for the provided …","Metadata describing trace data.","Statically constructs new span metadata.","Spans represent periods of time in the execution of a …","Subscribers collect and record trace data.","Trait implemented by callsites.","Uniquely identifies a <code>Callsite</code>","Adds the <code>Interest</code> returned by registering the callsite …","","","Remove <em>all</em> <code>Interest</code> from the callsite, disabling it.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Returns the metadata associated with the callsite.","Register a new <code>Callsite</code> with the global registry.","","","","","<code>Dispatch</code> trace data to a <code>Subscriber</code>.","","","","","Notifies the subscriber that a span ID has been cloned.","Notifies the subscriber that a span ID has been dropped.","Returns true if a span with the specified metadata would be","Records that a span has been entered.","Records that an <code>Event</code> has occurred.","Records that a span has been exited.","","","Returns the argument unchanged.","Executes a closure with a reference to this thread’s …","Calls <code>U::from(self)</code>.","Returns a <code>Dispatch</code> that forwards to the given <code>Subscriber</code>.","Record the construction of a new span, returning a new ID …","Returns a new <code>Dispatch</code> that discards events and spans.","Record a set of values on a span.","Adds an indication that <code>span</code> follows from the span with …","Registers a new callsite with this subscriber, returning …","","","","","Sets this dispatch as the default for the duration of a …","<code>Event</code>s represent single points in time where something …","","","Constructs a new <code>Event</code> with the specified metadata and set …","Returns an iterator over the set of values on this <code>Event</code>.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns metadata describing this <code>Event</code>.","Visits all the fields on this <code>Event</code> with the specified …","","","","A <code>Value</code> which serializes as a string using <code>fmt::Debug</code>.","A <code>Value</code> which serializes as a string using <code>fmt::Display</code>.","An opaque key allowing <em>O</em>(1) access to a field in a <code>Span</code>’…","Describes the fields present on a span.","An iterator over a set of fields.","A field value of an erased type.","A set of fields and values for a span.","Visits typed values.","","","","","","","","","","","","","","Returns an <code>Identifier</code> that uniquely identifies the <code>Callsite</code>","Returns an <code>Identifier</code> that uniquely identifies the <code>Callsite</code>","","","","","","","Returns <code>true</code> if <code>self</code> contains the given <code>field</code>.","Wraps a type implementing <code>fmt::Debug</code> as a <code>Value</code> that can be","Wraps a type implementing <code>fmt::Display</code> as a <code>Value</code> that can …","","Returns the <code>Field</code> named <code>name</code>, or <code>None</code> if no such field …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns an iterator over the <code>Field</code>s in this <code>FieldSet</code>.","Returns the number of fields in this <code>FieldSet</code>.","Returns a string representing the name of the field.","","Visits this value with the given <code>Visitor</code>.","","","Visit a boolean value.","Visit a value implementing <code>fmt::Debug</code>.","Visit a signed 64-bit integer value.","Visit a string value.","Visit an umsigned 64-bit integer value.","","","","","","","","","","","","","","","","","","","","","","","The “debug” level.","The “error” level.","The “info” level.","Describes the level of verbosity of a span or event.","Metadata describing a span or [event].","The “trace” level.","The “warn” level.","","","","","Returns an opaque <code>Identifier</code> that uniquely identifies the …","","","","","Returns the set of fields on the described span.","Returns the name of the source code file where the span …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the level of verbosity of the described span.","Returns the line number in the source code file where the …","Returns the path to the Rust module where the span …","Returns the name of the span.","","Construct new metadata for a span, with a name, target, …","","Returns a string describing the part of the system where …","","","","","","","","Attributes provided to a <code>Subscriber</code> describing a new span …","Identifies a span within the context of a subscriber.","A set of fields recorded by a span.","","","","","","","Returns <code>Attributes</code> describing a new child span of the …","","","Returns <code>true</code> if this set of <code>Attributes</code> contains a value …","Returns <code>true</code> if this <code>Record</code> contains a value for the given …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Constructs a new span ID from the given <code>u64</code>.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the span’s ID as a  <code>u64</code>.","Returns true if the new span’s parent should be …","Returns true if this set of <code>Attributes</code> contains <em>no</em> values.","Returns true if this <code>Record</code> contains <em>no</em> values.","Returns true if the new span shoold be a root.","Returns a reference to the new span’s metadata.","","Returns <code>Attributes</code> describing a new child span of the …","Constructs a new <code>Record</code> from a <code>ValueSet</code>.","Returns <code>Attributes</code> describing a new span at the root of …","Returns the new span’s explicitly-specified parent, if …","Records all the fields in this set of <code>Attributes</code> with the …","Records all the fields in this <code>Record</code> with the provided …","","","","","","","","","","","Returns a reference to a <code>ValueSet</code> containing any values …","Indicates a <code>Subscriber</code>’s interest in a particular …","Trait representing the functions required to collect trace …","Returns an <code>Interest</code> indicating  the subscriber is always …","","","","","Notifies the subscriber that a span ID has been cloned.","Notifies the subscriber that a span ID has been dropped.","Returns true if a span or event with the specified metadata…","Records that a span has been entered.","Records that an <code>Event</code> has occurred.","Records that a span has been exited.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if the subscriber is always interested in …","Returns <code>true</code> if the subscriber is never interested in …","Returns <code>true</code> if the subscriber is sometimes interested in …","Returns an <code>Interest</code> indicating that the subscriber is …","Visit the construction of a new span, returning a new span …","Record a set of values on a span.","Adds an indication that <code>span</code> follows from the span with …","Registers a new callsite with this subscriber, returning …","Returns an <code>Interest</code> indicating  the subscriber is …","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,1,2,2,2,2,2,2,2,1,0,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,0,0,4,4,4,4,4,4,4,4,4,4,4,4,0,0,0,0,0,0,0,0,5,6,7,5,8,9,10,6,7,5,8,9,10,7,5,5,9,10,5,9,10,6,0,0,5,6,6,7,5,5,8,9,10,6,7,5,8,9,10,5,6,7,5,8,9,10,6,8,6,6,5,8,11,9,10,12,12,12,12,12,5,9,10,5,6,7,5,8,9,10,6,7,5,8,9,10,6,7,5,8,9,10,13,13,13,0,0,13,13,14,13,14,13,14,13,13,13,13,14,14,14,13,14,13,14,13,14,14,14,14,13,14,13,14,13,14,13,14,13,14,13,0,0,0,15,16,17,15,16,17,16,15,15,16,17,15,15,16,17,15,16,17,15,15,15,16,17,15,16,16,17,16,16,15,16,17,16,16,16,17,15,15,16,17,15,16,17,15,16,17,16,0,0,18,18,18,18,18,19,19,19,19,19,19,18,18,18,18,18,18,18,19,19,19,19,18,18,18,18,18],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["interest",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]]],[[["identifier",3]],["identifier",3]],[[["",0],["",0]]],[[["identifier",3],["identifier",3]],["bool",0]],[[["identifier",3],["formatter",3]],["result",6]],[[]],[[["identifier",3],["",0]]],[[]],[[["",0]],["metadata",3]],[[["callsite",8]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["dispatch",3]],["dispatch",3]],[[["",0],["",0]]],[[["dispatch",3],["id",3]],["id",3]],[[["dispatch",3],["id",3]]],[[["dispatch",3],["metadata",3]],["bool",0]],[[["dispatch",3],["id",3]]],[[["dispatch",3],["event",3]]],[[["dispatch",3],["id",3]]],[[["dispatch",3],["formatter",3]],["result",6]],[[],["dispatch",3]],[[]],[[]],[[]],[[],["dispatch",3]],[[["dispatch",3],["attributes",3]],["id",3]],[[],["dispatch",3]],[[["dispatch",3],["id",3],["record",3]]],[[["dispatch",3],["id",3],["id",3]]],[[["dispatch",3],["metadata",3]],["interest",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["dispatch",3],["fnonce",8]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["metadata",3],["valueset",3]]],[[["event",3]],["iter",3]],[[["event",3],["formatter",3]],["result",6]],[[]],[[]],[[["event",3]],["metadata",3]],[[["event",3],["visit",8]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,[[["field",3]],["str",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["valueset",3]],["identifier",3]],[[["field",3]],["identifier",3]],[[["field",3]],["field",3]],[[["displayvalue",3,[["",26,[["clone",8],["display",8]]]]]],["displayvalue",3,[["",26,[["clone",8],["display",8]]]]]],[[["debugvalue",3,[["",26,[["clone",8],["debug",8]]]]]],["debugvalue",3,[["",26,[["clone",8],["debug",8]]]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["fieldset",3],["field",3]],["bool",0]],[[],["debugvalue",3]],[[],["displayvalue",3]],[[["field",3],["field",3]],["bool",0]],[[["fieldset",3],["",0]],["option",4,[["field",3]]]],[[["fieldset",3],["formatter",3]],["result",6]],[[["valueset",3],["formatter",3]],["result",6]],[[["field",3],["formatter",3]],["result",6]],[[["field",3],["formatter",3]],["result",6]],[[["iter",3],["formatter",3]],["result",6]],[[["displayvalue",3,[["",26,[["debug",8],["display",8]]]]],["formatter",3]],["result",6]],[[["debugvalue",3,[["",26,[["debug",8],["debug",8]]]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["field",3],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["fieldset",3]]],[[]],[[["fieldset",3]],["iter",3]],[[["fieldset",3]],["usize",0]],[[["field",3]],["str",0]],[[["iter",3]],["option",4,[["field",3]]]],[[["",0],["field",3],["visit",8]]],[[["displayvalue",3],["field",3],["visit",8]]],[[["debugvalue",3,[["debug",8]]],["field",3],["visit",8]]],[[["",0],["field",3],["bool",0]]],[[["",0],["field",3],["debug",8]]],[[["",0],["field",3],["i64",0]]],[[["",0],["field",3],["str",0]]],[[["",0],["field",3],["u64",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["metadata",3]],["identifier",3]],[[["level",3]],["level",3]],[[["",0],["",0]]],[[["level",3],["level",3]],["ordering",4]],[[["level",3],["level",3]],["bool",0]],[[["metadata",3]],["fieldset",3]],[[["metadata",3]],["option",4,[["str",0]]]],[[["metadata",3],["formatter",3]],["result",6]],[[["level",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["metadata",3]],["level",3]],[[["metadata",3]],["option",4,[["u32",0]]]],[[["metadata",3]],["option",4,[["str",0]]]],[[["metadata",3]],["str",0]],[[["level",3],["level",3]],["bool",0]],[[["str",0],["str",0],["level",3],["option",4,[["str",0]]],["option",4,[["str",0]]],["option",4,[["u32",0]]],["callsite",8]],["metadata",3]],[[["level",3],["level",3]],["option",4,[["ordering",4]]]],[[["metadata",3]],["str",0]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["id",3],["metadata",3],["valueset",3]],["attributes",3]],[[["id",3]],["id",3]],[[["",0],["",0]]],[[["attributes",3],["field",3]],["bool",0]],[[["record",3],["field",3]],["bool",0]],[[["id",3],["id",3]],["bool",0]],[[["id",3],["formatter",3]],["result",6]],[[["attributes",3],["formatter",3]],["result",6]],[[["record",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["u64",0]],["id",3]],[[["id",3],["",0]]],[[]],[[]],[[]],[[["id",3]],["u64",0]],[[["attributes",3]],["bool",0]],[[["attributes",3]],["bool",0]],[[["record",3]],["bool",0]],[[["attributes",3]],["bool",0]],[[["attributes",3]],["metadata",3]],[[["id",3],["id",3]],["bool",0]],[[["metadata",3],["valueset",3]],["attributes",3]],[[["valueset",3]],["record",3]],[[["metadata",3],["valueset",3]],["attributes",3]],[[["attributes",3]],["option",4,[["id",3]]]],[[["attributes",3],["visit",8]]],[[["record",3],["visit",8]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["attributes",3]],["valueset",3]],null,null,[[],["interest",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["interest",3]],["interest",3]],[[["",0],["",0]]],[[["",0],["id",3]],["id",3]],[[["",0],["id",3]]],[[["",0],["metadata",3]],["bool",0]],[[["",0],["id",3]]],[[["",0],["event",3]]],[[["",0],["id",3]]],[[["interest",3],["formatter",3]],["result",6]],[[]],[[]],[[["interest",3]],["bool",0]],[[["interest",3]],["bool",0]],[[["interest",3]],["bool",0]],[[],["interest",3]],[[["",0],["attributes",3]],["id",3]],[[["",0],["id",3],["record",3]]],[[["",0],["id",3],["id",3]]],[[["",0],["metadata",3]],["interest",3]],[[],["interest",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[8,"Callsite"],[3,"Identifier"],[3,"Dispatch"],[3,"Event"],[3,"Field"],[3,"FieldSet"],[3,"ValueSet"],[3,"Iter"],[3,"DisplayValue"],[3,"DebugValue"],[8,"Value"],[8,"Visit"],[3,"Level"],[3,"Metadata"],[3,"Id"],[3,"Attributes"],[3,"Record"],[3,"Interest"],[8,"Subscriber"]]},\
"tokio_udp":{"doc":"UDP bindings for <code>tokio</code>.","t":[3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["RecvDgram","SendDgram","UdpFramed","UdpSocket","as_raw_fd","bind","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","broadcast","close","connect","fmt","fmt","fmt","fmt","from","from","from","from","from_std","get_mut","get_ref","into","into","into","into","into_future","into_future","into_inner","into_parts","join_multicast_v4","join_multicast_v6","leave_multicast_v4","leave_multicast_v6","local_addr","multicast_loop_v4","multicast_loop_v6","multicast_ttl_v4","new","poll","poll","poll","poll_complete","poll_read_ready","poll_recv","poll_recv_from","poll_send","poll_send_to","poll_write_ready","recv_dgram","send_dgram","set_broadcast","set_multicast_loop_v4","set_multicast_loop_v6","set_multicast_ttl_v4","set_ttl","start_send","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","ttl","type_id","type_id","type_id","type_id"],"q":["tokio_udp","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A future used to receive a datagram from a UDP socket.","A future used to write the entire contents of some data to …","A unified <code>Stream</code> and <code>Sink</code> interface to an underlying …","An I/O object representing a UDP socket.","","This function will create a new UDP socket and attempt to …","","","","","","","","","Gets the value of the <code>SO_BROADCAST</code> option for this socket.","","Connects the UDP socket setting the default destination …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>UdpSocket</code> from the previously bound socket …","Returns a mutable reference to the underlying I/O stream …","Returns a reference to the underlying I/O stream wrapped …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Consumes the <code>Framed</code>, returning its underlying I/O stream.","Consume the <code>RecvDgram</code>, returning the socket and buffer.","Executes an operation of the <code>IP_ADD_MEMBERSHIP</code> type.","Executes an operation of the <code>IPV6_ADD_MEMBERSHIP</code> type.","Executes an operation of the <code>IP_DROP_MEMBERSHIP</code> type.","Executes an operation of the <code>IPV6_DROP_MEMBERSHIP</code> type.","Returns the local address that this socket is bound to.","Gets the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Gets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Gets the value of the <code>IP_MULTICAST_TTL</code> option for this …","Create a new <code>UdpFramed</code> backed by the given socket and …","","","","","Check the UDP socket’s read readiness state.","Receives a single datagram message on the socket from the …","Receives data from the socket. On success, returns the …","Sends data on the socket to the remote address to which it …","Sends data on the socket to the given address. On success, …","Check the UDP socket’s write readiness state.","Creates a future that receive a datagram to be written to …","Creates a future that will write the entire contents of …","Sets the value of the <code>SO_BROADCAST</code> option for this socket.","Sets the value of the <code>IP_MULTICAST_LOOP</code> option for this …","Sets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …","Sets the value of the <code>IP_MULTICAST_TTL</code> option for this …","Sets the value for the <code>IP_TTL</code> option on this socket.","","","","","","","","","","Gets the value of the <code>IP_TTL</code> option for this socket.","","","",""],"i":[0,0,0,0,1,1,1,2,3,4,1,2,3,4,1,2,1,1,2,3,4,1,2,3,4,1,2,2,1,2,3,4,3,4,2,4,1,1,1,1,1,1,1,1,2,2,3,4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,3,4,1,2,3,4,1,1,2,3,4],"f":[null,null,null,null,[[["udpsocket",3]],["rawfd",6]],[[["socketaddr",4]],["result",6,[["udpsocket",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["udpsocket",3]],["result",6,[["bool",0]]]],[[["udpframed",3,[["encoder",8]]]],["poll",6]],[[["udpsocket",3],["socketaddr",4]],["result",6]],[[["udpsocket",3],["formatter",3]],["result",6]],[[["udpframed",3,[["debug",8]]],["formatter",3]],["result",6]],[[["senddgram",3,[["debug",8]]],["formatter",3]],["result",6]],[[["recvdgram",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["udpsocket",3],["handle",3]],["result",6,[["udpsocket",3]]]],[[["udpframed",3]],["udpsocket",3]],[[["udpframed",3]],["udpsocket",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["udpframed",3]],["udpsocket",3]],[[["recvdgram",3]],["parts",3]],[[["udpsocket",3],["ipv4addr",3],["ipv4addr",3]],["result",6]],[[["udpsocket",3],["ipv6addr",3],["u32",0]],["result",6]],[[["udpsocket",3],["ipv4addr",3],["ipv4addr",3]],["result",6]],[[["udpsocket",3],["ipv6addr",3],["u32",0]],["result",6]],[[["udpsocket",3]],["result",6,[["socketaddr",4]]]],[[["udpsocket",3]],["result",6,[["bool",0]]]],[[["udpsocket",3]],["result",6,[["bool",0]]]],[[["udpsocket",3]],["result",6,[["u32",0]]]],[[["udpsocket",3]],["udpframed",3]],[[["udpframed",3,[["decoder",8]]]],["poll",6,[["option",4]]]],[[["senddgram",3]],["poll",6,[["error",3]]]],[[["recvdgram",3]],["poll",6,[["error",3]]]],[[["udpframed",3,[["encoder",8]]]],["poll",6]],[[["udpsocket",3],["ready",3]],["poll",6,[["ready",3],["error",3]]]],[[["udpsocket",3]],["poll",6,[["usize",0],["error",3]]]],[[["udpsocket",3]],["poll",6,[["error",3]]]],[[["udpsocket",3]],["poll",6,[["usize",0],["error",3]]]],[[["udpsocket",3],["socketaddr",4]],["poll",6,[["usize",0],["error",3]]]],[[["udpsocket",3]],["poll",6,[["ready",3],["error",3]]]],[[["udpsocket",3]],["recvdgram",3]],[[["udpsocket",3],["socketaddr",4]],["senddgram",3]],[[["udpsocket",3],["bool",0]],["result",6]],[[["udpsocket",3],["bool",0]],["result",6]],[[["udpsocket",3],["bool",0]],["result",6]],[[["udpsocket",3],["u32",0]],["result",6]],[[["udpsocket",3],["u32",0]],["result",6]],[[["udpframed",3,[["encoder",8]]]],["startsend",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["udpsocket",3]],["result",6,[["u32",0]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"UdpSocket"],[3,"UdpFramed"],[3,"SendDgram"],[3,"RecvDgram"]]},\
"tokio_uds":{"doc":"Unix Domain Sockets for Tokio.","t":[3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11],"n":["ConnectFuture","Incoming","RecvDgram","SendDgram","UCred","UnixDatagram","UnixDatagramFramed","UnixListener","UnixStream","as_raw_fd","as_raw_fd","as_raw_fd","bind","bind","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","close","connect","connect","eq","flush","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_std","from_std","from_std","get_mut","get_ref","gid","hash","incoming","into","into","into","into","into","into","into","into","into","into_future","into_future","into_future","local_addr","local_addr","local_addr","ne","new","pair","pair","peer_addr","peer_addr","peer_cred","poll","poll","poll","poll","poll","poll_accept","poll_accept_std","poll_complete","poll_read_ready","poll_read_ready","poll_read_ready","poll_recv","poll_recv_from","poll_send","poll_send_to","poll_write_ready","poll_write_ready","prepare_uninitialized_buffer","prepare_uninitialized_buffer","read","read","read_buf","read_buf","recv_dgram","send_dgram","shutdown","shutdown","shutdown","shutdown","start_send","take_error","take_error","take_error","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uid","unbound","write","write","write_buf","write_buf"],"q":["tokio_uds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Future returned by <code>UnixStream::connect</code> which will resolve …","Stream of listeners","A future for receiving datagrams from a Unix datagram …","A future for writing a buffer to a Unix datagram socket.","Credentials of a process","An I/O object representing a Unix datagram socket.","A unified <code>Stream</code> and <code>Sink</code> interface to an underlying …","A Unix socket which can accept connections from other Unix …","A structure representing a connected Unix socket.","","","","Creates a new <code>UnixDatagram</code> bound to the specified path.","Creates a new <code>UnixListener</code> bound to the specified path.","","","","","","","","","","","","","","","","","","","","","","Connects the socket to the specified address.","Connects to the socket named by <code>path</code>.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Consumes a <code>UnixDatagram</code> in the standard library and …","Consumes a <code>UnixListener</code> in the standard library and …","Consumes a <code>UnixStream</code> in the standard library and returns a","Returns a mutable reference to the underlying I/O stream …","Returns a reference to the underlying I/O stream wrapped …","GID (group ID) of the process","","Consumes this listener, returning a stream of the sockets …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Returns the local address that this socket is bound to.","Returns the local socket address of this listener.","Returns the socket address of the local half of this …","","Create a new <code>UnixDatagramFramed</code> backed by the given socket …","Creates an unnamed pair of connected sockets.","Creates an unnamed pair of connected sockets.","Returns the address of this socket’s peer.","Returns the socket address of the remote half of this …","Returns effective credentials of the process which called …","","","","","","Attempt to accept a connection and create a new connected …","Attempt to accept a connection and create a new connected …","","Test whether this socket is ready to be read or not.","Test whether this socket is ready to be read or not.","Test whether this socket is ready to be read or not.","Receives data from the socket.","Receives data from the socket.","Sends data on the socket to the socket’s peer.","Sends data on the socket to the specified address.","Test whether this socket is ready to be written to or not.","Test whether this socket is ready to be written to or not.","","","","","","","Returns a future for receiving a datagram. See the …","Returns a future sending the data in buf to the socket at …","Shut down the read, write, or both halves of this …","","","Shuts down the read, write, or both halves of this …","","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","Returns the value of the <code>SO_ERROR</code> option.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","UID (user ID) of the process","Creates a new <code>UnixDatagram</code> which is not bound to any …","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,2,3,1,2,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,9,9,4,1,3,9,3,3,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,4,9,9,2,1,2,3,4,5,6,7,8,9,6,7,8,1,2,3,9,4,1,3,1,3,3,4,5,6,7,8,2,2,4,1,2,3,1,1,1,1,1,3,3,3,3,3,3,3,1,1,1,3,3,3,4,1,2,3,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,9,1,3,3,3,3],"f":[null,null,null,null,null,null,null,null,null,[[["unixdatagram",3]],["rawfd",6]],[[["unixlistener",3]],["rawfd",6]],[[["unixstream",3]],["rawfd",6]],[[],["result",6,[["unixdatagram",3]]]],[[],["result",6,[["unixlistener",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["ucred",3]],["ucred",3]],[[["",0],["",0]]],[[["unixdatagramframed",3,[["asref",8,[["path",3]]],["encoder",8]]]],["poll",6]],[[["unixdatagram",3],["asref",8,[["path",3]]]],["result",6]],[[],["connectfuture",3]],[[["ucred",3],["ucred",3]],["bool",0]],[[["unixstream",3]],["result",6]],[[["unixstream",3]],["result",6]],[[["unixdatagram",3],["formatter",3]],["result",6]],[[["unixlistener",3],["formatter",3]],["result",6]],[[["unixstream",3],["formatter",3]],["result",6]],[[["unixdatagramframed",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["incoming",3],["formatter",3]],["result",6]],[[["recvdgram",3,[["debug",8]]],["formatter",3]],["result",6]],[[["senddgram",3,[["debug",8],["debug",8]]],["formatter",3]],["result",6]],[[["connectfuture",3],["formatter",3]],["result",6]],[[["ucred",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["unixdatagram",3],["handle",3]],["result",6,[["unixdatagram",3]]]],[[["unixlistener",3],["handle",3]],["result",6,[["unixlistener",3]]]],[[["unixstream",3],["handle",3]],["result",6,[["unixstream",3]]]],[[["unixdatagramframed",3]],["unixdatagram",3]],[[["unixdatagramframed",3]],["unixdatagram",3]],null,[[["ucred",3],["",0]]],[[["unixlistener",3]],["incoming",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["unixdatagram",3]],["result",6,[["socketaddr",3]]]],[[["unixlistener",3]],["result",6,[["socketaddr",3]]]],[[["unixstream",3]],["result",6,[["socketaddr",3]]]],[[["ucred",3],["ucred",3]],["bool",0]],[[["unixdatagram",3]],["unixdatagramframed",3]],[[],["result",6]],[[],["result",6]],[[["unixdatagram",3]],["result",6,[["socketaddr",3]]]],[[["unixstream",3]],["result",6,[["socketaddr",3]]]],[[["unixstream",3]],["result",6,[["ucred",3]]]],[[["unixdatagramframed",3,[["decoder",8]]]],["poll",6,[["option",4]]]],[[["incoming",3]],["poll",6,[["option",4],["error",3]]]],[[["recvdgram",3]],["poll",6]],[[["senddgram",3]],["poll",6]],[[["connectfuture",3]],["poll",6,[["unixstream",3],["error",3]]]],[[["unixlistener",3]],["poll",6,[["error",3]]]],[[["unixlistener",3]],["poll",6,[["error",3]]]],[[["unixdatagramframed",3,[["asref",8,[["path",3]]],["encoder",8]]]],["poll",6]],[[["unixdatagram",3],["ready",3]],["poll",6,[["ready",3],["error",3]]]],[[["unixlistener",3],["ready",3]],["poll",6,[["ready",3],["error",3]]]],[[["unixstream",3],["ready",3]],["poll",6,[["ready",3],["error",3]]]],[[["unixdatagram",3]],["poll",6,[["usize",0],["error",3]]]],[[["unixdatagram",3]],["poll",6,[["error",3]]]],[[["unixdatagram",3]],["poll",6,[["usize",0],["error",3]]]],[[["unixdatagram",3]],["poll",6,[["usize",0],["error",3]]]],[[["unixdatagram",3]],["poll",6,[["ready",3],["error",3]]]],[[["unixstream",3]],["poll",6,[["ready",3],["error",3]]]],[[["unixstream",3]],["bool",0]],[[["unixstream",3]],["bool",0]],[[["unixstream",3]],["result",6,[["usize",0]]]],[[["unixstream",3]],["result",6,[["usize",0]]]],[[["unixstream",3],["",0]],["poll",6,[["usize",0],["error",3]]]],[[["unixstream",3],["",0]],["poll",6,[["usize",0],["error",3]]]],[[["unixdatagram",3]],["recvdgram",3]],[[["unixdatagram",3]],["senddgram",3]],[[["unixdatagram",3],["shutdown",4]],["result",6]],[[["unixstream",3]],["poll",6,[["error",3]]]],[[["unixstream",3]],["poll",6,[["error",3]]]],[[["unixstream",3],["shutdown",4]],["result",6]],[[["unixdatagramframed",3,[["asref",8,[["path",3]]],["encoder",8]]]],["startsend",6]],[[["unixdatagram",3]],["result",6,[["option",4,[["error",3]]]]]],[[["unixlistener",3]],["result",6,[["option",4,[["error",3]]]]]],[[["unixstream",3]],["result",6,[["option",4,[["error",3]]]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,[[],["result",6,[["unixdatagram",3]]]],[[["unixstream",3]],["result",6,[["usize",0]]]],[[["unixstream",3]],["result",6,[["usize",0]]]],[[["unixstream",3],["",0]],["poll",6,[["usize",0],["error",3]]]],[[["unixstream",3],["",0]],["poll",6,[["usize",0],["error",3]]]]],"p":[[3,"UnixDatagram"],[3,"UnixListener"],[3,"UnixStream"],[3,"UnixDatagramFramed"],[3,"Incoming"],[3,"RecvDgram"],[3,"SendDgram"],[3,"ConnectFuture"],[3,"UCred"]]},\
"try_lock":{"doc":"A light-weight lock guarded by an atomic boolean.","t":[3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Locked","TryLock","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref_mut","drop","fmt","fmt","from","from","into","into","into_inner","new","try_from","try_from","try_into","try_into","try_lock","try_lock_order","type_id","type_id"],"q":["try_lock","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A locked value acquired from a <code>TryLock</code>.","A light-weight lock guarded by an atomic boolean.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Take the value back out of the lock when this is the sole …","Create a <code>TryLock</code> around the value.","","","","","Try to acquire the lock of this value.","Try to acquire the lock of this value using the lock and …","",""],"i":[0,0,1,2,1,2,2,1,1,1,1,2,1,2,1,2,2,2,1,2,1,2,2,2,1,2],"f":[null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["trylock",3,[["default",8]]]],[[["locked",3]],["",0]],[[["locked",3]],["",0]],[[["locked",3]]],[[["locked",3,[["debug",8]]],["formatter",3]],["result",6]],[[["trylock",3,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["trylock",3]]],[[],["trylock",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["trylock",3]],["option",4,[["locked",3]]]],[[["trylock",3],["ordering",4],["ordering",4]],["option",4,[["locked",3]]]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[3,"Locked"],[3,"TryLock"]]},\
"unicode_bidi":{"doc":"This crate implements the Unicode Bidirectional Algorithm …","t":[13,13,13,13,4,3,13,13,13,13,13,3,13,13,13,13,2,2,6,13,13,13,13,3,13,13,13,13,2,13,17,13,5,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,0,12,12,11,11,11,11,11,12,12,12,12,12,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,17,17,17,17,17,17,17,17,17,17,17,17,4,17,3,17,17,13,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AL","AN","B","BN","BidiClass","BidiInfo","CS","EN","ES","ET","FSI","InitialInfo","L","LRE","LRI","LRO","LTR_LEVEL","Level","LevelRun","NSM","ON","PDF","PDI","ParagraphInfo","R","RLE","RLI","RLO","RTL_LEVEL","S","UNICODE_VERSION","WS","bidi_class","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deprecated","eq","eq","eq","eq","fmt","fmt","fmt","fmt","format_chars","from","from","from","from","has_rtl","into","into","into","into","level","level","levels","ne","ne","ne","new","new","original_classes","original_classes","paragraphs","paragraphs","range","reorder_line","reordered_levels","reordered_levels_per_char","text","text","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","visual_runs","visual_runs","ALM","FSI","LRE","LRI","LRM","LRO","PDF","PDI","RLE","RLI","RLM","RLO","Error","LTR_LEVEL","Level","MAX_EXPLICIT_DEPTH","MAX_IMPLICIT_DEPTH","OutOfRangeNumber","RTL_LEVEL","bidi_class","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","eq","eq","eq","eq","fmt","fmt","from","from","from","has_rtl","into","into","into","is_ltr","is_rtl","lower","ltr","max_explicit_depth","max_implicit_depth","ne","new","new_explicit","new_explicit_next_ltr","new_explicit_next_rtl","new_lowest_ge_rtl","number","partial_cmp","raise","raise_explicit","rtl","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vec"],"q":["unicode_bidi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","unicode_bidi::deprecated","unicode_bidi::format_chars","","","","","","","","","","","","unicode_bidi::level","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","Represents values of the Unicode character property …","Bidi information of the text.","","","","","","Initial bidi information of the text.","","","","","","","A maximal substring of characters with the same embedding …","","","","","Bidi information about a single paragraph","","","","","","","The Unicode version of data","","Find the <code>BidiClass</code> of a single char.","","","","","","","","","","","This module holds deprecated assets only.","","","","","","","","","Directional Formatting Characters","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","If processed text has any computed RTL levels","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Bidi Embedding Level","The paragraph embedding level.","The directional embedding level of each byte in the text.","","","","Find the paragraphs and BidiClasses in a string of text.","Split the text into paragraphs and determine the bidi …","The BidiClass of the character at each byte in the text. …","The BidiClass of the character at each byte in the text.","The boundaries and level of each paragraph within the text.","The boundaries and paragraph embedding level of each …","The paragraphs boundaries within the text, as byte indices.","Re-order a line based on resolved levels and return the …","Re-order a line based on resolved levels and return only …","Re-order a line based on resolved levels and return only …","The text","The text","","","","","","","","","","","","","","Find the level runs within a line and return them in …","Find the level runs within a line and return them in …","ARABIC LETTER MARK","FIRST STRONG ISOLATE","LEFT-TO-RIGHT EMBEDDING","LEFT‑TO‑RIGHT ISOLATE","LEFT-TO-RIGHT MARK","LEFT-TO-RIGHT OVERRIDE","POP DIRECTIONAL FORMATTING","POP DIRECTIONAL ISOLATE","RIGHT-TO-LEFT EMBEDDING","RIGHT‑TO‑LEFT ISOLATE","RIGHT-TO-LEFT MARK","RIGHT-TO-LEFT OVERRIDE","Errors that can occur on Level creation or mutation","","Embedding Level","During explicit level resolution, embedding level can go …","During implicit level resolution, embedding level can go …","Out-of-range (invalid) embedding level number.","","Generate a character type based on a level (as specified …","","","","","","","","","","","","","","Returns the argument unchanged.","Create level by number","Returns the argument unchanged.","If levels has any RTL (odd) level","Calls <code>U::from(self)</code>.","Convert to the level number","Calls <code>U::from(self)</code>.","If this level is left-to-right.","If this level is right-to-left.","Lower level by <code>amount</code>, fail if number goes below zero.","New LTR level with smallest number value (0).","Maximum depth of the directional status stack during …","Maximum depth of the directional status stack during …","","Create new level, fail if number is larger than …","Create new level, fail if number is larger than <code>max_depth</code>.","The next LTR (even) level greater than this, or fail if …","The next RTL (odd) level greater than this, or fail if …","The lowest RTL (odd) level greater than or equal to this, …","The level number.","","Raise level by <code>amount</code>, fail if number is larger than …","Raise level by <code>amount</code>, fail if number is larger than …","New RTL level with smallest number value (1).","","","","","","","",""],"i":[1,1,1,1,0,0,1,1,1,1,1,0,1,1,1,1,0,0,0,1,1,1,1,0,1,1,1,1,0,1,0,1,0,1,2,3,4,1,2,3,4,1,1,0,1,2,3,4,1,2,3,4,0,1,2,3,4,4,1,2,3,4,0,2,4,2,3,4,3,4,3,4,3,4,2,4,4,4,3,4,1,1,2,3,4,1,2,3,4,1,2,3,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,6,6,5,6,5,6,6,6,6,6,6,5,6,5,6,6,5,0,6,6,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,5,6,5,6,5,6],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["char",0]],["bidiclass",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["bidiclass",4]],["bidiclass",4]],[[["",0],["",0]]],null,[[["bidiclass",4],["bidiclass",4]],["bool",0]],[[["paragraphinfo",3],["paragraphinfo",3]],["bool",0]],[[["initialinfo",3],["initialinfo",3]],["bool",0]],[[["bidiinfo",3],["bidiinfo",3]],["bool",0]],[[["bidiclass",4],["formatter",3]],["result",6]],[[["paragraphinfo",3],["formatter",3]],["result",6]],[[["initialinfo",3],["formatter",3]],["result",6]],[[["bidiinfo",3],["formatter",3]],["result",6]],null,[[]],[[]],[[]],[[]],[[["bidiinfo",3]],["bool",0]],[[]],[[]],[[]],[[]],null,null,null,[[["paragraphinfo",3],["paragraphinfo",3]],["bool",0]],[[["initialinfo",3],["initialinfo",3]],["bool",0]],[[["bidiinfo",3],["bidiinfo",3]],["bool",0]],[[["str",0],["option",4,[["level",3]]]],["initialinfo",3]],[[["str",0],["option",4,[["level",3]]]],["bidiinfo",3]],null,null,null,null,null,[[["bidiinfo",3],["paragraphinfo",3],["range",3,[["usize",0]]]],["cow",4,[["str",0]]]],[[["bidiinfo",3],["paragraphinfo",3],["range",3,[["usize",0]]]],["vec",3,[["level",3]]]],[[["bidiinfo",3],["paragraphinfo",3],["range",3,[["usize",0]]]],["vec",3,[["level",3]]]],null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["bidiinfo",3],["paragraphinfo",3],["range",3,[["usize",0]]]]],[[["range",3,[["usize",0]]]],["vec",3,[["levelrun",6]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["level",3]],["bidiclass",4]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["level",3]],["level",3]],[[["",0],["",0]]],[[["level",3],["level",3]],["ordering",4]],[[["level",3],["level",3]],["bool",0]],[[["level",3],["string",3]],["bool",0]],[[["level",3],["str",0]],["bool",0]],[[["error",4],["error",4]],["bool",0]],[[["level",3],["formatter",3]],["result",6]],[[["error",4],["formatter",3]],["result",6]],[[]],[[["u8",0]],["level",3]],[[]],[[],["bool",0]],[[]],[[["level",3]],["u8",0]],[[]],[[["level",3]],["bool",0]],[[["level",3]],["bool",0]],[[["level",3],["u8",0]],["result",4,[["error",4]]]],[[],["level",3]],[[],["u8",0]],[[],["u8",0]],[[["level",3],["level",3]],["bool",0]],[[["u8",0]],["result",4,[["level",3],["error",4]]]],[[["u8",0]],["result",4,[["level",3],["error",4]]]],[[["level",3]],["result",4,[["level",3],["error",4]]]],[[["level",3]],["result",4,[["level",3],["error",4]]]],[[["level",3]],["result",4,[["level",3],["error",4]]]],[[["level",3]],["u8",0]],[[["level",3],["level",3]],["option",4,[["ordering",4]]]],[[["level",3],["u8",0]],["result",4,[["error",4]]]],[[["level",3],["u8",0]],["result",4,[["error",4]]]],[[],["level",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["vec",3,[["level",3]]]]],"p":[[4,"BidiClass"],[3,"ParagraphInfo"],[3,"InitialInfo"],[3,"BidiInfo"],[4,"Error"],[3,"Level"]]},\
"unicode_normalization":{"doc":"Unicode character composition and decomposition utilities …","t":[3,4,13,13,3,3,17,8,13,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,10,11,11,11,10,11,11,11,10,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5],"n":["Decompositions","IsNormalized","Maybe","No","Recompositions","StreamSafe","UNICODE_VERSION","UnicodeNormalization","Yes","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","char","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","from","from","from","from","into","into","into","into","into_iter","into_iter","into_iter","is_nfc","is_nfc_quick","is_nfc_stream_safe","is_nfc_stream_safe_quick","is_nfd","is_nfd_quick","is_nfd_stream_safe","is_nfd_stream_safe_quick","is_nfkc","is_nfkc_quick","is_nfkd","is_nfkd_quick","next","next","next","nfc","nfc","nfc","nfc","nfd","nfd","nfd","nfd","nfkc","nfkc","nfkc","nfkc","nfkd","nfkd","nfkd","nfkd","size_hint","stream_safe","stream_safe","stream_safe","stream_safe","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","canonical_combining_class","compose","decompose_canonical","decompose_compatible","is_combining_mark"],"q":["unicode_normalization","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","unicode_normalization::char","","","",""],"d":["External iterator for a string decomposition’s …","The QuickCheck algorithm can quickly determine if a text …","The text may be normalized.","The text is definitely not normalized.","External iterator for a string recomposition’s …","UAX15-D4: This iterator keeps track of how many …","","Methods for iterating over strings while applying Unicode …","The text is definitely normalized.","","","","","","","","","Methods for composing and decomposing characters.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Authoritatively check if a string is in NFC.","Quickly check if a string is in NFC, potentially returning …","Authoritatively check if a string is Stream-Safe NFC.","Quickly check if a string is Stream-Safe NFC.","Authoritatively check if a string is in NFD.","Quickly check if a string is in NFD.","Authoritatively check if a string is Stream-Safe NFD.","Quickly check if a string is Stream-Safe NFD.","Authoritatively check if a string is in NFKC.","Quickly check if a string is in NFKC.","Authoritatively check if a string is in NFKD.","Quickly check if a string is in NFKD.","","","","An Iterator over the string in Unicode Normalization Form C","","","","Returns an iterator over the string in Unicode …","","","","An Iterator over the string in Unicode Normalization Form …","","","","Returns an iterator over the string in Unicode …","","","","","An Iterator over the string with Conjoining Grapheme …","","","","","","","","","","","","","","","","","","","","","Compose two characters into a single character, if …","Compute canonical Unicode decomposition for character. See …","Compute canonical or compatible Unicode decomposition for …",""],"i":[0,0,1,1,0,0,0,0,1,2,3,4,1,2,3,4,1,0,3,4,3,4,1,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,5,2,3,4,3,5,2,3,4,3,4,3,4,2,3,4,1,2,3,4,1,2,3,4,1,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["decompositions",3,[["clone",8]]]],["decompositions",3,[["clone",8]]]],[[["recompositions",3,[["clone",8]]]],["recompositions",3,[["clone",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["isnormalized",4],["isnormalized",4]],["bool",0]],[[["decompositions",3,[["",26,[["iterator",8],["clone",8]]]]],["formatter",3]],["result",6]],[[["recompositions",3,[["",26,[["iterator",8],["clone",8]]]]],["formatter",3]],["result",6]],[[["isnormalized",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",0]],["bool",0]],[[["iterator",8]],["isnormalized",4]],[[["str",0]],["bool",0]],[[["iterator",8]],["isnormalized",4]],[[["str",0]],["bool",0]],[[["iterator",8]],["isnormalized",4]],[[["str",0]],["bool",0]],[[["iterator",8]],["isnormalized",4]],[[["str",0]],["bool",0]],[[["iterator",8]],["isnormalized",4]],[[["str",0]],["bool",0]],[[["iterator",8]],["isnormalized",4]],[[["streamsafe",3,[["iterator",8]]]],["option",4,[["char",0]]]],[[["decompositions",3,[["iterator",8]]]],["option",4,[["char",0]]]],[[["recompositions",3,[["iterator",8]]]],["option",4,[["char",0]]]],[[],["recompositions",3]],[[],["recompositions",3]],[[],["recompositions",3]],[[],["recompositions",3]],[[],["decompositions",3]],[[],["decompositions",3]],[[],["decompositions",3]],[[],["decompositions",3]],[[],["recompositions",3]],[[],["recompositions",3]],[[],["recompositions",3]],[[],["recompositions",3]],[[],["decompositions",3]],[[],["decompositions",3]],[[],["decompositions",3]],[[],["decompositions",3]],[[["decompositions",3,[["iterator",8]]]]],[[],["streamsafe",3]],[[],["streamsafe",3]],[[],["streamsafe",3]],[[],["streamsafe",3]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["char",0]],["u8",0]],[[["char",0],["char",0]],["option",4,[["char",0]]]],[[["char",0]]],[[["char",0],["fnmut",8]]],[[["char",0]],["bool",0]]],"p":[[4,"IsNormalized"],[3,"StreamSafe"],[3,"Decompositions"],[3,"Recompositions"],[8,"UnicodeNormalization"]]},\
"unicode_xid":{"doc":"Determine if a <code>char</code> is a valid identifier for a parser …","t":[17,8,10,10],"n":["UNICODE_VERSION","UnicodeXID","is_xid_continue","is_xid_start"],"q":["unicode_xid","","",""],"d":["The version of Unicode that this version of unicode-xid is …","Methods for determining if a character is a valid …","Returns whether the specified <code>char</code> satisfies the ‘…","Returns whether the specified character satisfies the ‘…"],"i":[0,0,1,1],"f":[null,null,[[],["bool",0]],[[],["bool",0]]],"p":[[8,"UnicodeXID"]]},\
"url":{"doc":"rust-url is an implementation of the URL Standard for the …","t":[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,3,13,13,13,13,13,13,13,13,13,13,3,4,13,4,3,3,13,4,13,13,13,3,4,13,13,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,3,16,3,3,3,8,11,10,11,11,11,11,11,11,11,11,5,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AfterFragment","AfterHost","AfterPassword","AfterPath","AfterPort","AfterQuery","AfterScheme","AfterUsername","Backslash","BeforeFragment","BeforeHost","BeforePassword","BeforePath","BeforePort","BeforeQuery","BeforeScheme","BeforeUsername","C0SpaceIgnored","Domain","EmbeddedCredentials","EmptyHost","ExpectedDoubleSlash","ExpectedFileDoubleSlash","FileWithHostAndWindowsDrive","Host","HostAndPort","IdnaError","InvalidDomainCharacter","InvalidIpv4Address","InvalidIpv6Address","InvalidPort","Ipv4","Ipv6","NonUrlCodePoint","NullInFragment","Opaque","OpaqueOrigin","Origin","Overflow","ParseError","ParseOptions","PathSegmentsMut","PercentDecode","Position","RelativeUrlWithCannotBeABaseBase","RelativeUrlWithoutBase","SetHostOnCannotBeABaseUrl","SocketAddrs","SyntaxViolation","TabOrNewlineIgnored","Tuple","UnencodedAtSign","Url","UrlQuery","as_mut_string","as_ref","as_str","ascii_serialization","base_url","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cannot_be_a_base","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","define_encode_set","description","description","domain","drop","drop","eq","eq","eq","eq","eq","eq","extend","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","form_urlencoded","fragment","from","from","from","from","from","from","from","from","from","from","from","from","from","from_directory_path","from_file_path","from_str","has_authority","has_host","hash","hash","hash","hash","host","host","host_str","index","index","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_string","is_tuple","join","log_syntax_violation","ne","ne","ne","new_opaque","next","options","origin","parse","parse","parse","parse_opaque","parse_with_params","partial_cmp","partial_cmp","password","path","path_segments","path_segments_mut","pop","pop_if_empty","port","port","port_or_known_default","push","query","query_pairs","query_pairs_mut","scheme","set_fragment","set_host","set_ip_host","set_password","set_path","set_port","set_query","set_scheme","set_username","syntax_violation_callback","to_file_path","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_socket_addrs","to_socket_addrs","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode_serialization","username","with_default_port","0","0","0","0","0","1","2","ByteSerialize","Finished","Parse","ParseIntoOwned","Serializer","Target","append_pair","as_mut_string","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_serialize","clear","clone","clone_into","custom_encoding_override","extend_pairs","finish","finish","fmt","fmt","fmt","fmt","for_suffix","from","from","from","from","into","into","into","into","into_iter","into_iter","into_iter","into_owned","new","next","next","next","parse","size_hint","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":["urlurl::Host","","","url::Origin","","","","url::form_urlencoded","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","A DNS domain name, as ‘.’ dot-separated labels. …","","","","","","The host name of an URL.","This mostly exists because coherence rules don’t allow …","","","","","","An IPv4 address. <code>Url::host_str</code> returns the serialization …","An IPv6 address. <code>Url::host_str</code> returns the serialization …","","","A globally unique identifier","Opaque identifier for URLs that have file or other schemes","The origin of an URL","","Errors that can occur during parsing.","Full configuration for the URL parser.","Exposes methods to manipulate the path of an URL that is …","","Indicates a position within a URL based on its components.","","","","Socket addresses for an URL.","Non-fatal syntax violations that can occur during parsing.","","Consists of the URL’s scheme, host and port","","A parsed URL record.","Implementation detail of <code>Url::query_pairs_mut</code>. Typically …","","","Return the serialization of this URL.","…","Change the base URL","","","","","","","","","","","","","","","","","","","","","","","","","Return whether this URL is a cannot-be-a-base URL, meaning …","Remove all segments in the path, leaving the minimal …","","","","","","","","","","","","","","","","","","","","","Define a new struct that implements the <code>EncodeSet</code> trait, …","","","If this URL has a host and it is a domain name (not an IP …","","","","","","","","","Append each segment from the given iterator at the end of …","","","","","","","","","","","","","","","","","","","Parser and serializer for the …","Return this URL’s fragment identifier, if any.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert a directory name as <code>std::path::Path</code> into an URL in …","Convert a file name as <code>std::path::Path</code> into an URL in the …","","Return whether the URL has an ‘authority’, which can …","Equivalent to <code>url.host().is_some()</code>.","","","","","Return the parsed representation of the host for this URL. …","","Return the string representation of the host (domain or IP …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return the serialization of this URL.","Return whether this origin is a (scheme, host, port) tuple …","Parse a string as an URL, with this URL as the base URL.","Call the provided function or closure on non-fatal parse …","","","","Creates a new opaque origin that is only equal to itself.","","Return a default <code>ParseOptions</code> that can fully configure the …","Return the origin of this URL (…","Parse a host: either an IPv6 address in [] square …","Parse an absolute URL from a string.","Parse an URL string with the configuration so far.","","Parse an absolute URL from a string and add params to its …","","","Return the password for this URL, if any, as a …","Return the path for this URL, as a percent-encoded ASCII …","Unless this URL is cannot-be-a-base, return an iterator of …","Return an object with methods to manipulate this URL’s …","Remove the last segment of this URL’s path.","Remove the last segment of this URL’s path if it is …","Return the port number for this URL, if any.","","Return the port number for this URL, or the default port …","Append the given segment at the end of this URL’s path.","Return this URL’s query string, if any, as a …","Parse the URL’s query string, if any, as …","Manipulate this URL’s query string, viewed as a sequence …","Return the scheme of this URL, lower-cased, as an ASCII …","Change this URL’s fragment identifier.","Change this URL’s host.","Change this URL’s host to the given IP address.","Change this URL’s password.","Change this URL’s path.","Change this URL’s port number.","Change this URL’s query string.","Change this URL’s scheme.","Change this URL’s username.","Call the provided function or closure for a non-fatal …","Assuming the URL is in the <code>file</code> scheme or similar, convert …","Return a copy of <code>self</code> that owns an allocated <code>String</code> but …","","Return a copy of <code>self</code> that owns an allocated <code>String</code> but …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","…","Return the username for this URL (typically the empty …","If the URL has a host, return something that implements …","","","","","","","","Return value of <code>byte_serialize()</code>.","","The return type of <code>parse()</code>.","Like <code>Parse</code>, but yields pairs of <code>String</code> instead of pairs of …","The <code>application/x-www-form-urlencoded</code> serializer.","","Serialize and append a name/value pair.","","","","","","","","","","The <code>application/x-www-form-urlencoded</code> byte serializer.","Remove any existing name/value pair.","","","Set the character encoding to be used for names and values …","Serialize and append a number of name/value pairs.","","If this serializer was constructed with a string, take and …","","","","","Create a new <code>application/x-www-form-urlencoded</code> serializer …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Return a new iterator that yields pairs of <code>String</code> instead …","Create a new <code>application/x-www-form-urlencoded</code> serializer …","","","","Convert a byte string in the …","","","","","","","","","","","","","",""],"i":[1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,2,3,2,4,2,2,2,0,0,4,4,4,4,4,3,3,2,2,5,0,0,4,0,0,0,2,0,4,4,4,0,0,2,5,2,0,0,6,7,7,5,8,3,9,10,5,11,12,4,2,1,7,8,6,3,9,10,5,11,12,4,2,1,7,8,6,7,12,3,9,5,11,4,2,1,7,8,3,9,5,11,4,2,1,7,8,3,7,0,4,2,7,12,6,3,5,11,4,2,7,12,6,3,3,9,9,10,5,11,12,4,4,2,2,1,7,7,8,6,0,7,3,9,10,5,11,12,4,4,2,1,7,8,6,7,7,7,7,7,3,5,11,7,7,9,7,7,7,7,7,3,9,10,5,11,12,4,2,1,7,8,6,10,7,5,7,8,3,5,11,5,10,7,7,3,7,8,3,7,3,7,7,7,7,7,12,12,7,9,7,12,7,7,7,7,7,7,7,7,7,7,7,7,7,8,7,3,3,9,9,5,11,4,2,1,7,8,9,7,3,9,4,2,7,3,9,10,5,11,12,4,2,1,7,8,6,3,9,10,5,11,12,4,2,1,7,8,6,3,9,10,5,11,12,4,2,1,7,8,6,5,7,7,13,14,15,16,17,17,17,0,18,0,0,0,0,19,18,20,21,22,19,20,21,22,19,0,19,20,20,19,19,18,19,20,21,22,19,19,20,21,22,19,20,21,22,19,20,21,22,20,19,20,21,22,0,22,20,20,21,22,19,20,21,22,19,20,21,22,19],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["urlquery",3]],["string",3]],[[["url",3]],["str",0]],[[["url",3]],["str",0]],[[["origin",4]],["string",3]],[[["parseoptions",3],["option",4,[["url",3]]]],["parseoptions",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["url",3]],["bool",0]],[[["pathsegmentsmut",3]],["pathsegmentsmut",3]],[[["host",4,[["clone",8]]]],["host",4,[["clone",8]]]],[[["hostandport",3,[["clone",8]]]],["hostandport",3,[["clone",8]]]],[[["origin",4]],["origin",4]],[[["opaqueorigin",3]],["opaqueorigin",3]],[[["parseerror",4]],["parseerror",4]],[[["syntaxviolation",4]],["syntaxviolation",4]],[[["position",4]],["position",4]],[[["url",3]],["url",3]],[[["parseoptions",3]],["parseoptions",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["host",4,[["ord",8]]],["host",4]],["ordering",4]],[[["url",3],["url",3]],["ordering",4]],null,[[["parseerror",4]],["str",0]],[[["syntaxviolation",4]],["str",0]],[[["url",3]],["option",4,[["str",0]]]],[[["pathsegmentsmut",3]]],[[["urlquery",3]]],[[["host",4,[["partialeq",8]]],["host",4]],["bool",0]],[[["origin",4],["origin",4]],["bool",0]],[[["opaqueorigin",3],["opaqueorigin",3]],["bool",0]],[[["parseerror",4],["parseerror",4]],["bool",0]],[[["syntaxviolation",4],["syntaxviolation",4]],["bool",0]],[[["url",3],["url",3]],["bool",0]],[[["pathsegmentsmut",3]],["pathsegmentsmut",3]],[[["urlquery",3]],["url",3]],[[["host",4,[["debug",8]]],["formatter",3]],["result",6]],[[["host",4,[["asref",8,[["str",0]]]]],["formatter",3]],["result",6]],[[["hostandport",3,[["asref",8,[["str",0]]]]],["formatter",3]],["result",6]],[[["hostandport",3,[["debug",8]]],["formatter",3]],["result",6]],[[["socketaddrs",3],["formatter",3]],["result",6]],[[["origin",4],["formatter",3]],["result",6]],[[["opaqueorigin",3],["formatter",3]],["result",6]],[[["pathsegmentsmut",3],["formatter",3]],["result",6]],[[["parseerror",4],["formatter",3]],["result",6]],[[["parseerror",4],["formatter",3]],["result",6]],[[["syntaxviolation",4],["formatter",3]],["result",6]],[[["syntaxviolation",4],["formatter",3]],["result",6]],[[["position",4],["formatter",3]],["result",6]],[[["url",3],["formatter",3]],["result",6]],[[["url",3],["formatter",3]],["result",6]],[[["parseoptions",3],["formatter",3]],["result",6]],[[["urlquery",3],["formatter",3]],["result",6]],null,[[["url",3]],["option",4,[["str",0]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["errors",3]],["parseerror",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[["asref",8,[["path",3]]]],["result",4,[["url",3]]]],[[["asref",8,[["path",3]]]],["result",4,[["url",3]]]],[[["str",0]],["result",4,[["url",3],["parseerror",4]]]],[[["url",3]],["bool",0]],[[["url",3]],["bool",0]],[[["host",4,[["hash",8]]],["",0]]],[[["origin",4],["",0]]],[[["opaqueorigin",3],["",0]]],[[["url",3],["",0]]],[[["url",3]],["option",4,[["host",4,[["str",0]]]]]],null,[[["url",3]],["option",4,[["str",0]]]],[[["url",3],["rangeto",3,[["position",4]]]],["str",0]],[[["url",3],["range",3,[["position",4]]]],["str",0]],[[["url",3],["rangefrom",3,[["position",4]]]],["str",0]],[[["url",3],["rangefull",3]],["str",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["url",3]],["string",3]],[[["origin",4]],["bool",0]],[[["url",3],["str",0]],["result",4,[["url",3],["parseerror",4]]]],[[["parseoptions",3],["option",4,[["fn",8]]]],["parseoptions",3]],[[["host",4,[["partialeq",8]]],["host",4]],["bool",0]],[[["origin",4],["origin",4]],["bool",0]],[[["opaqueorigin",3],["opaqueorigin",3]],["bool",0]],[[],["origin",4]],[[["socketaddrs",3]],["option",4,[["socketaddr",4]]]],[[],["parseoptions",3]],[[["url",3]],["origin",4]],[[["str",0]],["result",4,[["host",4,[["string",3]]],["parseerror",4]]]],[[["str",0]],["result",4,[["url",3],["parseerror",4]]]],[[["parseoptions",3],["str",0]],["result",4,[["url",3],["parseerror",4]]]],[[["str",0]],["result",4,[["host",4,[["string",3]]],["parseerror",4]]]],[[["str",0]],["result",4,[["url",3],["parseerror",4]]]],[[["host",4,[["partialord",8]]],["host",4]],["option",4,[["ordering",4]]]],[[["url",3],["url",3]],["option",4,[["ordering",4]]]],[[["url",3]],["option",4,[["str",0]]]],[[["url",3]],["str",0]],[[["url",3]],["option",4,[["split",3,[["char",0]]]]]],[[["url",3]],["result",4,[["pathsegmentsmut",3]]]],[[["pathsegmentsmut",3]],["pathsegmentsmut",3]],[[["pathsegmentsmut",3]],["pathsegmentsmut",3]],[[["url",3]],["option",4,[["u16",0]]]],null,[[["url",3]],["option",4,[["u16",0]]]],[[["pathsegmentsmut",3],["str",0]],["pathsegmentsmut",3]],[[["url",3]],["option",4,[["str",0]]]],[[["url",3]],["parse",3]],[[["url",3]],["serializer",3,[["urlquery",3]]]],[[["url",3]],["str",0]],[[["url",3],["option",4,[["str",0]]]]],[[["url",3],["option",4,[["str",0]]]],["result",4,[["parseerror",4]]]],[[["url",3],["ipaddr",4]],["result",4]],[[["url",3],["option",4,[["str",0]]]],["result",4]],[[["url",3],["str",0]]],[[["url",3],["option",4,[["u16",0]]]],["result",4]],[[["url",3],["option",4,[["str",0]]]]],[[["url",3],["str",0]],["result",4]],[[["url",3],["str",0]],["result",4]],[[["parseoptions",3],["option",4,[["fn",8]]]],["parseoptions",3]],[[["url",3]],["result",4,[["pathbuf",3]]]],[[["host",4,[["str",0]]]],["host",4,[["string",3]]]],[[["",0]]],[[["hostandport",3,[["str",0]]]],["hostandport",3,[["string",3]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["hostandport",3,[["asref",8,[["str",0]]]]]],["result",6]],[[["url",3]],["result",6]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["origin",4]],["string",3]],[[["url",3]],["str",0]],[[["url",3]],["result",6,[["hostandport",3,[["str",0]]]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["serializer",3,[["target",8]]],["str",0],["str",0]],["serializer",3,[["target",8]]]],[[["",0]],["string",3]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["byteserialize",3]],[[["serializer",3,[["target",8]]]],["serializer",3,[["target",8]]]],[[["parse",3]],["parse",3]],[[["",0],["",0]]],[[["serializer",3,[["target",8]]]],["serializer",3,[["target",8]]]],[[["serializer",3,[["target",8]]]],["serializer",3,[["target",8]]]],[[]],[[["serializer",3,[["target",8]]]]],[[["parse",3],["formatter",3]],["result",6]],[[["parseintoowned",3],["formatter",3]],["result",6]],[[["byteserialize",3],["formatter",3]],["result",6]],[[["serializer",3,[["",26,[["debug",8],["target",8]]]]],["formatter",3]],["result",6]],[[["target",8],["usize",0]],["serializer",3,[["target",8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["parse",3]],["parseintoowned",3]],[[["target",8]],["serializer",3,[["target",8]]]],[[["parse",3]],["option",4]],[[["parseintoowned",3]],["option",4]],[[["byteserialize",3]],["option",4,[["str",0]]]],[[],["parse",3]],[[["byteserialize",3]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]]],"p":[[4,"Position"],[4,"SyntaxViolation"],[4,"Host"],[4,"ParseError"],[4,"Origin"],[3,"UrlQuery"],[3,"Url"],[3,"ParseOptions"],[3,"HostAndPort"],[3,"SocketAddrs"],[3,"OpaqueOrigin"],[3,"PathSegmentsMut"],[13,"Domain"],[13,"Ipv4"],[13,"Ipv6"],[13,"Opaque"],[13,"Tuple"],[8,"Target"],[3,"Serializer"],[3,"Parse"],[3,"ParseIntoOwned"],[3,"ByteSerialize"]]},\
"want":{"doc":"A Futures channel-like utility to signal when a value is …","t":[3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Closed","Giver","SharedGiver","Taker","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cancel","clone","clone_into","drop","fmt","fmt","fmt","fmt","from","from","from","from","give","into","into","into","into","is_canceled","is_canceled","is_wanting","is_wanting","new","poll_want","shared","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","want"],"q":["want","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The <code>Taker</code> has canceled its interest in a value.","An entity that gives a value when wanted.","A cloneable <code>Giver</code>.","An entity that wants a value.","","","","","","","","","Signal to the <code>Giver</code> that the want is canceled.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Mark the state as idle, if the Taker currently is wanting.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if the <code>Taker</code> has canceled interest without parking a …","Check if the <code>Taker</code> has canceled interest without parking a …","Check if the <code>Taker</code> has called <code>want()</code> without parking a …","Check if the <code>Taker</code> has called <code>want()</code> without parking a …","Create a new <code>want</code> channel.","Poll whether the <code>Taker</code> has registered interest in another …","Converts this into a <code>SharedGiver</code>.","","","","","","","","","","","","","","Signal to the <code>Giver</code> that a value is wanted."],"i":[0,0,0,0,1,2,3,4,1,2,3,4,2,4,4,2,1,2,3,4,1,2,3,4,1,1,2,3,4,1,4,1,4,0,1,1,4,1,2,3,4,1,2,3,4,1,2,3,4,2],"f":[null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["taker",3]]],[[["sharedgiver",3]],["sharedgiver",3]],[[["",0],["",0]]],[[["taker",3]]],[[["giver",3],["formatter",3]],["result",6]],[[["taker",3],["formatter",3]],["result",6]],[[["closed",3],["formatter",3]],["result",6]],[[["sharedgiver",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["giver",3]],["bool",0]],[[]],[[]],[[]],[[]],[[["giver",3]],["bool",0]],[[["sharedgiver",3]],["bool",0]],[[["giver",3]],["bool",0]],[[["sharedgiver",3]],["bool",0]],[[]],[[["giver",3]],["poll",6,[["closed",3]]]],[[["giver",3]],["sharedgiver",3]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["taker",3]]]],"p":[[3,"Giver"],[3,"Taker"],[3,"Closed"],[3,"SharedGiver"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
